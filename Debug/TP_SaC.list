
TP_SaC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08009184  08009184  0000a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009478  08009478  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009478  08009478  0000a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009480  08009480  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009480  08009480  0000a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009484  08009484  0000a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009488  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000068  080094f0  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080094f0  0000b54c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0d6  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034dc  00000000  00000000  0002516e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00028650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001102  00000000  00000000  00029c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fb3  00000000  00000000  0002ad4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae50  00000000  00000000  00054cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114707  00000000  00000000  0006fb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184254  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  00184298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0018a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800916c 	.word	0x0800916c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800916c 	.word	0x0800916c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2220      	movs	r2, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f007 fec8 	bl	800837e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ee:	4b32      	ldr	r3, [pc, #200]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f6:	4b30      	ldr	r3, [pc, #192]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000618:	2204      	movs	r2, #4
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000622:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800062a:	2201      	movs	r2, #1
 800062c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800065a:	f001 fb53 	bl	8001d04 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 fbfa 	bl	8000e5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000674:	f002 f968 	bl	8002948 <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 fbed 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_ADC1_Init+0xec>)
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	@ 0x7f
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80006a0:	f001 fcec 	bl	800207c <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 fbd7 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	@ 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000084 	.word	0x20000084
 80006bc:	21800100 	.word	0x21800100

080006c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f007 fe56 	bl	800837e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000784 <MX_ADC2_Init+0xc4>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800073c:	f001 fae2 	bl	8001d04 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 fb89 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_ADC2_Init+0xc8>)
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2306      	movs	r3, #6
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000756:	237f      	movs	r3, #127	@ 0x7f
 8000758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000768:	f001 fc88 	bl	800207c <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000772:	f000 fb73 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000f0 	.word	0x200000f0
 8000784:	50000100 	.word	0x50000100
 8000788:	19200040 	.word	0x19200040

0800078c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	@ 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a8:	2254      	movs	r2, #84	@ 0x54
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f007 fde6 	bl	800837e <memset>
  if(adcHandle->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ba:	d174      	bne.n	80008a6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fb35 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007d8:	f000 fb40 	bl	8000e5c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007dc:	4b63      	ldr	r3, [pc, #396]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a62      	ldr	r2, [pc, #392]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007e6:	4b61      	ldr	r3, [pc, #388]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10b      	bne.n	8000806 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007ee:	4b60      	ldr	r3, [pc, #384]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a5f      	ldr	r2, [pc, #380]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
 8000804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b5a      	ldr	r3, [pc, #360]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a59      	ldr	r2, [pc, #356]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b57      	ldr	r3, [pc, #348]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b54      	ldr	r3, [pc, #336]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a53      	ldr	r2, [pc, #332]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b51      	ldr	r3, [pc, #324]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b4e      	ldr	r3, [pc, #312]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a4d      	ldr	r2, [pc, #308]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b4b      	ldr	r3, [pc, #300]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800084e:	2304      	movs	r3, #4
 8000850:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000862:	4619      	mov	r1, r3
 8000864:	4843      	ldr	r0, [pc, #268]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000866:	f002 fb17 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800086a:	2302      	movs	r3, #2
 800086c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f002 fb08 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000888:	2303      	movs	r3, #3
 800088a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800089c:	4619      	mov	r1, r3
 800089e:	4836      	ldr	r0, [pc, #216]	@ (8000978 <HAL_ADC_MspInit+0x1ec>)
 80008a0:	f002 fafa 	bl	8002e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008a4:	e05e      	b.n	8000964 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a34      	ldr	r2, [pc, #208]	@ (800097c <HAL_ADC_MspInit+0x1f0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d159      	bne.n	8000964 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 fabb 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008cc:	f000 fac6 	bl	8000e5c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d10b      	bne.n	80008fa <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800092a:	230b      	movs	r3, #11
 800092c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000942:	f002 faa9 	bl	8002e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f002 fa9a 	bl	8002e98 <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3790      	adds	r7, #144	@ 0x90
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000015c 	.word	0x2000015c
 8000970:	40021000 	.word	0x40021000
 8000974:	48000800 	.word	0x48000800
 8000978:	48000400 	.word	0x48000400
 800097c:	50000100 	.word	0x50000100

08000980 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a94 <MX_GPIO_Init+0x114>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a38      	ldr	r2, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f002 fbc1 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a20:	f002 fbbc 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <MX_GPIO_Init+0x11c>)
 8000a3c:	f002 fa2c 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f002 fa1d 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a76:	f002 fa0f 	bl	8002e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f002 f922 	bl	8002cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	@ 0x28
 8000a86:	f002 f939 	bl	8002cfc <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000c00 	.word	0x48000c00
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /** @brief Tableau des arguments extraits de la commande */
  char* argv[MAX_ARGS];

  /** @brief Nombre d'arguments */
  int argc = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	@ 0x34

  /** @brief Token pour l'analyse de la chaîne */
  char* token;

  /** @brief Flag indiquant qu'une nouvelle commande est prête */
  int newCmdReady = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fefa 	bl	80018a6 <HAL_Init>

  /* USER CODE BEGIN Init */
  idxCmd = 0;
 8000ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8000d24 <main+0x284>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
  memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000ab8:	2240      	movs	r2, #64	@ 0x40
 8000aba:	2100      	movs	r1, #0
 8000abc:	489a      	ldr	r0, [pc, #616]	@ (8000d28 <main+0x288>)
 8000abe:	f007 fc5e 	bl	800837e <memset>
  memset(argv, 0, MAX_ARGS * sizeof(char*));
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2224      	movs	r2, #36	@ 0x24
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fc57 	bl	800837e <memset>
  memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000ad0:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <main+0x28c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 8000ad6:	2240      	movs	r2, #64	@ 0x40
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4895      	ldr	r0, [pc, #596]	@ (8000d30 <main+0x290>)
 8000adc:	f007 fc4f 	bl	800837e <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f94a 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f7ff ff4c 	bl	8000980 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ae8:	f7ff fdea 	bl	80006c0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000aec:	f7ff fd70 	bl	80005d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000af0:	f000 fb6e 	bl	80011d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000af4:	f000 fc40 	bl	8001378 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 fd74 	bl	80015e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000afc:	f000 fdbe 	bl	800167c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialisation du timer pour PWM + complément
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b00:	2100      	movs	r1, #0
 8000b02:	488c      	ldr	r0, [pc, #560]	@ (8000d34 <main+0x294>)
 8000b04:	f003 fd1a 	bl	800453c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b08:	2104      	movs	r1, #4
 8000b0a:	488a      	ldr	r0, [pc, #552]	@ (8000d34 <main+0x294>)
 8000b0c:	f003 fd16 	bl	800453c <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000b10:	2100      	movs	r1, #0
 8000b12:	4888      	ldr	r0, [pc, #544]	@ (8000d34 <main+0x294>)
 8000b14:	f004 ff88 	bl	8005a28 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4886      	ldr	r0, [pc, #536]	@ (8000d34 <main+0x294>)
 8000b1c:	f004 ff84 	bl	8005a28 <HAL_TIMEx_PWMN_Start>




  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b20:	2201      	movs	r2, #1
 8000b22:	4982      	ldr	r1, [pc, #520]	@ (8000d2c <main+0x28c>)
 8000b24:	4884      	ldr	r0, [pc, #528]	@ (8000d38 <main+0x298>)
 8000b26:	f005 fab5 	bl	8006094 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f000 fef2 	bl	8001914 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, strlen((char*)started), HAL_MAX_DELAY);
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2265      	movs	r2, #101	@ 0x65
 8000b36:	4981      	ldr	r1, [pc, #516]	@ (8000d3c <main+0x29c>)
 8000b38:	487f      	ldr	r0, [pc, #508]	@ (8000d38 <main+0x298>)
 8000b3a:	f005 fa1c 	bl	8005f76 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	2217      	movs	r2, #23
 8000b44:	497e      	ldr	r1, [pc, #504]	@ (8000d40 <main+0x2a0>)
 8000b46:	487c      	ldr	r0, [pc, #496]	@ (8000d38 <main+0x298>)
 8000b48:	f005 fa15 	bl	8005f76 <HAL_UART_Transmit>
  while (1)
  {
	/**
	   * @brief Vérifie si un caractère a été reçu sur l'UART.
	   */
    if (uartRxReceived)
 8000b4c:	4b7d      	ldr	r3, [pc, #500]	@ (8000d44 <main+0x2a4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 8086 	beq.w	8000c62 <main+0x1c2>
    {
      uint8_t receivedChar = uartRxBuffer[0];
 8000b56:	4b75      	ldr	r3, [pc, #468]	@ (8000d2c <main+0x28c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
      /**
        * @brief Écho du caractère reçu sur l'UART.
        */
      HAL_UART_Transmit(&huart2, &receivedChar, 1, HAL_MAX_DELAY);
 8000b5c:	1df9      	adds	r1, r7, #7
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	2201      	movs	r2, #1
 8000b64:	4874      	ldr	r0, [pc, #464]	@ (8000d38 <main+0x298>)
 8000b66:	f005 fa06 	bl	8005f76 <HAL_UART_Transmit>

      /**
        * @brief Traitement du caractère reçu.
        */
      switch (receivedChar)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b6e:	d033      	beq.n	8000bd8 <main+0x138>
 8000b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b72:	dc49      	bgt.n	8000c08 <main+0x168>
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d001      	beq.n	8000b7c <main+0xdc>
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	d145      	bne.n	8000c08 <main+0x168>
      /**
         * @brief Cas du retour chariot ou du saut de ligne : traite la commande entrée.
         */
        case ASCII_CR:
        case ASCII_LF:
          HAL_UART_Transmit(&huart2, newLine, strlen((char*)newLine), HAL_MAX_DELAY);
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2202      	movs	r2, #2
 8000b82:	4971      	ldr	r1, [pc, #452]	@ (8000d48 <main+0x2a8>)
 8000b84:	486c      	ldr	r0, [pc, #432]	@ (8000d38 <main+0x298>)
 8000b86:	f005 f9f6 	bl	8005f76 <HAL_UART_Transmit>
          cmd[idxCmd] = '\0';
 8000b8a:	4b66      	ldr	r3, [pc, #408]	@ (8000d24 <main+0x284>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a66      	ldr	r2, [pc, #408]	@ (8000d28 <main+0x288>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	54d1      	strb	r1, [r2, r3]
          argc = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
          token = strtok(cmd, " ");
 8000b98:	496c      	ldr	r1, [pc, #432]	@ (8000d4c <main+0x2ac>)
 8000b9a:	4863      	ldr	r0, [pc, #396]	@ (8000d28 <main+0x288>)
 8000b9c:	f007 fbf8 	bl	8008390 <strtok>
 8000ba0:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000ba2:	e00d      	b.n	8000bc0 <main+0x120>
          {
            argv[argc++] = token;
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	637a      	str	r2, [r7, #52]	@ 0x34
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	3338      	adds	r3, #56	@ 0x38
 8000bae:	443b      	add	r3, r7
 8000bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bb2:	f843 2c30 	str.w	r2, [r3, #-48]
            token = strtok(NULL, " ");
 8000bb6:	4965      	ldr	r1, [pc, #404]	@ (8000d4c <main+0x2ac>)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f007 fbe9 	bl	8008390 <strtok>
 8000bbe:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <main+0x12c>
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	ddeb      	ble.n	8000ba4 <main+0x104>
          }

          idxCmd = 0;
 8000bcc:	4b55      	ldr	r3, [pc, #340]	@ (8000d24 <main+0x284>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
          newCmdReady = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8000bd6:	e03c      	b.n	8000c52 <main+0x1b2>
          /**
              * @brief Cas de la suppression : efface le dernier caractère saisi.
              */
        case ASCII_DEL:
          if (idxCmd > 0)
 8000bd8:	4b52      	ldr	r3, [pc, #328]	@ (8000d24 <main+0x284>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd37      	ble.n	8000c50 <main+0x1b0>
          {
            idxCmd--;
 8000be0:	4b50      	ldr	r3, [pc, #320]	@ (8000d24 <main+0x284>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	4a4f      	ldr	r2, [pc, #316]	@ (8000d24 <main+0x284>)
 8000be8:	6013      	str	r3, [r2, #0]
            cmd[idxCmd] = '\0';
 8000bea:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <main+0x284>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a4e      	ldr	r2, [pc, #312]	@ (8000d28 <main+0x288>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	54d1      	strb	r1, [r2, r3]
            // Envoyer un retour en arrière pour effacer dans le terminal
            uint8_t backspace = '\b';
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	71bb      	strb	r3, [r7, #6]
            HAL_UART_Transmit(&huart2, &backspace, 1, HAL_MAX_DELAY);
 8000bf8:	1db9      	adds	r1, r7, #6
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	2201      	movs	r2, #1
 8000c00:	484d      	ldr	r0, [pc, #308]	@ (8000d38 <main+0x298>)
 8000c02:	f005 f9b8 	bl	8005f76 <HAL_UART_Transmit>
          }
          break;
 8000c06:	e023      	b.n	8000c50 <main+0x1b0>

        /**
           * @brief Cas par défaut : ajoute le caractère au buffer de commande.
           */
        default:
          if (idxCmd < CMD_BUFFER_SIZE - 1)
 8000c08:	4b46      	ldr	r3, [pc, #280]	@ (8000d24 <main+0x284>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c0e:	dc08      	bgt.n	8000c22 <main+0x182>
          {
            cmd[idxCmd++] = receivedChar;
 8000c10:	4b44      	ldr	r3, [pc, #272]	@ (8000d24 <main+0x284>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	4943      	ldr	r1, [pc, #268]	@ (8000d24 <main+0x284>)
 8000c18:	600a      	str	r2, [r1, #0]
 8000c1a:	79f9      	ldrb	r1, [r7, #7]
 8000c1c:	4a42      	ldr	r2, [pc, #264]	@ (8000d28 <main+0x288>)
 8000c1e:	54d1      	strb	r1, [r2, r3]
            idxCmd = 0;
            memset(cmd, '\0', CMD_BUFFER_SIZE);
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
          }
          break;
 8000c20:	e017      	b.n	8000c52 <main+0x1b2>
            idxCmd = 0;
 8000c22:	4b40      	ldr	r3, [pc, #256]	@ (8000d24 <main+0x284>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
            memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000c28:	2240      	movs	r2, #64	@ 0x40
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	483e      	ldr	r0, [pc, #248]	@ (8000d28 <main+0x288>)
 8000c2e:	f007 fba6 	bl	800837e <memset>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	2212      	movs	r2, #18
 8000c38:	4945      	ldr	r1, [pc, #276]	@ (8000d50 <main+0x2b0>)
 8000c3a:	483f      	ldr	r0, [pc, #252]	@ (8000d38 <main+0x298>)
 8000c3c:	f005 f99b 	bl	8005f76 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2217      	movs	r2, #23
 8000c46:	493e      	ldr	r1, [pc, #248]	@ (8000d40 <main+0x2a0>)
 8000c48:	483b      	ldr	r0, [pc, #236]	@ (8000d38 <main+0x298>)
 8000c4a:	f005 f994 	bl	8005f76 <HAL_UART_Transmit>
          break;
 8000c4e:	e000      	b.n	8000c52 <main+0x1b2>
          break;
 8000c50:	bf00      	nop
      }
      uartRxReceived = 0;
 8000c52:	4b3c      	ldr	r3, [pc, #240]	@ (8000d44 <main+0x2a4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
      /**
        * @brief Relance la réception UART en interruption.
        */
      HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4934      	ldr	r1, [pc, #208]	@ (8000d2c <main+0x28c>)
 8000c5c:	4836      	ldr	r0, [pc, #216]	@ (8000d38 <main+0x298>)
 8000c5e:	f005 fa19 	bl	8006094 <HAL_UART_Receive_IT>
    }
    /**
      * @brief Vérifie si une nouvelle commande est prête à être traitée.
      */
    if (newCmdReady)
 8000c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f43f af71 	beq.w	8000b4c <main+0xac>
    {
      newCmdReady = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (argc > 0)
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dd46      	ble.n	8000d02 <main+0x262>
      {
    	/**
    	  * @brief (Sera remplacé par une fonction) Traite les commandes reconnues : help, pinout, start, stop.
    	  */
        if (strcmp(argv[0], "help") == 0)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4937      	ldr	r1, [pc, #220]	@ (8000d54 <main+0x2b4>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fad1 	bl	8000220 <strcmp>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d107      	bne.n	8000c94 <main+0x1f4>
        {
          HAL_UART_Transmit(&huart2, helpMsg, strlen((char*)helpMsg), HAL_MAX_DELAY);
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	22ac      	movs	r2, #172	@ 0xac
 8000c8a:	4933      	ldr	r1, [pc, #204]	@ (8000d58 <main+0x2b8>)
 8000c8c:	482a      	ldr	r0, [pc, #168]	@ (8000d38 <main+0x298>)
 8000c8e:	f005 f972 	bl	8005f76 <HAL_UART_Transmit>
 8000c92:	e036      	b.n	8000d02 <main+0x262>
        }
        else if (strcmp(argv[0], "pinout") == 0)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4931      	ldr	r1, [pc, #196]	@ (8000d5c <main+0x2bc>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fac1 	bl	8000220 <strcmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d107      	bne.n	8000cb4 <main+0x214>
        {
          HAL_UART_Transmit(&huart2, pinout, strlen((char*)pinout), HAL_MAX_DELAY);
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	2239      	movs	r2, #57	@ 0x39
 8000caa:	492d      	ldr	r1, [pc, #180]	@ (8000d60 <main+0x2c0>)
 8000cac:	4822      	ldr	r0, [pc, #136]	@ (8000d38 <main+0x298>)
 8000cae:	f005 f962 	bl	8005f76 <HAL_UART_Transmit>
 8000cb2:	e026      	b.n	8000d02 <main+0x262>
        }
        else if (strcmp(argv[0], "start") == 0)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	492b      	ldr	r1, [pc, #172]	@ (8000d64 <main+0x2c4>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fab1 	bl	8000220 <strcmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <main+0x234>
        {
          HAL_UART_Transmit(&huart2, powerOn, strlen((char*)powerOn), HAL_MAX_DELAY);
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	220a      	movs	r2, #10
 8000cca:	4927      	ldr	r1, [pc, #156]	@ (8000d68 <main+0x2c8>)
 8000ccc:	481a      	ldr	r0, [pc, #104]	@ (8000d38 <main+0x298>)
 8000cce:	f005 f952 	bl	8005f76 <HAL_UART_Transmit>
 8000cd2:	e016      	b.n	8000d02 <main+0x262>
        }
        else if (strcmp(argv[0], "stop") == 0)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4925      	ldr	r1, [pc, #148]	@ (8000d6c <main+0x2cc>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff faa1 	bl	8000220 <strcmp>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d107      	bne.n	8000cf4 <main+0x254>
        {
          HAL_UART_Transmit(&huart2, powerOff, strlen((char*)powerOff), HAL_MAX_DELAY);
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	220b      	movs	r2, #11
 8000cea:	4921      	ldr	r1, [pc, #132]	@ (8000d70 <main+0x2d0>)
 8000cec:	4812      	ldr	r0, [pc, #72]	@ (8000d38 <main+0x298>)
 8000cee:	f005 f942 	bl	8005f76 <HAL_UART_Transmit>
 8000cf2:	e006      	b.n	8000d02 <main+0x262>
        }
        else
        {
          HAL_UART_Transmit(&huart2, cmdNotFound, strlen((char*)cmdNotFound), HAL_MAX_DELAY);
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	2213      	movs	r2, #19
 8000cfa:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <main+0x2d4>)
 8000cfc:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <main+0x298>)
 8000cfe:	f005 f93a 	bl	8005f76 <HAL_UART_Transmit>
        }
      }
      // Affiche le prompt
      HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	2217      	movs	r2, #23
 8000d08:	490d      	ldr	r1, [pc, #52]	@ (8000d40 <main+0x2a0>)
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <main+0x298>)
 8000d0c:	f005 f933 	bl	8005f76 <HAL_UART_Transmit>

      // Réinitialise le buffer de commande et l'index
      idxCmd = 0;
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <main+0x284>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
      memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000d16:	2240      	movs	r2, #64	@ 0x40
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <main+0x288>)
 8000d1c:	f007 fb2f 	bl	800837e <memset>
    if (uartRxReceived)
 8000d20:	e714      	b.n	8000b4c <main+0xac>
 8000d22:	bf00      	nop
 8000d24:	200001e8 	.word	0x200001e8
 8000d28:	200001a8 	.word	0x200001a8
 8000d2c:	20000164 	.word	0x20000164
 8000d30:	20000168 	.word	0x20000168
 8000d34:	2000023c 	.word	0x2000023c
 8000d38:	200002d4 	.word	0x200002d4
 8000d3c:	080091d4 	.word	0x080091d4
 8000d40:	080091bc 	.word	0x080091bc
 8000d44:	20000160 	.word	0x20000160
 8000d48:	0800923c 	.word	0x0800923c
 8000d4c:	08009184 	.word	0x08009184
 8000d50:	08009188 	.word	0x08009188
 8000d54:	0800919c 	.word	0x0800919c
 8000d58:	08009240 	.word	0x08009240
 8000d5c:	080091a4 	.word	0x080091a4
 8000d60:	080092f0 	.word	0x080092f0
 8000d64:	080091ac 	.word	0x080091ac
 8000d68:	0800932c 	.word	0x0800932c
 8000d6c:	080091b4 	.word	0x080091b4
 8000d70:	08009338 	.word	0x08009338
 8000d74:	08009344 	.word	0x08009344

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	@ 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	2238      	movs	r2, #56	@ 0x38
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f007 faf9 	bl	800837e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f002 fa3a 	bl	8003214 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000daa:	2302      	movs	r3, #2
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dae:	2303      	movs	r3, #3
 8000db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000db2:	2306      	movs	r3, #6
 8000db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000db6:	2355      	movs	r3, #85	@ 0x55
 8000db8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fad6 	bl	800337c <HAL_RCC_OscConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000dd6:	f000 f841 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dda:	230f      	movs	r3, #15
 8000ddc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dde:	2303      	movs	r3, #3
 8000de0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2104      	movs	r1, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fdd4 	bl	80039a0 <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000dfe:	f000 f82d 	bl	8000e5c <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	3750      	adds	r7, #80	@ 0x50
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_UART_RxCpltCallback>:
  * @brief Callback appelé à la fin de la réception UART.
  * @param huart Handle de l'UART.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <HAL_UART_RxCpltCallback+0x24>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d102      	bne.n	8000e24 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxReceived = 1;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <HAL_UART_RxCpltCallback+0x28>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
    // La relance de la réception UART est effectuée dans la boucle principale
  }
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40004400 	.word	0x40004400
 8000e34:	20000160 	.word	0x20000160

08000e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e4a:	f000 fd45 	bl	80018d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40001000 	.word	0x40001000

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <Error_Handler+0x8>

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <HAL_MspInit+0x44>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e72:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <HAL_MspInit+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <HAL_MspInit+0x44>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_MspInit+0x44>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_MspInit+0x44>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e9e:	f002 fa5d 	bl	800335c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	@ 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <HAL_InitTick+0xc4>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f74 <HAL_InitTick+0xc4>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ecc:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <HAL_InitTick+0xc4>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 ff32 	bl	8003d4c <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee8:	f002 ff04 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8000eec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef0:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <HAL_InitTick+0xc8>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9b      	lsrs	r3, r3, #18
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000efe:	4a20      	ldr	r2, [pc, #128]	@ (8000f80 <HAL_InitTick+0xd0>)
 8000f00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000f04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f1c:	4817      	ldr	r0, [pc, #92]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000f1e:	f003 f9db 	bl	80042d8 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d11b      	bne.n	8000f68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f30:	4812      	ldr	r0, [pc, #72]	@ (8000f7c <HAL_InitTick+0xcc>)
 8000f32:	f003 fa29 	bl	8004388 <HAL_TIM_Base_Start_IT>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d111      	bne.n	8000f68 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f44:	2036      	movs	r0, #54	@ 0x36
 8000f46:	f001 fed9 	bl	8002cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d808      	bhi.n	8000f62 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f001 feb7 	bl	8002cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_InitTick+0xd4>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e002      	b.n	8000f68 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3730      	adds	r7, #48	@ 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	200001ec 	.word	0x200001ec
 8000f80:	40001000 	.word	0x40001000
 8000f84:	20000004 	.word	0x20000004

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <NMI_Handler+0x4>

08000f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <UsageFault_Handler+0x4>

08000fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <USART2_IRQHandler+0x10>)
 8000fee:	f005 f89d 	bl	800612c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200002d4 	.word	0x200002d4

08000ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001000:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001004:	f002 f8e2 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <TIM6_DAC_IRQHandler+0x10>)
 8001012:	f003 fba5 	bl	8004760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001ec 	.word	0x200001ec

08001020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_kill>:

int _kill(int pid, int sig)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103a:	f007 fa4b 	bl	80084d4 <__errno>
 800103e:	4603      	mov	r3, r0
 8001040:	2216      	movs	r2, #22
 8001042:	601a      	str	r2, [r3, #0]
  return -1;
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_exit>:

void _exit (int status)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ffe7 	bl	8001030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001062:	bf00      	nop
 8001064:	e7fd      	b.n	8001062 <_exit+0x12>

08001066 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e00a      	b.n	800108e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001078:	f3af 8000 	nop.w
 800107c:	4601      	mov	r1, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	60ba      	str	r2, [r7, #8]
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	dbf0      	blt.n	8001078 <_read+0x12>
  }

  return len;
 8001096:	687b      	ldr	r3, [r7, #4]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e009      	b.n	80010c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	60ba      	str	r2, [r7, #8]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbf1      	blt.n	80010b2 <_write+0x12>
  }
  return len;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_close>:

int _close(int file)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001100:	605a      	str	r2, [r3, #4]
  return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_isatty>:

int _isatty(int file)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	@ (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f007 f9b0 	bl	80084d4 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20020000 	.word	0x20020000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000238 	.word	0x20000238
 80011a8:	20000550 	.word	0x20000550

080011ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	@ (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	@ 0x70
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2234      	movs	r2, #52	@ 0x34
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f007 f8b7 	bl	800837e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001210:	4b57      	ldr	r3, [pc, #348]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001212:	4a58      	ldr	r2, [pc, #352]	@ (8001374 <MX_TIM1_Init+0x1a4>)
 8001214:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001216:	4b56      	ldr	r3, [pc, #344]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001222:	4b53      	ldr	r3, [pc, #332]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001224:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001228:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b51      	ldr	r3, [pc, #324]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001230:	4b4f      	ldr	r3, [pc, #316]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800123c:	484c      	ldr	r0, [pc, #304]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 800123e:	f003 f84b 	bl	80042d8 <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001248:	f7ff fe08 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001250:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001256:	4619      	mov	r1, r3
 8001258:	4845      	ldr	r0, [pc, #276]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 800125a:	f003 fce5 	bl	8004c28 <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001264:	f7ff fdfa 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001268:	4841      	ldr	r0, [pc, #260]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 800126a:	f003 f905 	bl	8004478 <HAL_TIM_PWM_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001274:	f7ff fdf2 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001284:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001288:	4619      	mov	r1, r3
 800128a:	4839      	ldr	r0, [pc, #228]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 800128c:	f004 fc8e 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001296:	f7ff fde1 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129a:	2360      	movs	r3, #96	@ 0x60
 800129c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4250;
 800129e:	f241 039a 	movw	r3, #4250	@ 0x109a
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a8:	2300      	movs	r3, #0
 80012aa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	482b      	ldr	r0, [pc, #172]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 80012c2:	f003 fb9d 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012cc:	f7ff fdc6 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80012d0:	2302      	movs	r3, #2
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80012d4:	2308      	movs	r3, #8
 80012d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012dc:	2204      	movs	r2, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4823      	ldr	r0, [pc, #140]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 80012e2:	f003 fb8d 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80012ec:	f7ff fdb6 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001306:	f003 fb7b 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001310:	f7ff fda4 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001320:	2322      	movs	r3, #34	@ 0x22
 8001322:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800133a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001352:	f004 fcc1 	bl	8005cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800135c:	f7ff fd7e 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM1_Init+0x1a0>)
 8001362:	f000 f8d7 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8001366:	bf00      	nop
 8001368:	3770      	adds	r7, #112	@ 0x70
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000023c 	.word	0x2000023c
 8001374:	40012c00 	.word	0x40012c00

08001378 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_TIM3_Init+0x90>)
 8001398:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <MX_TIM3_Init+0x94>)
 800139a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_TIM3_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_TIM3_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_TIM3_Init+0x90>)
 80013aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_TIM3_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_TIM3_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_TIM3_Init+0x90>)
 80013d4:	f004 fa79 	bl	80058ca <HAL_TIMEx_HallSensor_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80013de:	f7ff fd3d 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80013e2:	2350      	movs	r3, #80	@ 0x50
 80013e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	@ (8001408 <MX_TIM3_Init+0x90>)
 80013f0:	f004 fbdc 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013fa:	f7ff fd2f 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000288 	.word	0x20000288
 800140c:	40000400 	.word	0x40000400

08001410 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <HAL_TIM_Base_MspInit+0x38>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10b      	bne.n	800143a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_TIM_Base_MspInit+0x3c>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <HAL_TIM_Base_MspInit+0x3c>)
 8001428:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800142c:	6613      	str	r3, [r2, #96]	@ 0x60
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <HAL_TIM_Base_MspInit+0x3c>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a26      	ldr	r2, [pc, #152]	@ (8001508 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d145      	bne.n	80014fe <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	4a25      	ldr	r2, [pc, #148]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6593      	str	r3, [r2, #88]	@ 0x58
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80014ba:	2350      	movs	r3, #80	@ 0x50
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ca:	2302      	movs	r3, #2
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d8:	f001 fcde 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ee:	2302      	movs	r3, #2
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80014fa:	f001 fccd 	bl	8002e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40000400 	.word	0x40000400
 800150c:	40021000 	.word	0x40021000
 8001510:	48000800 	.word	0x48000800

08001514 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a29      	ldr	r2, [pc, #164]	@ (80015d8 <HAL_TIM_MspPostInit+0xc4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d14b      	bne.n	80015ce <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <HAL_TIM_MspPostInit+0xc8>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <HAL_TIM_MspPostInit+0xc8>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <HAL_TIM_MspPostInit+0xc8>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_TIM_MspPostInit+0xc8>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <HAL_TIM_MspPostInit+0xc8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_TIM_MspPostInit+0xc8>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001566:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001578:	2306      	movs	r3, #6
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <HAL_TIM_MspPostInit+0xcc>)
 8001584:	f001 fc88 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800159a:	2304      	movs	r3, #4
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <HAL_TIM_MspPostInit+0xcc>)
 80015a6:	f001 fc77 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80015aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015bc:	2306      	movs	r3, #6
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f001 fc65 	bl	8002e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	@ 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000400 	.word	0x48000400

080015e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015ea:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <MX_USART2_UART_Init+0x94>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162c:	4811      	ldr	r0, [pc, #68]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 800162e:	f004 fc52 	bl	8005ed6 <HAL_UART_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001638:	f7ff fc10 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	480d      	ldr	r0, [pc, #52]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001640:	f006 fccd 	bl	8007fde <HAL_UARTEx_SetTxFifoThreshold>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800164a:	f7ff fc07 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4808      	ldr	r0, [pc, #32]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001652:	f006 fd02 	bl	800805a <HAL_UARTEx_SetRxFifoThreshold>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800165c:	f7ff fbfe 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_USART2_UART_Init+0x90>)
 8001662:	f006 fc83 	bl	8007f6c <HAL_UARTEx_DisableFifoMode>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800166c:	f7ff fbf6 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002d4 	.word	0x200002d4
 8001678:	40004400 	.word	0x40004400

0800167c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <MX_USART3_UART_Init+0x90>)
 8001682:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <MX_USART3_UART_Init+0x94>)
 8001684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <MX_USART3_UART_Init+0x90>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_USART3_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <MX_USART3_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_USART3_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b16      	ldr	r3, [pc, #88]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016c6:	f004 fc06 	bl	8005ed6 <HAL_UART_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016d0:	f7ff fbc4 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d4:	2100      	movs	r1, #0
 80016d6:	480d      	ldr	r0, [pc, #52]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016d8:	f006 fc81 	bl	8007fde <HAL_UARTEx_SetTxFifoThreshold>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016e2:	f7ff fbbb 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4808      	ldr	r0, [pc, #32]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016ea:	f006 fcb6 	bl	800805a <HAL_UARTEx_SetRxFifoThreshold>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016f4:	f7ff fbb2 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <MX_USART3_UART_Init+0x90>)
 80016fa:	f006 fc37 	bl	8007f6c <HAL_UARTEx_DisableFifoMode>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001704:	f7ff fbaa 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000368 	.word	0x20000368
 8001710:	40004800 	.word	0x40004800

08001714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0a0      	sub	sp, #128	@ 0x80
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	2254      	movs	r2, #84	@ 0x54
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f006 fe22 	bl	800837e <memset>
  if(uartHandle->Instance==USART2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a41      	ldr	r2, [pc, #260]	@ (8001844 <HAL_UART_MspInit+0x130>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d13f      	bne.n	80017c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fb73 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800175c:	f7ff fb7e 	bl	8000e5c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001760:	4b39      	ldr	r3, [pc, #228]	@ (8001848 <HAL_UART_MspInit+0x134>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	4a38      	ldr	r2, [pc, #224]	@ (8001848 <HAL_UART_MspInit+0x134>)
 8001766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176a:	6593      	str	r3, [r2, #88]	@ 0x58
 800176c:	4b36      	ldr	r3, [pc, #216]	@ (8001848 <HAL_UART_MspInit+0x134>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b33      	ldr	r3, [pc, #204]	@ (8001848 <HAL_UART_MspInit+0x134>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177c:	4a32      	ldr	r2, [pc, #200]	@ (8001848 <HAL_UART_MspInit+0x134>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001784:	4b30      	ldr	r3, [pc, #192]	@ (8001848 <HAL_UART_MspInit+0x134>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001790:	230c      	movs	r3, #12
 8001792:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a0:	2307      	movs	r3, #7
 80017a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ae:	f001 fb73 	bl	8002e98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2026      	movs	r0, #38	@ 0x26
 80017b8:	f001 fa86 	bl	8002cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017bc:	2026      	movs	r0, #38	@ 0x26
 80017be:	f001 fa9d 	bl	8002cfc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017c2:	e03b      	b.n	800183c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a20      	ldr	r2, [pc, #128]	@ (800184c <HAL_UART_MspInit+0x138>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d136      	bne.n	800183c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017ce:	2304      	movs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fb2e 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80017e6:	f7ff fb39 	bl	8000e5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_UART_MspInit+0x134>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	4a16      	ldr	r2, [pc, #88]	@ (8001848 <HAL_UART_MspInit+0x134>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <HAL_UART_MspInit+0x134>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_UART_MspInit+0x134>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <HAL_UART_MspInit+0x134>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_UART_MspInit+0x134>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800181a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800181e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800182c:	2307      	movs	r3, #7
 800182e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	@ (8001850 <HAL_UART_MspInit+0x13c>)
 8001838:	f001 fb2e 	bl	8002e98 <HAL_GPIO_Init>
}
 800183c:	bf00      	nop
 800183e:	3780      	adds	r7, #128	@ 0x80
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40004400 	.word	0x40004400
 8001848:	40021000 	.word	0x40021000
 800184c:	40004800 	.word	0x40004800
 8001850:	48000800 	.word	0x48000800

08001854 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001856:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001858:	f7ff fca8 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <LoopForever+0x6>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	@ (8001894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <LoopForever+0xe>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	@ (80018a0 <LoopForever+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f006 fe2d 	bl	80084e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001886:	f7ff f90b 	bl	8000aa0 <main>

0800188a <LoopForever>:

LoopForever:
    b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   r0, =_estack
 800188c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001898:	08009488 	.word	0x08009488
  ldr r2, =_sbss
 800189c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018a0:	2000054c 	.word	0x2000054c

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>

080018a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f001 f9fe 	bl	8002cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff fafa 	bl	8000eb0 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	e001      	b.n	80018cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c8:	f7ff face 	bl	8000e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018cc:	79fb      	ldrb	r3, [r7, #7]

}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_IncTick+0x1c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_IncTick+0x20>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a03      	ldr	r2, [pc, #12]	@ (80018f4 <HAL_IncTick+0x1c>)
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	200003fc 	.word	0x200003fc
 80018f8:	20000008 	.word	0x20000008

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200003fc 	.word	0x200003fc

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d004      	beq.n	8001938 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_Delay+0x40>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001938:	bf00      	nop
 800193a:	f7ff ffdf 	bl	80018fc <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	429a      	cmp	r2, r3
 8001948:	d8f7      	bhi.n	800193a <HAL_Delay+0x26>
  {
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000008 	.word	0x20000008

08001958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3360      	adds	r3, #96	@ 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <LL_ADC_SetOffset+0x44>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4313      	orrs	r3, r2
 80019f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	03fff000 	.word	0x03fff000

08001a08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3360      	adds	r3, #96	@ 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3360      	adds	r3, #96	@ 0x60
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b087      	sub	sp, #28
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3360      	adds	r3, #96	@ 0x60
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3360      	adds	r3, #96	@ 0x60
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	615a      	str	r2, [r3, #20]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3330      	adds	r3, #48	@ 0x30
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	211f      	movs	r1, #31
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	f003 011f 	and.w	r1, r3, #31
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	431a      	orrs	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3314      	adds	r3, #20
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	0e5b      	lsrs	r3, r3, #25
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	0d1b      	lsrs	r3, r3, #20
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	2107      	movs	r1, #7
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	0d1b      	lsrs	r3, r3, #20
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0318 	and.w	r3, r3, #24
 8001bce:	4908      	ldr	r1, [pc, #32]	@ (8001bf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bd0:	40d9      	lsrs	r1, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	0007ffff 	.word	0x0007ffff

08001bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6093      	str	r3, [r2, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_IsEnabled+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_IsEnabled+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d101      	bne.n	8001cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1a9      	b.n	8002072 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fd2d 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff67 	bl	8001c18 <LL_ADC_IsDeepPowerDownEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff4d 	bl	8001bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff82 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d115      	bne.n	8001d96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff66 	bl	8001c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d74:	4b9c      	ldr	r3, [pc, #624]	@ (8001fe8 <HAL_ADC_Init+0x2e4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	4a9c      	ldr	r2, [pc, #624]	@ (8001fec <HAL_ADC_Init+0x2e8>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff64 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff75 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8142 	bne.w	8002060 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 813e 	bne.w	8002060 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dec:	f043 0202 	orr.w	r2, r3, #2
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff49 	bl	8001c90 <LL_ADC_IsEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d141      	bne.n	8001e88 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_Init+0x114>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a77      	ldr	r2, [pc, #476]	@ (8001ff0 <HAL_ADC_Init+0x2ec>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d10f      	bne.n	8001e38 <HAL_ADC_Init+0x134>
 8001e18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e1c:	f7ff ff38 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e20:	4604      	mov	r4, r0
 8001e22:	4873      	ldr	r0, [pc, #460]	@ (8001ff0 <HAL_ADC_Init+0x2ec>)
 8001e24:	f7ff ff34 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4323      	orrs	r3, r4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e012      	b.n	8001e5e <HAL_ADC_Init+0x15a>
 8001e38:	486e      	ldr	r0, [pc, #440]	@ (8001ff4 <HAL_ADC_Init+0x2f0>)
 8001e3a:	f7ff ff29 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e3e:	4604      	mov	r4, r0
 8001e40:	486d      	ldr	r0, [pc, #436]	@ (8001ff8 <HAL_ADC_Init+0x2f4>)
 8001e42:	f7ff ff25 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e46:	4603      	mov	r3, r0
 8001e48:	431c      	orrs	r4, r3
 8001e4a:	486c      	ldr	r0, [pc, #432]	@ (8001ffc <HAL_ADC_Init+0x2f8>)
 8001e4c:	f7ff ff20 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4323      	orrs	r3, r4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6a:	d004      	beq.n	8001e76 <HAL_ADC_Init+0x172>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a5f      	ldr	r2, [pc, #380]	@ (8001ff0 <HAL_ADC_Init+0x2ec>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x176>
 8001e76:	4a62      	ldr	r2, [pc, #392]	@ (8002000 <HAL_ADC_Init+0x2fc>)
 8001e78:	e000      	b.n	8001e7c <HAL_ADC_Init+0x178>
 8001e7a:	4a62      	ldr	r2, [pc, #392]	@ (8002004 <HAL_ADC_Init+0x300>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7ff fd68 	bl	8001958 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7f5b      	ldrb	r3, [r3, #29]
 8001e8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ea6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	045b      	lsls	r3, r3, #17
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b48      	ldr	r3, [pc, #288]	@ (8002008 <HAL_ADC_Init+0x304>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fee4 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 8001f14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d17f      	bne.n	800201c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d17c      	bne.n	800201c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f26:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f2e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f3e:	f023 0302 	bic.w	r3, r3, #2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d017      	beq.n	8001f84 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6911      	ldr	r1, [r2, #16]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f82:	e013      	b.n	8001fac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d12a      	bne.n	800200c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	e019      	b.n	800201c <HAL_ADC_Init+0x318>
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	053e2d63 	.word	0x053e2d63
 8001ff0:	50000100 	.word	0x50000100
 8001ff4:	50000400 	.word	0x50000400
 8001ff8:	50000500 	.word	0x50000500
 8001ffc:	50000600 	.word	0x50000600
 8002000:	50000300 	.word	0x50000300
 8002004:	50000700 	.word	0x50000700
 8002008:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10c      	bne.n	800203e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f023 010f 	bic.w	r1, r3, #15
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
 800203c:	e007      	b.n	800204e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 020f 	bic.w	r2, r2, #15
 800204c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800205e:	e007      	b.n	8002070 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	f043 0210 	orr.w	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002070:	7ffb      	ldrb	r3, [r7, #31]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	@ 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	bf00      	nop

0800207c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0b6      	sub	sp, #216	@ 0xd8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x24>
 800209a:	2302      	movs	r3, #2
 800209c:	f000 bc13 	b.w	80028c6 <HAL_ADC_ConfigChannel+0x84a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fe02 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 83f3 	bne.w	80028a0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f7ff fd18 	bl	8001afc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fdf0 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 80020d6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fdfc 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 80020e4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 81d9 	bne.w	80024a4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 81d4 	bne.w	80024a4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002104:	d10f      	bne.n	8002126 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	4619      	mov	r1, r3
 8002112:	f7ff fd1f 	bl	8001b54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fcd9 	bl	8001ad6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002124:	e00e      	b.n	8002144 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	461a      	mov	r2, r3
 8002134:	f7ff fd0e 	bl	8001b54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fcc9 	bl	8001ad6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d022      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002176:	f7ff fc23 	bl	80019c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6919      	ldr	r1, [r3, #16]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	461a      	mov	r2, r3
 8002188:	f7ff fc6f 	bl	8001a6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x126>
 800219c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x128>
 80021a2:	2300      	movs	r3, #0
 80021a4:	461a      	mov	r2, r3
 80021a6:	f7ff fc7b 	bl	8001aa0 <LL_ADC_SetOffsetSaturation>
 80021aa:	e17b      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fc28 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x15c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fc1d 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	0e9b      	lsrs	r3, r3, #26
 80021d2:	f003 021f 	and.w	r2, r3, #31
 80021d6:	e01e      	b.n	8002216 <HAL_ADC_ConfigChannel+0x19a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fc12 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e004      	b.n	8002214 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800220a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1b2>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	e018      	b.n	8002260 <HAL_ADC_ConfigChannel+0x1e4>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800224a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002252:	2320      	movs	r3, #32
 8002254:	e004      	b.n	8002260 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002260:	429a      	cmp	r2, r3
 8002262:	d106      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fbe1 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fbc5 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_ADC_ConfigChannel+0x222>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fbba 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	e01e      	b.n	80022dc <HAL_ADC_ConfigChannel+0x260>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fbaf 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80022bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80022c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e004      	b.n	80022da <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80022d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x278>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	e018      	b.n	8002326 <HAL_ADC_ConfigChannel+0x2aa>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002308:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800230c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e004      	b.n	8002326 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800231c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002326:	429a      	cmp	r2, r3
 8002328:	d106      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	2101      	movs	r1, #1
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fb7e 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2102      	movs	r1, #2
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fb62 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10a      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x2e8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2102      	movs	r1, #2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fb57 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	f003 021f 	and.w	r2, r3, #31
 8002362:	e01e      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x326>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2102      	movs	r1, #2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fb4c 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002382:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800238a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e004      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002396:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x33e>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	e016      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x36c>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80023cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80023d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e004      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80023de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d106      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2102      	movs	r1, #2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fb1d 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2103      	movs	r1, #3
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fb01 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x3aa>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2103      	movs	r1, #3
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff faf6 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	e017      	b.n	8002456 <HAL_ADC_ConfigChannel+0x3da>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2103      	movs	r1, #3
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff faeb 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800243e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002440:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002442:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800244c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <HAL_ADC_ConfigChannel+0x3f2>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0e9b      	lsrs	r3, r3, #26
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	e011      	b.n	8002492 <HAL_ADC_ConfigChannel+0x416>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800247c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800247e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e003      	b.n	8002492 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800248a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002492:	429a      	cmp	r2, r3
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	2103      	movs	r1, #3
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fac8 	bl	8001a34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fbf1 	bl	8001c90 <LL_ADC_IsEnabled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f040 813d 	bne.w	8002730 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f7ff fb72 	bl	8001bac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4aa2      	ldr	r2, [pc, #648]	@ (8002758 <HAL_ADC_ConfigChannel+0x6dc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	f040 812e 	bne.w	8002730 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x480>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b09      	cmp	r3, #9
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e019      	b.n	8002530 <HAL_ADC_ConfigChannel+0x4b4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800250a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800250c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800250e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2b09      	cmp	r3, #9
 8002528:	bf94      	ite	ls
 800252a:	2301      	movls	r3, #1
 800252c:	2300      	movhi	r3, #0
 800252e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002530:	2b00      	cmp	r3, #0
 8002532:	d079      	beq.n	8002628 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x4d4>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	3301      	adds	r3, #1
 8002548:	069b      	lsls	r3, r3, #26
 800254a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800254e:	e015      	b.n	800257c <HAL_ADC_ConfigChannel+0x500>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800255e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002560:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002568:	2320      	movs	r3, #32
 800256a:	e003      	b.n	8002574 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800256c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3301      	adds	r3, #1
 8002576:	069b      	lsls	r3, r3, #26
 8002578:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_ADC_ConfigChannel+0x520>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	e017      	b.n	80025cc <HAL_ADC_ConfigChannel+0x550>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80025aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80025ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80025b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	ea42 0103 	orr.w	r1, r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x576>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0e9b      	lsrs	r3, r3, #26
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	051b      	lsls	r3, r3, #20
 80025f0:	e018      	b.n	8002624 <HAL_ADC_ConfigChannel+0x5a8>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800260a:	2320      	movs	r3, #32
 800260c:	e003      	b.n	8002616 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800260e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002624:	430b      	orrs	r3, r1
 8002626:	e07e      	b.n	8002726 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x5c8>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0e9b      	lsrs	r3, r3, #26
 800263a:	3301      	adds	r3, #1
 800263c:	069b      	lsls	r3, r3, #26
 800263e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002642:	e015      	b.n	8002670 <HAL_ADC_ConfigChannel+0x5f4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002654:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e003      	b.n	8002668 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	069b      	lsls	r3, r3, #26
 800266c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x614>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	e017      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x644>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	61fb      	str	r3, [r7, #28]
  return result;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	ea42 0103 	orr.w	r1, r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x670>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	3b1e      	subs	r3, #30
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	e01b      	b.n	8002724 <HAL_ADC_ConfigChannel+0x6a8>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	613b      	str	r3, [r7, #16]
  return result;
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e003      	b.n	8002710 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f003 021f 	and.w	r2, r3, #31
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	3b1e      	subs	r3, #30
 800271e:	051b      	lsls	r3, r3, #20
 8002720:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002724:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272a:	4619      	mov	r1, r3
 800272c:	f7ff fa12 	bl	8001b54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_ADC_ConfigChannel+0x6e0>)
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80be 	beq.w	80028ba <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002746:	d004      	beq.n	8002752 <HAL_ADC_ConfigChannel+0x6d6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <HAL_ADC_ConfigChannel+0x6e4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10a      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x6ec>
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <HAL_ADC_ConfigChannel+0x6e8>)
 8002754:	e009      	b.n	800276a <HAL_ADC_ConfigChannel+0x6ee>
 8002756:	bf00      	nop
 8002758:	407f0000 	.word	0x407f0000
 800275c:	80080000 	.word	0x80080000
 8002760:	50000100 	.word	0x50000100
 8002764:	50000300 	.word	0x50000300
 8002768:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_ADC_ConfigChannel+0x854>)
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f91a 	bl	80019a4 <LL_ADC_GetCommonPathInternalCh>
 8002770:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a56      	ldr	r2, [pc, #344]	@ (80028d4 <HAL_ADC_ConfigChannel+0x858>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x70c>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a55      	ldr	r2, [pc, #340]	@ (80028d8 <HAL_ADC_ConfigChannel+0x85c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d13a      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800278c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d134      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800279c:	d005      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x72e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a4e      	ldr	r2, [pc, #312]	@ (80028dc <HAL_ADC_ConfigChannel+0x860>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f040 8085 	bne.w	80028b4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027b2:	d004      	beq.n	80027be <HAL_ADC_ConfigChannel+0x742>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a49      	ldr	r2, [pc, #292]	@ (80028e0 <HAL_ADC_ConfigChannel+0x864>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x746>
 80027be:	4a49      	ldr	r2, [pc, #292]	@ (80028e4 <HAL_ADC_ConfigChannel+0x868>)
 80027c0:	e000      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x748>
 80027c2:	4a43      	ldr	r2, [pc, #268]	@ (80028d0 <HAL_ADC_ConfigChannel+0x854>)
 80027c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f7ff f8d5 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d4:	4b44      	ldr	r3, [pc, #272]	@ (80028e8 <HAL_ADC_ConfigChannel+0x86c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	4a44      	ldr	r2, [pc, #272]	@ (80028ec <HAL_ADC_ConfigChannel+0x870>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f9      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027fc:	e05a      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a3b      	ldr	r2, [pc, #236]	@ (80028f0 <HAL_ADC_ConfigChannel+0x874>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d125      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800280c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11f      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a31      	ldr	r2, [pc, #196]	@ (80028e0 <HAL_ADC_ConfigChannel+0x864>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d104      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7ac>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a34      	ldr	r2, [pc, #208]	@ (80028f4 <HAL_ADC_ConfigChannel+0x878>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d047      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002830:	d004      	beq.n	800283c <HAL_ADC_ConfigChannel+0x7c0>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2a      	ldr	r2, [pc, #168]	@ (80028e0 <HAL_ADC_ConfigChannel+0x864>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x7c4>
 800283c:	4a29      	ldr	r2, [pc, #164]	@ (80028e4 <HAL_ADC_ConfigChannel+0x868>)
 800283e:	e000      	b.n	8002842 <HAL_ADC_ConfigChannel+0x7c6>
 8002840:	4a23      	ldr	r2, [pc, #140]	@ (80028d0 <HAL_ADC_ConfigChannel+0x854>)
 8002842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f7ff f896 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002852:	e031      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a27      	ldr	r2, [pc, #156]	@ (80028f8 <HAL_ADC_ConfigChannel+0x87c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d12d      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800285e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d127      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1c      	ldr	r2, [pc, #112]	@ (80028e0 <HAL_ADC_ConfigChannel+0x864>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800287c:	d004      	beq.n	8002888 <HAL_ADC_ConfigChannel+0x80c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <HAL_ADC_ConfigChannel+0x864>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x810>
 8002888:	4a16      	ldr	r2, [pc, #88]	@ (80028e4 <HAL_ADC_ConfigChannel+0x868>)
 800288a:	e000      	b.n	800288e <HAL_ADC_ConfigChannel+0x812>
 800288c:	4a10      	ldr	r2, [pc, #64]	@ (80028d0 <HAL_ADC_ConfigChannel+0x854>)
 800288e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002892:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7ff f870 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
 800289e:	e00c      	b.n	80028ba <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80028b2:	e002      	b.n	80028ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b4:	bf00      	nop
 80028b6:	e000      	b.n	80028ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	37d8      	adds	r7, #216	@ 0xd8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	50000700 	.word	0x50000700
 80028d4:	c3210000 	.word	0xc3210000
 80028d8:	90c00010 	.word	0x90c00010
 80028dc:	50000600 	.word	0x50000600
 80028e0:	50000100 	.word	0x50000100
 80028e4:	50000300 	.word	0x50000300
 80028e8:	20000000 	.word	0x20000000
 80028ec:	053e2d63 	.word	0x053e2d63
 80028f0:	c7520000 	.word	0xc7520000
 80028f4:	50000500 	.word	0x50000500
 80028f8:	cb840000 	.word	0xcb840000

080028fc <LL_ADC_IsEnabled>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <LL_ADC_IsEnabled+0x18>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <LL_ADC_IsEnabled+0x1a>
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_REG_IsConversionOngoing>:
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d101      	bne.n	800293a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b0a1      	sub	sp, #132	@ 0x84
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002962:	2302      	movs	r3, #2
 8002964:	e0e7      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800296e:	2300      	movs	r3, #0
 8002970:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002972:	2300      	movs	r3, #0
 8002974:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800297e:	d102      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002980:	4b6f      	ldr	r3, [pc, #444]	@ (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	e009      	b.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d102      	bne.n	8002996 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002990:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	e001      	b.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0be      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ffb1 	bl	8002922 <LL_ADC_REG_IsConversionOngoing>
 80029c0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffab 	bl	8002922 <LL_ADC_REG_IsConversionOngoing>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 80a0 	bne.w	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 809c 	bne.w	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029e4:	d004      	beq.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a55      	ldr	r2, [pc, #340]	@ (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029f0:	4b56      	ldr	r3, [pc, #344]	@ (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029f2:	e000      	b.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029f4:	4b56      	ldr	r3, [pc, #344]	@ (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80029f6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d04b      	beq.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a12:	035b      	lsls	r3, r3, #13
 8002a14:	430b      	orrs	r3, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a24:	d004      	beq.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a45      	ldr	r2, [pc, #276]	@ (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10f      	bne.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a34:	f7ff ff62 	bl	80028fc <LL_ADC_IsEnabled>
 8002a38:	4604      	mov	r4, r0
 8002a3a:	4841      	ldr	r0, [pc, #260]	@ (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a3c:	f7ff ff5e 	bl	80028fc <LL_ADC_IsEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4323      	orrs	r3, r4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a50:	483c      	ldr	r0, [pc, #240]	@ (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a52:	f7ff ff53 	bl	80028fc <LL_ADC_IsEnabled>
 8002a56:	4604      	mov	r4, r0
 8002a58:	483b      	ldr	r0, [pc, #236]	@ (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a5a:	f7ff ff4f 	bl	80028fc <LL_ADC_IsEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	431c      	orrs	r4, r3
 8002a62:	483c      	ldr	r0, [pc, #240]	@ (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a64:	f7ff ff4a 	bl	80028fc <LL_ADC_IsEnabled>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4323      	orrs	r3, r4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d056      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a82:	f023 030f 	bic.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	6892      	ldr	r2, [r2, #8]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	431a      	orrs	r2, r3
 8002a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a96:	e047      	b.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aac:	d004      	beq.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a23      	ldr	r2, [pc, #140]	@ (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ab8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002abc:	f7ff ff1e 	bl	80028fc <LL_ADC_IsEnabled>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	481f      	ldr	r0, [pc, #124]	@ (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ac4:	f7ff ff1a 	bl	80028fc <LL_ADC_IsEnabled>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4323      	orrs	r3, r4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e012      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ad8:	481a      	ldr	r0, [pc, #104]	@ (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ada:	f7ff ff0f 	bl	80028fc <LL_ADC_IsEnabled>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4819      	ldr	r0, [pc, #100]	@ (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ae2:	f7ff ff0b 	bl	80028fc <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	431c      	orrs	r4, r3
 8002aea:	481a      	ldr	r0, [pc, #104]	@ (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002aec:	f7ff ff06 	bl	80028fc <LL_ADC_IsEnabled>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4323      	orrs	r3, r4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d012      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b0a:	f023 030f 	bic.w	r3, r3, #15
 8002b0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b10:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b12:	e009      	b.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b26:	e000      	b.n	8002b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3784      	adds	r7, #132	@ 0x84
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd90      	pop	{r4, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	50000100 	.word	0x50000100
 8002b44:	50000400 	.word	0x50000400
 8002b48:	50000500 	.word	0x50000500
 8002b4c:	50000300 	.word	0x50000300
 8002b50:	50000700 	.word	0x50000700
 8002b54:	50000600 	.word	0x50000600

08002b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <__NVIC_EnableIRQ+0x38>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	@ (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	@ (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
         );
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	@ 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff4c 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd6:	f7ff ff63 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002cda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f7ff ffb3 	bl	8002c4c <NVIC_EncodePriority>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff82 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002cf4:	bf00      	nop
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff56 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d005      	beq.n	8002d3c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2204      	movs	r2, #4
 8002d34:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e037      	b.n	8002dac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 020e 	bic.w	r2, r2, #14
 8002d4a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d5a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	2101      	movs	r1, #1
 8002d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d88:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002daa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d00d      	beq.n	8002dfe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e047      	b.n	8002e8e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 020e 	bic.w	r2, r2, #14
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	f003 021f 	and.w	r2, r3, #31
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e4a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e6c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
    }
  }
  return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ea6:	e15a      	b.n	800315e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 814c 	beq.w	8003158 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d005      	beq.n	8002ed8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d130      	bne.n	8002f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 0201 	and.w	r2, r3, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d017      	beq.n	8002f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d123      	bne.n	8002fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	08da      	lsrs	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	6939      	ldr	r1, [r7, #16]
 8002fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0203 	and.w	r2, r3, #3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a6 	beq.w	8003158 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300c:	4b5b      	ldr	r3, [pc, #364]	@ (800317c <HAL_GPIO_Init+0x2e4>)
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	4a5a      	ldr	r2, [pc, #360]	@ (800317c <HAL_GPIO_Init+0x2e4>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6613      	str	r3, [r2, #96]	@ 0x60
 8003018:	4b58      	ldr	r3, [pc, #352]	@ (800317c <HAL_GPIO_Init+0x2e4>)
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003024:	4a56      	ldr	r2, [pc, #344]	@ (8003180 <HAL_GPIO_Init+0x2e8>)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800304e:	d01f      	beq.n	8003090 <HAL_GPIO_Init+0x1f8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a4c      	ldr	r2, [pc, #304]	@ (8003184 <HAL_GPIO_Init+0x2ec>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d019      	beq.n	800308c <HAL_GPIO_Init+0x1f4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a4b      	ldr	r2, [pc, #300]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_GPIO_Init+0x1f0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a4a      	ldr	r2, [pc, #296]	@ (800318c <HAL_GPIO_Init+0x2f4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00d      	beq.n	8003084 <HAL_GPIO_Init+0x1ec>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a49      	ldr	r2, [pc, #292]	@ (8003190 <HAL_GPIO_Init+0x2f8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <HAL_GPIO_Init+0x1e8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a48      	ldr	r2, [pc, #288]	@ (8003194 <HAL_GPIO_Init+0x2fc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_GPIO_Init+0x1e4>
 8003078:	2305      	movs	r3, #5
 800307a:	e00a      	b.n	8003092 <HAL_GPIO_Init+0x1fa>
 800307c:	2306      	movs	r3, #6
 800307e:	e008      	b.n	8003092 <HAL_GPIO_Init+0x1fa>
 8003080:	2304      	movs	r3, #4
 8003082:	e006      	b.n	8003092 <HAL_GPIO_Init+0x1fa>
 8003084:	2303      	movs	r3, #3
 8003086:	e004      	b.n	8003092 <HAL_GPIO_Init+0x1fa>
 8003088:	2302      	movs	r3, #2
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0x1fa>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_GPIO_Init+0x1fa>
 8003090:	2300      	movs	r3, #0
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	f002 0203 	and.w	r2, r2, #3
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	4093      	lsls	r3, r2
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a2:	4937      	ldr	r1, [pc, #220]	@ (8003180 <HAL_GPIO_Init+0x2e8>)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b0:	4b39      	ldr	r3, [pc, #228]	@ (8003198 <HAL_GPIO_Init+0x300>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d4:	4a30      	ldr	r2, [pc, #192]	@ (8003198 <HAL_GPIO_Init+0x300>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030da:	4b2f      	ldr	r3, [pc, #188]	@ (8003198 <HAL_GPIO_Init+0x300>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030fe:	4a26      	ldr	r2, [pc, #152]	@ (8003198 <HAL_GPIO_Init+0x300>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003104:	4b24      	ldr	r3, [pc, #144]	@ (8003198 <HAL_GPIO_Init+0x300>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003128:	4a1b      	ldr	r2, [pc, #108]	@ (8003198 <HAL_GPIO_Init+0x300>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800312e:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <HAL_GPIO_Init+0x300>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43db      	mvns	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003152:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <HAL_GPIO_Init+0x300>)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f ae9d 	bne.w	8002ea8 <HAL_GPIO_Init+0x10>
  }
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	48000400 	.word	0x48000400
 8003188:	48000800 	.word	0x48000800
 800318c:	48000c00 	.word	0x48000c00
 8003190:	48001000 	.word	0x48001000
 8003194:	48001400 	.word	0x48001400
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031d6:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e2:	4a05      	ldr	r2, [pc, #20]	@ (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f806 	bl	80031fc <HAL_GPIO_EXTI_Callback>
  }
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d141      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003222:	4b4b      	ldr	r3, [pc, #300]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322e:	d131      	bne.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003230:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003236:	4a46      	ldr	r2, [pc, #280]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800323c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003240:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003248:	4a41      	ldr	r2, [pc, #260]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800324e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003250:	4b40      	ldr	r3, [pc, #256]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2232      	movs	r2, #50	@ 0x32
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	4a3f      	ldr	r2, [pc, #252]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0c9b      	lsrs	r3, r3, #18
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003266:	e002      	b.n	800326e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3b01      	subs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326e:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327a:	d102      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f2      	bne.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003282:	4b33      	ldr	r3, [pc, #204]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328e:	d158      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e057      	b.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003294:	4b2e      	ldr	r3, [pc, #184]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329a:	4a2d      	ldr	r2, [pc, #180]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032a4:	e04d      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ac:	d141      	bne.n	8003332 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ae:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d131      	bne.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032bc:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c2:	4a23      	ldr	r2, [pc, #140]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032cc:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2232      	movs	r2, #50	@ 0x32
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	3301      	adds	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f2:	e002      	b.n	80032fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fa:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003306:	d102      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f2      	bne.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331a:	d112      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e011      	b.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003330:	e007      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003332:	4b07      	ldr	r3, [pc, #28]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800333a:	4a05      	ldr	r2, [pc, #20]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003340:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40007000 	.word	0x40007000
 8003354:	20000000 	.word	0x20000000
 8003358:	431bde83 	.word	0x431bde83

0800335c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336a:	6093      	str	r3, [r2, #8]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40007000 	.word	0x40007000

0800337c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e2fe      	b.n	800398c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d075      	beq.n	8003486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b97      	ldr	r3, [pc, #604]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a4:	4b94      	ldr	r3, [pc, #592]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0x3e>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_OscConfig+0x44>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d10b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b8d      	ldr	r3, [pc, #564]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05b      	beq.n	8003484 <HAL_RCC_OscConfig+0x108>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d157      	bne.n	8003484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e2d9      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x74>
 80033e2:	4b85      	ldr	r3, [pc, #532]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a84      	ldr	r2, [pc, #528]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x98>
 80033fa:	4b7f      	ldr	r3, [pc, #508]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7e      	ldr	r2, [pc, #504]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b7c      	ldr	r3, [pc, #496]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7b      	ldr	r2, [pc, #492]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 8003414:	4b78      	ldr	r3, [pc, #480]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a77      	ldr	r2, [pc, #476]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b75      	ldr	r3, [pc, #468]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a74      	ldr	r2, [pc, #464]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fa62 	bl	80018fc <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fa5e 	bl	80018fc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e29e      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344e:	4b6a      	ldr	r3, [pc, #424]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xc0>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fa4e 	bl	80018fc <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fa4a 	bl	80018fc <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e28a      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003476:	4b60      	ldr	r3, [pc, #384]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0xe8>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d075      	beq.n	800357e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4b59      	ldr	r3, [pc, #356]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4b56      	ldr	r3, [pc, #344]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d102      	bne.n	80034b2 <HAL_RCC_OscConfig+0x136>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d002      	beq.n	80034b8 <HAL_RCC_OscConfig+0x13c>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d11f      	bne.n	80034f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b8:	4b4f      	ldr	r3, [pc, #316]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x154>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e25d      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b49      	ldr	r3, [pc, #292]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	4946      	ldr	r1, [pc, #280]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034e4:	4b45      	ldr	r3, [pc, #276]	@ (80035fc <HAL_RCC_OscConfig+0x280>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fce1 	bl	8000eb0 <HAL_InitTick>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d043      	beq.n	800357c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e249      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d023      	beq.n	8003548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a3c      	ldr	r2, [pc, #240]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800350a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe f9f6 	bl	80018fc <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7fe f9f2 	bl	80018fc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e232      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003526:	4b34      	ldr	r3, [pc, #208]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	061b      	lsls	r3, r3, #24
 8003540:	492d      	ldr	r1, [pc, #180]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
 8003546:	e01a      	b.n	800357e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003548:	4b2b      	ldr	r3, [pc, #172]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2a      	ldr	r2, [pc, #168]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800354e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe f9d2 	bl	80018fc <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355c:	f7fe f9ce 	bl	80018fc <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e20e      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800356e:	4b22      	ldr	r3, [pc, #136]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1e0>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d041      	beq.n	800360e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	4b19      	ldr	r3, [pc, #100]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003598:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fe f9ab 	bl	80018fc <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe f9a7 	bl	80018fc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1e7      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035bc:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ef      	beq.n	80035aa <HAL_RCC_OscConfig+0x22e>
 80035ca:	e020      	b.n	800360e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe f98e 	bl	80018fc <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e2:	e00d      	b.n	8003600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe f98a 	bl	80018fc <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d906      	bls.n	8003600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1ca      	b.n	800398c <HAL_RCC_OscConfig+0x610>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003600:	4b8c      	ldr	r3, [pc, #560]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ea      	bne.n	80035e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80a6 	beq.w	8003768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003620:	4b84      	ldr	r3, [pc, #528]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_OscConfig+0x2b4>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x2b6>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b7f      	ldr	r3, [pc, #508]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	4a7e      	ldr	r2, [pc, #504]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003640:	6593      	str	r3, [r2, #88]	@ 0x58
 8003642:	4b7c      	ldr	r3, [pc, #496]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003652:	4b79      	ldr	r3, [pc, #484]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365e:	4b76      	ldr	r3, [pc, #472]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe f947 	bl	80018fc <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fe f943 	bl	80018fc <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e183      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003684:	4b6c      	ldr	r3, [pc, #432]	@ (8003838 <HAL_RCC_OscConfig+0x4bc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d108      	bne.n	80036aa <HAL_RCC_OscConfig+0x32e>
 8003698:	4b66      	ldr	r3, [pc, #408]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	4a65      	ldr	r2, [pc, #404]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036a8:	e024      	b.n	80036f4 <HAL_RCC_OscConfig+0x378>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d110      	bne.n	80036d4 <HAL_RCC_OscConfig+0x358>
 80036b2:	4b60      	ldr	r3, [pc, #384]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036d2:	e00f      	b.n	80036f4 <HAL_RCC_OscConfig+0x378>
 80036d4:	4b57      	ldr	r3, [pc, #348]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	4a56      	ldr	r2, [pc, #344]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036e4:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ea:	4a52      	ldr	r2, [pc, #328]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fe f8fe 	bl	80018fc <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fe f8fa 	bl	80018fc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e138      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371a:	4b46      	ldr	r3, [pc, #280]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ed      	beq.n	8003704 <HAL_RCC_OscConfig+0x388>
 8003728:	e015      	b.n	8003756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fe f8e7 	bl	80018fc <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe f8e3 	bl	80018fc <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e121      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003748:	4b3a      	ldr	r3, [pc, #232]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ed      	bne.n	8003732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003756:	7ffb      	ldrb	r3, [r7, #31]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b35      	ldr	r3, [pc, #212]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	4a34      	ldr	r2, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003766:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03c      	beq.n	80037ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800377c:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 800377e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003782:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fe f8b6 	bl	80018fc <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003794:	f7fe f8b2 	bl	80018fc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0f2      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037a6:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ef      	beq.n	8003794 <HAL_RCC_OscConfig+0x418>
 80037b4:	e01b      	b.n	80037ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fe f899 	bl	80018fc <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ce:	f7fe f895 	bl	80018fc <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0d5      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037e0:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ef      	bne.n	80037ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80c9 	beq.w	800398a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f000 8083 	beq.w	800390c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d15e      	bne.n	80038cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a08      	ldr	r2, [pc, #32]	@ (8003834 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fe f86f 	bl	80018fc <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	e00c      	b.n	800383c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe f86b 	bl	80018fc <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d905      	bls.n	800383c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0ab      	b.n	800398c <HAL_RCC_OscConfig+0x610>
 8003834:	40021000 	.word	0x40021000
 8003838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ec      	bne.n	8003822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003848:	4b52      	ldr	r3, [pc, #328]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	4b52      	ldr	r3, [pc, #328]	@ (8003998 <HAL_RCC_OscConfig+0x61c>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6a11      	ldr	r1, [r2, #32]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003858:	3a01      	subs	r2, #1
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	4311      	orrs	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003862:	0212      	lsls	r2, r2, #8
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800386a:	0852      	lsrs	r2, r2, #1
 800386c:	3a01      	subs	r2, #1
 800386e:	0552      	lsls	r2, r2, #21
 8003870:	4311      	orrs	r1, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003876:	0852      	lsrs	r2, r2, #1
 8003878:	3a01      	subs	r2, #1
 800387a:	0652      	lsls	r2, r2, #25
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003882:	06d2      	lsls	r2, r2, #27
 8003884:	430a      	orrs	r2, r1
 8003886:	4943      	ldr	r1, [pc, #268]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388c:	4b41      	ldr	r3, [pc, #260]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a40      	ldr	r2, [pc, #256]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003898:	4b3e      	ldr	r3, [pc, #248]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a3d      	ldr	r2, [pc, #244]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe f82a 	bl	80018fc <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fe f826 	bl	80018fc <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e066      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	4b35      	ldr	r3, [pc, #212]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x530>
 80038ca:	e05e      	b.n	800398a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038cc:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a30      	ldr	r2, [pc, #192]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe f810 	bl	80018fc <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe f80c 	bl	80018fc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e04c      	b.n	800398c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f2:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038fe:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	4924      	ldr	r1, [pc, #144]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 8003904:	4b25      	ldr	r3, [pc, #148]	@ (800399c <HAL_RCC_OscConfig+0x620>)
 8003906:	4013      	ands	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
 800390a:	e03e      	b.n	800398a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e039      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003918:	4b1e      	ldr	r3, [pc, #120]	@ (8003994 <HAL_RCC_OscConfig+0x618>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0203 	and.w	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	429a      	cmp	r2, r3
 800392a:	d12c      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	3b01      	subs	r3, #1
 8003938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d123      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d11b      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d113      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	3b01      	subs	r3, #1
 800396c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d109      	bne.n	8003986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	019f800c 	.word	0x019f800c
 800399c:	feeefffc 	.word	0xfeeefffc

080039a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e11e      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b91      	ldr	r3, [pc, #580]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d910      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b8e      	ldr	r3, [pc, #568]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 020f 	bic.w	r2, r3, #15
 80039ce:	498c      	ldr	r1, [pc, #560]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e106      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d073      	beq.n	8003adc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d129      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fc:	4b81      	ldr	r3, [pc, #516]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0f4      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a0c:	f000 f9d0 	bl	8003db0 <RCC_GetSysClockFreqFromPLLSource>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4a7c      	ldr	r2, [pc, #496]	@ (8003c08 <HAL_RCC_ClockConfig+0x268>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d93f      	bls.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d033      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d12f      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a3a:	4b72      	ldr	r3, [pc, #456]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a42:	4a70      	ldr	r2, [pc, #448]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e024      	b.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a58:	4b6a      	ldr	r3, [pc, #424]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0c6      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a68:	4b66      	ldr	r3, [pc, #408]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0be      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a78:	f000 f8ce 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4a61      	ldr	r2, [pc, #388]	@ (8003c08 <HAL_RCC_ClockConfig+0x268>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d909      	bls.n	8003a9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a86:	4b5f      	ldr	r3, [pc, #380]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4957      	ldr	r1, [pc, #348]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aac:	f7fd ff26 	bl	80018fc <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fd ff22 	bl	80018fc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e095      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	4b4e      	ldr	r3, [pc, #312]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 020c 	and.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1eb      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d023      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af4:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a42      	ldr	r2, [pc, #264]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003afe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b14:	4a3b      	ldr	r2, [pc, #236]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4936      	ldr	r1, [pc, #216]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b80      	cmp	r3, #128	@ 0x80
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b36:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4a32      	ldr	r2, [pc, #200]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b42:	4b2f      	ldr	r3, [pc, #188]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d21d      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 020f 	bic.w	r2, r3, #15
 8003b58:	4929      	ldr	r1, [pc, #164]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b60:	f7fd fecc 	bl	80018fc <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fd fec8 	bl	80018fc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e03b      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_RCC_ClockConfig+0x260>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1ed      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4917      	ldr	r1, [pc, #92]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490f      	ldr	r1, [pc, #60]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bca:	f000 f825 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <HAL_RCC_ClockConfig+0x26c>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	fa22 f303 	lsr.w	r3, r2, r3
 8003be6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c10 <HAL_RCC_ClockConfig+0x270>)
 8003be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bea:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <HAL_RCC_ClockConfig+0x274>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd f95e 	bl	8000eb0 <HAL_InitTick>
 8003bf4:	4603      	mov	r3, r0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40022000 	.word	0x40022000
 8003c04:	40021000 	.word	0x40021000
 8003c08:	04c4b400 	.word	0x04c4b400
 8003c0c:	08009358 	.word	0x08009358
 8003c10:	20000000 	.word	0x20000000
 8003c14:	20000004 	.word	0x20000004

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d102      	bne.n	8003c30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	e047      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c30:	4b27      	ldr	r3, [pc, #156]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c3c:	4b26      	ldr	r3, [pc, #152]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	e03e      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c42:	4b23      	ldr	r3, [pc, #140]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d136      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c58:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	3301      	adds	r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c76:	68d2      	ldr	r2, [r2, #12]
 8003c78:	0a12      	lsrs	r2, r2, #8
 8003c7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
      break;
 8003c84:	e00c      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c86:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	4a10      	ldr	r2, [pc, #64]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	0a12      	lsrs	r2, r2, #8
 8003c94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c98:	fb02 f303 	mul.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
      break;
 8003c9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0e5b      	lsrs	r3, r3, #25
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	3301      	adds	r3, #1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	e001      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cc0:	693b      	ldr	r3, [r7, #16]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	016e3600 	.word	0x016e3600

08003cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000000 	.word	0x20000000

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf8:	f7ff fff0 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4904      	ldr	r1, [pc, #16]	@ (8003d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	08009368 	.word	0x08009368

08003d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d24:	f7ff ffda 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0adb      	lsrs	r3, r3, #11
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4904      	ldr	r1, [pc, #16]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08009368 	.word	0x08009368

08003d4c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	220f      	movs	r2, #15
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d5c:	4b12      	ldr	r3, [pc, #72]	@ (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0203 	and.w	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d68:	4b0f      	ldr	r3, [pc, #60]	@ (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d74:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d80:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d8e:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <HAL_RCC_GetClockConfig+0x60>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 020f 	and.w	r2, r3, #15
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40022000 	.word	0x40022000

08003db0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003db6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d10c      	bne.n	8003dee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dd4:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	4a14      	ldr	r2, [pc, #80]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dde:	68d2      	ldr	r2, [r2, #12]
 8003de0:	0a12      	lsrs	r2, r2, #8
 8003de2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
    break;
 8003dec:	e00c      	b.n	8003e08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dee:	4a12      	ldr	r2, [pc, #72]	@ (8003e38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	0a12      	lsrs	r2, r2, #8
 8003dfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]
    break;
 8003e06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e08:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0e5b      	lsrs	r3, r3, #25
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	3301      	adds	r3, #1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e22:	687b      	ldr	r3, [r7, #4]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40021000 	.word	0x40021000
 8003e34:	016e3600 	.word	0x016e3600
 8003e38:	00f42400 	.word	0x00f42400

08003e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8098 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5e:	4b43      	ldr	r3, [pc, #268]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10d      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	4b40      	ldr	r3, [pc, #256]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e76:	4b3d      	ldr	r3, [pc, #244]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e82:	2301      	movs	r3, #1
 8003e84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e86:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a39      	ldr	r2, [pc, #228]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e92:	f7fd fd33 	bl	80018fc <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e98:	e009      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9a:	f7fd fd2f 	bl	80018fc <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d902      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	74fb      	strb	r3, [r7, #19]
        break;
 8003eac:	e005      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eae:	4b30      	ldr	r3, [pc, #192]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ef      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d159      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01e      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d019      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003edc:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ee8:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eee:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fcef 	bl	80018fc <HAL_GetTick>
 8003f1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f20:	e00b      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd fceb 	bl	80018fc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d902      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	74fb      	strb	r3, [r7, #19]
            break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ec      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4e:	4b07      	ldr	r3, [pc, #28]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5c:	4903      	ldr	r1, [pc, #12]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f64:	e008      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	74bb      	strb	r3, [r7, #18]
 8003f6a:	e005      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f78:	7c7b      	ldrb	r3, [r7, #17]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4ba7      	ldr	r3, [pc, #668]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f82:	4aa6      	ldr	r2, [pc, #664]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f96:	4ba1      	ldr	r3, [pc, #644]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	f023 0203 	bic.w	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	499d      	ldr	r1, [pc, #628]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb8:	4b98      	ldr	r3, [pc, #608]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f023 020c 	bic.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	4995      	ldr	r1, [pc, #596]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fda:	4b90      	ldr	r3, [pc, #576]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	498c      	ldr	r1, [pc, #560]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ffc:	4b87      	ldr	r3, [pc, #540]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004002:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4984      	ldr	r1, [pc, #528]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800401e:	4b7f      	ldr	r3, [pc, #508]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	497b      	ldr	r1, [pc, #492]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004040:	4b76      	ldr	r3, [pc, #472]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	4973      	ldr	r1, [pc, #460]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004062:	4b6e      	ldr	r3, [pc, #440]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	496a      	ldr	r1, [pc, #424]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004084:	4b65      	ldr	r3, [pc, #404]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4962      	ldr	r1, [pc, #392]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a6:	4b5d      	ldr	r3, [pc, #372]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	4959      	ldr	r1, [pc, #356]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c8:	4b54      	ldr	r3, [pc, #336]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	4951      	ldr	r1, [pc, #324]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ea:	4b4c      	ldr	r3, [pc, #304]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	4948      	ldr	r1, [pc, #288]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800410c:	4b43      	ldr	r3, [pc, #268]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	4940      	ldr	r1, [pc, #256]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800412a:	d105      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412c:	4b3b      	ldr	r3, [pc, #236]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a3a      	ldr	r2, [pc, #232]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004144:	4b35      	ldr	r3, [pc, #212]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	4932      	ldr	r1, [pc, #200]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004162:	d105      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004164:	4b2d      	ldr	r3, [pc, #180]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a2c      	ldr	r2, [pc, #176]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800417c:	4b27      	ldr	r3, [pc, #156]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418a:	4924      	ldr	r1, [pc, #144]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800419c:	4b1f      	ldr	r3, [pc, #124]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a1e      	ldr	r2, [pc, #120]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b4:	4b19      	ldr	r3, [pc, #100]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	4916      	ldr	r1, [pc, #88]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d2:	d105      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d4:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a10      	ldr	r2, [pc, #64]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d019      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	4908      	ldr	r1, [pc, #32]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420c:	4b03      	ldr	r3, [pc, #12]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a02      	ldr	r2, [pc, #8]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004216:	60d3      	str	r3, [r2, #12]
 8004218:	e002      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800422c:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004232:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	4926      	ldr	r1, [pc, #152]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800424c:	4b21      	ldr	r3, [pc, #132]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a20      	ldr	r2, [pc, #128]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004256:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004264:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004272:	4918      	ldr	r1, [pc, #96]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004282:	d105      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004284:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a12      	ldr	r2, [pc, #72]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800429c:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042aa:	490a      	ldr	r1, [pc, #40]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ba:	d105      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a04      	ldr	r2, [pc, #16]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e049      	b.n	800437e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd f886 	bl	8001410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 fdc4 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e054      	b.n	800444a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <HAL_TIM_Base_Start_IT+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d022      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ca:	d01d      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a22      	ldr	r2, [pc, #136]	@ (800445c <HAL_TIM_Base_Start_IT+0xd4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a21      	ldr	r2, [pc, #132]	@ (8004460 <HAL_TIM_Base_Start_IT+0xd8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004464 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004468 <HAL_TIM_Base_Start_IT+0xe0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <HAL_TIM_Base_Start_IT+0xe4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1b      	ldr	r2, [pc, #108]	@ (8004470 <HAL_TIM_Base_Start_IT+0xe8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d115      	bne.n	8004434 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_TIM_Base_Start_IT+0xec>)
 8004410:	4013      	ands	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d015      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004420:	d011      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	e008      	b.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e000      	b.n	8004448 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	40015000 	.word	0x40015000
 8004474:	00010007 	.word	0x00010007

08004478 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e049      	b.n	800451e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f841 	bl	8004526 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f000 fcf4 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_TIM_PWM_Start+0x24>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e03c      	b.n	80045da <HAL_TIM_PWM_Start+0x9e>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d109      	bne.n	800457a <HAL_TIM_PWM_Start+0x3e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e02f      	b.n	80045da <HAL_TIM_PWM_Start+0x9e>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d109      	bne.n	8004594 <HAL_TIM_PWM_Start+0x58>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e022      	b.n	80045da <HAL_TIM_PWM_Start+0x9e>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d109      	bne.n	80045ae <HAL_TIM_PWM_Start+0x72>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e015      	b.n	80045da <HAL_TIM_PWM_Start+0x9e>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d109      	bne.n	80045c8 <HAL_TIM_PWM_Start+0x8c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e008      	b.n	80045da <HAL_TIM_PWM_Start+0x9e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0a6      	b.n	8004730 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0xb6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f0:	e023      	b.n	800463a <HAL_TIM_PWM_Start+0xfe>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start+0xc6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004600:	e01b      	b.n	800463a <HAL_TIM_PWM_Start+0xfe>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start+0xd6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004610:	e013      	b.n	800463a <HAL_TIM_PWM_Start+0xfe>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0xe6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004620:	e00b      	b.n	800463a <HAL_TIM_PWM_Start+0xfe>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b10      	cmp	r3, #16
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0xf6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004630:	e003      	b.n	800463a <HAL_TIM_PWM_Start+0xfe>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f91c 	bl	8005880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3a      	ldr	r2, [pc, #232]	@ (8004738 <HAL_TIM_PWM_Start+0x1fc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d018      	beq.n	8004684 <HAL_TIM_PWM_Start+0x148>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a39      	ldr	r2, [pc, #228]	@ (800473c <HAL_TIM_PWM_Start+0x200>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <HAL_TIM_PWM_Start+0x148>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a37      	ldr	r2, [pc, #220]	@ (8004740 <HAL_TIM_PWM_Start+0x204>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00e      	beq.n	8004684 <HAL_TIM_PWM_Start+0x148>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a36      	ldr	r2, [pc, #216]	@ (8004744 <HAL_TIM_PWM_Start+0x208>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_TIM_PWM_Start+0x148>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a34      	ldr	r2, [pc, #208]	@ (8004748 <HAL_TIM_PWM_Start+0x20c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_TIM_PWM_Start+0x148>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a33      	ldr	r2, [pc, #204]	@ (800474c <HAL_TIM_PWM_Start+0x210>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_TIM_PWM_Start+0x14c>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_TIM_PWM_Start+0x14e>
 8004688:	2300      	movs	r3, #0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a25      	ldr	r2, [pc, #148]	@ (8004738 <HAL_TIM_PWM_Start+0x1fc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <HAL_TIM_PWM_Start+0x1b2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d01d      	beq.n	80046ee <HAL_TIM_PWM_Start+0x1b2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a26      	ldr	r2, [pc, #152]	@ (8004750 <HAL_TIM_PWM_Start+0x214>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_TIM_PWM_Start+0x1b2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a24      	ldr	r2, [pc, #144]	@ (8004754 <HAL_TIM_PWM_Start+0x218>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_TIM_PWM_Start+0x1b2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a23      	ldr	r2, [pc, #140]	@ (8004758 <HAL_TIM_PWM_Start+0x21c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_TIM_PWM_Start+0x1b2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a19      	ldr	r2, [pc, #100]	@ (800473c <HAL_TIM_PWM_Start+0x200>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_TIM_PWM_Start+0x1b2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <HAL_TIM_PWM_Start+0x204>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIM_PWM_Start+0x1b2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a18      	ldr	r2, [pc, #96]	@ (800474c <HAL_TIM_PWM_Start+0x210>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d115      	bne.n	800471a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_TIM_PWM_Start+0x220>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d015      	beq.n	800472c <HAL_TIM_PWM_Start+0x1f0>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004706:	d011      	beq.n	800472c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	e008      	b.n	800472c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e000      	b.n	800472e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40012c00 	.word	0x40012c00
 800473c:	40013400 	.word	0x40013400
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800
 800474c:	40015000 	.word	0x40015000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	00010007 	.word	0x00010007

08004760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d020      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb5c 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fb4e 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fb5f 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0204 	mvn.w	r2, #4
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb36 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fb28 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fb39 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01b      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0208 	mvn.w	r2, #8
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fb10 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fb02 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb13 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0210 	mvn.w	r2, #16
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 faea 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fadc 	bl	8004e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 faed 	bl	8004e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fab6 	bl	8000e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80048f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fa8d 	bl	8005e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00c      	beq.n	800491e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f001 fa85 	bl	8005e28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 faa7 	bl	8004e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00c      	beq.n	8004966 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f06f 0220 	mvn.w	r2, #32
 800495e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f001 fa4d 	bl	8005e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00c      	beq.n	800498a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f001 fa59 	bl	8005e3c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00c      	beq.n	80049ae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 fa51 	bl	8005e50 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 fa49 	bl	8005e64 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 fa41 	bl	8005e78 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e0ff      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b14      	cmp	r3, #20
 8004a2a:	f200 80f0 	bhi.w	8004c0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004c0f 	.word	0x08004c0f
 8004a3c:	08004c0f 	.word	0x08004c0f
 8004a40:	08004c0f 	.word	0x08004c0f
 8004a44:	08004ac9 	.word	0x08004ac9
 8004a48:	08004c0f 	.word	0x08004c0f
 8004a4c:	08004c0f 	.word	0x08004c0f
 8004a50:	08004c0f 	.word	0x08004c0f
 8004a54:	08004b0b 	.word	0x08004b0b
 8004a58:	08004c0f 	.word	0x08004c0f
 8004a5c:	08004c0f 	.word	0x08004c0f
 8004a60:	08004c0f 	.word	0x08004c0f
 8004a64:	08004b4b 	.word	0x08004b4b
 8004a68:	08004c0f 	.word	0x08004c0f
 8004a6c:	08004c0f 	.word	0x08004c0f
 8004a70:	08004c0f 	.word	0x08004c0f
 8004a74:	08004b8d 	.word	0x08004b8d
 8004a78:	08004c0f 	.word	0x08004c0f
 8004a7c:	08004c0f 	.word	0x08004c0f
 8004a80:	08004c0f 	.word	0x08004c0f
 8004a84:	08004bcd 	.word	0x08004bcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fabc 	bl	800500c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	619a      	str	r2, [r3, #24]
      break;
 8004ac6:	e0a5      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fb36 	bl	8005140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
      break;
 8004b08:	e084      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fba9 	bl	8005268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0208 	orr.w	r2, r2, #8
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e064      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fc1b 	bl	800538c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69d9      	ldr	r1, [r3, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	021a      	lsls	r2, r3, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	61da      	str	r2, [r3, #28]
      break;
 8004b8a:	e043      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fc8e 	bl	80054b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004bca:	e023      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fcd8 	bl	8005588 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c0c:	e002      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_ConfigClockSource+0x1c>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0f6      	b.n	8004e32 <HAL_TIM_ConfigClockSource+0x20a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a6f      	ldr	r2, [pc, #444]	@ (8004e3c <HAL_TIM_ConfigClockSource+0x214>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	f000 80c1 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004c84:	4a6d      	ldr	r2, [pc, #436]	@ (8004e3c <HAL_TIM_ConfigClockSource+0x214>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	f200 80c6 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c8c:	4a6c      	ldr	r2, [pc, #432]	@ (8004e40 <HAL_TIM_ConfigClockSource+0x218>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	f000 80b9 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004c94:	4a6a      	ldr	r2, [pc, #424]	@ (8004e40 <HAL_TIM_ConfigClockSource+0x218>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	f200 80be 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c9c:	4a69      	ldr	r2, [pc, #420]	@ (8004e44 <HAL_TIM_ConfigClockSource+0x21c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	f000 80b1 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004ca4:	4a67      	ldr	r2, [pc, #412]	@ (8004e44 <HAL_TIM_ConfigClockSource+0x21c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	f200 80b6 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cac:	4a66      	ldr	r2, [pc, #408]	@ (8004e48 <HAL_TIM_ConfigClockSource+0x220>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	f000 80a9 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004cb4:	4a64      	ldr	r2, [pc, #400]	@ (8004e48 <HAL_TIM_ConfigClockSource+0x220>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	f200 80ae 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cbc:	4a63      	ldr	r2, [pc, #396]	@ (8004e4c <HAL_TIM_ConfigClockSource+0x224>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	f000 80a1 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004cc4:	4a61      	ldr	r2, [pc, #388]	@ (8004e4c <HAL_TIM_ConfigClockSource+0x224>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	f200 80a6 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ccc:	4a60      	ldr	r2, [pc, #384]	@ (8004e50 <HAL_TIM_ConfigClockSource+0x228>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	f000 8099 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e50 <HAL_TIM_ConfigClockSource+0x228>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	f200 809e 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ce0:	f000 8091 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004ce4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ce8:	f200 8096 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf0:	f000 8089 	beq.w	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf8:	f200 808e 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d00:	d03e      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0x158>
 8004d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d06:	f200 8087 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0e:	f000 8086 	beq.w	8004e1e <HAL_TIM_ConfigClockSource+0x1f6>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d16:	d87f      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d18:	2b70      	cmp	r3, #112	@ 0x70
 8004d1a:	d01a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x12a>
 8004d1c:	2b70      	cmp	r3, #112	@ 0x70
 8004d1e:	d87b      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d20:	2b60      	cmp	r3, #96	@ 0x60
 8004d22:	d050      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x19e>
 8004d24:	2b60      	cmp	r3, #96	@ 0x60
 8004d26:	d877      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d28:	2b50      	cmp	r3, #80	@ 0x50
 8004d2a:	d03c      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x17e>
 8004d2c:	2b50      	cmp	r3, #80	@ 0x50
 8004d2e:	d873      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d058      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x1be>
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	d86f      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d38:	2b30      	cmp	r3, #48	@ 0x30
 8004d3a:	d064      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004d3c:	2b30      	cmp	r3, #48	@ 0x30
 8004d3e:	d86b      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d060      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d867      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d05c      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d05a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x1de>
 8004d50:	e062      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d62:	f000 fd6d 	bl	8005840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	609a      	str	r2, [r3, #8]
      break;
 8004d7e:	e04f      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d90:	f000 fd56 	bl	8005840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004da2:	609a      	str	r2, [r3, #8]
      break;
 8004da4:	e03c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 fcc8 	bl	8005748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2150      	movs	r1, #80	@ 0x50
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fd21 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e02c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 fce7 	bl	80057a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2160      	movs	r1, #96	@ 0x60
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fd11 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8004de4:	e01c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df2:	461a      	mov	r2, r3
 8004df4:	f000 fca8 	bl	8005748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2140      	movs	r1, #64	@ 0x40
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fd01 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8004e04:	e00c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f000 fcf8 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8004e16:	e003      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1c:	e000      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	00100070 	.word	0x00100070
 8004e40:	00100060 	.word	0x00100060
 8004e44:	00100050 	.word	0x00100050
 8004e48:	00100040 	.word	0x00100040
 8004e4c:	00100030 	.word	0x00100030
 8004e50:	00100020 	.word	0x00100020

08004e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8004fe8 <TIM_Base_SetConfig+0x144>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d017      	beq.n	8004eec <TIM_Base_SetConfig+0x48>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec2:	d013      	beq.n	8004eec <TIM_Base_SetConfig+0x48>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a49      	ldr	r2, [pc, #292]	@ (8004fec <TIM_Base_SetConfig+0x148>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <TIM_Base_SetConfig+0x48>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a48      	ldr	r2, [pc, #288]	@ (8004ff0 <TIM_Base_SetConfig+0x14c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0x48>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a47      	ldr	r2, [pc, #284]	@ (8004ff4 <TIM_Base_SetConfig+0x150>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0x48>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a46      	ldr	r2, [pc, #280]	@ (8004ff8 <TIM_Base_SetConfig+0x154>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0x48>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a45      	ldr	r2, [pc, #276]	@ (8004ffc <TIM_Base_SetConfig+0x158>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d108      	bne.n	8004efe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a39      	ldr	r2, [pc, #228]	@ (8004fe8 <TIM_Base_SetConfig+0x144>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d023      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0c:	d01f      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a36      	ldr	r2, [pc, #216]	@ (8004fec <TIM_Base_SetConfig+0x148>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01b      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a35      	ldr	r2, [pc, #212]	@ (8004ff0 <TIM_Base_SetConfig+0x14c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d017      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a34      	ldr	r2, [pc, #208]	@ (8004ff4 <TIM_Base_SetConfig+0x150>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a33      	ldr	r2, [pc, #204]	@ (8004ff8 <TIM_Base_SetConfig+0x154>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00f      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <TIM_Base_SetConfig+0x15c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00b      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a32      	ldr	r2, [pc, #200]	@ (8005004 <TIM_Base_SetConfig+0x160>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a31      	ldr	r2, [pc, #196]	@ (8005008 <TIM_Base_SetConfig+0x164>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_Base_SetConfig+0xaa>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	@ (8004ffc <TIM_Base_SetConfig+0x158>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d108      	bne.n	8004f60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <TIM_Base_SetConfig+0x144>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x110>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <TIM_Base_SetConfig+0x154>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x110>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1a      	ldr	r2, [pc, #104]	@ (8005000 <TIM_Base_SetConfig+0x15c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x110>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a19      	ldr	r2, [pc, #100]	@ (8005004 <TIM_Base_SetConfig+0x160>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x110>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a18      	ldr	r2, [pc, #96]	@ (8005008 <TIM_Base_SetConfig+0x164>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x110>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a13      	ldr	r2, [pc, #76]	@ (8004ffc <TIM_Base_SetConfig+0x158>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d103      	bne.n	8004fbc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	611a      	str	r2, [r3, #16]
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40015000 	.word	0x40015000
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800

0800500c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f023 0201 	bic.w	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800503a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 0302 	bic.w	r3, r3, #2
 8005058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a30      	ldr	r2, [pc, #192]	@ (8005128 <TIM_OC1_SetConfig+0x11c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <TIM_OC1_SetConfig+0x88>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2f      	ldr	r2, [pc, #188]	@ (800512c <TIM_OC1_SetConfig+0x120>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00f      	beq.n	8005094 <TIM_OC1_SetConfig+0x88>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2e      	ldr	r2, [pc, #184]	@ (8005130 <TIM_OC1_SetConfig+0x124>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00b      	beq.n	8005094 <TIM_OC1_SetConfig+0x88>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a2d      	ldr	r2, [pc, #180]	@ (8005134 <TIM_OC1_SetConfig+0x128>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <TIM_OC1_SetConfig+0x88>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2c      	ldr	r2, [pc, #176]	@ (8005138 <TIM_OC1_SetConfig+0x12c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_OC1_SetConfig+0x88>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a2b      	ldr	r2, [pc, #172]	@ (800513c <TIM_OC1_SetConfig+0x130>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10c      	bne.n	80050ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0308 	bic.w	r3, r3, #8
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 0304 	bic.w	r3, r3, #4
 80050ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005128 <TIM_OC1_SetConfig+0x11c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <TIM_OC1_SetConfig+0xd2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <TIM_OC1_SetConfig+0x120>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_OC1_SetConfig+0xd2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <TIM_OC1_SetConfig+0x124>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_OC1_SetConfig+0xd2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005134 <TIM_OC1_SetConfig+0x128>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_OC1_SetConfig+0xd2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <TIM_OC1_SetConfig+0x12c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC1_SetConfig+0xd2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a18      	ldr	r2, [pc, #96]	@ (800513c <TIM_OC1_SetConfig+0x130>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d111      	bne.n	8005102 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800
 800513c:	40015000 	.word	0x40015000

08005140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 0210 	bic.w	r2, r3, #16
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0320 	bic.w	r3, r3, #32
 800518e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a2c      	ldr	r2, [pc, #176]	@ (8005250 <TIM_OC2_SetConfig+0x110>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_OC2_SetConfig+0x74>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005254 <TIM_OC2_SetConfig+0x114>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_OC2_SetConfig+0x74>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005258 <TIM_OC2_SetConfig+0x118>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10d      	bne.n	80051d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005250 <TIM_OC2_SetConfig+0x110>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <TIM_OC2_SetConfig+0xc0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a1e      	ldr	r2, [pc, #120]	@ (8005254 <TIM_OC2_SetConfig+0x114>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00f      	beq.n	8005200 <TIM_OC2_SetConfig+0xc0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	@ (800525c <TIM_OC2_SetConfig+0x11c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00b      	beq.n	8005200 <TIM_OC2_SetConfig+0xc0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005260 <TIM_OC2_SetConfig+0x120>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_OC2_SetConfig+0xc0>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005264 <TIM_OC2_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_OC2_SetConfig+0xc0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a17      	ldr	r2, [pc, #92]	@ (8005258 <TIM_OC2_SetConfig+0x118>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d113      	bne.n	8005228 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40013400 	.word	0x40013400
 8005258:	40015000 	.word	0x40015000
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800

08005268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005374 <TIM_OC3_SetConfig+0x10c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_OC3_SetConfig+0x72>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005378 <TIM_OC3_SetConfig+0x110>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0x72>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a29      	ldr	r2, [pc, #164]	@ (800537c <TIM_OC3_SetConfig+0x114>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005374 <TIM_OC3_SetConfig+0x10c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <TIM_OC3_SetConfig+0xbe>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <TIM_OC3_SetConfig+0x110>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_OC3_SetConfig+0xbe>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <TIM_OC3_SetConfig+0x118>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_OC3_SetConfig+0xbe>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <TIM_OC3_SetConfig+0x11c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_OC3_SetConfig+0xbe>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <TIM_OC3_SetConfig+0x120>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC3_SetConfig+0xbe>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a16      	ldr	r2, [pc, #88]	@ (800537c <TIM_OC3_SetConfig+0x114>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d113      	bne.n	800534e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800532c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	621a      	str	r2, [r3, #32]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40015000 	.word	0x40015000
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	031b      	lsls	r3, r3, #12
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <TIM_OC4_SetConfig+0x110>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_OC4_SetConfig+0x74>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a2b      	ldr	r2, [pc, #172]	@ (80054a0 <TIM_OC4_SetConfig+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC4_SetConfig+0x74>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <TIM_OC4_SetConfig+0x118>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10d      	bne.n	800541c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800541a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a1f      	ldr	r2, [pc, #124]	@ (800549c <TIM_OC4_SetConfig+0x110>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <TIM_OC4_SetConfig+0xc0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <TIM_OC4_SetConfig+0x114>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00f      	beq.n	800544c <TIM_OC4_SetConfig+0xc0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1e      	ldr	r2, [pc, #120]	@ (80054a8 <TIM_OC4_SetConfig+0x11c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_OC4_SetConfig+0xc0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <TIM_OC4_SetConfig+0x120>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_OC4_SetConfig+0xc0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a1c      	ldr	r2, [pc, #112]	@ (80054b0 <TIM_OC4_SetConfig+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC4_SetConfig+0xc0>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a17      	ldr	r2, [pc, #92]	@ (80054a4 <TIM_OC4_SetConfig+0x118>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d113      	bne.n	8005474 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005452:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800545a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	019b      	lsls	r3, r3, #6
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	019b      	lsls	r3, r3, #6
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40015000 	.word	0x40015000
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80054f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a19      	ldr	r2, [pc, #100]	@ (8005570 <TIM_OC5_SetConfig+0xbc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_OC5_SetConfig+0x82>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a18      	ldr	r2, [pc, #96]	@ (8005574 <TIM_OC5_SetConfig+0xc0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_OC5_SetConfig+0x82>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <TIM_OC5_SetConfig+0xc4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_OC5_SetConfig+0x82>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a16      	ldr	r2, [pc, #88]	@ (800557c <TIM_OC5_SetConfig+0xc8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_OC5_SetConfig+0x82>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a15      	ldr	r2, [pc, #84]	@ (8005580 <TIM_OC5_SetConfig+0xcc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_OC5_SetConfig+0x82>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a14      	ldr	r2, [pc, #80]	@ (8005584 <TIM_OC5_SetConfig+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d109      	bne.n	800554a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	621a      	str	r2, [r3, #32]
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800
 8005584:	40015000 	.word	0x40015000

08005588 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	051b      	lsls	r3, r3, #20
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1a      	ldr	r2, [pc, #104]	@ (8005648 <TIM_OC6_SetConfig+0xc0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_OC6_SetConfig+0x84>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a19      	ldr	r2, [pc, #100]	@ (800564c <TIM_OC6_SetConfig+0xc4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC6_SetConfig+0x84>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <TIM_OC6_SetConfig+0xc8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC6_SetConfig+0x84>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <TIM_OC6_SetConfig+0xcc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC6_SetConfig+0x84>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a16      	ldr	r2, [pc, #88]	@ (8005658 <TIM_OC6_SetConfig+0xd0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC6_SetConfig+0x84>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a15      	ldr	r2, [pc, #84]	@ (800565c <TIM_OC6_SetConfig+0xd4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800
 800565c:	40015000 	.word	0x40015000

08005660 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f023 0201 	bic.w	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a28      	ldr	r2, [pc, #160]	@ (800572c <TIM_TI1_SetConfig+0xcc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01b      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d017      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a25      	ldr	r2, [pc, #148]	@ (8005730 <TIM_TI1_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a24      	ldr	r2, [pc, #144]	@ (8005734 <TIM_TI1_SetConfig+0xd4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00f      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a23      	ldr	r2, [pc, #140]	@ (8005738 <TIM_TI1_SetConfig+0xd8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a22      	ldr	r2, [pc, #136]	@ (800573c <TIM_TI1_SetConfig+0xdc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a21      	ldr	r2, [pc, #132]	@ (8005740 <TIM_TI1_SetConfig+0xe0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a20      	ldr	r2, [pc, #128]	@ (8005744 <TIM_TI1_SetConfig+0xe4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <TIM_TI1_SetConfig+0x6a>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <TIM_TI1_SetConfig+0x6c>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e003      	b.n	80056ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f023 030a 	bic.w	r3, r3, #10
 8005704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f003 030a 	and.w	r3, r3, #10
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40013400 	.word	0x40013400
 8005740:	40014000 	.word	0x40014000
 8005744:	40015000 	.word	0x40015000

08005748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 030a 	bic.w	r3, r3, #10
 8005784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f023 0210 	bic.w	r2, r3, #16
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	031b      	lsls	r3, r3, #12
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800585a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2201      	movs	r2, #1
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	401a      	ands	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b08a      	sub	sp, #40	@ 0x28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0a0      	b.n	8005a20 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fb fdac 	bl	8001450 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f7ff faca 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2203      	movs	r2, #3
 800591e:	f7ff fe9f 	bl	8005660 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 020c 	bic.w	r2, r2, #12
 8005930:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6999      	ldr	r1, [r3, #24]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005952:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005966:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005976:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005986:	f023 0307 	bic.w	r3, r3, #7
 800598a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0204 	orr.w	r2, r2, #4
 800599a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800599c:	2300      	movs	r3, #0
 800599e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80059a0:	2300      	movs	r3, #0
 80059a2:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80059a4:	2370      	movs	r3, #112	@ 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80059a8:	2300      	movs	r3, #0
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f107 020c 	add.w	r2, r7, #12
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fbbb 	bl	8005140 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80059d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059dc:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80059ec:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3728      	adds	r7, #40	@ 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d109      	bne.n	8005a4c <HAL_TIMEx_PWMN_Start+0x24>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e022      	b.n	8005a92 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d109      	bne.n	8005a66 <HAL_TIMEx_PWMN_Start+0x3e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	bf14      	ite	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	2300      	moveq	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	e015      	b.n	8005a92 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d109      	bne.n	8005a80 <HAL_TIMEx_PWMN_Start+0x58>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	bf14      	ite	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	2300      	moveq	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e008      	b.n	8005a92 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e073      	b.n	8005b82 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIMEx_PWMN_Start+0x82>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aa8:	e013      	b.n	8005ad2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d104      	bne.n	8005aba <HAL_TIMEx_PWMN_Start+0x92>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ab8:	e00b      	b.n	8005ad2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d104      	bne.n	8005aca <HAL_TIMEx_PWMN_Start+0xa2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ac8:	e003      	b.n	8005ad2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f9d6 	bl	8005e8c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005aee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a25      	ldr	r2, [pc, #148]	@ (8005b8c <HAL_TIMEx_PWMN_Start+0x164>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d022      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x118>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b02:	d01d      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x118>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a21      	ldr	r2, [pc, #132]	@ (8005b90 <HAL_TIMEx_PWMN_Start+0x168>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d018      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x118>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a20      	ldr	r2, [pc, #128]	@ (8005b94 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x118>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005b98 <HAL_TIMEx_PWMN_Start+0x170>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00e      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x118>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1d      	ldr	r2, [pc, #116]	@ (8005b9c <HAL_TIMEx_PWMN_Start+0x174>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d009      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x118>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba0 <HAL_TIMEx_PWMN_Start+0x178>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d004      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x118>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba4 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d115      	bne.n	8005b6c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	4b18      	ldr	r3, [pc, #96]	@ (8005ba8 <HAL_TIMEx_PWMN_Start+0x180>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b06      	cmp	r3, #6
 8005b50:	d015      	beq.n	8005b7e <HAL_TIMEx_PWMN_Start+0x156>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b58:	d011      	beq.n	8005b7e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6a:	e008      	b.n	8005b7e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e000      	b.n	8005b80 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	40015000 	.word	0x40015000
 8005ba8:	00010007 	.word	0x00010007

08005bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e074      	b.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a34      	ldr	r2, [pc, #208]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a33      	ldr	r2, [pc, #204]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a31      	ldr	r2, [pc, #196]	@ (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a21      	ldr	r2, [pc, #132]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d022      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c44:	d01d      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d018      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	@ (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00e      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a15      	ldr	r2, [pc, #84]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d009      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a11      	ldr	r2, [pc, #68]	@ (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10c      	bne.n	8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40015000 	.word	0x40015000
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00
 8005cd4:	40014000 	.word	0x40014000

08005cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e078      	b.n	8005de6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1c      	ldr	r2, [pc, #112]	@ (8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005df8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a19      	ldr	r2, [pc, #100]	@ (8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d11c      	bne.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	051b      	lsls	r3, r3, #20
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40015000 	.word	0x40015000

08005e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1a      	ldr	r2, [r3, #32]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	401a      	ands	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e042      	b.n	8005f6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fb fc0a 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2224      	movs	r2, #36	@ 0x24
 8005f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 ff61 	bl	8006de8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fc62 	bl	80067f0 <UART_SetConfig>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e01b      	b.n	8005f6e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 ffe0 	bl	8006f2c <UART_CheckIdleState>
 8005f6c:	4603      	mov	r3, r0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b08a      	sub	sp, #40	@ 0x28
 8005f7a:	af02      	add	r7, sp, #8
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d17b      	bne.n	8006088 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_UART_Transmit+0x26>
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e074      	b.n	800608a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2221      	movs	r2, #33	@ 0x21
 8005fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fb0:	f7fb fca4 	bl	80018fc <HAL_GetTick>
 8005fb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	88fa      	ldrh	r2, [r7, #6]
 8005fba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fce:	d108      	bne.n	8005fe2 <HAL_UART_Transmit+0x6c>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e003      	b.n	8005fea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fea:	e030      	b.n	800604e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2180      	movs	r1, #128	@ 0x80
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f001 f842 	bl	8007080 <UART_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e03d      	b.n	800608a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006022:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	3302      	adds	r3, #2
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e007      	b.n	800603c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	3301      	adds	r3, #1
 800603a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1c8      	bne.n	8005fec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	2140      	movs	r1, #64	@ 0x40
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 f80b 	bl	8007080 <UART_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e006      	b.n	800608a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	@ 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d137      	bne.n	800611c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_UART_Receive_IT+0x24>
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e030      	b.n	800611e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <HAL_UART_Receive_IT+0x94>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d01f      	beq.n	800610c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d018      	beq.n	800610c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	613b      	str	r3, [r7, #16]
   return(result);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	69f9      	ldr	r1, [r7, #28]
 80060fe:	6a3a      	ldr	r2, [r7, #32]
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	61bb      	str	r3, [r7, #24]
   return(result);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	461a      	mov	r2, r3
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f001 f822 	bl	800715c <UART_Start_Receive_IT>
 8006118:	4603      	mov	r3, r0
 800611a:	e000      	b.n	800611e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3728      	adds	r7, #40	@ 0x28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40008000 	.word	0x40008000

0800612c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b0ba      	sub	sp, #232	@ 0xe8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006152:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006156:	f640 030f 	movw	r3, #2063	@ 0x80f
 800615a:	4013      	ands	r3, r2
 800615c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11b      	bne.n	80061a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d015      	beq.n	80061a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d009      	beq.n	80061a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8300 	beq.w	8006796 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
      }
      return;
 800619e:	e2fa      	b.n	8006796 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8123 	beq.w	80063f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80061ae:	4b8d      	ldr	r3, [pc, #564]	@ (80063e4 <HAL_UART_IRQHandler+0x2b8>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80061ba:	4b8b      	ldr	r3, [pc, #556]	@ (80063e8 <HAL_UART_IRQHandler+0x2bc>)
 80061bc:	4013      	ands	r3, r2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8116 	beq.w	80063f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d011      	beq.n	80061f4 <HAL_UART_IRQHandler+0xc8>
 80061d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2201      	movs	r2, #1
 80061e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ea:	f043 0201 	orr.w	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d011      	beq.n	8006224 <HAL_UART_IRQHandler+0xf8>
 8006200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2202      	movs	r2, #2
 8006212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621a:	f043 0204 	orr.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d011      	beq.n	8006254 <HAL_UART_IRQHandler+0x128>
 8006230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2204      	movs	r2, #4
 8006242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624a:	f043 0202 	orr.w	r2, r3, #2
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d017      	beq.n	8006290 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d105      	bne.n	8006278 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800626c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006270:	4b5c      	ldr	r3, [pc, #368]	@ (80063e4 <HAL_UART_IRQHandler+0x2b8>)
 8006272:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2208      	movs	r2, #8
 800627e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006286:	f043 0208 	orr.w	r2, r3, #8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006298:	2b00      	cmp	r3, #0
 800629a:	d012      	beq.n	80062c2 <HAL_UART_IRQHandler+0x196>
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00c      	beq.n	80062c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8266 	beq.w	800679a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d013      	beq.n	8006302 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006316:	2b40      	cmp	r3, #64	@ 0x40
 8006318:	d005      	beq.n	8006326 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800631a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800631e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006322:	2b00      	cmp	r3, #0
 8006324:	d054      	beq.n	80063d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 f83a 	bl	80073a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006336:	2b40      	cmp	r3, #64	@ 0x40
 8006338:	d146      	bne.n	80063c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3308      	adds	r3, #8
 8006362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006366:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800636a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800637e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1d9      	bne.n	800633a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638c:	2b00      	cmp	r3, #0
 800638e:	d017      	beq.n	80063c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006396:	4a15      	ldr	r2, [pc, #84]	@ (80063ec <HAL_UART_IRQHandler+0x2c0>)
 8006398:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fc fd12 	bl	8002dca <HAL_DMA_Abort_IT>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d019      	beq.n	80063e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80063ba:	4610      	mov	r0, r2
 80063bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063be:	e00f      	b.n	80063e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f9ff 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c6:	e00b      	b.n	80063e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f9fb 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ce:	e007      	b.n	80063e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f9f7 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80063de:	e1dc      	b.n	800679a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	bf00      	nop
    return;
 80063e2:	e1da      	b.n	800679a <HAL_UART_IRQHandler+0x66e>
 80063e4:	10000001 	.word	0x10000001
 80063e8:	04000120 	.word	0x04000120
 80063ec:	0800746d 	.word	0x0800746d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f040 8170 	bne.w	80066da <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8169 	beq.w	80066da <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8162 	beq.w	80066da <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2210      	movs	r2, #16
 800641c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	f040 80d8 	bne.w	80065de <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800643c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80af 	beq.w	80065a4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800644c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006450:	429a      	cmp	r2, r3
 8006452:	f080 80a7 	bcs.w	80065a4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800645c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 8087 	bne.w	8006582 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800648c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800649e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1da      	bne.n	8006474 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e1      	bne.n	80064be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800650a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800650c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800651e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006520:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006524:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800652c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800654e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006550:	f023 0310 	bic.w	r3, r3, #16
 8006554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006562:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006564:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e4      	bne.n	8006540 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657c:	4618      	mov	r0, r3
 800657e:	f7fc fbcb 	bl	8002d18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006594:	b29b      	uxth	r3, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	b29b      	uxth	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f91b 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80065a2:	e0fc      	b.n	800679e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065ae:	429a      	cmp	r2, r3
 80065b0:	f040 80f5 	bne.w	800679e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	f040 80eb 	bne.w	800679e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f8fe 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
      return;
 80065dc:	e0df      	b.n	800679e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80d1 	beq.w	80067a2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80cc 	beq.w	80067a2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800661e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800662c:	647b      	str	r3, [r7, #68]	@ 0x44
 800662e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800663a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e4      	bne.n	800660a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	623b      	str	r3, [r7, #32]
   return(result);
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006668:	633a      	str	r2, [r7, #48]	@ 0x30
 800666a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800666e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e1      	bne.n	8006640 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	60fb      	str	r3, [r7, #12]
   return(result);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f023 0310 	bic.w	r3, r3, #16
 80066a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	69b9      	ldr	r1, [r7, #24]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	617b      	str	r3, [r7, #20]
   return(result);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e4      	bne.n	8006690 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f880 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066d8:	e063      	b.n	80067a2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00e      	beq.n	8006704 <HAL_UART_IRQHandler+0x5d8>
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80066fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fc17 	bl	8007f30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006702:	e051      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800670c:	2b00      	cmp	r3, #0
 800670e:	d014      	beq.n	800673a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800671c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800672c:	2b00      	cmp	r3, #0
 800672e:	d03a      	beq.n	80067a6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
    }
    return;
 8006738:	e035      	b.n	80067a6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_UART_IRQHandler+0x62e>
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fea0 	bl	8007498 <UART_EndTransmit_IT>
    return;
 8006758:	e026      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_UART_IRQHandler+0x64e>
 8006766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fbf0 	bl	8007f58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006778:	e016      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d010      	beq.n	80067a8 <HAL_UART_IRQHandler+0x67c>
 8006786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800678a:	2b00      	cmp	r3, #0
 800678c:	da0c      	bge.n	80067a8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 fbd8 	bl	8007f44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006794:	e008      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006796:	bf00      	nop
 8006798:	e006      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
    return;
 800679a:	bf00      	nop
 800679c:	e004      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
      return;
 800679e:	bf00      	nop
 80067a0:	e002      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
      return;
 80067a2:	bf00      	nop
 80067a4:	e000      	b.n	80067a8 <HAL_UART_IRQHandler+0x67c>
    return;
 80067a6:	bf00      	nop
  }
}
 80067a8:	37e8      	adds	r7, #232	@ 0xe8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f4:	b08c      	sub	sp, #48	@ 0x30
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	431a      	orrs	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	431a      	orrs	r2, r3
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	4313      	orrs	r3, r2
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4baa      	ldr	r3, [pc, #680]	@ (8006ac8 <UART_SetConfig+0x2d8>)
 8006820:	4013      	ands	r3, r2
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006828:	430b      	orrs	r3, r1
 800682a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a9f      	ldr	r2, [pc, #636]	@ (8006acc <UART_SetConfig+0x2dc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d004      	beq.n	800685c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006858:	4313      	orrs	r3, r2
 800685a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006866:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006870:	430b      	orrs	r3, r1
 8006872:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	f023 010f 	bic.w	r1, r3, #15
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a90      	ldr	r2, [pc, #576]	@ (8006ad0 <UART_SetConfig+0x2e0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d125      	bne.n	80068e0 <UART_SetConfig+0xf0>
 8006894:	4b8f      	ldr	r3, [pc, #572]	@ (8006ad4 <UART_SetConfig+0x2e4>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d81a      	bhi.n	80068d8 <UART_SetConfig+0xe8>
 80068a2:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <UART_SetConfig+0xb8>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068c9 	.word	0x080068c9
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068be:	e116      	b.n	8006aee <UART_SetConfig+0x2fe>
 80068c0:	2302      	movs	r3, #2
 80068c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c6:	e112      	b.n	8006aee <UART_SetConfig+0x2fe>
 80068c8:	2304      	movs	r3, #4
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ce:	e10e      	b.n	8006aee <UART_SetConfig+0x2fe>
 80068d0:	2308      	movs	r3, #8
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d6:	e10a      	b.n	8006aee <UART_SetConfig+0x2fe>
 80068d8:	2310      	movs	r3, #16
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e106      	b.n	8006aee <UART_SetConfig+0x2fe>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ad8 <UART_SetConfig+0x2e8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d138      	bne.n	800695c <UART_SetConfig+0x16c>
 80068ea:	4b7a      	ldr	r3, [pc, #488]	@ (8006ad4 <UART_SetConfig+0x2e4>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d82d      	bhi.n	8006954 <UART_SetConfig+0x164>
 80068f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006900 <UART_SetConfig+0x110>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006935 	.word	0x08006935
 8006904:	08006955 	.word	0x08006955
 8006908:	08006955 	.word	0x08006955
 800690c:	08006955 	.word	0x08006955
 8006910:	08006945 	.word	0x08006945
 8006914:	08006955 	.word	0x08006955
 8006918:	08006955 	.word	0x08006955
 800691c:	08006955 	.word	0x08006955
 8006920:	0800693d 	.word	0x0800693d
 8006924:	08006955 	.word	0x08006955
 8006928:	08006955 	.word	0x08006955
 800692c:	08006955 	.word	0x08006955
 8006930:	0800694d 	.word	0x0800694d
 8006934:	2300      	movs	r3, #0
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693a:	e0d8      	b.n	8006aee <UART_SetConfig+0x2fe>
 800693c:	2302      	movs	r3, #2
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006942:	e0d4      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694a:	e0d0      	b.n	8006aee <UART_SetConfig+0x2fe>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006952:	e0cc      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695a:	e0c8      	b.n	8006aee <UART_SetConfig+0x2fe>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a5e      	ldr	r2, [pc, #376]	@ (8006adc <UART_SetConfig+0x2ec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d125      	bne.n	80069b2 <UART_SetConfig+0x1c2>
 8006966:	4b5b      	ldr	r3, [pc, #364]	@ (8006ad4 <UART_SetConfig+0x2e4>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006970:	2b30      	cmp	r3, #48	@ 0x30
 8006972:	d016      	beq.n	80069a2 <UART_SetConfig+0x1b2>
 8006974:	2b30      	cmp	r3, #48	@ 0x30
 8006976:	d818      	bhi.n	80069aa <UART_SetConfig+0x1ba>
 8006978:	2b20      	cmp	r3, #32
 800697a:	d00a      	beq.n	8006992 <UART_SetConfig+0x1a2>
 800697c:	2b20      	cmp	r3, #32
 800697e:	d814      	bhi.n	80069aa <UART_SetConfig+0x1ba>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <UART_SetConfig+0x19a>
 8006984:	2b10      	cmp	r3, #16
 8006986:	d008      	beq.n	800699a <UART_SetConfig+0x1aa>
 8006988:	e00f      	b.n	80069aa <UART_SetConfig+0x1ba>
 800698a:	2300      	movs	r3, #0
 800698c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006990:	e0ad      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006992:	2302      	movs	r3, #2
 8006994:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006998:	e0a9      	b.n	8006aee <UART_SetConfig+0x2fe>
 800699a:	2304      	movs	r3, #4
 800699c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a0:	e0a5      	b.n	8006aee <UART_SetConfig+0x2fe>
 80069a2:	2308      	movs	r3, #8
 80069a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a8:	e0a1      	b.n	8006aee <UART_SetConfig+0x2fe>
 80069aa:	2310      	movs	r3, #16
 80069ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b0:	e09d      	b.n	8006aee <UART_SetConfig+0x2fe>
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a4a      	ldr	r2, [pc, #296]	@ (8006ae0 <UART_SetConfig+0x2f0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d125      	bne.n	8006a08 <UART_SetConfig+0x218>
 80069bc:	4b45      	ldr	r3, [pc, #276]	@ (8006ad4 <UART_SetConfig+0x2e4>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80069c8:	d016      	beq.n	80069f8 <UART_SetConfig+0x208>
 80069ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80069cc:	d818      	bhi.n	8006a00 <UART_SetConfig+0x210>
 80069ce:	2b80      	cmp	r3, #128	@ 0x80
 80069d0:	d00a      	beq.n	80069e8 <UART_SetConfig+0x1f8>
 80069d2:	2b80      	cmp	r3, #128	@ 0x80
 80069d4:	d814      	bhi.n	8006a00 <UART_SetConfig+0x210>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <UART_SetConfig+0x1f0>
 80069da:	2b40      	cmp	r3, #64	@ 0x40
 80069dc:	d008      	beq.n	80069f0 <UART_SetConfig+0x200>
 80069de:	e00f      	b.n	8006a00 <UART_SetConfig+0x210>
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e082      	b.n	8006aee <UART_SetConfig+0x2fe>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e07e      	b.n	8006aee <UART_SetConfig+0x2fe>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e07a      	b.n	8006aee <UART_SetConfig+0x2fe>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e076      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e072      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a35      	ldr	r2, [pc, #212]	@ (8006ae4 <UART_SetConfig+0x2f4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d12a      	bne.n	8006a68 <UART_SetConfig+0x278>
 8006a12:	4b30      	ldr	r3, [pc, #192]	@ (8006ad4 <UART_SetConfig+0x2e4>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a20:	d01a      	beq.n	8006a58 <UART_SetConfig+0x268>
 8006a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a26:	d81b      	bhi.n	8006a60 <UART_SetConfig+0x270>
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2c:	d00c      	beq.n	8006a48 <UART_SetConfig+0x258>
 8006a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a32:	d815      	bhi.n	8006a60 <UART_SetConfig+0x270>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <UART_SetConfig+0x250>
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3c:	d008      	beq.n	8006a50 <UART_SetConfig+0x260>
 8006a3e:	e00f      	b.n	8006a60 <UART_SetConfig+0x270>
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e052      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e04e      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e04a      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e046      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e042      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a17      	ldr	r2, [pc, #92]	@ (8006acc <UART_SetConfig+0x2dc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d13a      	bne.n	8006ae8 <UART_SetConfig+0x2f8>
 8006a72:	4b18      	ldr	r3, [pc, #96]	@ (8006ad4 <UART_SetConfig+0x2e4>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a80:	d01a      	beq.n	8006ab8 <UART_SetConfig+0x2c8>
 8006a82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a86:	d81b      	bhi.n	8006ac0 <UART_SetConfig+0x2d0>
 8006a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a8c:	d00c      	beq.n	8006aa8 <UART_SetConfig+0x2b8>
 8006a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a92:	d815      	bhi.n	8006ac0 <UART_SetConfig+0x2d0>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <UART_SetConfig+0x2b0>
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9c:	d008      	beq.n	8006ab0 <UART_SetConfig+0x2c0>
 8006a9e:	e00f      	b.n	8006ac0 <UART_SetConfig+0x2d0>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e022      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e01e      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	e01a      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006ab8:	2308      	movs	r3, #8
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e016      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	e012      	b.n	8006aee <UART_SetConfig+0x2fe>
 8006ac8:	cfff69f3 	.word	0xcfff69f3
 8006acc:	40008000 	.word	0x40008000
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	40004400 	.word	0x40004400
 8006adc:	40004800 	.word	0x40004800
 8006ae0:	40004c00 	.word	0x40004c00
 8006ae4:	40005000 	.word	0x40005000
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4aae      	ldr	r2, [pc, #696]	@ (8006dac <UART_SetConfig+0x5bc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	f040 8097 	bne.w	8006c28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006afa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d823      	bhi.n	8006b4a <UART_SetConfig+0x35a>
 8006b02:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <UART_SetConfig+0x318>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b4b 	.word	0x08006b4b
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b3b 	.word	0x08006b3b
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b4b 	.word	0x08006b4b
 8006b24:	08006b4b 	.word	0x08006b4b
 8006b28:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2c:	f7fd f8e2 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8006b30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b32:	e010      	b.n	8006b56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b9e      	ldr	r3, [pc, #632]	@ (8006db0 <UART_SetConfig+0x5c0>)
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b38:	e00d      	b.n	8006b56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fd f86d 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8006b3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8130 	beq.w	8006dbe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	4a94      	ldr	r2, [pc, #592]	@ (8006db4 <UART_SetConfig+0x5c4>)
 8006b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	4413      	add	r3, r2
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d305      	bcc.n	8006b8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b94:	e113      	b.n	8006dbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	2200      	movs	r2, #0
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	60fa      	str	r2, [r7, #12]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	4a84      	ldr	r2, [pc, #528]	@ (8006db4 <UART_SetConfig+0x5c4>)
 8006ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2200      	movs	r2, #0
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bb8:	f7f9 fb92 	bl	80002e0 <__aeabi_uldivmod>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	020b      	lsls	r3, r1, #8
 8006bce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bd2:	0202      	lsls	r2, r0, #8
 8006bd4:	6979      	ldr	r1, [r7, #20]
 8006bd6:	6849      	ldr	r1, [r1, #4]
 8006bd8:	0849      	lsrs	r1, r1, #1
 8006bda:	2000      	movs	r0, #0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	4605      	mov	r5, r0
 8006be0:	eb12 0804 	adds.w	r8, r2, r4
 8006be4:	eb43 0905 	adc.w	r9, r3, r5
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	469a      	mov	sl, r3
 8006bf0:	4693      	mov	fp, r2
 8006bf2:	4652      	mov	r2, sl
 8006bf4:	465b      	mov	r3, fp
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	f7f9 fb71 	bl	80002e0 <__aeabi_uldivmod>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4613      	mov	r3, r2
 8006c04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c0c:	d308      	bcc.n	8006c20 <UART_SetConfig+0x430>
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c14:	d204      	bcs.n	8006c20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6a3a      	ldr	r2, [r7, #32]
 8006c1c:	60da      	str	r2, [r3, #12]
 8006c1e:	e0ce      	b.n	8006dbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c26:	e0ca      	b.n	8006dbe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c30:	d166      	bne.n	8006d00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006c32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d827      	bhi.n	8006c8a <UART_SetConfig+0x49a>
 8006c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <UART_SetConfig+0x450>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c65 	.word	0x08006c65
 8006c44:	08006c6d 	.word	0x08006c6d
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	08006c8b 	.word	0x08006c8b
 8006c50:	08006c7b 	.word	0x08006c7b
 8006c54:	08006c8b 	.word	0x08006c8b
 8006c58:	08006c8b 	.word	0x08006c8b
 8006c5c:	08006c8b 	.word	0x08006c8b
 8006c60:	08006c83 	.word	0x08006c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c64:	f7fd f846 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8006c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c6a:	e014      	b.n	8006c96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c6c:	f7fd f858 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 8006c70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c72:	e010      	b.n	8006c96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c74:	4b4e      	ldr	r3, [pc, #312]	@ (8006db0 <UART_SetConfig+0x5c0>)
 8006c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c78:	e00d      	b.n	8006c96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c7a:	f7fc ffcd 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8006c7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c80:	e009      	b.n	8006c96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c88:	e005      	b.n	8006c96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8090 	beq.w	8006dbe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	4a44      	ldr	r2, [pc, #272]	@ (8006db4 <UART_SetConfig+0x5c4>)
 8006ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb0:	005a      	lsls	r2, r3, #1
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	441a      	add	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2b0f      	cmp	r3, #15
 8006cc8:	d916      	bls.n	8006cf8 <UART_SetConfig+0x508>
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd0:	d212      	bcs.n	8006cf8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f023 030f 	bic.w	r3, r3, #15
 8006cda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	085b      	lsrs	r3, r3, #1
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	8bfb      	ldrh	r3, [r7, #30]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	8bfa      	ldrh	r2, [r7, #30]
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	e062      	b.n	8006dbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cfe:	e05e      	b.n	8006dbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d828      	bhi.n	8006d5a <UART_SetConfig+0x56a>
 8006d08:	a201      	add	r2, pc, #4	@ (adr r2, 8006d10 <UART_SetConfig+0x520>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	08006d5b 	.word	0x08006d5b
 8006d20:	08006d4b 	.word	0x08006d4b
 8006d24:	08006d5b 	.word	0x08006d5b
 8006d28:	08006d5b 	.word	0x08006d5b
 8006d2c:	08006d5b 	.word	0x08006d5b
 8006d30:	08006d53 	.word	0x08006d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d34:	f7fc ffde 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8006d38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d3a:	e014      	b.n	8006d66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d3c:	f7fc fff0 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d42:	e010      	b.n	8006d66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d44:	4b1a      	ldr	r3, [pc, #104]	@ (8006db0 <UART_SetConfig+0x5c0>)
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d48:	e00d      	b.n	8006d66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4a:	f7fc ff65 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8006d4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d50:	e009      	b.n	8006d66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d58:	e005      	b.n	8006d66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d64:	bf00      	nop
    }

    if (pclk != 0U)
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d028      	beq.n	8006dbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	4a10      	ldr	r2, [pc, #64]	@ (8006db4 <UART_SetConfig+0x5c4>)
 8006d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	441a      	add	r2, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	2b0f      	cmp	r3, #15
 8006d94:	d910      	bls.n	8006db8 <UART_SetConfig+0x5c8>
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9c:	d20c      	bcs.n	8006db8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60da      	str	r2, [r3, #12]
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0x5ce>
 8006daa:	bf00      	nop
 8006dac:	40008000 	.word	0x40008000
 8006db0:	00f42400 	.word	0x00f42400
 8006db4:	08009370 	.word	0x08009370
      }
      else
      {
        ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006dda:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3730      	adds	r7, #48	@ 0x30
 8006de2:	46bd      	mov	sp, r7
 8006de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01a      	beq.n	8006efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee6:	d10a      	bne.n	8006efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b098      	sub	sp, #96	@ 0x60
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f3c:	f7fa fcde 	bl	80018fc <HAL_GetTick>
 8006f40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d12f      	bne.n	8006fb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f88e 	bl	8007080 <UART_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d022      	beq.n	8006fb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e063      	b.n	8007078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d149      	bne.n	8007052 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f857 	bl	8007080 <UART_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d03c      	beq.n	8007052 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e6      	bne.n	8006fd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	60fb      	str	r3, [r7, #12]
   return(result);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3308      	adds	r3, #8
 8007028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800702a:	61fa      	str	r2, [r7, #28]
 800702c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	69b9      	ldr	r1, [r7, #24]
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	617b      	str	r3, [r7, #20]
   return(result);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e5      	bne.n	800700a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e012      	b.n	8007078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3758      	adds	r7, #88	@ 0x58
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	4613      	mov	r3, r2
 800708e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007090:	e04f      	b.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d04b      	beq.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709a:	f7fa fc2f 	bl	80018fc <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d302      	bcc.n	80070b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e04e      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d037      	beq.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b80      	cmp	r3, #128	@ 0x80
 80070c6:	d034      	beq.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b40      	cmp	r3, #64	@ 0x40
 80070cc:	d031      	beq.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d110      	bne.n	80070fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2208      	movs	r2, #8
 80070e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f95b 	bl	80073a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2208      	movs	r2, #8
 80070ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e029      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800710c:	d111      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f941 	bl	80073a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2220      	movs	r2, #32
 8007122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e00f      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4013      	ands	r3, r2
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	bf0c      	ite	eq
 8007142:	2301      	moveq	r3, #1
 8007144:	2300      	movne	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	429a      	cmp	r2, r3
 800714e:	d0a0      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800715c:	b480      	push	{r7}
 800715e:	b0a3      	sub	sp, #140	@ 0x8c
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718e:	d10e      	bne.n	80071ae <UART_Start_Receive_IT+0x52>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <UART_Start_Receive_IT+0x48>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800719e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071a2:	e02d      	b.n	8007200 <UART_Start_Receive_IT+0xa4>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	22ff      	movs	r2, #255	@ 0xff
 80071a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071ac:	e028      	b.n	8007200 <UART_Start_Receive_IT+0xa4>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10d      	bne.n	80071d2 <UART_Start_Receive_IT+0x76>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <UART_Start_Receive_IT+0x6c>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	22ff      	movs	r2, #255	@ 0xff
 80071c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071c6:	e01b      	b.n	8007200 <UART_Start_Receive_IT+0xa4>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	227f      	movs	r2, #127	@ 0x7f
 80071cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071d0:	e016      	b.n	8007200 <UART_Start_Receive_IT+0xa4>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071da:	d10d      	bne.n	80071f8 <UART_Start_Receive_IT+0x9c>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <UART_Start_Receive_IT+0x92>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	227f      	movs	r2, #127	@ 0x7f
 80071e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071ec:	e008      	b.n	8007200 <UART_Start_Receive_IT+0xa4>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	223f      	movs	r2, #63	@ 0x3f
 80071f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071f6:	e003      	b.n	8007200 <UART_Start_Receive_IT+0xa4>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2222      	movs	r2, #34	@ 0x22
 800720c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007234:	673a      	str	r2, [r7, #112]	@ 0x70
 8007236:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800723a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007242:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e3      	bne.n	8007210 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800724c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007250:	d14f      	bne.n	80072f2 <UART_Start_Receive_IT+0x196>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	429a      	cmp	r2, r3
 800725c:	d349      	bcc.n	80072f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007266:	d107      	bne.n	8007278 <UART_Start_Receive_IT+0x11c>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d103      	bne.n	8007278 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a47      	ldr	r2, [pc, #284]	@ (8007390 <UART_Start_Receive_IT+0x234>)
 8007274:	675a      	str	r2, [r3, #116]	@ 0x74
 8007276:	e002      	b.n	800727e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4a46      	ldr	r2, [pc, #280]	@ (8007394 <UART_Start_Receive_IT+0x238>)
 800727c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d01a      	beq.n	80072bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800729a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072aa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80072ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80072b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e4      	bne.n	8007286 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3308      	adds	r3, #8
 80072da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80072dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80072de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e5      	bne.n	80072bc <UART_Start_Receive_IT+0x160>
 80072f0:	e046      	b.n	8007380 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072fa:	d107      	bne.n	800730c <UART_Start_Receive_IT+0x1b0>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d103      	bne.n	800730c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a24      	ldr	r2, [pc, #144]	@ (8007398 <UART_Start_Receive_IT+0x23c>)
 8007308:	675a      	str	r2, [r3, #116]	@ 0x74
 800730a:	e002      	b.n	8007312 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4a23      	ldr	r2, [pc, #140]	@ (800739c <UART_Start_Receive_IT+0x240>)
 8007310:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d019      	beq.n	800734e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800732e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
 800733a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800733e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_Start_Receive_IT+0x1be>
 800734c:	e018      	b.n	8007380 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f043 0320 	orr.w	r3, r3, #32
 8007362:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	69f9      	ldr	r1, [r7, #28]
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	61bb      	str	r3, [r7, #24]
   return(result);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e6      	bne.n	800734e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	378c      	adds	r7, #140	@ 0x8c
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	08007bc5 	.word	0x08007bc5
 8007394:	08007861 	.word	0x08007861
 8007398:	080076a9 	.word	0x080076a9
 800739c:	080074f1 	.word	0x080074f1

080073a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b095      	sub	sp, #84	@ 0x54
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80073c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e6      	bne.n	80073a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e3      	bne.n	80073da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d118      	bne.n	800744c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	60bb      	str	r3, [r7, #8]
   return(result);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0310 	bic.w	r3, r3, #16
 800742e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6979      	ldr	r1, [r7, #20]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	613b      	str	r3, [r7, #16]
   return(result);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007460:	bf00      	nop
 8007462:	3754      	adds	r7, #84	@ 0x54
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff f99a 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6979      	ldr	r1, [r7, #20]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	613b      	str	r3, [r7, #16]
   return(result);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff f965 	bl	80067b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e6:	bf00      	nop
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b09c      	sub	sp, #112	@ 0x70
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007508:	2b22      	cmp	r3, #34	@ 0x22
 800750a:	f040 80be 	bne.w	800768a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007518:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800751c:	b2d9      	uxtb	r1, r3
 800751e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007522:	b2da      	uxtb	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007528:	400a      	ands	r2, r1
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	f040 80a1 	bne.w	800769a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800756c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007576:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007578:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800757c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e6      	bne.n	8007558 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80075ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e5      	bne.n	800758a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a33      	ldr	r2, [pc, #204]	@ (80076a4 <UART_RxISR_8BIT+0x1b4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d01f      	beq.n	800761c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	623b      	str	r3, [r7, #32]
   return(result);
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007608:	633b      	str	r3, [r7, #48]	@ 0x30
 800760a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800760e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d12e      	bne.n	8007682 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	60fb      	str	r3, [r7, #12]
   return(result);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0310 	bic.w	r3, r3, #16
 800763e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	69b9      	ldr	r1, [r7, #24]
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	617b      	str	r3, [r7, #20]
   return(result);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b10      	cmp	r3, #16
 8007668:	d103      	bne.n	8007672 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2210      	movs	r2, #16
 8007670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff f8ac 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007680:	e00b      	b.n	800769a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7f9 fbc2 	bl	8000e0c <HAL_UART_RxCpltCallback>
}
 8007688:	e007      	b.n	800769a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0208 	orr.w	r2, r2, #8
 8007698:	619a      	str	r2, [r3, #24]
}
 800769a:	bf00      	nop
 800769c:	3770      	adds	r7, #112	@ 0x70
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40008000 	.word	0x40008000

080076a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b09c      	sub	sp, #112	@ 0x70
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80076b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076c0:	2b22      	cmp	r3, #34	@ 0x22
 80076c2:	f040 80be 	bne.w	8007842 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80076d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80076da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80076de:	4013      	ands	r3, r2
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ea:	1c9a      	adds	r2, r3, #2
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 80a1 	bne.w	8007852 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800771e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007724:	667b      	str	r3, [r7, #100]	@ 0x64
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007730:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007734:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800773c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	663b      	str	r3, [r7, #96]	@ 0x60
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007762:	643a      	str	r2, [r7, #64]	@ 0x40
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007768:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a33      	ldr	r2, [pc, #204]	@ (800785c <UART_RxISR_16BIT+0x1b4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d01f      	beq.n	80077d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d018      	beq.n	80077d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e6      	bne.n	80077a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d12e      	bne.n	800783a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f023 0310 	bic.w	r3, r3, #16
 80077f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	613b      	str	r3, [r7, #16]
   return(result);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b10      	cmp	r3, #16
 8007820:	d103      	bne.n	800782a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2210      	movs	r2, #16
 8007828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fe ffd0 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007838:	e00b      	b.n	8007852 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7f9 fae6 	bl	8000e0c <HAL_UART_RxCpltCallback>
}
 8007840:	e007      	b.n	8007852 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0208 	orr.w	r2, r2, #8
 8007850:	619a      	str	r2, [r3, #24]
}
 8007852:	bf00      	nop
 8007854:	3770      	adds	r7, #112	@ 0x70
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40008000 	.word	0x40008000

08007860 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b0ac      	sub	sp, #176	@ 0xb0
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800786e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007896:	2b22      	cmp	r3, #34	@ 0x22
 8007898:	f040 8183 	bne.w	8007ba2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80078a2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078a6:	e126      	b.n	8007af6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80078b6:	b2d9      	uxtb	r1, r3
 80078b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c2:	400a      	ands	r2, r1
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d053      	beq.n	80079a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d011      	beq.n	800792a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800790a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2201      	movs	r2, #1
 8007918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007920:	f043 0201 	orr.w	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800792a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d011      	beq.n	800795a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2202      	movs	r2, #2
 8007948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007950:	f043 0204 	orr.w	r2, r3, #4
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800795a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800795e:	f003 0304 	and.w	r3, r3, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	d011      	beq.n	800798a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2204      	movs	r2, #4
 8007978:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007980:	f043 0202 	orr.w	r2, r3, #2
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007990:	2b00      	cmp	r3, #0
 8007992:	d006      	beq.n	80079a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7fe ff15 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 80a3 	bne.w	8007af6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80079be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079d4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80079d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80079e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e4      	bne.n	80079b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80079f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a0e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007a10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e1      	bne.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a60      	ldr	r2, [pc, #384]	@ (8007bbc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d021      	beq.n	8007a84 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01a      	beq.n	8007a84 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a70:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a72:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e4      	bne.n	8007a4e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d130      	bne.n	8007aee <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	f023 0310 	bic.w	r3, r3, #16
 8007aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ab6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e4      	bne.n	8007a92 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f003 0310 	and.w	r3, r3, #16
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	d103      	bne.n	8007ade <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2210      	movs	r2, #16
 8007adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fe fe76 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007aec:	e00e      	b.n	8007b0c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7f9 f98c 	bl	8000e0c <HAL_UART_RxCpltCallback>
        break;
 8007af4:	e00a      	b.n	8007b0c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007af6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d006      	beq.n	8007b0c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f47f aece 	bne.w	80078a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b12:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d049      	beq.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b24:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d242      	bcs.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e3      	bne.n	8007b2c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a16      	ldr	r2, [pc, #88]	@ (8007bc0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007b68:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f043 0320 	orr.w	r3, r3, #32
 8007b7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6979      	ldr	r1, [r7, #20]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	613b      	str	r3, [r7, #16]
   return(result);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e4      	bne.n	8007b6a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba0:	e007      	b.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0208 	orr.w	r2, r2, #8
 8007bb0:	619a      	str	r2, [r3, #24]
}
 8007bb2:	bf00      	nop
 8007bb4:	37b0      	adds	r7, #176	@ 0xb0
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	40008000 	.word	0x40008000
 8007bc0:	080074f1 	.word	0x080074f1

08007bc4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b0ae      	sub	sp, #184	@ 0xb8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007bd2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bfa:	2b22      	cmp	r3, #34	@ 0x22
 8007bfc:	f040 8187 	bne.w	8007f0e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c06:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c0a:	e12a      	b.n	8007e62 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c12:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007c1e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007c22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007c26:	4013      	ands	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c34:	1c9a      	adds	r2, r3, #2
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d053      	beq.n	8007d0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c88:	f043 0201 	orr.w	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d011      	beq.n	8007cc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb8:	f043 0204 	orr.w	r2, r3, #4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d011      	beq.n	8007cf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce8:	f043 0202 	orr.w	r2, r3, #2
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe fd61 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f040 80a5 	bne.w	8007e62 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e2      	bne.n	8007d18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007d7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e1      	bne.n	8007d52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a60      	ldr	r2, [pc, #384]	@ (8007f28 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d021      	beq.n	8007df0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d01a      	beq.n	8007df0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007dde:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e4      	bne.n	8007dba <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d130      	bne.n	8007e5a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e0e:	f023 0310 	bic.w	r3, r3, #16
 8007e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e4      	bne.n	8007dfe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f003 0310 	and.w	r3, r3, #16
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	d103      	bne.n	8007e4a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2210      	movs	r2, #16
 8007e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fe fcc0 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007e58:	e00e      	b.n	8007e78 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7f8 ffd6 	bl	8000e0c <HAL_UART_RxCpltCallback>
        break;
 8007e60:	e00a      	b.n	8007e78 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e62:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d006      	beq.n	8007e78 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f47f aeca 	bne.w	8007c0c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e7e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d049      	beq.n	8007f1e <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e90:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d242      	bcs.n	8007f1e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ebc:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e3      	bne.n	8007e98 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a16      	ldr	r2, [pc, #88]	@ (8007f2c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007ed4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f043 0320 	orr.w	r3, r3, #32
 8007eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ef8:	61fb      	str	r3, [r7, #28]
 8007efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	69b9      	ldr	r1, [r7, #24]
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	617b      	str	r3, [r7, #20]
   return(result);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e4      	bne.n	8007ed6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f0c:	e007      	b.n	8007f1e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0208 	orr.w	r2, r2, #8
 8007f1c:	619a      	str	r2, [r3, #24]
}
 8007f1e:	bf00      	nop
 8007f20:	37b8      	adds	r7, #184	@ 0xb8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	40008000 	.word	0x40008000
 8007f2c:	080076a9 	.word	0x080076a9

08007f30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e027      	b.n	8007fd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2224      	movs	r2, #36	@ 0x24
 8007f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0201 	bic.w	r2, r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e02d      	b.n	8008052 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2224      	movs	r2, #36	@ 0x24
 8008002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f850 	bl	80080d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800806e:	2302      	movs	r3, #2
 8008070:	e02d      	b.n	80080ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2224      	movs	r2, #36	@ 0x24
 800807e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f812 	bl	80080d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d108      	bne.n	80080fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080f8:	e031      	b.n	800815e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080fa:	2308      	movs	r3, #8
 80080fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080fe:	2308      	movs	r3, #8
 8008100:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	0e5b      	lsrs	r3, r3, #25
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	0f5b      	lsrs	r3, r3, #29
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	7b3a      	ldrb	r2, [r7, #12]
 8008126:	4911      	ldr	r1, [pc, #68]	@ (800816c <UARTEx_SetNbDataToProcess+0x94>)
 8008128:	5c8a      	ldrb	r2, [r1, r2]
 800812a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800812e:	7b3a      	ldrb	r2, [r7, #12]
 8008130:	490f      	ldr	r1, [pc, #60]	@ (8008170 <UARTEx_SetNbDataToProcess+0x98>)
 8008132:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008134:	fb93 f3f2 	sdiv	r3, r3, r2
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	7b7a      	ldrb	r2, [r7, #13]
 8008144:	4909      	ldr	r1, [pc, #36]	@ (800816c <UARTEx_SetNbDataToProcess+0x94>)
 8008146:	5c8a      	ldrb	r2, [r1, r2]
 8008148:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800814c:	7b7a      	ldrb	r2, [r7, #13]
 800814e:	4908      	ldr	r1, [pc, #32]	@ (8008170 <UARTEx_SetNbDataToProcess+0x98>)
 8008150:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008152:	fb93 f3f2 	sdiv	r3, r3, r2
 8008156:	b29a      	uxth	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800815e:	bf00      	nop
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	08009388 	.word	0x08009388
 8008170:	08009390 	.word	0x08009390

08008174 <std>:
 8008174:	2300      	movs	r3, #0
 8008176:	b510      	push	{r4, lr}
 8008178:	4604      	mov	r4, r0
 800817a:	e9c0 3300 	strd	r3, r3, [r0]
 800817e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008182:	6083      	str	r3, [r0, #8]
 8008184:	8181      	strh	r1, [r0, #12]
 8008186:	6643      	str	r3, [r0, #100]	@ 0x64
 8008188:	81c2      	strh	r2, [r0, #14]
 800818a:	6183      	str	r3, [r0, #24]
 800818c:	4619      	mov	r1, r3
 800818e:	2208      	movs	r2, #8
 8008190:	305c      	adds	r0, #92	@ 0x5c
 8008192:	f000 f8f4 	bl	800837e <memset>
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <std+0x58>)
 8008198:	6263      	str	r3, [r4, #36]	@ 0x24
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <std+0x5c>)
 800819c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <std+0x60>)
 80081a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <std+0x64>)
 80081a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80081a6:	4b0d      	ldr	r3, [pc, #52]	@ (80081dc <std+0x68>)
 80081a8:	6224      	str	r4, [r4, #32]
 80081aa:	429c      	cmp	r4, r3
 80081ac:	d006      	beq.n	80081bc <std+0x48>
 80081ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081b2:	4294      	cmp	r4, r2
 80081b4:	d002      	beq.n	80081bc <std+0x48>
 80081b6:	33d0      	adds	r3, #208	@ 0xd0
 80081b8:	429c      	cmp	r4, r3
 80081ba:	d105      	bne.n	80081c8 <std+0x54>
 80081bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c4:	f000 b9b0 	b.w	8008528 <__retarget_lock_init_recursive>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	bf00      	nop
 80081cc:	080082f9 	.word	0x080082f9
 80081d0:	0800831b 	.word	0x0800831b
 80081d4:	08008353 	.word	0x08008353
 80081d8:	08008377 	.word	0x08008377
 80081dc:	20000400 	.word	0x20000400

080081e0 <stdio_exit_handler>:
 80081e0:	4a02      	ldr	r2, [pc, #8]	@ (80081ec <stdio_exit_handler+0xc>)
 80081e2:	4903      	ldr	r1, [pc, #12]	@ (80081f0 <stdio_exit_handler+0x10>)
 80081e4:	4803      	ldr	r0, [pc, #12]	@ (80081f4 <stdio_exit_handler+0x14>)
 80081e6:	f000 b869 	b.w	80082bc <_fwalk_sglue>
 80081ea:	bf00      	nop
 80081ec:	2000000c 	.word	0x2000000c
 80081f0:	08008875 	.word	0x08008875
 80081f4:	2000001c 	.word	0x2000001c

080081f8 <cleanup_stdio>:
 80081f8:	6841      	ldr	r1, [r0, #4]
 80081fa:	4b0c      	ldr	r3, [pc, #48]	@ (800822c <cleanup_stdio+0x34>)
 80081fc:	4299      	cmp	r1, r3
 80081fe:	b510      	push	{r4, lr}
 8008200:	4604      	mov	r4, r0
 8008202:	d001      	beq.n	8008208 <cleanup_stdio+0x10>
 8008204:	f000 fb36 	bl	8008874 <_fflush_r>
 8008208:	68a1      	ldr	r1, [r4, #8]
 800820a:	4b09      	ldr	r3, [pc, #36]	@ (8008230 <cleanup_stdio+0x38>)
 800820c:	4299      	cmp	r1, r3
 800820e:	d002      	beq.n	8008216 <cleanup_stdio+0x1e>
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fb2f 	bl	8008874 <_fflush_r>
 8008216:	68e1      	ldr	r1, [r4, #12]
 8008218:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <cleanup_stdio+0x3c>)
 800821a:	4299      	cmp	r1, r3
 800821c:	d004      	beq.n	8008228 <cleanup_stdio+0x30>
 800821e:	4620      	mov	r0, r4
 8008220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008224:	f000 bb26 	b.w	8008874 <_fflush_r>
 8008228:	bd10      	pop	{r4, pc}
 800822a:	bf00      	nop
 800822c:	20000400 	.word	0x20000400
 8008230:	20000468 	.word	0x20000468
 8008234:	200004d0 	.word	0x200004d0

08008238 <global_stdio_init.part.0>:
 8008238:	b510      	push	{r4, lr}
 800823a:	4b0b      	ldr	r3, [pc, #44]	@ (8008268 <global_stdio_init.part.0+0x30>)
 800823c:	4c0b      	ldr	r4, [pc, #44]	@ (800826c <global_stdio_init.part.0+0x34>)
 800823e:	4a0c      	ldr	r2, [pc, #48]	@ (8008270 <global_stdio_init.part.0+0x38>)
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	4620      	mov	r0, r4
 8008244:	2200      	movs	r2, #0
 8008246:	2104      	movs	r1, #4
 8008248:	f7ff ff94 	bl	8008174 <std>
 800824c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008250:	2201      	movs	r2, #1
 8008252:	2109      	movs	r1, #9
 8008254:	f7ff ff8e 	bl	8008174 <std>
 8008258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800825c:	2202      	movs	r2, #2
 800825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008262:	2112      	movs	r1, #18
 8008264:	f7ff bf86 	b.w	8008174 <std>
 8008268:	20000538 	.word	0x20000538
 800826c:	20000400 	.word	0x20000400
 8008270:	080081e1 	.word	0x080081e1

08008274 <__sfp_lock_acquire>:
 8008274:	4801      	ldr	r0, [pc, #4]	@ (800827c <__sfp_lock_acquire+0x8>)
 8008276:	f000 b958 	b.w	800852a <__retarget_lock_acquire_recursive>
 800827a:	bf00      	nop
 800827c:	20000541 	.word	0x20000541

08008280 <__sfp_lock_release>:
 8008280:	4801      	ldr	r0, [pc, #4]	@ (8008288 <__sfp_lock_release+0x8>)
 8008282:	f000 b953 	b.w	800852c <__retarget_lock_release_recursive>
 8008286:	bf00      	nop
 8008288:	20000541 	.word	0x20000541

0800828c <__sinit>:
 800828c:	b510      	push	{r4, lr}
 800828e:	4604      	mov	r4, r0
 8008290:	f7ff fff0 	bl	8008274 <__sfp_lock_acquire>
 8008294:	6a23      	ldr	r3, [r4, #32]
 8008296:	b11b      	cbz	r3, 80082a0 <__sinit+0x14>
 8008298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800829c:	f7ff bff0 	b.w	8008280 <__sfp_lock_release>
 80082a0:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <__sinit+0x28>)
 80082a2:	6223      	str	r3, [r4, #32]
 80082a4:	4b04      	ldr	r3, [pc, #16]	@ (80082b8 <__sinit+0x2c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f5      	bne.n	8008298 <__sinit+0xc>
 80082ac:	f7ff ffc4 	bl	8008238 <global_stdio_init.part.0>
 80082b0:	e7f2      	b.n	8008298 <__sinit+0xc>
 80082b2:	bf00      	nop
 80082b4:	080081f9 	.word	0x080081f9
 80082b8:	20000538 	.word	0x20000538

080082bc <_fwalk_sglue>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	4607      	mov	r7, r0
 80082c2:	4688      	mov	r8, r1
 80082c4:	4614      	mov	r4, r2
 80082c6:	2600      	movs	r6, #0
 80082c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082cc:	f1b9 0901 	subs.w	r9, r9, #1
 80082d0:	d505      	bpl.n	80082de <_fwalk_sglue+0x22>
 80082d2:	6824      	ldr	r4, [r4, #0]
 80082d4:	2c00      	cmp	r4, #0
 80082d6:	d1f7      	bne.n	80082c8 <_fwalk_sglue+0xc>
 80082d8:	4630      	mov	r0, r6
 80082da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d907      	bls.n	80082f4 <_fwalk_sglue+0x38>
 80082e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082e8:	3301      	adds	r3, #1
 80082ea:	d003      	beq.n	80082f4 <_fwalk_sglue+0x38>
 80082ec:	4629      	mov	r1, r5
 80082ee:	4638      	mov	r0, r7
 80082f0:	47c0      	blx	r8
 80082f2:	4306      	orrs	r6, r0
 80082f4:	3568      	adds	r5, #104	@ 0x68
 80082f6:	e7e9      	b.n	80082cc <_fwalk_sglue+0x10>

080082f8 <__sread>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	460c      	mov	r4, r1
 80082fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008300:	f000 f8c4 	bl	800848c <_read_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	bfab      	itete	ge
 8008308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800830a:	89a3      	ldrhlt	r3, [r4, #12]
 800830c:	181b      	addge	r3, r3, r0
 800830e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008312:	bfac      	ite	ge
 8008314:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008316:	81a3      	strhlt	r3, [r4, #12]
 8008318:	bd10      	pop	{r4, pc}

0800831a <__swrite>:
 800831a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831e:	461f      	mov	r7, r3
 8008320:	898b      	ldrh	r3, [r1, #12]
 8008322:	05db      	lsls	r3, r3, #23
 8008324:	4605      	mov	r5, r0
 8008326:	460c      	mov	r4, r1
 8008328:	4616      	mov	r6, r2
 800832a:	d505      	bpl.n	8008338 <__swrite+0x1e>
 800832c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008330:	2302      	movs	r3, #2
 8008332:	2200      	movs	r2, #0
 8008334:	f000 f898 	bl	8008468 <_lseek_r>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800833e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	4632      	mov	r2, r6
 8008346:	463b      	mov	r3, r7
 8008348:	4628      	mov	r0, r5
 800834a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800834e:	f000 b8af 	b.w	80084b0 <_write_r>

08008352 <__sseek>:
 8008352:	b510      	push	{r4, lr}
 8008354:	460c      	mov	r4, r1
 8008356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835a:	f000 f885 	bl	8008468 <_lseek_r>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	bf15      	itete	ne
 8008364:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800836a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800836e:	81a3      	strheq	r3, [r4, #12]
 8008370:	bf18      	it	ne
 8008372:	81a3      	strhne	r3, [r4, #12]
 8008374:	bd10      	pop	{r4, pc}

08008376 <__sclose>:
 8008376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837a:	f000 b865 	b.w	8008448 <_close_r>

0800837e <memset>:
 800837e:	4402      	add	r2, r0
 8008380:	4603      	mov	r3, r0
 8008382:	4293      	cmp	r3, r2
 8008384:	d100      	bne.n	8008388 <memset+0xa>
 8008386:	4770      	bx	lr
 8008388:	f803 1b01 	strb.w	r1, [r3], #1
 800838c:	e7f9      	b.n	8008382 <memset+0x4>
	...

08008390 <strtok>:
 8008390:	4b16      	ldr	r3, [pc, #88]	@ (80083ec <strtok+0x5c>)
 8008392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	681f      	ldr	r7, [r3, #0]
 8008398:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800839a:	4605      	mov	r5, r0
 800839c:	460e      	mov	r6, r1
 800839e:	b9ec      	cbnz	r4, 80083dc <strtok+0x4c>
 80083a0:	2050      	movs	r0, #80	@ 0x50
 80083a2:	f000 f92d 	bl	8008600 <malloc>
 80083a6:	4602      	mov	r2, r0
 80083a8:	6478      	str	r0, [r7, #68]	@ 0x44
 80083aa:	b920      	cbnz	r0, 80083b6 <strtok+0x26>
 80083ac:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <strtok+0x60>)
 80083ae:	4811      	ldr	r0, [pc, #68]	@ (80083f4 <strtok+0x64>)
 80083b0:	215b      	movs	r1, #91	@ 0x5b
 80083b2:	f000 f8bd 	bl	8008530 <__assert_func>
 80083b6:	e9c0 4400 	strd	r4, r4, [r0]
 80083ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80083be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80083c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80083c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80083ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80083ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80083d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80083d6:	6184      	str	r4, [r0, #24]
 80083d8:	7704      	strb	r4, [r0, #28]
 80083da:	6244      	str	r4, [r0, #36]	@ 0x24
 80083dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	2301      	movs	r3, #1
 80083e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e8:	f000 b806 	b.w	80083f8 <__strtok_r>
 80083ec:	20000018 	.word	0x20000018
 80083f0:	08009398 	.word	0x08009398
 80083f4:	080093af 	.word	0x080093af

080083f8 <__strtok_r>:
 80083f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083fa:	4604      	mov	r4, r0
 80083fc:	b908      	cbnz	r0, 8008402 <__strtok_r+0xa>
 80083fe:	6814      	ldr	r4, [r2, #0]
 8008400:	b144      	cbz	r4, 8008414 <__strtok_r+0x1c>
 8008402:	4620      	mov	r0, r4
 8008404:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008408:	460f      	mov	r7, r1
 800840a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800840e:	b91e      	cbnz	r6, 8008418 <__strtok_r+0x20>
 8008410:	b965      	cbnz	r5, 800842c <__strtok_r+0x34>
 8008412:	6015      	str	r5, [r2, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	e005      	b.n	8008424 <__strtok_r+0x2c>
 8008418:	42b5      	cmp	r5, r6
 800841a:	d1f6      	bne.n	800840a <__strtok_r+0x12>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1f0      	bne.n	8008402 <__strtok_r+0xa>
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	7003      	strb	r3, [r0, #0]
 8008424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008426:	461c      	mov	r4, r3
 8008428:	e00c      	b.n	8008444 <__strtok_r+0x4c>
 800842a:	b915      	cbnz	r5, 8008432 <__strtok_r+0x3a>
 800842c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008430:	460e      	mov	r6, r1
 8008432:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008436:	42ab      	cmp	r3, r5
 8008438:	d1f7      	bne.n	800842a <__strtok_r+0x32>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f3      	beq.n	8008426 <__strtok_r+0x2e>
 800843e:	2300      	movs	r3, #0
 8008440:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008444:	6014      	str	r4, [r2, #0]
 8008446:	e7ed      	b.n	8008424 <__strtok_r+0x2c>

08008448 <_close_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d06      	ldr	r5, [pc, #24]	@ (8008464 <_close_r+0x1c>)
 800844c:	2300      	movs	r3, #0
 800844e:	4604      	mov	r4, r0
 8008450:	4608      	mov	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7f8 fe40 	bl	80010d8 <_close>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_close_r+0x1a>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_close_r+0x1a>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	2000053c 	.word	0x2000053c

08008468 <_lseek_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	@ (8008488 <_lseek_r+0x20>)
 800846c:	4604      	mov	r4, r0
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	2200      	movs	r2, #0
 8008474:	602a      	str	r2, [r5, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	f7f8 fe55 	bl	8001126 <_lseek>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_lseek_r+0x1e>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_lseek_r+0x1e>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	2000053c 	.word	0x2000053c

0800848c <_read_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	@ (80084ac <_read_r+0x20>)
 8008490:	4604      	mov	r4, r0
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	2200      	movs	r2, #0
 8008498:	602a      	str	r2, [r5, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f7f8 fde3 	bl	8001066 <_read>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_read_r+0x1e>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_read_r+0x1e>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	2000053c 	.word	0x2000053c

080084b0 <_write_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	@ (80084d0 <_write_r+0x20>)
 80084b4:	4604      	mov	r4, r0
 80084b6:	4608      	mov	r0, r1
 80084b8:	4611      	mov	r1, r2
 80084ba:	2200      	movs	r2, #0
 80084bc:	602a      	str	r2, [r5, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	f7f8 fdee 	bl	80010a0 <_write>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_write_r+0x1e>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_write_r+0x1e>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	2000053c 	.word	0x2000053c

080084d4 <__errno>:
 80084d4:	4b01      	ldr	r3, [pc, #4]	@ (80084dc <__errno+0x8>)
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	20000018 	.word	0x20000018

080084e0 <__libc_init_array>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008518 <__libc_init_array+0x38>)
 80084e4:	4c0d      	ldr	r4, [pc, #52]	@ (800851c <__libc_init_array+0x3c>)
 80084e6:	1b64      	subs	r4, r4, r5
 80084e8:	10a4      	asrs	r4, r4, #2
 80084ea:	2600      	movs	r6, #0
 80084ec:	42a6      	cmp	r6, r4
 80084ee:	d109      	bne.n	8008504 <__libc_init_array+0x24>
 80084f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008520 <__libc_init_array+0x40>)
 80084f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008524 <__libc_init_array+0x44>)
 80084f4:	f000 fe3a 	bl	800916c <_init>
 80084f8:	1b64      	subs	r4, r4, r5
 80084fa:	10a4      	asrs	r4, r4, #2
 80084fc:	2600      	movs	r6, #0
 80084fe:	42a6      	cmp	r6, r4
 8008500:	d105      	bne.n	800850e <__libc_init_array+0x2e>
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	f855 3b04 	ldr.w	r3, [r5], #4
 8008508:	4798      	blx	r3
 800850a:	3601      	adds	r6, #1
 800850c:	e7ee      	b.n	80084ec <__libc_init_array+0xc>
 800850e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008512:	4798      	blx	r3
 8008514:	3601      	adds	r6, #1
 8008516:	e7f2      	b.n	80084fe <__libc_init_array+0x1e>
 8008518:	08009480 	.word	0x08009480
 800851c:	08009480 	.word	0x08009480
 8008520:	08009480 	.word	0x08009480
 8008524:	08009484 	.word	0x08009484

08008528 <__retarget_lock_init_recursive>:
 8008528:	4770      	bx	lr

0800852a <__retarget_lock_acquire_recursive>:
 800852a:	4770      	bx	lr

0800852c <__retarget_lock_release_recursive>:
 800852c:	4770      	bx	lr
	...

08008530 <__assert_func>:
 8008530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008532:	4614      	mov	r4, r2
 8008534:	461a      	mov	r2, r3
 8008536:	4b09      	ldr	r3, [pc, #36]	@ (800855c <__assert_func+0x2c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4605      	mov	r5, r0
 800853c:	68d8      	ldr	r0, [r3, #12]
 800853e:	b954      	cbnz	r4, 8008556 <__assert_func+0x26>
 8008540:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <__assert_func+0x30>)
 8008542:	461c      	mov	r4, r3
 8008544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008548:	9100      	str	r1, [sp, #0]
 800854a:	462b      	mov	r3, r5
 800854c:	4905      	ldr	r1, [pc, #20]	@ (8008564 <__assert_func+0x34>)
 800854e:	f000 f9b9 	bl	80088c4 <fiprintf>
 8008552:	f000 f9d9 	bl	8008908 <abort>
 8008556:	4b04      	ldr	r3, [pc, #16]	@ (8008568 <__assert_func+0x38>)
 8008558:	e7f4      	b.n	8008544 <__assert_func+0x14>
 800855a:	bf00      	nop
 800855c:	20000018 	.word	0x20000018
 8008560:	08009444 	.word	0x08009444
 8008564:	08009416 	.word	0x08009416
 8008568:	08009409 	.word	0x08009409

0800856c <_free_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4605      	mov	r5, r0
 8008570:	2900      	cmp	r1, #0
 8008572:	d041      	beq.n	80085f8 <_free_r+0x8c>
 8008574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008578:	1f0c      	subs	r4, r1, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfb8      	it	lt
 800857e:	18e4      	addlt	r4, r4, r3
 8008580:	f000 f8e8 	bl	8008754 <__malloc_lock>
 8008584:	4a1d      	ldr	r2, [pc, #116]	@ (80085fc <_free_r+0x90>)
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	b933      	cbnz	r3, 8008598 <_free_r+0x2c>
 800858a:	6063      	str	r3, [r4, #4]
 800858c:	6014      	str	r4, [r2, #0]
 800858e:	4628      	mov	r0, r5
 8008590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008594:	f000 b8e4 	b.w	8008760 <__malloc_unlock>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d908      	bls.n	80085ae <_free_r+0x42>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	1821      	adds	r1, r4, r0
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf01      	itttt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	1809      	addeq	r1, r1, r0
 80085aa:	6021      	streq	r1, [r4, #0]
 80085ac:	e7ed      	b.n	800858a <_free_r+0x1e>
 80085ae:	461a      	mov	r2, r3
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	b10b      	cbz	r3, 80085b8 <_free_r+0x4c>
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d9fa      	bls.n	80085ae <_free_r+0x42>
 80085b8:	6811      	ldr	r1, [r2, #0]
 80085ba:	1850      	adds	r0, r2, r1
 80085bc:	42a0      	cmp	r0, r4
 80085be:	d10b      	bne.n	80085d8 <_free_r+0x6c>
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	4401      	add	r1, r0
 80085c4:	1850      	adds	r0, r2, r1
 80085c6:	4283      	cmp	r3, r0
 80085c8:	6011      	str	r1, [r2, #0]
 80085ca:	d1e0      	bne.n	800858e <_free_r+0x22>
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	6053      	str	r3, [r2, #4]
 80085d2:	4408      	add	r0, r1
 80085d4:	6010      	str	r0, [r2, #0]
 80085d6:	e7da      	b.n	800858e <_free_r+0x22>
 80085d8:	d902      	bls.n	80085e0 <_free_r+0x74>
 80085da:	230c      	movs	r3, #12
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	e7d6      	b.n	800858e <_free_r+0x22>
 80085e0:	6820      	ldr	r0, [r4, #0]
 80085e2:	1821      	adds	r1, r4, r0
 80085e4:	428b      	cmp	r3, r1
 80085e6:	bf04      	itt	eq
 80085e8:	6819      	ldreq	r1, [r3, #0]
 80085ea:	685b      	ldreq	r3, [r3, #4]
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	bf04      	itt	eq
 80085f0:	1809      	addeq	r1, r1, r0
 80085f2:	6021      	streq	r1, [r4, #0]
 80085f4:	6054      	str	r4, [r2, #4]
 80085f6:	e7ca      	b.n	800858e <_free_r+0x22>
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
 80085fa:	bf00      	nop
 80085fc:	20000548 	.word	0x20000548

08008600 <malloc>:
 8008600:	4b02      	ldr	r3, [pc, #8]	@ (800860c <malloc+0xc>)
 8008602:	4601      	mov	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f000 b825 	b.w	8008654 <_malloc_r>
 800860a:	bf00      	nop
 800860c:	20000018 	.word	0x20000018

08008610 <sbrk_aligned>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	4e0f      	ldr	r6, [pc, #60]	@ (8008650 <sbrk_aligned+0x40>)
 8008614:	460c      	mov	r4, r1
 8008616:	6831      	ldr	r1, [r6, #0]
 8008618:	4605      	mov	r5, r0
 800861a:	b911      	cbnz	r1, 8008622 <sbrk_aligned+0x12>
 800861c:	f000 f964 	bl	80088e8 <_sbrk_r>
 8008620:	6030      	str	r0, [r6, #0]
 8008622:	4621      	mov	r1, r4
 8008624:	4628      	mov	r0, r5
 8008626:	f000 f95f 	bl	80088e8 <_sbrk_r>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	d103      	bne.n	8008636 <sbrk_aligned+0x26>
 800862e:	f04f 34ff 	mov.w	r4, #4294967295
 8008632:	4620      	mov	r0, r4
 8008634:	bd70      	pop	{r4, r5, r6, pc}
 8008636:	1cc4      	adds	r4, r0, #3
 8008638:	f024 0403 	bic.w	r4, r4, #3
 800863c:	42a0      	cmp	r0, r4
 800863e:	d0f8      	beq.n	8008632 <sbrk_aligned+0x22>
 8008640:	1a21      	subs	r1, r4, r0
 8008642:	4628      	mov	r0, r5
 8008644:	f000 f950 	bl	80088e8 <_sbrk_r>
 8008648:	3001      	adds	r0, #1
 800864a:	d1f2      	bne.n	8008632 <sbrk_aligned+0x22>
 800864c:	e7ef      	b.n	800862e <sbrk_aligned+0x1e>
 800864e:	bf00      	nop
 8008650:	20000544 	.word	0x20000544

08008654 <_malloc_r>:
 8008654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008658:	1ccd      	adds	r5, r1, #3
 800865a:	f025 0503 	bic.w	r5, r5, #3
 800865e:	3508      	adds	r5, #8
 8008660:	2d0c      	cmp	r5, #12
 8008662:	bf38      	it	cc
 8008664:	250c      	movcc	r5, #12
 8008666:	2d00      	cmp	r5, #0
 8008668:	4606      	mov	r6, r0
 800866a:	db01      	blt.n	8008670 <_malloc_r+0x1c>
 800866c:	42a9      	cmp	r1, r5
 800866e:	d904      	bls.n	800867a <_malloc_r+0x26>
 8008670:	230c      	movs	r3, #12
 8008672:	6033      	str	r3, [r6, #0]
 8008674:	2000      	movs	r0, #0
 8008676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800867a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008750 <_malloc_r+0xfc>
 800867e:	f000 f869 	bl	8008754 <__malloc_lock>
 8008682:	f8d8 3000 	ldr.w	r3, [r8]
 8008686:	461c      	mov	r4, r3
 8008688:	bb44      	cbnz	r4, 80086dc <_malloc_r+0x88>
 800868a:	4629      	mov	r1, r5
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff ffbf 	bl	8008610 <sbrk_aligned>
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	4604      	mov	r4, r0
 8008696:	d158      	bne.n	800874a <_malloc_r+0xf6>
 8008698:	f8d8 4000 	ldr.w	r4, [r8]
 800869c:	4627      	mov	r7, r4
 800869e:	2f00      	cmp	r7, #0
 80086a0:	d143      	bne.n	800872a <_malloc_r+0xd6>
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d04b      	beq.n	800873e <_malloc_r+0xea>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	4639      	mov	r1, r7
 80086aa:	4630      	mov	r0, r6
 80086ac:	eb04 0903 	add.w	r9, r4, r3
 80086b0:	f000 f91a 	bl	80088e8 <_sbrk_r>
 80086b4:	4581      	cmp	r9, r0
 80086b6:	d142      	bne.n	800873e <_malloc_r+0xea>
 80086b8:	6821      	ldr	r1, [r4, #0]
 80086ba:	1a6d      	subs	r5, r5, r1
 80086bc:	4629      	mov	r1, r5
 80086be:	4630      	mov	r0, r6
 80086c0:	f7ff ffa6 	bl	8008610 <sbrk_aligned>
 80086c4:	3001      	adds	r0, #1
 80086c6:	d03a      	beq.n	800873e <_malloc_r+0xea>
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	442b      	add	r3, r5
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	f8d8 3000 	ldr.w	r3, [r8]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	bb62      	cbnz	r2, 8008730 <_malloc_r+0xdc>
 80086d6:	f8c8 7000 	str.w	r7, [r8]
 80086da:	e00f      	b.n	80086fc <_malloc_r+0xa8>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	1b52      	subs	r2, r2, r5
 80086e0:	d420      	bmi.n	8008724 <_malloc_r+0xd0>
 80086e2:	2a0b      	cmp	r2, #11
 80086e4:	d917      	bls.n	8008716 <_malloc_r+0xc2>
 80086e6:	1961      	adds	r1, r4, r5
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	6025      	str	r5, [r4, #0]
 80086ec:	bf18      	it	ne
 80086ee:	6059      	strne	r1, [r3, #4]
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	bf08      	it	eq
 80086f4:	f8c8 1000 	streq.w	r1, [r8]
 80086f8:	5162      	str	r2, [r4, r5]
 80086fa:	604b      	str	r3, [r1, #4]
 80086fc:	4630      	mov	r0, r6
 80086fe:	f000 f82f 	bl	8008760 <__malloc_unlock>
 8008702:	f104 000b 	add.w	r0, r4, #11
 8008706:	1d23      	adds	r3, r4, #4
 8008708:	f020 0007 	bic.w	r0, r0, #7
 800870c:	1ac2      	subs	r2, r0, r3
 800870e:	bf1c      	itt	ne
 8008710:	1a1b      	subne	r3, r3, r0
 8008712:	50a3      	strne	r3, [r4, r2]
 8008714:	e7af      	b.n	8008676 <_malloc_r+0x22>
 8008716:	6862      	ldr	r2, [r4, #4]
 8008718:	42a3      	cmp	r3, r4
 800871a:	bf0c      	ite	eq
 800871c:	f8c8 2000 	streq.w	r2, [r8]
 8008720:	605a      	strne	r2, [r3, #4]
 8008722:	e7eb      	b.n	80086fc <_malloc_r+0xa8>
 8008724:	4623      	mov	r3, r4
 8008726:	6864      	ldr	r4, [r4, #4]
 8008728:	e7ae      	b.n	8008688 <_malloc_r+0x34>
 800872a:	463c      	mov	r4, r7
 800872c:	687f      	ldr	r7, [r7, #4]
 800872e:	e7b6      	b.n	800869e <_malloc_r+0x4a>
 8008730:	461a      	mov	r2, r3
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	42a3      	cmp	r3, r4
 8008736:	d1fb      	bne.n	8008730 <_malloc_r+0xdc>
 8008738:	2300      	movs	r3, #0
 800873a:	6053      	str	r3, [r2, #4]
 800873c:	e7de      	b.n	80086fc <_malloc_r+0xa8>
 800873e:	230c      	movs	r3, #12
 8008740:	6033      	str	r3, [r6, #0]
 8008742:	4630      	mov	r0, r6
 8008744:	f000 f80c 	bl	8008760 <__malloc_unlock>
 8008748:	e794      	b.n	8008674 <_malloc_r+0x20>
 800874a:	6005      	str	r5, [r0, #0]
 800874c:	e7d6      	b.n	80086fc <_malloc_r+0xa8>
 800874e:	bf00      	nop
 8008750:	20000548 	.word	0x20000548

08008754 <__malloc_lock>:
 8008754:	4801      	ldr	r0, [pc, #4]	@ (800875c <__malloc_lock+0x8>)
 8008756:	f7ff bee8 	b.w	800852a <__retarget_lock_acquire_recursive>
 800875a:	bf00      	nop
 800875c:	20000540 	.word	0x20000540

08008760 <__malloc_unlock>:
 8008760:	4801      	ldr	r0, [pc, #4]	@ (8008768 <__malloc_unlock+0x8>)
 8008762:	f7ff bee3 	b.w	800852c <__retarget_lock_release_recursive>
 8008766:	bf00      	nop
 8008768:	20000540 	.word	0x20000540

0800876c <__sflush_r>:
 800876c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	0716      	lsls	r6, r2, #28
 8008776:	4605      	mov	r5, r0
 8008778:	460c      	mov	r4, r1
 800877a:	d454      	bmi.n	8008826 <__sflush_r+0xba>
 800877c:	684b      	ldr	r3, [r1, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	dc02      	bgt.n	8008788 <__sflush_r+0x1c>
 8008782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	dd48      	ble.n	800881a <__sflush_r+0xae>
 8008788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800878a:	2e00      	cmp	r6, #0
 800878c:	d045      	beq.n	800881a <__sflush_r+0xae>
 800878e:	2300      	movs	r3, #0
 8008790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008794:	682f      	ldr	r7, [r5, #0]
 8008796:	6a21      	ldr	r1, [r4, #32]
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	d030      	beq.n	80087fe <__sflush_r+0x92>
 800879c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	0759      	lsls	r1, r3, #29
 80087a2:	d505      	bpl.n	80087b0 <__sflush_r+0x44>
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087aa:	b10b      	cbz	r3, 80087b0 <__sflush_r+0x44>
 80087ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	2300      	movs	r3, #0
 80087b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087b4:	6a21      	ldr	r1, [r4, #32]
 80087b6:	4628      	mov	r0, r5
 80087b8:	47b0      	blx	r6
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	d106      	bne.n	80087ce <__sflush_r+0x62>
 80087c0:	6829      	ldr	r1, [r5, #0]
 80087c2:	291d      	cmp	r1, #29
 80087c4:	d82b      	bhi.n	800881e <__sflush_r+0xb2>
 80087c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008870 <__sflush_r+0x104>)
 80087c8:	410a      	asrs	r2, r1
 80087ca:	07d6      	lsls	r6, r2, #31
 80087cc:	d427      	bmi.n	800881e <__sflush_r+0xb2>
 80087ce:	2200      	movs	r2, #0
 80087d0:	6062      	str	r2, [r4, #4]
 80087d2:	04d9      	lsls	r1, r3, #19
 80087d4:	6922      	ldr	r2, [r4, #16]
 80087d6:	6022      	str	r2, [r4, #0]
 80087d8:	d504      	bpl.n	80087e4 <__sflush_r+0x78>
 80087da:	1c42      	adds	r2, r0, #1
 80087dc:	d101      	bne.n	80087e2 <__sflush_r+0x76>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	b903      	cbnz	r3, 80087e4 <__sflush_r+0x78>
 80087e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80087e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087e6:	602f      	str	r7, [r5, #0]
 80087e8:	b1b9      	cbz	r1, 800881a <__sflush_r+0xae>
 80087ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087ee:	4299      	cmp	r1, r3
 80087f0:	d002      	beq.n	80087f8 <__sflush_r+0x8c>
 80087f2:	4628      	mov	r0, r5
 80087f4:	f7ff feba 	bl	800856c <_free_r>
 80087f8:	2300      	movs	r3, #0
 80087fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80087fc:	e00d      	b.n	800881a <__sflush_r+0xae>
 80087fe:	2301      	movs	r3, #1
 8008800:	4628      	mov	r0, r5
 8008802:	47b0      	blx	r6
 8008804:	4602      	mov	r2, r0
 8008806:	1c50      	adds	r0, r2, #1
 8008808:	d1c9      	bne.n	800879e <__sflush_r+0x32>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0c6      	beq.n	800879e <__sflush_r+0x32>
 8008810:	2b1d      	cmp	r3, #29
 8008812:	d001      	beq.n	8008818 <__sflush_r+0xac>
 8008814:	2b16      	cmp	r3, #22
 8008816:	d11e      	bne.n	8008856 <__sflush_r+0xea>
 8008818:	602f      	str	r7, [r5, #0]
 800881a:	2000      	movs	r0, #0
 800881c:	e022      	b.n	8008864 <__sflush_r+0xf8>
 800881e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008822:	b21b      	sxth	r3, r3
 8008824:	e01b      	b.n	800885e <__sflush_r+0xf2>
 8008826:	690f      	ldr	r7, [r1, #16]
 8008828:	2f00      	cmp	r7, #0
 800882a:	d0f6      	beq.n	800881a <__sflush_r+0xae>
 800882c:	0793      	lsls	r3, r2, #30
 800882e:	680e      	ldr	r6, [r1, #0]
 8008830:	bf08      	it	eq
 8008832:	694b      	ldreq	r3, [r1, #20]
 8008834:	600f      	str	r7, [r1, #0]
 8008836:	bf18      	it	ne
 8008838:	2300      	movne	r3, #0
 800883a:	eba6 0807 	sub.w	r8, r6, r7
 800883e:	608b      	str	r3, [r1, #8]
 8008840:	f1b8 0f00 	cmp.w	r8, #0
 8008844:	dde9      	ble.n	800881a <__sflush_r+0xae>
 8008846:	6a21      	ldr	r1, [r4, #32]
 8008848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800884a:	4643      	mov	r3, r8
 800884c:	463a      	mov	r2, r7
 800884e:	4628      	mov	r0, r5
 8008850:	47b0      	blx	r6
 8008852:	2800      	cmp	r0, #0
 8008854:	dc08      	bgt.n	8008868 <__sflush_r+0xfc>
 8008856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800885e:	81a3      	strh	r3, [r4, #12]
 8008860:	f04f 30ff 	mov.w	r0, #4294967295
 8008864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008868:	4407      	add	r7, r0
 800886a:	eba8 0800 	sub.w	r8, r8, r0
 800886e:	e7e7      	b.n	8008840 <__sflush_r+0xd4>
 8008870:	dfbffffe 	.word	0xdfbffffe

08008874 <_fflush_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	690b      	ldr	r3, [r1, #16]
 8008878:	4605      	mov	r5, r0
 800887a:	460c      	mov	r4, r1
 800887c:	b913      	cbnz	r3, 8008884 <_fflush_r+0x10>
 800887e:	2500      	movs	r5, #0
 8008880:	4628      	mov	r0, r5
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	b118      	cbz	r0, 800888e <_fflush_r+0x1a>
 8008886:	6a03      	ldr	r3, [r0, #32]
 8008888:	b90b      	cbnz	r3, 800888e <_fflush_r+0x1a>
 800888a:	f7ff fcff 	bl	800828c <__sinit>
 800888e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0f3      	beq.n	800887e <_fflush_r+0xa>
 8008896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008898:	07d0      	lsls	r0, r2, #31
 800889a:	d404      	bmi.n	80088a6 <_fflush_r+0x32>
 800889c:	0599      	lsls	r1, r3, #22
 800889e:	d402      	bmi.n	80088a6 <_fflush_r+0x32>
 80088a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088a2:	f7ff fe42 	bl	800852a <__retarget_lock_acquire_recursive>
 80088a6:	4628      	mov	r0, r5
 80088a8:	4621      	mov	r1, r4
 80088aa:	f7ff ff5f 	bl	800876c <__sflush_r>
 80088ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088b0:	07da      	lsls	r2, r3, #31
 80088b2:	4605      	mov	r5, r0
 80088b4:	d4e4      	bmi.n	8008880 <_fflush_r+0xc>
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	059b      	lsls	r3, r3, #22
 80088ba:	d4e1      	bmi.n	8008880 <_fflush_r+0xc>
 80088bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088be:	f7ff fe35 	bl	800852c <__retarget_lock_release_recursive>
 80088c2:	e7dd      	b.n	8008880 <_fflush_r+0xc>

080088c4 <fiprintf>:
 80088c4:	b40e      	push	{r1, r2, r3}
 80088c6:	b503      	push	{r0, r1, lr}
 80088c8:	4601      	mov	r1, r0
 80088ca:	ab03      	add	r3, sp, #12
 80088cc:	4805      	ldr	r0, [pc, #20]	@ (80088e4 <fiprintf+0x20>)
 80088ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d2:	6800      	ldr	r0, [r0, #0]
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f000 f847 	bl	8008968 <_vfiprintf_r>
 80088da:	b002      	add	sp, #8
 80088dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e0:	b003      	add	sp, #12
 80088e2:	4770      	bx	lr
 80088e4:	20000018 	.word	0x20000018

080088e8 <_sbrk_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d06      	ldr	r5, [pc, #24]	@ (8008904 <_sbrk_r+0x1c>)
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	f7f8 fc24 	bl	8001140 <_sbrk>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_sbrk_r+0x1a>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_sbrk_r+0x1a>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	2000053c 	.word	0x2000053c

08008908 <abort>:
 8008908:	b508      	push	{r3, lr}
 800890a:	2006      	movs	r0, #6
 800890c:	f000 fb8e 	bl	800902c <raise>
 8008910:	2001      	movs	r0, #1
 8008912:	f7f8 fb9d 	bl	8001050 <_exit>

08008916 <__sfputc_r>:
 8008916:	6893      	ldr	r3, [r2, #8]
 8008918:	3b01      	subs	r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	b410      	push	{r4}
 800891e:	6093      	str	r3, [r2, #8]
 8008920:	da08      	bge.n	8008934 <__sfputc_r+0x1e>
 8008922:	6994      	ldr	r4, [r2, #24]
 8008924:	42a3      	cmp	r3, r4
 8008926:	db01      	blt.n	800892c <__sfputc_r+0x16>
 8008928:	290a      	cmp	r1, #10
 800892a:	d103      	bne.n	8008934 <__sfputc_r+0x1e>
 800892c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008930:	f000 bac0 	b.w	8008eb4 <__swbuf_r>
 8008934:	6813      	ldr	r3, [r2, #0]
 8008936:	1c58      	adds	r0, r3, #1
 8008938:	6010      	str	r0, [r2, #0]
 800893a:	7019      	strb	r1, [r3, #0]
 800893c:	4608      	mov	r0, r1
 800893e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008942:	4770      	bx	lr

08008944 <__sfputs_r>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	4606      	mov	r6, r0
 8008948:	460f      	mov	r7, r1
 800894a:	4614      	mov	r4, r2
 800894c:	18d5      	adds	r5, r2, r3
 800894e:	42ac      	cmp	r4, r5
 8008950:	d101      	bne.n	8008956 <__sfputs_r+0x12>
 8008952:	2000      	movs	r0, #0
 8008954:	e007      	b.n	8008966 <__sfputs_r+0x22>
 8008956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895a:	463a      	mov	r2, r7
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ffda 	bl	8008916 <__sfputc_r>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d1f3      	bne.n	800894e <__sfputs_r+0xa>
 8008966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008968 <_vfiprintf_r>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	460d      	mov	r5, r1
 800896e:	b09d      	sub	sp, #116	@ 0x74
 8008970:	4614      	mov	r4, r2
 8008972:	4698      	mov	r8, r3
 8008974:	4606      	mov	r6, r0
 8008976:	b118      	cbz	r0, 8008980 <_vfiprintf_r+0x18>
 8008978:	6a03      	ldr	r3, [r0, #32]
 800897a:	b90b      	cbnz	r3, 8008980 <_vfiprintf_r+0x18>
 800897c:	f7ff fc86 	bl	800828c <__sinit>
 8008980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008982:	07d9      	lsls	r1, r3, #31
 8008984:	d405      	bmi.n	8008992 <_vfiprintf_r+0x2a>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	059a      	lsls	r2, r3, #22
 800898a:	d402      	bmi.n	8008992 <_vfiprintf_r+0x2a>
 800898c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800898e:	f7ff fdcc 	bl	800852a <__retarget_lock_acquire_recursive>
 8008992:	89ab      	ldrh	r3, [r5, #12]
 8008994:	071b      	lsls	r3, r3, #28
 8008996:	d501      	bpl.n	800899c <_vfiprintf_r+0x34>
 8008998:	692b      	ldr	r3, [r5, #16]
 800899a:	b99b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x5c>
 800899c:	4629      	mov	r1, r5
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 fac6 	bl	8008f30 <__swsetup_r>
 80089a4:	b170      	cbz	r0, 80089c4 <_vfiprintf_r+0x5c>
 80089a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089a8:	07dc      	lsls	r4, r3, #31
 80089aa:	d504      	bpl.n	80089b6 <_vfiprintf_r+0x4e>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	b01d      	add	sp, #116	@ 0x74
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	0598      	lsls	r0, r3, #22
 80089ba:	d4f7      	bmi.n	80089ac <_vfiprintf_r+0x44>
 80089bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089be:	f7ff fdb5 	bl	800852c <__retarget_lock_release_recursive>
 80089c2:	e7f3      	b.n	80089ac <_vfiprintf_r+0x44>
 80089c4:	2300      	movs	r3, #0
 80089c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c8:	2320      	movs	r3, #32
 80089ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d2:	2330      	movs	r3, #48	@ 0x30
 80089d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b84 <_vfiprintf_r+0x21c>
 80089d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089dc:	f04f 0901 	mov.w	r9, #1
 80089e0:	4623      	mov	r3, r4
 80089e2:	469a      	mov	sl, r3
 80089e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089e8:	b10a      	cbz	r2, 80089ee <_vfiprintf_r+0x86>
 80089ea:	2a25      	cmp	r2, #37	@ 0x25
 80089ec:	d1f9      	bne.n	80089e2 <_vfiprintf_r+0x7a>
 80089ee:	ebba 0b04 	subs.w	fp, sl, r4
 80089f2:	d00b      	beq.n	8008a0c <_vfiprintf_r+0xa4>
 80089f4:	465b      	mov	r3, fp
 80089f6:	4622      	mov	r2, r4
 80089f8:	4629      	mov	r1, r5
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7ff ffa2 	bl	8008944 <__sfputs_r>
 8008a00:	3001      	adds	r0, #1
 8008a02:	f000 80a7 	beq.w	8008b54 <_vfiprintf_r+0x1ec>
 8008a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a08:	445a      	add	r2, fp
 8008a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 809f 	beq.w	8008b54 <_vfiprintf_r+0x1ec>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a20:	f10a 0a01 	add.w	sl, sl, #1
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	9307      	str	r3, [sp, #28]
 8008a28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a2e:	4654      	mov	r4, sl
 8008a30:	2205      	movs	r2, #5
 8008a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a36:	4853      	ldr	r0, [pc, #332]	@ (8008b84 <_vfiprintf_r+0x21c>)
 8008a38:	f7f7 fc02 	bl	8000240 <memchr>
 8008a3c:	9a04      	ldr	r2, [sp, #16]
 8008a3e:	b9d8      	cbnz	r0, 8008a78 <_vfiprintf_r+0x110>
 8008a40:	06d1      	lsls	r1, r2, #27
 8008a42:	bf44      	itt	mi
 8008a44:	2320      	movmi	r3, #32
 8008a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a4a:	0713      	lsls	r3, r2, #28
 8008a4c:	bf44      	itt	mi
 8008a4e:	232b      	movmi	r3, #43	@ 0x2b
 8008a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a54:	f89a 3000 	ldrb.w	r3, [sl]
 8008a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a5a:	d015      	beq.n	8008a88 <_vfiprintf_r+0x120>
 8008a5c:	9a07      	ldr	r2, [sp, #28]
 8008a5e:	4654      	mov	r4, sl
 8008a60:	2000      	movs	r0, #0
 8008a62:	f04f 0c0a 	mov.w	ip, #10
 8008a66:	4621      	mov	r1, r4
 8008a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a6c:	3b30      	subs	r3, #48	@ 0x30
 8008a6e:	2b09      	cmp	r3, #9
 8008a70:	d94b      	bls.n	8008b0a <_vfiprintf_r+0x1a2>
 8008a72:	b1b0      	cbz	r0, 8008aa2 <_vfiprintf_r+0x13a>
 8008a74:	9207      	str	r2, [sp, #28]
 8008a76:	e014      	b.n	8008aa2 <_vfiprintf_r+0x13a>
 8008a78:	eba0 0308 	sub.w	r3, r0, r8
 8008a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a80:	4313      	orrs	r3, r2
 8008a82:	9304      	str	r3, [sp, #16]
 8008a84:	46a2      	mov	sl, r4
 8008a86:	e7d2      	b.n	8008a2e <_vfiprintf_r+0xc6>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	1d19      	adds	r1, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	9103      	str	r1, [sp, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfbb      	ittet	lt
 8008a94:	425b      	neglt	r3, r3
 8008a96:	f042 0202 	orrlt.w	r2, r2, #2
 8008a9a:	9307      	strge	r3, [sp, #28]
 8008a9c:	9307      	strlt	r3, [sp, #28]
 8008a9e:	bfb8      	it	lt
 8008aa0:	9204      	strlt	r2, [sp, #16]
 8008aa2:	7823      	ldrb	r3, [r4, #0]
 8008aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aa6:	d10a      	bne.n	8008abe <_vfiprintf_r+0x156>
 8008aa8:	7863      	ldrb	r3, [r4, #1]
 8008aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aac:	d132      	bne.n	8008b14 <_vfiprintf_r+0x1ac>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	1d1a      	adds	r2, r3, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	9203      	str	r2, [sp, #12]
 8008ab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aba:	3402      	adds	r4, #2
 8008abc:	9305      	str	r3, [sp, #20]
 8008abe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b94 <_vfiprintf_r+0x22c>
 8008ac2:	7821      	ldrb	r1, [r4, #0]
 8008ac4:	2203      	movs	r2, #3
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	f7f7 fbba 	bl	8000240 <memchr>
 8008acc:	b138      	cbz	r0, 8008ade <_vfiprintf_r+0x176>
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	eba0 000a 	sub.w	r0, r0, sl
 8008ad4:	2240      	movs	r2, #64	@ 0x40
 8008ad6:	4082      	lsls	r2, r0
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	3401      	adds	r4, #1
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae2:	4829      	ldr	r0, [pc, #164]	@ (8008b88 <_vfiprintf_r+0x220>)
 8008ae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ae8:	2206      	movs	r2, #6
 8008aea:	f7f7 fba9 	bl	8000240 <memchr>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d03f      	beq.n	8008b72 <_vfiprintf_r+0x20a>
 8008af2:	4b26      	ldr	r3, [pc, #152]	@ (8008b8c <_vfiprintf_r+0x224>)
 8008af4:	bb1b      	cbnz	r3, 8008b3e <_vfiprintf_r+0x1d6>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	3307      	adds	r3, #7
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	3308      	adds	r3, #8
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b04:	443b      	add	r3, r7
 8008b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b08:	e76a      	b.n	80089e0 <_vfiprintf_r+0x78>
 8008b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b0e:	460c      	mov	r4, r1
 8008b10:	2001      	movs	r0, #1
 8008b12:	e7a8      	b.n	8008a66 <_vfiprintf_r+0xfe>
 8008b14:	2300      	movs	r3, #0
 8008b16:	3401      	adds	r4, #1
 8008b18:	9305      	str	r3, [sp, #20]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	f04f 0c0a 	mov.w	ip, #10
 8008b20:	4620      	mov	r0, r4
 8008b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b26:	3a30      	subs	r2, #48	@ 0x30
 8008b28:	2a09      	cmp	r2, #9
 8008b2a:	d903      	bls.n	8008b34 <_vfiprintf_r+0x1cc>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0c6      	beq.n	8008abe <_vfiprintf_r+0x156>
 8008b30:	9105      	str	r1, [sp, #20]
 8008b32:	e7c4      	b.n	8008abe <_vfiprintf_r+0x156>
 8008b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b38:	4604      	mov	r4, r0
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e7f0      	b.n	8008b20 <_vfiprintf_r+0x1b8>
 8008b3e:	ab03      	add	r3, sp, #12
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	462a      	mov	r2, r5
 8008b44:	4b12      	ldr	r3, [pc, #72]	@ (8008b90 <_vfiprintf_r+0x228>)
 8008b46:	a904      	add	r1, sp, #16
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f3af 8000 	nop.w
 8008b4e:	4607      	mov	r7, r0
 8008b50:	1c78      	adds	r0, r7, #1
 8008b52:	d1d6      	bne.n	8008b02 <_vfiprintf_r+0x19a>
 8008b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b56:	07d9      	lsls	r1, r3, #31
 8008b58:	d405      	bmi.n	8008b66 <_vfiprintf_r+0x1fe>
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	059a      	lsls	r2, r3, #22
 8008b5e:	d402      	bmi.n	8008b66 <_vfiprintf_r+0x1fe>
 8008b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b62:	f7ff fce3 	bl	800852c <__retarget_lock_release_recursive>
 8008b66:	89ab      	ldrh	r3, [r5, #12]
 8008b68:	065b      	lsls	r3, r3, #25
 8008b6a:	f53f af1f 	bmi.w	80089ac <_vfiprintf_r+0x44>
 8008b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b70:	e71e      	b.n	80089b0 <_vfiprintf_r+0x48>
 8008b72:	ab03      	add	r3, sp, #12
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4b05      	ldr	r3, [pc, #20]	@ (8008b90 <_vfiprintf_r+0x228>)
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 f879 	bl	8008c74 <_printf_i>
 8008b82:	e7e4      	b.n	8008b4e <_vfiprintf_r+0x1e6>
 8008b84:	08009445 	.word	0x08009445
 8008b88:	0800944f 	.word	0x0800944f
 8008b8c:	00000000 	.word	0x00000000
 8008b90:	08008945 	.word	0x08008945
 8008b94:	0800944b 	.word	0x0800944b

08008b98 <_printf_common>:
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	4698      	mov	r8, r3
 8008ba0:	688a      	ldr	r2, [r1, #8]
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bfb8      	it	lt
 8008bac:	4613      	movlt	r3, r2
 8008bae:	6033      	str	r3, [r6, #0]
 8008bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	b10a      	cbz	r2, 8008bbe <_printf_common+0x26>
 8008bba:	3301      	adds	r3, #1
 8008bbc:	6033      	str	r3, [r6, #0]
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	0699      	lsls	r1, r3, #26
 8008bc2:	bf42      	ittt	mi
 8008bc4:	6833      	ldrmi	r3, [r6, #0]
 8008bc6:	3302      	addmi	r3, #2
 8008bc8:	6033      	strmi	r3, [r6, #0]
 8008bca:	6825      	ldr	r5, [r4, #0]
 8008bcc:	f015 0506 	ands.w	r5, r5, #6
 8008bd0:	d106      	bne.n	8008be0 <_printf_common+0x48>
 8008bd2:	f104 0a19 	add.w	sl, r4, #25
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	6832      	ldr	r2, [r6, #0]
 8008bda:	1a9b      	subs	r3, r3, r2
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dc26      	bgt.n	8008c2e <_printf_common+0x96>
 8008be0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008be4:	6822      	ldr	r2, [r4, #0]
 8008be6:	3b00      	subs	r3, #0
 8008be8:	bf18      	it	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	0692      	lsls	r2, r2, #26
 8008bee:	d42b      	bmi.n	8008c48 <_printf_common+0xb0>
 8008bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bf4:	4641      	mov	r1, r8
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	47c8      	blx	r9
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d01e      	beq.n	8008c3c <_printf_common+0xa4>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	f003 0306 	and.w	r3, r3, #6
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	bf02      	ittt	eq
 8008c0a:	68e5      	ldreq	r5, [r4, #12]
 8008c0c:	6833      	ldreq	r3, [r6, #0]
 8008c0e:	1aed      	subeq	r5, r5, r3
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	bf0c      	ite	eq
 8008c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c18:	2500      	movne	r5, #0
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	bfc4      	itt	gt
 8008c1e:	1a9b      	subgt	r3, r3, r2
 8008c20:	18ed      	addgt	r5, r5, r3
 8008c22:	2600      	movs	r6, #0
 8008c24:	341a      	adds	r4, #26
 8008c26:	42b5      	cmp	r5, r6
 8008c28:	d11a      	bne.n	8008c60 <_printf_common+0xc8>
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e008      	b.n	8008c40 <_printf_common+0xa8>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4652      	mov	r2, sl
 8008c32:	4641      	mov	r1, r8
 8008c34:	4638      	mov	r0, r7
 8008c36:	47c8      	blx	r9
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d103      	bne.n	8008c44 <_printf_common+0xac>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c44:	3501      	adds	r5, #1
 8008c46:	e7c6      	b.n	8008bd6 <_printf_common+0x3e>
 8008c48:	18e1      	adds	r1, r4, r3
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	2030      	movs	r0, #48	@ 0x30
 8008c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c52:	4422      	add	r2, r4
 8008c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	e7c7      	b.n	8008bf0 <_printf_common+0x58>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4622      	mov	r2, r4
 8008c64:	4641      	mov	r1, r8
 8008c66:	4638      	mov	r0, r7
 8008c68:	47c8      	blx	r9
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d0e6      	beq.n	8008c3c <_printf_common+0xa4>
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7d9      	b.n	8008c26 <_printf_common+0x8e>
	...

08008c74 <_printf_i>:
 8008c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	7e0f      	ldrb	r7, [r1, #24]
 8008c7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c7c:	2f78      	cmp	r7, #120	@ 0x78
 8008c7e:	4691      	mov	r9, r2
 8008c80:	4680      	mov	r8, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	469a      	mov	sl, r3
 8008c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c8a:	d807      	bhi.n	8008c9c <_printf_i+0x28>
 8008c8c:	2f62      	cmp	r7, #98	@ 0x62
 8008c8e:	d80a      	bhi.n	8008ca6 <_printf_i+0x32>
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	f000 80d2 	beq.w	8008e3a <_printf_i+0x1c6>
 8008c96:	2f58      	cmp	r7, #88	@ 0x58
 8008c98:	f000 80b9 	beq.w	8008e0e <_printf_i+0x19a>
 8008c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ca4:	e03a      	b.n	8008d1c <_printf_i+0xa8>
 8008ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008caa:	2b15      	cmp	r3, #21
 8008cac:	d8f6      	bhi.n	8008c9c <_printf_i+0x28>
 8008cae:	a101      	add	r1, pc, #4	@ (adr r1, 8008cb4 <_printf_i+0x40>)
 8008cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cb4:	08008d0d 	.word	0x08008d0d
 8008cb8:	08008d21 	.word	0x08008d21
 8008cbc:	08008c9d 	.word	0x08008c9d
 8008cc0:	08008c9d 	.word	0x08008c9d
 8008cc4:	08008c9d 	.word	0x08008c9d
 8008cc8:	08008c9d 	.word	0x08008c9d
 8008ccc:	08008d21 	.word	0x08008d21
 8008cd0:	08008c9d 	.word	0x08008c9d
 8008cd4:	08008c9d 	.word	0x08008c9d
 8008cd8:	08008c9d 	.word	0x08008c9d
 8008cdc:	08008c9d 	.word	0x08008c9d
 8008ce0:	08008e21 	.word	0x08008e21
 8008ce4:	08008d4b 	.word	0x08008d4b
 8008ce8:	08008ddb 	.word	0x08008ddb
 8008cec:	08008c9d 	.word	0x08008c9d
 8008cf0:	08008c9d 	.word	0x08008c9d
 8008cf4:	08008e43 	.word	0x08008e43
 8008cf8:	08008c9d 	.word	0x08008c9d
 8008cfc:	08008d4b 	.word	0x08008d4b
 8008d00:	08008c9d 	.word	0x08008c9d
 8008d04:	08008c9d 	.word	0x08008c9d
 8008d08:	08008de3 	.word	0x08008de3
 8008d0c:	6833      	ldr	r3, [r6, #0]
 8008d0e:	1d1a      	adds	r2, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6032      	str	r2, [r6, #0]
 8008d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e09d      	b.n	8008e5c <_printf_i+0x1e8>
 8008d20:	6833      	ldr	r3, [r6, #0]
 8008d22:	6820      	ldr	r0, [r4, #0]
 8008d24:	1d19      	adds	r1, r3, #4
 8008d26:	6031      	str	r1, [r6, #0]
 8008d28:	0606      	lsls	r6, r0, #24
 8008d2a:	d501      	bpl.n	8008d30 <_printf_i+0xbc>
 8008d2c:	681d      	ldr	r5, [r3, #0]
 8008d2e:	e003      	b.n	8008d38 <_printf_i+0xc4>
 8008d30:	0645      	lsls	r5, r0, #25
 8008d32:	d5fb      	bpl.n	8008d2c <_printf_i+0xb8>
 8008d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	da03      	bge.n	8008d44 <_printf_i+0xd0>
 8008d3c:	232d      	movs	r3, #45	@ 0x2d
 8008d3e:	426d      	negs	r5, r5
 8008d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d44:	4859      	ldr	r0, [pc, #356]	@ (8008eac <_printf_i+0x238>)
 8008d46:	230a      	movs	r3, #10
 8008d48:	e011      	b.n	8008d6e <_printf_i+0xfa>
 8008d4a:	6821      	ldr	r1, [r4, #0]
 8008d4c:	6833      	ldr	r3, [r6, #0]
 8008d4e:	0608      	lsls	r0, r1, #24
 8008d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d54:	d402      	bmi.n	8008d5c <_printf_i+0xe8>
 8008d56:	0649      	lsls	r1, r1, #25
 8008d58:	bf48      	it	mi
 8008d5a:	b2ad      	uxthmi	r5, r5
 8008d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d5e:	4853      	ldr	r0, [pc, #332]	@ (8008eac <_printf_i+0x238>)
 8008d60:	6033      	str	r3, [r6, #0]
 8008d62:	bf14      	ite	ne
 8008d64:	230a      	movne	r3, #10
 8008d66:	2308      	moveq	r3, #8
 8008d68:	2100      	movs	r1, #0
 8008d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d6e:	6866      	ldr	r6, [r4, #4]
 8008d70:	60a6      	str	r6, [r4, #8]
 8008d72:	2e00      	cmp	r6, #0
 8008d74:	bfa2      	ittt	ge
 8008d76:	6821      	ldrge	r1, [r4, #0]
 8008d78:	f021 0104 	bicge.w	r1, r1, #4
 8008d7c:	6021      	strge	r1, [r4, #0]
 8008d7e:	b90d      	cbnz	r5, 8008d84 <_printf_i+0x110>
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	d04b      	beq.n	8008e1c <_printf_i+0x1a8>
 8008d84:	4616      	mov	r6, r2
 8008d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d8e:	5dc7      	ldrb	r7, [r0, r7]
 8008d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d94:	462f      	mov	r7, r5
 8008d96:	42bb      	cmp	r3, r7
 8008d98:	460d      	mov	r5, r1
 8008d9a:	d9f4      	bls.n	8008d86 <_printf_i+0x112>
 8008d9c:	2b08      	cmp	r3, #8
 8008d9e:	d10b      	bne.n	8008db8 <_printf_i+0x144>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	07df      	lsls	r7, r3, #31
 8008da4:	d508      	bpl.n	8008db8 <_printf_i+0x144>
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	6861      	ldr	r1, [r4, #4]
 8008daa:	4299      	cmp	r1, r3
 8008dac:	bfde      	ittt	le
 8008dae:	2330      	movle	r3, #48	@ 0x30
 8008db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008db4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008db8:	1b92      	subs	r2, r2, r6
 8008dba:	6122      	str	r2, [r4, #16]
 8008dbc:	f8cd a000 	str.w	sl, [sp]
 8008dc0:	464b      	mov	r3, r9
 8008dc2:	aa03      	add	r2, sp, #12
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f7ff fee6 	bl	8008b98 <_printf_common>
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d14a      	bne.n	8008e66 <_printf_i+0x1f2>
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	b004      	add	sp, #16
 8008dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	f043 0320 	orr.w	r3, r3, #32
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	4833      	ldr	r0, [pc, #204]	@ (8008eb0 <_printf_i+0x23c>)
 8008de4:	2778      	movs	r7, #120	@ 0x78
 8008de6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	6831      	ldr	r1, [r6, #0]
 8008dee:	061f      	lsls	r7, r3, #24
 8008df0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008df4:	d402      	bmi.n	8008dfc <_printf_i+0x188>
 8008df6:	065f      	lsls	r7, r3, #25
 8008df8:	bf48      	it	mi
 8008dfa:	b2ad      	uxthmi	r5, r5
 8008dfc:	6031      	str	r1, [r6, #0]
 8008dfe:	07d9      	lsls	r1, r3, #31
 8008e00:	bf44      	itt	mi
 8008e02:	f043 0320 	orrmi.w	r3, r3, #32
 8008e06:	6023      	strmi	r3, [r4, #0]
 8008e08:	b11d      	cbz	r5, 8008e12 <_printf_i+0x19e>
 8008e0a:	2310      	movs	r3, #16
 8008e0c:	e7ac      	b.n	8008d68 <_printf_i+0xf4>
 8008e0e:	4827      	ldr	r0, [pc, #156]	@ (8008eac <_printf_i+0x238>)
 8008e10:	e7e9      	b.n	8008de6 <_printf_i+0x172>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f023 0320 	bic.w	r3, r3, #32
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	e7f6      	b.n	8008e0a <_printf_i+0x196>
 8008e1c:	4616      	mov	r6, r2
 8008e1e:	e7bd      	b.n	8008d9c <_printf_i+0x128>
 8008e20:	6833      	ldr	r3, [r6, #0]
 8008e22:	6825      	ldr	r5, [r4, #0]
 8008e24:	6961      	ldr	r1, [r4, #20]
 8008e26:	1d18      	adds	r0, r3, #4
 8008e28:	6030      	str	r0, [r6, #0]
 8008e2a:	062e      	lsls	r6, r5, #24
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	d501      	bpl.n	8008e34 <_printf_i+0x1c0>
 8008e30:	6019      	str	r1, [r3, #0]
 8008e32:	e002      	b.n	8008e3a <_printf_i+0x1c6>
 8008e34:	0668      	lsls	r0, r5, #25
 8008e36:	d5fb      	bpl.n	8008e30 <_printf_i+0x1bc>
 8008e38:	8019      	strh	r1, [r3, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6123      	str	r3, [r4, #16]
 8008e3e:	4616      	mov	r6, r2
 8008e40:	e7bc      	b.n	8008dbc <_printf_i+0x148>
 8008e42:	6833      	ldr	r3, [r6, #0]
 8008e44:	1d1a      	adds	r2, r3, #4
 8008e46:	6032      	str	r2, [r6, #0]
 8008e48:	681e      	ldr	r6, [r3, #0]
 8008e4a:	6862      	ldr	r2, [r4, #4]
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7f7 f9f6 	bl	8000240 <memchr>
 8008e54:	b108      	cbz	r0, 8008e5a <_printf_i+0x1e6>
 8008e56:	1b80      	subs	r0, r0, r6
 8008e58:	6060      	str	r0, [r4, #4]
 8008e5a:	6863      	ldr	r3, [r4, #4]
 8008e5c:	6123      	str	r3, [r4, #16]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e64:	e7aa      	b.n	8008dbc <_printf_i+0x148>
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	4632      	mov	r2, r6
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	47d0      	blx	sl
 8008e70:	3001      	adds	r0, #1
 8008e72:	d0ad      	beq.n	8008dd0 <_printf_i+0x15c>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	079b      	lsls	r3, r3, #30
 8008e78:	d413      	bmi.n	8008ea2 <_printf_i+0x22e>
 8008e7a:	68e0      	ldr	r0, [r4, #12]
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	4298      	cmp	r0, r3
 8008e80:	bfb8      	it	lt
 8008e82:	4618      	movlt	r0, r3
 8008e84:	e7a6      	b.n	8008dd4 <_printf_i+0x160>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4632      	mov	r2, r6
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	47d0      	blx	sl
 8008e90:	3001      	adds	r0, #1
 8008e92:	d09d      	beq.n	8008dd0 <_printf_i+0x15c>
 8008e94:	3501      	adds	r5, #1
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	9903      	ldr	r1, [sp, #12]
 8008e9a:	1a5b      	subs	r3, r3, r1
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	dcf2      	bgt.n	8008e86 <_printf_i+0x212>
 8008ea0:	e7eb      	b.n	8008e7a <_printf_i+0x206>
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	f104 0619 	add.w	r6, r4, #25
 8008ea8:	e7f5      	b.n	8008e96 <_printf_i+0x222>
 8008eaa:	bf00      	nop
 8008eac:	08009456 	.word	0x08009456
 8008eb0:	08009467 	.word	0x08009467

08008eb4 <__swbuf_r>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	460e      	mov	r6, r1
 8008eb8:	4614      	mov	r4, r2
 8008eba:	4605      	mov	r5, r0
 8008ebc:	b118      	cbz	r0, 8008ec6 <__swbuf_r+0x12>
 8008ebe:	6a03      	ldr	r3, [r0, #32]
 8008ec0:	b90b      	cbnz	r3, 8008ec6 <__swbuf_r+0x12>
 8008ec2:	f7ff f9e3 	bl	800828c <__sinit>
 8008ec6:	69a3      	ldr	r3, [r4, #24]
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	071a      	lsls	r2, r3, #28
 8008ece:	d501      	bpl.n	8008ed4 <__swbuf_r+0x20>
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	b943      	cbnz	r3, 8008ee6 <__swbuf_r+0x32>
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f000 f82a 	bl	8008f30 <__swsetup_r>
 8008edc:	b118      	cbz	r0, 8008ee6 <__swbuf_r+0x32>
 8008ede:	f04f 37ff 	mov.w	r7, #4294967295
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	6922      	ldr	r2, [r4, #16]
 8008eea:	1a98      	subs	r0, r3, r2
 8008eec:	6963      	ldr	r3, [r4, #20]
 8008eee:	b2f6      	uxtb	r6, r6
 8008ef0:	4283      	cmp	r3, r0
 8008ef2:	4637      	mov	r7, r6
 8008ef4:	dc05      	bgt.n	8008f02 <__swbuf_r+0x4e>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f7ff fcbb 	bl	8008874 <_fflush_r>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d1ed      	bne.n	8008ede <__swbuf_r+0x2a>
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	60a3      	str	r3, [r4, #8]
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	6022      	str	r2, [r4, #0]
 8008f0e:	701e      	strb	r6, [r3, #0]
 8008f10:	6962      	ldr	r2, [r4, #20]
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d004      	beq.n	8008f22 <__swbuf_r+0x6e>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	07db      	lsls	r3, r3, #31
 8008f1c:	d5e1      	bpl.n	8008ee2 <__swbuf_r+0x2e>
 8008f1e:	2e0a      	cmp	r6, #10
 8008f20:	d1df      	bne.n	8008ee2 <__swbuf_r+0x2e>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7ff fca5 	bl	8008874 <_fflush_r>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d0d9      	beq.n	8008ee2 <__swbuf_r+0x2e>
 8008f2e:	e7d6      	b.n	8008ede <__swbuf_r+0x2a>

08008f30 <__swsetup_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4b29      	ldr	r3, [pc, #164]	@ (8008fd8 <__swsetup_r+0xa8>)
 8008f34:	4605      	mov	r5, r0
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	460c      	mov	r4, r1
 8008f3a:	b118      	cbz	r0, 8008f44 <__swsetup_r+0x14>
 8008f3c:	6a03      	ldr	r3, [r0, #32]
 8008f3e:	b90b      	cbnz	r3, 8008f44 <__swsetup_r+0x14>
 8008f40:	f7ff f9a4 	bl	800828c <__sinit>
 8008f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f48:	0719      	lsls	r1, r3, #28
 8008f4a:	d422      	bmi.n	8008f92 <__swsetup_r+0x62>
 8008f4c:	06da      	lsls	r2, r3, #27
 8008f4e:	d407      	bmi.n	8008f60 <__swsetup_r+0x30>
 8008f50:	2209      	movs	r2, #9
 8008f52:	602a      	str	r2, [r5, #0]
 8008f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	e033      	b.n	8008fc8 <__swsetup_r+0x98>
 8008f60:	0758      	lsls	r0, r3, #29
 8008f62:	d512      	bpl.n	8008f8a <__swsetup_r+0x5a>
 8008f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f66:	b141      	cbz	r1, 8008f7a <__swsetup_r+0x4a>
 8008f68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	d002      	beq.n	8008f76 <__swsetup_r+0x46>
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7ff fafb 	bl	800856c <_free_r>
 8008f76:	2300      	movs	r3, #0
 8008f78:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	2300      	movs	r3, #0
 8008f84:	6063      	str	r3, [r4, #4]
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f043 0308 	orr.w	r3, r3, #8
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	b94b      	cbnz	r3, 8008faa <__swsetup_r+0x7a>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fa0:	d003      	beq.n	8008faa <__swsetup_r+0x7a>
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 f883 	bl	80090b0 <__smakebuf_r>
 8008faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fae:	f013 0201 	ands.w	r2, r3, #1
 8008fb2:	d00a      	beq.n	8008fca <__swsetup_r+0x9a>
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	60a2      	str	r2, [r4, #8]
 8008fb8:	6962      	ldr	r2, [r4, #20]
 8008fba:	4252      	negs	r2, r2
 8008fbc:	61a2      	str	r2, [r4, #24]
 8008fbe:	6922      	ldr	r2, [r4, #16]
 8008fc0:	b942      	cbnz	r2, 8008fd4 <__swsetup_r+0xa4>
 8008fc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fc6:	d1c5      	bne.n	8008f54 <__swsetup_r+0x24>
 8008fc8:	bd38      	pop	{r3, r4, r5, pc}
 8008fca:	0799      	lsls	r1, r3, #30
 8008fcc:	bf58      	it	pl
 8008fce:	6962      	ldrpl	r2, [r4, #20]
 8008fd0:	60a2      	str	r2, [r4, #8]
 8008fd2:	e7f4      	b.n	8008fbe <__swsetup_r+0x8e>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e7f7      	b.n	8008fc8 <__swsetup_r+0x98>
 8008fd8:	20000018 	.word	0x20000018

08008fdc <_raise_r>:
 8008fdc:	291f      	cmp	r1, #31
 8008fde:	b538      	push	{r3, r4, r5, lr}
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	d904      	bls.n	8008ff0 <_raise_r+0x14>
 8008fe6:	2316      	movs	r3, #22
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	f04f 30ff 	mov.w	r0, #4294967295
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ff2:	b112      	cbz	r2, 8008ffa <_raise_r+0x1e>
 8008ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ff8:	b94b      	cbnz	r3, 800900e <_raise_r+0x32>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f830 	bl	8009060 <_getpid_r>
 8009000:	4622      	mov	r2, r4
 8009002:	4601      	mov	r1, r0
 8009004:	4628      	mov	r0, r5
 8009006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800900a:	f000 b817 	b.w	800903c <_kill_r>
 800900e:	2b01      	cmp	r3, #1
 8009010:	d00a      	beq.n	8009028 <_raise_r+0x4c>
 8009012:	1c59      	adds	r1, r3, #1
 8009014:	d103      	bne.n	800901e <_raise_r+0x42>
 8009016:	2316      	movs	r3, #22
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	2001      	movs	r0, #1
 800901c:	e7e7      	b.n	8008fee <_raise_r+0x12>
 800901e:	2100      	movs	r1, #0
 8009020:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009024:	4620      	mov	r0, r4
 8009026:	4798      	blx	r3
 8009028:	2000      	movs	r0, #0
 800902a:	e7e0      	b.n	8008fee <_raise_r+0x12>

0800902c <raise>:
 800902c:	4b02      	ldr	r3, [pc, #8]	@ (8009038 <raise+0xc>)
 800902e:	4601      	mov	r1, r0
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	f7ff bfd3 	b.w	8008fdc <_raise_r>
 8009036:	bf00      	nop
 8009038:	20000018 	.word	0x20000018

0800903c <_kill_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d07      	ldr	r5, [pc, #28]	@ (800905c <_kill_r+0x20>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	602b      	str	r3, [r5, #0]
 800904a:	f7f7 fff1 	bl	8001030 <_kill>
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	d102      	bne.n	8009058 <_kill_r+0x1c>
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	b103      	cbz	r3, 8009058 <_kill_r+0x1c>
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	bd38      	pop	{r3, r4, r5, pc}
 800905a:	bf00      	nop
 800905c:	2000053c 	.word	0x2000053c

08009060 <_getpid_r>:
 8009060:	f7f7 bfde 	b.w	8001020 <_getpid>

08009064 <__swhatbuf_r>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	460c      	mov	r4, r1
 8009068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906c:	2900      	cmp	r1, #0
 800906e:	b096      	sub	sp, #88	@ 0x58
 8009070:	4615      	mov	r5, r2
 8009072:	461e      	mov	r6, r3
 8009074:	da0d      	bge.n	8009092 <__swhatbuf_r+0x2e>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800907c:	f04f 0100 	mov.w	r1, #0
 8009080:	bf14      	ite	ne
 8009082:	2340      	movne	r3, #64	@ 0x40
 8009084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009088:	2000      	movs	r0, #0
 800908a:	6031      	str	r1, [r6, #0]
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	b016      	add	sp, #88	@ 0x58
 8009090:	bd70      	pop	{r4, r5, r6, pc}
 8009092:	466a      	mov	r2, sp
 8009094:	f000 f848 	bl	8009128 <_fstat_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	dbec      	blt.n	8009076 <__swhatbuf_r+0x12>
 800909c:	9901      	ldr	r1, [sp, #4]
 800909e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090a6:	4259      	negs	r1, r3
 80090a8:	4159      	adcs	r1, r3
 80090aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ae:	e7eb      	b.n	8009088 <__swhatbuf_r+0x24>

080090b0 <__smakebuf_r>:
 80090b0:	898b      	ldrh	r3, [r1, #12]
 80090b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b4:	079d      	lsls	r5, r3, #30
 80090b6:	4606      	mov	r6, r0
 80090b8:	460c      	mov	r4, r1
 80090ba:	d507      	bpl.n	80090cc <__smakebuf_r+0x1c>
 80090bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	2301      	movs	r3, #1
 80090c6:	6163      	str	r3, [r4, #20]
 80090c8:	b003      	add	sp, #12
 80090ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090cc:	ab01      	add	r3, sp, #4
 80090ce:	466a      	mov	r2, sp
 80090d0:	f7ff ffc8 	bl	8009064 <__swhatbuf_r>
 80090d4:	9f00      	ldr	r7, [sp, #0]
 80090d6:	4605      	mov	r5, r0
 80090d8:	4639      	mov	r1, r7
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff faba 	bl	8008654 <_malloc_r>
 80090e0:	b948      	cbnz	r0, 80090f6 <__smakebuf_r+0x46>
 80090e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e6:	059a      	lsls	r2, r3, #22
 80090e8:	d4ee      	bmi.n	80090c8 <__smakebuf_r+0x18>
 80090ea:	f023 0303 	bic.w	r3, r3, #3
 80090ee:	f043 0302 	orr.w	r3, r3, #2
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	e7e2      	b.n	80090bc <__smakebuf_r+0xc>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	6020      	str	r0, [r4, #0]
 80090fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	9b01      	ldr	r3, [sp, #4]
 8009102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009106:	b15b      	cbz	r3, 8009120 <__smakebuf_r+0x70>
 8009108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910c:	4630      	mov	r0, r6
 800910e:	f000 f81d 	bl	800914c <_isatty_r>
 8009112:	b128      	cbz	r0, 8009120 <__smakebuf_r+0x70>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	431d      	orrs	r5, r3
 8009124:	81a5      	strh	r5, [r4, #12]
 8009126:	e7cf      	b.n	80090c8 <__smakebuf_r+0x18>

08009128 <_fstat_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	@ (8009148 <_fstat_r+0x20>)
 800912c:	2300      	movs	r3, #0
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	4611      	mov	r1, r2
 8009134:	602b      	str	r3, [r5, #0]
 8009136:	f7f7 ffdb 	bl	80010f0 <_fstat>
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	d102      	bne.n	8009144 <_fstat_r+0x1c>
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	b103      	cbz	r3, 8009144 <_fstat_r+0x1c>
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	bd38      	pop	{r3, r4, r5, pc}
 8009146:	bf00      	nop
 8009148:	2000053c 	.word	0x2000053c

0800914c <_isatty_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4d06      	ldr	r5, [pc, #24]	@ (8009168 <_isatty_r+0x1c>)
 8009150:	2300      	movs	r3, #0
 8009152:	4604      	mov	r4, r0
 8009154:	4608      	mov	r0, r1
 8009156:	602b      	str	r3, [r5, #0]
 8009158:	f7f7 ffda 	bl	8001110 <_isatty>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_isatty_r+0x1a>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b103      	cbz	r3, 8009166 <_isatty_r+0x1a>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	2000053c 	.word	0x2000053c

0800916c <_init>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	bf00      	nop
 8009170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009172:	bc08      	pop	{r3}
 8009174:	469e      	mov	lr, r3
 8009176:	4770      	bx	lr

08009178 <_fini>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr
