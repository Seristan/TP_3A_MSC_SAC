
TP_SaC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf34  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800d118  0800d118  0000e118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7a4  0800d7a4  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7a4  0800d7a4  0000e7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7ac  0800d7ac  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7ac  0800d7ac  0000e7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7b0  0800d7b0  0000e7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d7b4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001d8  0800d98c  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800d98c  0000f778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9d4  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d4  00000000  00000000  0002abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116c  00000000  00000000  0002f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a255  00000000  00000000  00030aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8f4  00000000  00000000  0005acf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114b02  00000000  00000000  000765ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b0ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000723c  00000000  00000000  0018b134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00192370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d0fc 	.word	0x0800d0fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d0fc 	.word	0x0800d0fc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 ffc6 	bl	800aeb2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f26:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f54:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f70:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f96:	f001 feb7 	bl	8002d08 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 fde0 	bl	8001b64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000fb0:	f003 f984 	bl	80042bc <HAL_ADCEx_MultiModeConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fba:	f000 fdd3 	bl	8001b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_ADC1_Init+0xf0>)
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fca:	237f      	movs	r3, #127	@ 0x7f
 8000fcc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000fdc:	f002 fbac 	bl	8003738 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fe6:	f000 fdbd 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3730      	adds	r7, #48	@ 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001f4 	.word	0x200001f4
 8000ff8:	21800100 	.word	0x21800100

08000ffc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f009 ff52 	bl	800aeb2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <MX_ADC2_Init+0xc4>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001014:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001016:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800101a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001034:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001036:	2204      	movs	r2, #4
 8001038:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001042:	2200      	movs	r2, #0
 8001044:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001048:	2201      	movs	r2, #1
 800104a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001076:	4811      	ldr	r0, [pc, #68]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001078:	f001 fe46 	bl	8002d08 <HAL_ADC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001082:	f000 fd6f 	bl	8001b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_ADC2_Init+0xc8>)
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108a:	2306      	movs	r3, #6
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001092:	237f      	movs	r3, #127	@ 0x7f
 8001094:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001096:	2304      	movs	r3, #4
 8001098:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_ADC2_Init+0xc0>)
 80010a4:	f002 fb48 	bl	8003738 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80010ae:	f000 fd59 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000260 	.word	0x20000260
 80010c0:	50000100 	.word	0x50000100
 80010c4:	19200040 	.word	0x19200040

080010c8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0a4      	sub	sp, #144	@ 0x90
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e4:	2254      	movs	r2, #84	@ 0x54
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 fee2 	bl	800aeb2 <memset>
  if(adcHandle->Instance==ADC1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f6:	f040 80a8 	bne.w	800124a <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001100:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001104:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fdc2 	bl	8005c94 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001116:	f000 fd25 	bl	8001b64 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800111a:	4b81      	ldr	r3, [pc, #516]	@ (8001320 <HAL_ADC_MspInit+0x258>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a7f      	ldr	r2, [pc, #508]	@ (8001320 <HAL_ADC_MspInit+0x258>)
 8001122:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001124:	4b7e      	ldr	r3, [pc, #504]	@ (8001320 <HAL_ADC_MspInit+0x258>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10b      	bne.n	8001144 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800112c:	4b7d      	ldr	r3, [pc, #500]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a7c      	ldr	r2, [pc, #496]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001132:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001138:	4b7a      	ldr	r3, [pc, #488]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b77      	ldr	r3, [pc, #476]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	4a76      	ldr	r2, [pc, #472]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001150:	4b74      	ldr	r3, [pc, #464]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b71      	ldr	r3, [pc, #452]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a70      	ldr	r2, [pc, #448]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b6e      	ldr	r3, [pc, #440]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b6b      	ldr	r3, [pc, #428]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a6a      	ldr	r2, [pc, #424]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b68      	ldr	r3, [pc, #416]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800118c:	2304      	movs	r3, #4
 800118e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4861      	ldr	r0, [pc, #388]	@ (8001328 <HAL_ADC_MspInit+0x260>)
 80011a4:	f003 fda4 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80011a8:	2302      	movs	r3, #2
 80011aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f003 fd95 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c6:	2303      	movs	r3, #3
 80011c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011da:	4619      	mov	r1, r3
 80011dc:	4853      	ldr	r0, [pc, #332]	@ (800132c <HAL_ADC_MspInit+0x264>)
 80011de:	f003 fd87 	bl	8004cf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel8;
 80011e2:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 80011e4:	4a53      	ldr	r2, [pc, #332]	@ (8001334 <HAL_ADC_MspInit+0x26c>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011e8:	4b51      	ldr	r3, [pc, #324]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 80011ea:	2205      	movs	r2, #5
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ee:	4b50      	ldr	r3, [pc, #320]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001200:	4b4b      	ldr	r3, [pc, #300]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 8001202:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001206:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001208:	4b49      	ldr	r3, [pc, #292]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 800120a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001210:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 8001212:	2220      	movs	r2, #32
 8001214:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b46      	ldr	r3, [pc, #280]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800121c:	4844      	ldr	r0, [pc, #272]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 800121e:	f003 fa35 	bl	800468c <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001228:	f000 fc9c 	bl	8001b64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a40      	ldr	r2, [pc, #256]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 8001230:	655a      	str	r2, [r3, #84]	@ 0x54
 8001232:	4a3f      	ldr	r2, [pc, #252]	@ (8001330 <HAL_ADC_MspInit+0x268>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2012      	movs	r0, #18
 800123e:	f003 f9fd 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001242:	2012      	movs	r0, #18
 8001244:	f003 fa14 	bl	8004670 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001248:	e066      	b.n	8001318 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a3a      	ldr	r2, [pc, #232]	@ (8001338 <HAL_ADC_MspInit+0x270>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d161      	bne.n	8001318 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800125a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800125e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001264:	4618      	mov	r0, r3
 8001266:	f004 fd15 	bl	8005c94 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8001270:	f000 fc78 	bl	8001b64 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001274:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_ADC_MspInit+0x258>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <HAL_ADC_MspInit+0x258>)
 800127c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800127e:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <HAL_ADC_MspInit+0x258>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d10b      	bne.n	800129e <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001286:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a26      	ldr	r2, [pc, #152]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 800128c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	4a20      	ldr	r2, [pc, #128]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_ADC_MspInit+0x25c>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80012ce:	230b      	movs	r3, #11
 80012d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	@ (8001328 <HAL_ADC_MspInit+0x260>)
 80012e6:	f003 fd03 	bl	8004cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80012ea:	2301      	movs	r3, #1
 80012ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f003 fcf4 	bl	8004cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2012      	movs	r0, #18
 800130e:	f003 f995 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001312:	2012      	movs	r0, #18
 8001314:	f003 f9ac 	bl	8004670 <HAL_NVIC_EnableIRQ>
}
 8001318:	bf00      	nop
 800131a:	3790      	adds	r7, #144	@ 0x90
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000032c 	.word	0x2000032c
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800
 800132c:	48000400 	.word	0x48000400
 8001330:	200002cc 	.word	0x200002cc
 8001334:	40020094 	.word	0x40020094
 8001338:	50000100 	.word	0x50000100

0800133c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_DMA_Init+0x50>)
 8001344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001346:	4a11      	ldr	r2, [pc, #68]	@ (800138c <MX_DMA_Init+0x50>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6493      	str	r3, [r2, #72]	@ 0x48
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_DMA_Init+0x50>)
 8001350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_DMA_Init+0x50>)
 800135c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135e:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <MX_DMA_Init+0x50>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6493      	str	r3, [r2, #72]	@ 0x48
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_DMA_Init+0x50>)
 8001368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2060      	movs	r0, #96	@ 0x60
 8001378:	f003 f960 	bl	800463c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 800137c:	2060      	movs	r0, #96	@ 0x60
 800137e:	f003 f977 	bl	8004670 <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a3e      	ldr	r2, [pc, #248]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b3c      	ldr	r3, [pc, #240]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013be:	4b39      	ldr	r3, [pc, #228]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a38      	ldr	r2, [pc, #224]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b36      	ldr	r3, [pc, #216]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b33      	ldr	r3, [pc, #204]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a32      	ldr	r2, [pc, #200]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a2c      	ldr	r2, [pc, #176]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <MX_GPIO_Init+0x114>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <MX_GPIO_Init+0x114>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a26      	ldr	r2, [pc, #152]	@ (80014a4 <MX_GPIO_Init+0x114>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <MX_GPIO_Init+0x114>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2120      	movs	r1, #32
 8001422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001426:	f003 fde5 	bl	8004ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2104      	movs	r1, #4
 800142e:	481e      	ldr	r0, [pc, #120]	@ (80014a8 <MX_GPIO_Init+0x118>)
 8001430:	f003 fde0 	bl	8004ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4818      	ldr	r0, [pc, #96]	@ (80014ac <MX_GPIO_Init+0x11c>)
 800144c:	f003 fc50 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146a:	f003 fc41 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800146e:	2304      	movs	r3, #4
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <MX_GPIO_Init+0x118>)
 8001486:	f003 fc33 	bl	8004cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2028      	movs	r0, #40	@ 0x28
 8001490:	f003 f8d4 	bl	800463c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001494:	2028      	movs	r0, #40	@ 0x28
 8001496:	f003 f8eb 	bl	8004670 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	48000800 	.word	0x48000800

080014b0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014b8:	1d39      	adds	r1, r7, #4
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	2201      	movs	r2, #1
 80014c0:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <__io_putchar+0x20>)
 80014c2:	f006 fde4 	bl	800808e <HAL_UART_Transmit>

	return ch;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000500 	.word	0x20000500

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /** @brief Tableau des arguments extraits de la commande */
  char* argv[MAX_ARGS];

  /** @brief Nombre d'arguments */
  int argc = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34

  /** @brief Token pour l'analyse de la chaîne */
  char* token;

  /** @brief Flag indiquant qu'une nouvelle commande est prête */
  int newCmdReady = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f001 f978 	bl	80027d6 <HAL_Init>

  /* USER CODE BEGIN Init */
  idxCmd = 0;
 80014e6:	4bb2      	ldr	r3, [pc, #712]	@ (80017b0 <main+0x2dc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  memset(cmd, '\0', CMD_BUFFER_SIZE);
 80014ec:	2240      	movs	r2, #64	@ 0x40
 80014ee:	2100      	movs	r1, #0
 80014f0:	48b0      	ldr	r0, [pc, #704]	@ (80017b4 <main+0x2e0>)
 80014f2:	f009 fcde 	bl	800aeb2 <memset>
  memset(argv, 0, MAX_ARGS * sizeof(char*));
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2224      	movs	r2, #36	@ 0x24
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 fcd7 	bl	800aeb2 <memset>
  memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE);
 8001504:	4bac      	ldr	r3, [pc, #688]	@ (80017b8 <main+0x2e4>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 800150a:	2240      	movs	r2, #64	@ 0x40
 800150c:	2100      	movs	r1, #0
 800150e:	48ab      	ldr	r0, [pc, #684]	@ (80017bc <main+0x2e8>)
 8001510:	f009 fccf 	bl	800aeb2 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f9aa 	bl	800186c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f7ff ff3a 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 800151c:	f7ff ff0e 	bl	800133c <MX_DMA_Init>
  MX_ADC2_Init();
 8001520:	f7ff fd6c 	bl	8000ffc <MX_ADC2_Init>
  MX_ADC1_Init();
 8001524:	f7ff fcf0 	bl	8000f08 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001528:	f000 fd16 	bl	8001f58 <MX_TIM1_Init>
  MX_TIM3_Init();
 800152c:	f000 fe36 	bl	800219c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001530:	f000 fff0 	bl	8002514 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001534:	f001 f83a 	bl	80025ac <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001538:	f000 fdcc 	bl	80020d4 <MX_TIM2_Init>
//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 922);
//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 103);
//


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	49a0      	ldr	r1, [pc, #640]	@ (80017c0 <main+0x2ec>)
 8001540:	48a0      	ldr	r0, [pc, #640]	@ (80017c4 <main+0x2f0>)
 8001542:	f001 fd9d 	bl	8003080 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8001546:	48a0      	ldr	r0, [pc, #640]	@ (80017c8 <main+0x2f4>)
 8001548:	f004 fe4a 	bl	80061e0 <HAL_TIM_Base_Start>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800154c:	2201      	movs	r2, #1
 800154e:	499a      	ldr	r1, [pc, #616]	@ (80017b8 <main+0x2e4>)
 8001550:	489e      	ldr	r0, [pc, #632]	@ (80017cc <main+0x2f8>)
 8001552:	f006 fe2b 	bl	80081ac <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8001556:	200a      	movs	r0, #10
 8001558:	f001 f974 	bl	8002844 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, strlen((char*)started), HAL_MAX_DELAY);
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2265      	movs	r2, #101	@ 0x65
 8001562:	499b      	ldr	r1, [pc, #620]	@ (80017d0 <main+0x2fc>)
 8001564:	4899      	ldr	r0, [pc, #612]	@ (80017cc <main+0x2f8>)
 8001566:	f006 fd92 	bl	800808e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	2217      	movs	r2, #23
 8001570:	4998      	ldr	r1, [pc, #608]	@ (80017d4 <main+0x300>)
 8001572:	4896      	ldr	r0, [pc, #600]	@ (80017cc <main+0x2f8>)
 8001574:	f006 fd8b 	bl	800808e <HAL_UART_Transmit>
  while (1)
  {
	/**
	   * @brief Vérifie si un caractère a été reçu sur l'UART.
	   */
    if (uartRxReceived)
 8001578:	4b97      	ldr	r3, [pc, #604]	@ (80017d8 <main+0x304>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 8086 	beq.w	800168e <main+0x1ba>
    {
      uint8_t receivedChar = uartRxBuffer[0];
 8001582:	4b8d      	ldr	r3, [pc, #564]	@ (80017b8 <main+0x2e4>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
      /**
        * @brief Écho du caractère reçu sur l'UART.
        */
      HAL_UART_Transmit(&huart2, &receivedChar, 1, HAL_MAX_DELAY);
 8001588:	1df9      	adds	r1, r7, #7
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	2201      	movs	r2, #1
 8001590:	488e      	ldr	r0, [pc, #568]	@ (80017cc <main+0x2f8>)
 8001592:	f006 fd7c 	bl	800808e <HAL_UART_Transmit>

      /**
        * @brief Traitement du caractère reçu.
        */
      switch (receivedChar)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b7f      	cmp	r3, #127	@ 0x7f
 800159a:	d033      	beq.n	8001604 <main+0x130>
 800159c:	2b7f      	cmp	r3, #127	@ 0x7f
 800159e:	dc49      	bgt.n	8001634 <main+0x160>
 80015a0:	2b0a      	cmp	r3, #10
 80015a2:	d001      	beq.n	80015a8 <main+0xd4>
 80015a4:	2b0d      	cmp	r3, #13
 80015a6:	d145      	bne.n	8001634 <main+0x160>
      /**
         * @brief Cas du retour chariot ou du saut de ligne : traite la commande entrée.
         */
        case ASCII_CR:
        case ASCII_LF:
          HAL_UART_Transmit(&huart2, newLine, strlen((char*)newLine), HAL_MAX_DELAY);
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	2202      	movs	r2, #2
 80015ae:	498b      	ldr	r1, [pc, #556]	@ (80017dc <main+0x308>)
 80015b0:	4886      	ldr	r0, [pc, #536]	@ (80017cc <main+0x2f8>)
 80015b2:	f006 fd6c 	bl	800808e <HAL_UART_Transmit>
          cmd[idxCmd] = '\0';
 80015b6:	4b7e      	ldr	r3, [pc, #504]	@ (80017b0 <main+0x2dc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7e      	ldr	r2, [pc, #504]	@ (80017b4 <main+0x2e0>)
 80015bc:	2100      	movs	r1, #0
 80015be:	54d1      	strb	r1, [r2, r3]
          argc = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
          token = strtok(cmd, " ");
 80015c4:	4986      	ldr	r1, [pc, #536]	@ (80017e0 <main+0x30c>)
 80015c6:	487b      	ldr	r0, [pc, #492]	@ (80017b4 <main+0x2e0>)
 80015c8:	f009 fc7c 	bl	800aec4 <strtok>
 80015cc:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 80015ce:	e00d      	b.n	80015ec <main+0x118>
          {
            argv[argc++] = token;
 80015d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	3338      	adds	r3, #56	@ 0x38
 80015da:	443b      	add	r3, r7
 80015dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015de:	f843 2c30 	str.w	r2, [r3, #-48]
            token = strtok(NULL, " ");
 80015e2:	497f      	ldr	r1, [pc, #508]	@ (80017e0 <main+0x30c>)
 80015e4:	2000      	movs	r0, #0
 80015e6:	f009 fc6d 	bl	800aec4 <strtok>
 80015ea:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 80015ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <main+0x124>
 80015f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	ddeb      	ble.n	80015d0 <main+0xfc>
          }

          idxCmd = 0;
 80015f8:	4b6d      	ldr	r3, [pc, #436]	@ (80017b0 <main+0x2dc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
          newCmdReady = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8001602:	e03c      	b.n	800167e <main+0x1aa>
          /**
              * @brief Cas de la suppression : efface le dernier caractère saisi.
              */
        case ASCII_DEL:
          if (idxCmd > 0)
 8001604:	4b6a      	ldr	r3, [pc, #424]	@ (80017b0 <main+0x2dc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	dd37      	ble.n	800167c <main+0x1a8>
          {
            idxCmd--;
 800160c:	4b68      	ldr	r3, [pc, #416]	@ (80017b0 <main+0x2dc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3b01      	subs	r3, #1
 8001612:	4a67      	ldr	r2, [pc, #412]	@ (80017b0 <main+0x2dc>)
 8001614:	6013      	str	r3, [r2, #0]
            cmd[idxCmd] = '\0';
 8001616:	4b66      	ldr	r3, [pc, #408]	@ (80017b0 <main+0x2dc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a66      	ldr	r2, [pc, #408]	@ (80017b4 <main+0x2e0>)
 800161c:	2100      	movs	r1, #0
 800161e:	54d1      	strb	r1, [r2, r3]
            // Envoyer un retour en arrière pour effacer dans le terminal
            uint8_t backspace = '\b';
 8001620:	2308      	movs	r3, #8
 8001622:	71bb      	strb	r3, [r7, #6]
            HAL_UART_Transmit(&huart2, &backspace, 1, HAL_MAX_DELAY);
 8001624:	1db9      	adds	r1, r7, #6
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	2201      	movs	r2, #1
 800162c:	4867      	ldr	r0, [pc, #412]	@ (80017cc <main+0x2f8>)
 800162e:	f006 fd2e 	bl	800808e <HAL_UART_Transmit>
          }
          break;
 8001632:	e023      	b.n	800167c <main+0x1a8>

        /**
           * @brief Cas par défaut : ajoute le caractère au buffer de commande.
           */
        default:
          if (idxCmd < CMD_BUFFER_SIZE - 1)
 8001634:	4b5e      	ldr	r3, [pc, #376]	@ (80017b0 <main+0x2dc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b3e      	cmp	r3, #62	@ 0x3e
 800163a:	dc08      	bgt.n	800164e <main+0x17a>
          {
            cmd[idxCmd++] = receivedChar;
 800163c:	4b5c      	ldr	r3, [pc, #368]	@ (80017b0 <main+0x2dc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	495b      	ldr	r1, [pc, #364]	@ (80017b0 <main+0x2dc>)
 8001644:	600a      	str	r2, [r1, #0]
 8001646:	79f9      	ldrb	r1, [r7, #7]
 8001648:	4a5a      	ldr	r2, [pc, #360]	@ (80017b4 <main+0x2e0>)
 800164a:	54d1      	strb	r1, [r2, r3]
            idxCmd = 0;
            memset(cmd, '\0', CMD_BUFFER_SIZE);
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
          }
          break;
 800164c:	e017      	b.n	800167e <main+0x1aa>
            idxCmd = 0;
 800164e:	4b58      	ldr	r3, [pc, #352]	@ (80017b0 <main+0x2dc>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
            memset(cmd, '\0', CMD_BUFFER_SIZE);
 8001654:	2240      	movs	r2, #64	@ 0x40
 8001656:	2100      	movs	r1, #0
 8001658:	4856      	ldr	r0, [pc, #344]	@ (80017b4 <main+0x2e0>)
 800165a:	f009 fc2a 	bl	800aeb2 <memset>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	2212      	movs	r2, #18
 8001664:	495f      	ldr	r1, [pc, #380]	@ (80017e4 <main+0x310>)
 8001666:	4859      	ldr	r0, [pc, #356]	@ (80017cc <main+0x2f8>)
 8001668:	f006 fd11 	bl	800808e <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	2217      	movs	r2, #23
 8001672:	4958      	ldr	r1, [pc, #352]	@ (80017d4 <main+0x300>)
 8001674:	4855      	ldr	r0, [pc, #340]	@ (80017cc <main+0x2f8>)
 8001676:	f006 fd0a 	bl	800808e <HAL_UART_Transmit>
          break;
 800167a:	e000      	b.n	800167e <main+0x1aa>
          break;
 800167c:	bf00      	nop
      }
      uartRxReceived = 0;
 800167e:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <main+0x304>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
      /**
        * @brief Relance la réception UART en interruption.
        */
      HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001684:	2201      	movs	r2, #1
 8001686:	494c      	ldr	r1, [pc, #304]	@ (80017b8 <main+0x2e4>)
 8001688:	4850      	ldr	r0, [pc, #320]	@ (80017cc <main+0x2f8>)
 800168a:	f006 fd8f 	bl	80081ac <HAL_UART_Receive_IT>
    }
    /**
      * @brief Vérifie si une nouvelle commande est prête à être traitée.
      */
    if (newCmdReady)
 800168e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001690:	2b00      	cmp	r3, #0
 8001692:	f43f af71 	beq.w	8001578 <main+0xa4>
    {
      newCmdReady = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (argc > 0)
 800169a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169c:	2b00      	cmp	r3, #0
 800169e:	f340 80ca 	ble.w	8001836 <main+0x362>
      {
    	/**
    	  * @brief (Sera remplacé par une fonction) Traite les commandes reconnues : help, pinout, start, stop.
    	  */
        if (strcmp(argv[0], "help") == 0)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4950      	ldr	r1, [pc, #320]	@ (80017e8 <main+0x314>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fdba 	bl	8000220 <strcmp>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <main+0x1ee>
        {
          HAL_UART_Transmit(&huart2, helpMsg, strlen((char*)helpMsg), HAL_MAX_DELAY);
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	22ac      	movs	r2, #172	@ 0xac
 80016b8:	494c      	ldr	r1, [pc, #304]	@ (80017ec <main+0x318>)
 80016ba:	4844      	ldr	r0, [pc, #272]	@ (80017cc <main+0x2f8>)
 80016bc:	f006 fce7 	bl	800808e <HAL_UART_Transmit>
 80016c0:	e0b9      	b.n	8001836 <main+0x362>
        }
        else if (strcmp(argv[0], "pinout") == 0)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	494a      	ldr	r1, [pc, #296]	@ (80017f0 <main+0x31c>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fdaa 	bl	8000220 <strcmp>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d107      	bne.n	80016e2 <main+0x20e>
        {
          HAL_UART_Transmit(&huart2, pinout, strlen((char*)pinout), HAL_MAX_DELAY);
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	2239      	movs	r2, #57	@ 0x39
 80016d8:	4946      	ldr	r1, [pc, #280]	@ (80017f4 <main+0x320>)
 80016da:	483c      	ldr	r0, [pc, #240]	@ (80017cc <main+0x2f8>)
 80016dc:	f006 fcd7 	bl	800808e <HAL_UART_Transmit>
 80016e0:	e0a9      	b.n	8001836 <main+0x362>
        }
        else if (strcmp(argv[0], "start") == 0)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4944      	ldr	r1, [pc, #272]	@ (80017f8 <main+0x324>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fd9a 	bl	8000220 <strcmp>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <main+0x232>
        {
        	start();
 80016f2:	f000 f91b 	bl	800192c <start>
          HAL_UART_Transmit(&huart2, powerOn, strlen((char*)powerOn), HAL_MAX_DELAY);
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	220a      	movs	r2, #10
 80016fc:	493f      	ldr	r1, [pc, #252]	@ (80017fc <main+0x328>)
 80016fe:	4833      	ldr	r0, [pc, #204]	@ (80017cc <main+0x2f8>)
 8001700:	f006 fcc5 	bl	800808e <HAL_UART_Transmit>
 8001704:	e097      	b.n	8001836 <main+0x362>
        }
        else if (strcmp(argv[0], "stop") == 0)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	493d      	ldr	r1, [pc, #244]	@ (8001800 <main+0x32c>)
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fd88 	bl	8000220 <strcmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <main+0x256>
        {
          stop();
 8001716:	f000 f929 	bl	800196c <stop>
          HAL_UART_Transmit(&huart2, powerOff, strlen((char*)powerOff), HAL_MAX_DELAY);
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	220b      	movs	r2, #11
 8001720:	4938      	ldr	r1, [pc, #224]	@ (8001804 <main+0x330>)
 8001722:	482a      	ldr	r0, [pc, #168]	@ (80017cc <main+0x2f8>)
 8001724:	f006 fcb3 	bl	800808e <HAL_UART_Transmit>
 8001728:	e085      	b.n	8001836 <main+0x362>
        }
        else if(strcmp(argv[0], "adc") == 0){
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4936      	ldr	r1, [pc, #216]	@ (8001808 <main+0x334>)
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd76 	bl	8000220 <strcmp>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <main+0x294>
        	ADC_conversion();
 800173a:	f000 f9ad 	bl	8001a98 <ADC_conversion>
            printf("Tension adc : %.3f V\r\n", tension_adc);
 800173e:	4b33      	ldr	r3, [pc, #204]	@ (800180c <main+0x338>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff38 	bl	80005b8 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4830      	ldr	r0, [pc, #192]	@ (8001810 <main+0x33c>)
 800174e:	f009 fb3b 	bl	800adc8 <iprintf>
            printf("I_moteur : %.3f A\r\n", courant);
 8001752:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <main+0x340>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ff2e 	bl	80005b8 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	482d      	ldr	r0, [pc, #180]	@ (8001818 <main+0x344>)
 8001762:	f009 fb31 	bl	800adc8 <iprintf>
 8001766:	e066      	b.n	8001836 <main+0x362>

        }
        else if (strcmp(argv[0], "speed") == 0) {
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	492c      	ldr	r1, [pc, #176]	@ (800181c <main+0x348>)
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd57 	bl	8000220 <strcmp>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d157      	bne.n	8001828 <main+0x354>
            if (argc > 1) {
 8001778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177a:	2b01      	cmp	r3, #1
 800177c:	dd10      	ble.n	80017a0 <main+0x2cc>
            	changeSpeed(atoi(argv[1]));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4618      	mov	r0, r3
 8001782:	f008 fd7f 	bl	800a284 <atoi>
 8001786:	4603      	mov	r3, r0
 8001788:	b29b      	uxth	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f904 	bl	8001998 <changeSpeed>
                HAL_UART_Transmit(&huart2, speedMsg, strlen((char*)speedMsg), HAL_MAX_DELAY);
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	2218      	movs	r2, #24
 8001796:	4922      	ldr	r1, [pc, #136]	@ (8001820 <main+0x34c>)
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <main+0x2f8>)
 800179a:	f006 fc78 	bl	800808e <HAL_UART_Transmit>
 800179e:	e04a      	b.n	8001836 <main+0x362>
            } else {
                HAL_UART_Transmit(&huart2, (uint8_t*)"Speed value missing\r\n", 21, HAL_MAX_DELAY);
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
 80017a4:	2215      	movs	r2, #21
 80017a6:	491f      	ldr	r1, [pc, #124]	@ (8001824 <main+0x350>)
 80017a8:	4808      	ldr	r0, [pc, #32]	@ (80017cc <main+0x2f8>)
 80017aa:	f006 fc70 	bl	800808e <HAL_UART_Transmit>
 80017ae:	e042      	b.n	8001836 <main+0x362>
 80017b0:	200003bc 	.word	0x200003bc
 80017b4:	2000037c 	.word	0x2000037c
 80017b8:	20000338 	.word	0x20000338
 80017bc:	2000033c 	.word	0x2000033c
 80017c0:	200003c8 	.word	0x200003c8
 80017c4:	200001f4 	.word	0x200001f4
 80017c8:	2000041c 	.word	0x2000041c
 80017cc:	20000500 	.word	0x20000500
 80017d0:	0800d1f8 	.word	0x0800d1f8
 80017d4:	0800d1e0 	.word	0x0800d1e0
 80017d8:	20000334 	.word	0x20000334
 80017dc:	0800d260 	.word	0x0800d260
 80017e0:	0800d118 	.word	0x0800d118
 80017e4:	0800d11c 	.word	0x0800d11c
 80017e8:	0800d130 	.word	0x0800d130
 80017ec:	0800d280 	.word	0x0800d280
 80017f0:	0800d138 	.word	0x0800d138
 80017f4:	0800d330 	.word	0x0800d330
 80017f8:	0800d140 	.word	0x0800d140
 80017fc:	0800d36c 	.word	0x0800d36c
 8001800:	0800d148 	.word	0x0800d148
 8001804:	0800d378 	.word	0x0800d378
 8001808:	0800d150 	.word	0x0800d150
 800180c:	200003c0 	.word	0x200003c0
 8001810:	0800d154 	.word	0x0800d154
 8001814:	200003c4 	.word	0x200003c4
 8001818:	0800d16c 	.word	0x0800d16c
 800181c:	0800d180 	.word	0x0800d180
 8001820:	0800d264 	.word	0x0800d264
 8001824:	0800d188 	.word	0x0800d188
            }
        }
        else
        {
          HAL_UART_Transmit(&huart2, cmdNotFound, strlen((char*)cmdNotFound), HAL_MAX_DELAY);
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	2213      	movs	r2, #19
 800182e:	490a      	ldr	r1, [pc, #40]	@ (8001858 <main+0x384>)
 8001830:	480a      	ldr	r0, [pc, #40]	@ (800185c <main+0x388>)
 8001832:	f006 fc2c 	bl	800808e <HAL_UART_Transmit>
        }
      }
      // Affiche le prompt
      HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	2217      	movs	r2, #23
 800183c:	4908      	ldr	r1, [pc, #32]	@ (8001860 <main+0x38c>)
 800183e:	4807      	ldr	r0, [pc, #28]	@ (800185c <main+0x388>)
 8001840:	f006 fc25 	bl	800808e <HAL_UART_Transmit>

      // Réinitialise le buffer de commande et l'index
      idxCmd = 0;
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <main+0x390>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
      memset(cmd, '\0', CMD_BUFFER_SIZE);
 800184a:	2240      	movs	r2, #64	@ 0x40
 800184c:	2100      	movs	r1, #0
 800184e:	4806      	ldr	r0, [pc, #24]	@ (8001868 <main+0x394>)
 8001850:	f009 fb2f 	bl	800aeb2 <memset>
    if (uartRxReceived)
 8001854:	e690      	b.n	8001578 <main+0xa4>
 8001856:	bf00      	nop
 8001858:	0800d384 	.word	0x0800d384
 800185c:	20000500 	.word	0x20000500
 8001860:	0800d1e0 	.word	0x0800d1e0
 8001864:	200003bc 	.word	0x200003bc
 8001868:	2000037c 	.word	0x2000037c

0800186c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b094      	sub	sp, #80	@ 0x50
 8001870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	2238      	movs	r2, #56	@ 0x38
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f009 fb19 	bl	800aeb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800188e:	2000      	movs	r0, #0
 8001890:	f003 fbec 	bl	800506c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800189c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a2:	2303      	movs	r3, #3
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80018a6:	2306      	movs	r3, #6
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018aa:	2355      	movs	r3, #85	@ 0x55
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fc88 	bl	80051d4 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018ca:	f000 f94b 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2104      	movs	r1, #4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 ff86 	bl	80057f8 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018f2:	f000 f937 	bl	8001b64 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	@ 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_UART_RxCpltCallback>:
  * @brief Callback appelé à la fin de la réception UART.
  * @param huart Handle de l'UART.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <HAL_UART_RxCpltCallback+0x24>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d102      	bne.n	8001918 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxReceived = 1;
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_UART_RxCpltCallback+0x28>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
    // La relance de la réception UART est effectuée dans la boucle principale
  }
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40004400 	.word	0x40004400
 8001928:	20000334 	.word	0x20000334

0800192c <start>:

/** @brief Fonction qui genère les PWM avec un rapport cyclique initial de 50%
 */
void start(){
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0


	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001930:	2100      	movs	r1, #0
 8001932:	480d      	ldr	r0, [pc, #52]	@ (8001968 <start+0x3c>)
 8001934:	f004 fd94 	bl	8006460 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001938:	2104      	movs	r1, #4
 800193a:	480b      	ldr	r0, [pc, #44]	@ (8001968 <start+0x3c>)
 800193c:	f004 fd90 	bl	8006460 <HAL_TIM_PWM_Start>

	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001940:	2100      	movs	r1, #0
 8001942:	4809      	ldr	r0, [pc, #36]	@ (8001968 <start+0x3c>)
 8001944:	f006 f89e 	bl	8007a84 <HAL_TIMEx_PWMN_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001948:	2104      	movs	r1, #4
 800194a:	4807      	ldr	r0, [pc, #28]	@ (8001968 <start+0x3c>)
 800194c:	f006 f89a 	bl	8007a84 <HAL_TIMEx_PWMN_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <start+0x3c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);
 800195a:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <start+0x3c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001962:	639a      	str	r2, [r3, #56]	@ 0x38



}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000041c 	.word	0x2000041c

0800196c <stop>:

/** @brief Fonction qui stoppe la génération des PWM
 */
void stop(){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001970:	2100      	movs	r1, #0
 8001972:	4808      	ldr	r0, [pc, #32]	@ (8001994 <stop+0x28>)
 8001974:	f004 fe86 	bl	8006684 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001978:	2104      	movs	r1, #4
 800197a:	4806      	ldr	r0, [pc, #24]	@ (8001994 <stop+0x28>)
 800197c:	f004 fe82 	bl	8006684 <HAL_TIM_PWM_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001980:	2100      	movs	r1, #0
 8001982:	4804      	ldr	r0, [pc, #16]	@ (8001994 <stop+0x28>)
 8001984:	f006 f940 	bl	8007c08 <HAL_TIMEx_PWMN_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001988:	2104      	movs	r1, #4
 800198a:	4802      	ldr	r0, [pc, #8]	@ (8001994 <stop+0x28>)
 800198c:	f006 f93c 	bl	8007c08 <HAL_TIMEx_PWMN_Stop>

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000041c 	.word	0x2000041c

08001998 <changeSpeed>:

/** @brief Fonction qui change la vitesse du moteur en modifiant le rapport cyclique des PWM
	* @params speed : vitesse d'entrée
 */

void changeSpeed(uint16_t targetSpeed) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b092      	sub	sp, #72	@ 0x48
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
    static uint16_t currentSpeed = 512;  // Vitesse actuelle (persistant puisque static)

    if (targetSpeed > 100) {
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	2b64      	cmp	r3, #100	@ 0x64
 80019a6:	d915      	bls.n	80019d4 <changeSpeed+0x3c>
        char errorMsg[50];
        sprintf(errorMsg, "Valeur de speed incorrecte: %d. Doit être entre 0 et 100.\r\n", targetSpeed);
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	4935      	ldr	r1, [pc, #212]	@ (8001a84 <changeSpeed+0xec>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f009 fa1b 	bl	800adec <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)errorMsg, strlen(errorMsg), HAL_MAX_DELAY);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc90 	bl	80002e0 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f107 0108 	add.w	r1, r7, #8
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	482e      	ldr	r0, [pc, #184]	@ (8001a88 <changeSpeed+0xf0>)
 80019ce:	f006 fb5e 	bl	800808e <HAL_UART_Transmit>
 80019d2:	e053      	b.n	8001a7c <changeSpeed+0xe4>
        return;
    }

    // Converti la vitesse de 0-100 à 0-1024
    uint16_t targetValue = (targetSpeed * 1024) / 100;
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a8c <changeSpeed+0xf4>)
 80019da:	fb82 1203 	smull	r1, r2, r2, r3
 80019de:	1152      	asrs	r2, r2, #5
 80019e0:	17db      	asrs	r3, r3, #31
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    // pas de changement
    int16_t step = (targetValue - currentSpeed) / SPEED_STEPS;
 80019e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80019ec:	4a28      	ldr	r2, [pc, #160]	@ (8001a90 <changeSpeed+0xf8>)
 80019ee:	8812      	ldrh	r2, [r2, #0]
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	4a26      	ldr	r2, [pc, #152]	@ (8001a8c <changeSpeed+0xf4>)
 80019f4:	fb82 1203 	smull	r1, r2, r2, r3
 80019f8:	1152      	asrs	r2, r2, #5
 80019fa:	17db      	asrs	r3, r3, #31
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    // Change progressivement la vitesse
    for (int i = 0; i < SPEED_STEPS; i++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a06:	e026      	b.n	8001a56 <changeSpeed+0xbe>
        currentSpeed += step;
 8001a08:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <changeSpeed+0xf8>)
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a10:	4413      	add	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <changeSpeed+0xf8>)
 8001a16:	801a      	strh	r2, [r3, #0]

        // currentSpeed reste dans les limites
        if (currentSpeed > 1024) currentSpeed = 1024;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <changeSpeed+0xf8>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a20:	d903      	bls.n	8001a2a <changeSpeed+0x92>
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <changeSpeed+0xf8>)
 8001a24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a28:	801a      	strh	r2, [r3, #0]
        if (currentSpeed < 0) currentSpeed = 0;

        uint16_t speed_channel_1 = currentSpeed;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <changeSpeed+0xf8>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        uint16_t speed_channel_2 = 1024 - currentSpeed;
 8001a30:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <changeSpeed+0xf8>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001a38:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // Mise à jour du rapport cyclique
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed_channel_1);
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <changeSpeed+0xfc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001a40:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed_channel_2);
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <changeSpeed+0xfc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001a48:	639a      	str	r2, [r3, #56]	@ 0x38

        HAL_Delay(SPEED_DELAY);  // Petit délai pour une transition en douceur
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f000 fefa 	bl	8002844 <HAL_Delay>
    for (int i = 0; i < SPEED_STEPS; i++) {
 8001a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a52:	3301      	adds	r3, #1
 8001a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a58:	2b63      	cmp	r3, #99	@ 0x63
 8001a5a:	ddd5      	ble.n	8001a08 <changeSpeed+0x70>
    }

    // Assurer que la vitesse finale est exactement celle demandée
    currentSpeed = targetValue;
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a90 <changeSpeed+0xf8>)
 8001a5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001a62:	8013      	strh	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, currentSpeed);
 8001a64:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <changeSpeed+0xf8>)
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <changeSpeed+0xfc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024 - currentSpeed);
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <changeSpeed+0xf8>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 8001a76:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <changeSpeed+0xfc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001a7c:	3748      	adds	r7, #72	@ 0x48
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	0800d1a0 	.word	0x0800d1a0
 8001a88:	20000500 	.word	0x20000500
 8001a8c:	51eb851f 	.word	0x51eb851f
 8001a90:	20000000 	.word	0x20000000
 8001a94:	2000041c 	.word	0x2000041c

08001a98 <ADC_conversion>:

void ADC_conversion() {
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0

    float sensibilite = 0.05;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <ADC_conversion+0x60>)
 8001aa0:	60fb      	str	r3, [r7, #12]
    float Vref = 1.65;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <ADC_conversion+0x64>)
 8001aa4:	60bb      	str	r3, [r7, #8]

    float v_adc = (adc_buffer[0] * 3.3f) / 4096.0f;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <ADC_conversion+0x68>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001b04 <ADC_conversion+0x6c>
 8001ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aba:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001b08 <ADC_conversion+0x70>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	edc7 7a01 	vstr	s15, [r7, #4]
    float I_courant = (Vref - v_adc) / sensibilite;
 8001ac6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ace:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ad2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ada:	edc7 7a00 	vstr	s15, [r7]

    tension_adc = v_adc;
 8001ade:	4a0b      	ldr	r2, [pc, #44]	@ (8001b0c <ADC_conversion+0x74>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6013      	str	r3, [r2, #0]
	courant = I_courant;
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <ADC_conversion+0x78>)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6013      	str	r3, [r2, #0]

    //printf("Tension adc : %.3f V\r\n", v_adc);
    //printf("I_moteur : %.3f A\r\n", I_courant);

}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	3d4ccccd 	.word	0x3d4ccccd
 8001afc:	3fd33333 	.word	0x3fd33333
 8001b00:	200003c8 	.word	0x200003c8
 8001b04:	40533333 	.word	0x40533333
 8001b08:	45800000 	.word	0x45800000
 8001b0c:	200003c0 	.word	0x200003c0
 8001b10:	200003c4 	.word	0x200003c4

08001b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d109      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x26>
		counter++;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b2e:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	4909      	ldr	r1, [pc, #36]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b34:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b36:	f001 faa3 	bl	8003080 <HAL_ADC_Start_DMA>
		}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8001b44:	f000 fe60 	bl	8002808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	20000330 	.word	0x20000330
 8001b58:	200003c8 	.word	0x200003c8
 8001b5c:	200001f4 	.word	0x200001f4
 8001b60:	40001000 	.word	0x40001000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <Error_Handler+0x8>

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_MspInit+0x44>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ba6:	f003 fb05 	bl	80051b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	@ 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c7c <HAL_InitTick+0xc4>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c7c <HAL_InitTick+0xc4>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd4:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <HAL_InitTick+0xc4>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be0:	f107 020c 	add.w	r2, r7, #12
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 ffda 	bl	8005ba4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bf0:	f003 ffac 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8001bf4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf8:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <HAL_InitTick+0xc8>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9b      	lsrs	r3, r3, #18
 8001c00:	3b01      	subs	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_InitTick+0xcc>)
 8001c06:	4a20      	ldr	r2, [pc, #128]	@ (8001c88 <HAL_InitTick+0xd0>)
 8001c08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <HAL_InitTick+0xcc>)
 8001c0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c12:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <HAL_InitTick+0xcc>)
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_InitTick+0xcc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_InitTick+0xcc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001c24:	4817      	ldr	r0, [pc, #92]	@ (8001c84 <HAL_InitTick+0xcc>)
 8001c26:	f004 fa83 	bl	8006130 <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d11b      	bne.n	8001c70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c38:	4812      	ldr	r0, [pc, #72]	@ (8001c84 <HAL_InitTick+0xcc>)
 8001c3a:	f004 fb41 	bl	80062c0 <HAL_TIM_Base_Start_IT>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c4c:	2036      	movs	r0, #54	@ 0x36
 8001c4e:	f002 fd0f 	bl	8004670 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d808      	bhi.n	8001c6a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	2036      	movs	r0, #54	@ 0x36
 8001c5e:	f002 fced 	bl	800463c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <HAL_InitTick+0xd4>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e002      	b.n	8001c70 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3730      	adds	r7, #48	@ 0x30
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	200003cc 	.word	0x200003cc
 8001c88:	40001000 	.word	0x40001000
 8001c8c:	20000008 	.word	0x20000008

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <NMI_Handler+0x4>

08001c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <BusFault_Handler+0x4>

08001cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <UsageFault_Handler+0x4>

08001cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cf4:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <ADC1_2_IRQHandler+0x14>)
 8001cf6:	f001 fa97 	bl	8003228 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001cfa:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <ADC1_2_IRQHandler+0x18>)
 8001cfc:	f001 fa94 	bl	8003228 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200001f4 	.word	0x200001f4
 8001d08:	20000260 	.word	0x20000260

08001d0c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001d12:	f004 fd53 	bl	80067bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000041c 	.word	0x2000041c

08001d20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d26:	f004 fd49 	bl	80067bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000041c 	.word	0x2000041c

08001d34 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001d3a:	f004 fd3f 	bl	80067bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000041c 	.word	0x2000041c

08001d48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <TIM1_CC_IRQHandler+0x10>)
 8001d4e:	f004 fd35 	bl	80067bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000041c 	.word	0x2000041c

08001d5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <USART2_IRQHandler+0x10>)
 8001d62:	f006 fa6f 	bl	8008244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000500 	.word	0x20000500

08001d70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001d74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d78:	f003 f954 	bl	8005024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <TIM6_DAC_IRQHandler+0x10>)
 8001d86:	f004 fd19 	bl	80067bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200003cc 	.word	0x200003cc

08001d94 <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <DMA1_Channel8_IRQHandler+0x10>)
 8001d9a:	f002 fe5a 	bl	8004a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200002cc 	.word	0x200002cc

08001da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_kill>:

int _kill(int pid, int sig)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dc2:	f009 f925 	bl	800b010 <__errno>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2216      	movs	r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
  return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_exit>:

void _exit (int status)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ffe7 	bl	8001db8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dea:	bf00      	nop
 8001dec:	e7fd      	b.n	8001dea <_exit+0x12>

08001dee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e00a      	b.n	8001e16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e00:	f3af 8000 	nop.w
 8001e04:	4601      	mov	r1, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	60ba      	str	r2, [r7, #8]
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dbf0      	blt.n	8001e00 <_read+0x12>
  }

  return len;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e009      	b.n	8001e4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fb34 	bl	80014b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbf1      	blt.n	8001e3a <_write+0x12>
  }
  return len;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_close>:

int _close(int file)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e88:	605a      	str	r2, [r3, #4]
  return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_isatty>:

int _isatty(int file)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <_sbrk+0x5c>)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <_sbrk+0x60>)
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <_sbrk+0x64>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <_sbrk+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef8:	f009 f88a 	bl	800b010 <__errno>
 8001efc:	4603      	mov	r3, r0
 8001efe:	220c      	movs	r2, #12
 8001f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e009      	b.n	8001f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <_sbrk+0x64>)
 8001f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20020000 	.word	0x20020000
 8001f28:	00000400 	.word	0x00000400
 8001f2c:	20000418 	.word	0x20000418
 8001f30:	20000778 	.word	0x20000778

08001f34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <SystemInit+0x20>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <SystemInit+0x20>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b09c      	sub	sp, #112	@ 0x70
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2234      	movs	r2, #52	@ 0x34
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 ff8d 	bl	800aeb2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f98:	4b4c      	ldr	r3, [pc, #304]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001f9a:	4a4d      	ldr	r2, [pc, #308]	@ (80020d0 <MX_TIM1_Init+0x178>)
 8001f9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001fa4:	4b49      	ldr	r3, [pc, #292]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001faa:	4b48      	ldr	r3, [pc, #288]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b46      	ldr	r3, [pc, #280]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb8:	4b44      	ldr	r3, [pc, #272]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b43      	ldr	r3, [pc, #268]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fc4:	4841      	ldr	r0, [pc, #260]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fc6:	f004 f8b3 	bl	8006130 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001fd0:	f7ff fdc8 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fde:	4619      	mov	r1, r3
 8001fe0:	483a      	ldr	r0, [pc, #232]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001fe2:	f004 fe4f 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fec:	f7ff fdba 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ff0:	4836      	ldr	r0, [pc, #216]	@ (80020cc <MX_TIM1_Init+0x174>)
 8001ff2:	f004 f9dd 	bl	80063b0 <HAL_TIM_PWM_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ffc:	f7ff fdb2 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002000:	2320      	movs	r3, #32
 8002002:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800200c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002010:	4619      	mov	r1, r3
 8002012:	482e      	ldr	r0, [pc, #184]	@ (80020cc <MX_TIM1_Init+0x174>)
 8002014:	f005 fe56 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800201e:	f7ff fda1 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	2360      	movs	r3, #96	@ 0x60
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 512;
 8002026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800202a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202c:	2300      	movs	r3, #0
 800202e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002030:	2300      	movs	r3, #0
 8002032:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002040:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	4820      	ldr	r0, [pc, #128]	@ (80020cc <MX_TIM1_Init+0x174>)
 800204a:	f004 fd07 	bl	8006a5c <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002054:	f7ff fd86 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002058:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800205c:	2204      	movs	r2, #4
 800205e:	4619      	mov	r1, r3
 8002060:	481a      	ldr	r0, [pc, #104]	@ (80020cc <MX_TIM1_Init+0x174>)
 8002062:	f004 fcfb 	bl	8006a5c <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800206c:	f7ff fd7a 	bl	8001b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 800207c:	2322      	movs	r3, #34	@ 0x22
 800207e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002088:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002096:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <MX_TIM1_Init+0x174>)
 80020ae:	f005 fe9f 	bl	8007df0 <HAL_TIMEx_ConfigBreakDeadTime>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80020b8:	f7ff fd54 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020bc:	4803      	ldr	r0, [pc, #12]	@ (80020cc <MX_TIM1_Init+0x174>)
 80020be:	f000 f99d 	bl	80023fc <HAL_TIM_MspPostInit>

}
 80020c2:	bf00      	nop
 80020c4:	3770      	adds	r7, #112	@ 0x70
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000041c 	.word	0x2000041c
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <MX_TIM2_Init+0xc4>)
 80020fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <MX_TIM2_Init+0xc4>)
 8002102:	2200      	movs	r2, #0
 8002104:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <MX_TIM2_Init+0xc4>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <MX_TIM2_Init+0xc4>)
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002114:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <MX_TIM2_Init+0xc4>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <MX_TIM2_Init+0xc4>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002120:	481d      	ldr	r0, [pc, #116]	@ (8002198 <MX_TIM2_Init+0xc4>)
 8002122:	f004 f945 	bl	80063b0 <HAL_TIM_PWM_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800212c:	f7ff fd1a 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4816      	ldr	r0, [pc, #88]	@ (8002198 <MX_TIM2_Init+0xc4>)
 8002140:	f005 fdc0 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800214a:	f7ff fd0b 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214e:	2360      	movs	r3, #96	@ 0x60
 8002150:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800215e:	463b      	mov	r3, r7
 8002160:	2200      	movs	r2, #0
 8002162:	4619      	mov	r1, r3
 8002164:	480c      	ldr	r0, [pc, #48]	@ (8002198 <MX_TIM2_Init+0xc4>)
 8002166:	f004 fc79 	bl	8006a5c <HAL_TIM_PWM_ConfigChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002170:	f7ff fcf8 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002174:	463b      	mov	r3, r7
 8002176:	2204      	movs	r2, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4807      	ldr	r0, [pc, #28]	@ (8002198 <MX_TIM2_Init+0xc4>)
 800217c:	f004 fc6e 	bl	8006a5c <HAL_TIM_PWM_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002186:	f7ff fced 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800218a:	4803      	ldr	r0, [pc, #12]	@ (8002198 <MX_TIM2_Init+0xc4>)
 800218c:	f000 f936 	bl	80023fc <HAL_TIM_MspPostInit>

}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	@ 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000468 	.word	0x20000468

0800219c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ba:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <MX_TIM3_Init+0x90>)
 80021bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002230 <MX_TIM3_Init+0x94>)
 80021be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <MX_TIM3_Init+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b19      	ldr	r3, [pc, #100]	@ (800222c <MX_TIM3_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021cc:	4b17      	ldr	r3, [pc, #92]	@ (800222c <MX_TIM3_Init+0x90>)
 80021ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <MX_TIM3_Init+0x90>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <MX_TIM3_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	4619      	mov	r1, r3
 80021f6:	480d      	ldr	r0, [pc, #52]	@ (800222c <MX_TIM3_Init+0x90>)
 80021f8:	f005 fb95 	bl	8007926 <HAL_TIMEx_HallSensor_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002202:	f7ff fcaf 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002206:	2350      	movs	r3, #80	@ 0x50
 8002208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4806      	ldr	r0, [pc, #24]	@ (800222c <MX_TIM3_Init+0x90>)
 8002214:	f005 fd56 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800221e:	f7ff fca1 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200004b4 	.word	0x200004b4
 8002230:	40000400 	.word	0x40000400

08002234 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a28      	ldr	r2, [pc, #160]	@ (80022f4 <HAL_TIM_Base_MspInit+0xc0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d149      	bne.n	80022ea <HAL_TIM_Base_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002256:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <HAL_TIM_Base_MspInit+0xc4>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	4a27      	ldr	r2, [pc, #156]	@ (80022f8 <HAL_TIM_Base_MspInit+0xc4>)
 800225c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002260:	6613      	str	r3, [r2, #96]	@ 0x60
 8002262:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_TIM_Base_MspInit+0xc4>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b22      	ldr	r3, [pc, #136]	@ (80022f8 <HAL_TIM_Base_MspInit+0xc4>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	4a21      	ldr	r2, [pc, #132]	@ (80022f8 <HAL_TIM_Base_MspInit+0xc4>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227a:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <HAL_TIM_Base_MspInit+0xc4>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 8002286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002298:	2306      	movs	r3, #6
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f002 fd23 	bl	8004cf0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2018      	movs	r0, #24
 80022b0:	f002 f9c4 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80022b4:	2018      	movs	r0, #24
 80022b6:	f002 f9db 	bl	8004670 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2019      	movs	r0, #25
 80022c0:	f002 f9bc 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022c4:	2019      	movs	r0, #25
 80022c6:	f002 f9d3 	bl	8004670 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	201a      	movs	r0, #26
 80022d0:	f002 f9b4 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80022d4:	201a      	movs	r0, #26
 80022d6:	f002 f9cb 	bl	8004670 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	201b      	movs	r0, #27
 80022e0:	f002 f9ac 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022e4:	201b      	movs	r0, #27
 80022e6:	f002 f9c3 	bl	8004670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	@ 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800230c:	d10b      	bne.n	8002326 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_TIM_PWM_MspInit+0x38>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	4a08      	ldr	r2, [pc, #32]	@ (8002334 <HAL_TIM_PWM_MspInit+0x38>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6593      	str	r3, [r2, #88]	@ 0x58
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_TIM_PWM_MspInit+0x38>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d145      	bne.n	80023e6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235e:	4a25      	ldr	r2, [pc, #148]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6593      	str	r3, [r2, #88]	@ 0x58
 8002366:	4b23      	ldr	r3, [pc, #140]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	4a1f      	ldr	r2, [pc, #124]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237e:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	4a19      	ldr	r2, [pc, #100]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002396:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80023a2:	2350      	movs	r3, #80	@ 0x50
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023b2:	2302      	movs	r3, #2
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c0:	f002 fc96 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023d6:	2302      	movs	r3, #2
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80023e2:	f002 fc85 	bl	8004cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	@ 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40021000 	.word	0x40021000
 80023f8:	48000800 	.word	0x48000800

080023fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	@ 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3b      	ldr	r2, [pc, #236]	@ (8002508 <HAL_TIM_MspPostInit+0x10c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d14c      	bne.n	80024b8 <HAL_TIM_MspPostInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	4a3a      	ldr	r2, [pc, #232]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242a:	4b38      	ldr	r3, [pc, #224]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b35      	ldr	r3, [pc, #212]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	4a34      	ldr	r2, [pc, #208]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002442:	4b32      	ldr	r3, [pc, #200]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800244e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002460:	2306      	movs	r3, #6
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4829      	ldr	r0, [pc, #164]	@ (8002510 <HAL_TIM_MspPostInit+0x114>)
 800246c:	f002 fc40 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002470:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002482:	2304      	movs	r3, #4
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	4820      	ldr	r0, [pc, #128]	@ (8002510 <HAL_TIM_MspPostInit+0x114>)
 800248e:	f002 fc2f 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 8002492:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80024a4:	2306      	movs	r3, #6
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024b2:	f002 fc1d 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024b6:	e022      	b.n	80024fe <HAL_TIM_MspPostInit+0x102>
  else if(timHandle->Instance==TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c0:	d11d      	bne.n	80024fe <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b12      	ldr	r3, [pc, #72]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	4a11      	ldr	r2, [pc, #68]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ce:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_TIM_MspPostInit+0x110>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fa:	f002 fbf9 	bl	8004cf0 <HAL_GPIO_Init>
}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	@ 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40021000 	.word	0x40021000
 8002510:	48000400 	.word	0x48000400

08002514 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002518:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 800251a:	4a23      	ldr	r2, [pc, #140]	@ (80025a8 <MX_USART2_UART_Init+0x94>)
 800251c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800251e:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002532:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 800253a:	220c      	movs	r2, #12
 800253c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002544:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254a:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002558:	2200      	movs	r2, #0
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800255c:	4811      	ldr	r0, [pc, #68]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 800255e:	f005 fd46 	bl	8007fee <HAL_UART_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002568:	f7ff fafc 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256c:	2100      	movs	r1, #0
 800256e:	480d      	ldr	r0, [pc, #52]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002570:	f007 fdbd 	bl	800a0ee <HAL_UARTEx_SetTxFifoThreshold>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800257a:	f7ff faf3 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800257e:	2100      	movs	r1, #0
 8002580:	4808      	ldr	r0, [pc, #32]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002582:	f007 fdf2 	bl	800a16a <HAL_UARTEx_SetRxFifoThreshold>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800258c:	f7ff faea 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002590:	4804      	ldr	r0, [pc, #16]	@ (80025a4 <MX_USART2_UART_Init+0x90>)
 8002592:	f007 fd73 	bl	800a07c <HAL_UARTEx_DisableFifoMode>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800259c:	f7ff fae2 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000500 	.word	0x20000500
 80025a8:	40004400 	.word	0x40004400

080025ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025b2:	4a23      	ldr	r2, [pc, #140]	@ (8002640 <MX_USART3_UART_Init+0x94>)
 80025b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025b6:	4b21      	ldr	r3, [pc, #132]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b1f      	ldr	r3, [pc, #124]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b17      	ldr	r3, [pc, #92]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e2:	4b16      	ldr	r3, [pc, #88]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025e8:	4b14      	ldr	r3, [pc, #80]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025f4:	4811      	ldr	r0, [pc, #68]	@ (800263c <MX_USART3_UART_Init+0x90>)
 80025f6:	f005 fcfa 	bl	8007fee <HAL_UART_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002600:	f7ff fab0 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002604:	2100      	movs	r1, #0
 8002606:	480d      	ldr	r0, [pc, #52]	@ (800263c <MX_USART3_UART_Init+0x90>)
 8002608:	f007 fd71 	bl	800a0ee <HAL_UARTEx_SetTxFifoThreshold>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002612:	f7ff faa7 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002616:	2100      	movs	r1, #0
 8002618:	4808      	ldr	r0, [pc, #32]	@ (800263c <MX_USART3_UART_Init+0x90>)
 800261a:	f007 fda6 	bl	800a16a <HAL_UARTEx_SetRxFifoThreshold>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002624:	f7ff fa9e 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002628:	4804      	ldr	r0, [pc, #16]	@ (800263c <MX_USART3_UART_Init+0x90>)
 800262a:	f007 fd27 	bl	800a07c <HAL_UARTEx_DisableFifoMode>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002634:	f7ff fa96 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000594 	.word	0x20000594
 8002640:	40004800 	.word	0x40004800

08002644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0a0      	sub	sp, #128	@ 0x80
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800265c:	f107 0318 	add.w	r3, r7, #24
 8002660:	2254      	movs	r2, #84	@ 0x54
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f008 fc24 	bl	800aeb2 <memset>
  if(uartHandle->Instance==USART2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a41      	ldr	r2, [pc, #260]	@ (8002774 <HAL_UART_MspInit+0x130>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d13f      	bne.n	80026f4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267c:	f107 0318 	add.w	r3, r7, #24
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fb07 	bl	8005c94 <HAL_RCCEx_PeriphCLKConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800268c:	f7ff fa6a 	bl	8001b64 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002690:	4b39      	ldr	r3, [pc, #228]	@ (8002778 <HAL_UART_MspInit+0x134>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	4a38      	ldr	r2, [pc, #224]	@ (8002778 <HAL_UART_MspInit+0x134>)
 8002696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269a:	6593      	str	r3, [r2, #88]	@ 0x58
 800269c:	4b36      	ldr	r3, [pc, #216]	@ (8002778 <HAL_UART_MspInit+0x134>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	4b33      	ldr	r3, [pc, #204]	@ (8002778 <HAL_UART_MspInit+0x134>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ac:	4a32      	ldr	r2, [pc, #200]	@ (8002778 <HAL_UART_MspInit+0x134>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b4:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <HAL_UART_MspInit+0x134>)
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026c0:	230c      	movs	r3, #12
 80026c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d0:	2307      	movs	r3, #7
 80026d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026d8:	4619      	mov	r1, r3
 80026da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026de:	f002 fb07 	bl	8004cf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	2026      	movs	r0, #38	@ 0x26
 80026e8:	f001 ffa8 	bl	800463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026ec:	2026      	movs	r0, #38	@ 0x26
 80026ee:	f001 ffbf 	bl	8004670 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026f2:	e03b      	b.n	800276c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a20      	ldr	r2, [pc, #128]	@ (800277c <HAL_UART_MspInit+0x138>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d136      	bne.n	800276c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026fe:	2304      	movs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002706:	f107 0318 	add.w	r3, r7, #24
 800270a:	4618      	mov	r0, r3
 800270c:	f003 fac2 	bl	8005c94 <HAL_RCCEx_PeriphCLKConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002716:	f7ff fa25 	bl	8001b64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800271a:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <HAL_UART_MspInit+0x134>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	4a16      	ldr	r2, [pc, #88]	@ (8002778 <HAL_UART_MspInit+0x134>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002724:	6593      	str	r3, [r2, #88]	@ 0x58
 8002726:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <HAL_UART_MspInit+0x134>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <HAL_UART_MspInit+0x134>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <HAL_UART_MspInit+0x134>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273e:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <HAL_UART_MspInit+0x134>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800274a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800274e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800275c:	2307      	movs	r3, #7
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002760:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002764:	4619      	mov	r1, r3
 8002766:	4806      	ldr	r0, [pc, #24]	@ (8002780 <HAL_UART_MspInit+0x13c>)
 8002768:	f002 fac2 	bl	8004cf0 <HAL_GPIO_Init>
}
 800276c:	bf00      	nop
 800276e:	3780      	adds	r7, #128	@ 0x80
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40004400 	.word	0x40004400
 8002778:	40021000 	.word	0x40021000
 800277c:	40004800 	.word	0x40004800
 8002780:	48000800 	.word	0x48000800

08002784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002784:	480d      	ldr	r0, [pc, #52]	@ (80027bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002786:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002788:	f7ff fbd4 	bl	8001f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800278c:	480c      	ldr	r0, [pc, #48]	@ (80027c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800278e:	490d      	ldr	r1, [pc, #52]	@ (80027c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002790:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <LoopForever+0xe>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800279c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80027a4:	4c0a      	ldr	r4, [pc, #40]	@ (80027d0 <LoopForever+0x16>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027b2:	f008 fc33 	bl	800b01c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027b6:	f7fe fe8d 	bl	80014d4 <main>

080027ba <LoopForever>:

LoopForever:
    b LoopForever
 80027ba:	e7fe      	b.n	80027ba <LoopForever>
  ldr   r0, =_estack
 80027bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80027c8:	0800d7b4 	.word	0x0800d7b4
  ldr r2, =_sbss
 80027cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80027d0:	20000778 	.word	0x20000778

080027d4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d4:	e7fe      	b.n	80027d4 <ADC3_IRQHandler>

080027d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f001 ff20 	bl	8004626 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e6:	200f      	movs	r0, #15
 80027e8:	f7ff f9e6 	bl	8001bb8 <HAL_InitTick>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	71fb      	strb	r3, [r7, #7]
 80027f6:	e001      	b.n	80027fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f8:	f7ff f9ba 	bl	8001b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027fc:	79fb      	ldrb	r3, [r7, #7]

}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_IncTick+0x1c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_IncTick+0x20>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4413      	add	r3, r2
 8002816:	4a03      	ldr	r2, [pc, #12]	@ (8002824 <HAL_IncTick+0x1c>)
 8002818:	6013      	str	r3, [r2, #0]
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	20000628 	.word	0x20000628
 8002828:	2000000c 	.word	0x2000000c

0800282c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return uwTick;
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_GetTick+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000628 	.word	0x20000628

08002844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff ffee 	bl	800282c <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d004      	beq.n	8002868 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_Delay+0x40>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4413      	add	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002868:	bf00      	nop
 800286a:	f7ff ffdf 	bl	800282c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	429a      	cmp	r2, r3
 8002878:	d8f7      	bhi.n	800286a <HAL_Delay+0x26>
  {
  }
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	2000000c 	.word	0x2000000c

08002888 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3360      	adds	r3, #96	@ 0x60
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <LL_ADC_SetOffset+0x44>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	4313      	orrs	r3, r2
 8002920:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	03fff000 	.word	0x03fff000

08002938 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3360      	adds	r3, #96	@ 0x60
 8002946:	461a      	mov	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3360      	adds	r3, #96	@ 0x60
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3360      	adds	r3, #96	@ 0x60
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	431a      	orrs	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3360      	adds	r3, #96	@ 0x60
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	615a      	str	r2, [r3, #20]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3330      	adds	r3, #48	@ 0x30
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	211f      	movs	r1, #31
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 011f 	and.w	r1, r3, #31
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3314      	adds	r3, #20
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0e5b      	lsrs	r3, r3, #25
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	0d1b      	lsrs	r3, r3, #20
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2107      	movs	r1, #7
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	401a      	ands	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0d1b      	lsrs	r3, r3, #20
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	431a      	orrs	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	43db      	mvns	r3, r3
 8002b42:	401a      	ands	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0318 	and.w	r3, r3, #24
 8002b4a:	4908      	ldr	r1, [pc, #32]	@ (8002b6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b4c:	40d9      	lsrs	r1, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	400b      	ands	r3, r1
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	0007ffff 	.word	0x0007ffff

08002b70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002bb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6093      	str	r3, [r2, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002be0:	d101      	bne.n	8002be6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c30:	d101      	bne.n	8002c36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <LL_ADC_IsEnabled+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_ADC_IsEnabled+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ca2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ca6:	f043 0204 	orr.w	r2, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d101      	bne.n	8002cd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d101      	bne.n	8002cf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1a9      	b.n	8003076 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fe f9c9 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff3f 	bl	8002bcc <LL_ADC_IsDeepPowerDownEnabled>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff25 	bl	8002ba8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff5a 	bl	8002c1c <LL_ADC_IsInternalRegulatorEnabled>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d115      	bne.n	8002d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff3e 	bl	8002bf4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d78:	4b9c      	ldr	r3, [pc, #624]	@ (8002fec <HAL_ADC_Init+0x2e4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	4a9c      	ldr	r2, [pc, #624]	@ (8002ff0 <HAL_ADC_Init+0x2e8>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d8c:	e002      	b.n	8002d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f9      	bne.n	8002d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff3c 	bl	8002c1c <LL_ADC_IsInternalRegulatorEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dae:	f043 0210 	orr.w	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff75 	bl	8002cba <LL_ADC_REG_IsConversionOngoing>
 8002dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 8142 	bne.w	8003064 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 813e 	bne.w	8003064 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff35 	bl	8002c6c <LL_ADC_IsEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d141      	bne.n	8002e8c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e10:	d004      	beq.n	8002e1c <HAL_ADC_Init+0x114>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a77      	ldr	r2, [pc, #476]	@ (8002ff4 <HAL_ADC_Init+0x2ec>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10f      	bne.n	8002e3c <HAL_ADC_Init+0x134>
 8002e1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e20:	f7ff ff24 	bl	8002c6c <LL_ADC_IsEnabled>
 8002e24:	4604      	mov	r4, r0
 8002e26:	4873      	ldr	r0, [pc, #460]	@ (8002ff4 <HAL_ADC_Init+0x2ec>)
 8002e28:	f7ff ff20 	bl	8002c6c <LL_ADC_IsEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4323      	orrs	r3, r4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e012      	b.n	8002e62 <HAL_ADC_Init+0x15a>
 8002e3c:	486e      	ldr	r0, [pc, #440]	@ (8002ff8 <HAL_ADC_Init+0x2f0>)
 8002e3e:	f7ff ff15 	bl	8002c6c <LL_ADC_IsEnabled>
 8002e42:	4604      	mov	r4, r0
 8002e44:	486d      	ldr	r0, [pc, #436]	@ (8002ffc <HAL_ADC_Init+0x2f4>)
 8002e46:	f7ff ff11 	bl	8002c6c <LL_ADC_IsEnabled>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	431c      	orrs	r4, r3
 8002e4e:	486c      	ldr	r0, [pc, #432]	@ (8003000 <HAL_ADC_Init+0x2f8>)
 8002e50:	f7ff ff0c 	bl	8002c6c <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4323      	orrs	r3, r4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e6e:	d004      	beq.n	8002e7a <HAL_ADC_Init+0x172>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff4 <HAL_ADC_Init+0x2ec>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Init+0x176>
 8002e7a:	4a62      	ldr	r2, [pc, #392]	@ (8003004 <HAL_ADC_Init+0x2fc>)
 8002e7c:	e000      	b.n	8002e80 <HAL_ADC_Init+0x178>
 8002e7e:	4a62      	ldr	r2, [pc, #392]	@ (8003008 <HAL_ADC_Init+0x300>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7ff fcfe 	bl	8002888 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7f5b      	ldrb	r3, [r3, #29]
 8002e90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ea2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eaa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d106      	bne.n	8002ec8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	045b      	lsls	r3, r3, #17
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	4b48      	ldr	r3, [pc, #288]	@ (800300c <HAL_ADC_Init+0x304>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fee4 	bl	8002ce0 <LL_ADC_INJ_IsConversionOngoing>
 8002f18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d17f      	bne.n	8003020 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d17c      	bne.n	8003020 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f42:	f023 0302 	bic.w	r3, r3, #2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	69b9      	ldr	r1, [r7, #24]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6911      	ldr	r1, [r2, #16]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f86:	e013      	b.n	8002fb0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d12a      	bne.n	8003010 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002fc4:	f023 0304 	bic.w	r3, r3, #4
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	e019      	b.n	8003020 <HAL_ADC_Init+0x318>
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	053e2d63 	.word	0x053e2d63
 8002ff4:	50000100 	.word	0x50000100
 8002ff8:	50000400 	.word	0x50000400
 8002ffc:	50000500 	.word	0x50000500
 8003000:	50000600 	.word	0x50000600
 8003004:	50000300 	.word	0x50000300
 8003008:	50000700 	.word	0x50000700
 800300c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10c      	bne.n	8003042 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f023 010f 	bic.w	r1, r3, #15
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003040:	e007      	b.n	8003052 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020f 	bic.w	r2, r2, #15
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003062:	e007      	b.n	8003074 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003074:	7ffb      	ldrb	r3, [r7, #31]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop

08003080 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003094:	d004      	beq.n	80030a0 <HAL_ADC_Start_DMA+0x20>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a5a      	ldr	r2, [pc, #360]	@ (8003204 <HAL_ADC_Start_DMA+0x184>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_Start_DMA+0x24>
 80030a0:	4b59      	ldr	r3, [pc, #356]	@ (8003208 <HAL_ADC_Start_DMA+0x188>)
 80030a2:	e000      	b.n	80030a6 <HAL_ADC_Start_DMA+0x26>
 80030a4:	4b59      	ldr	r3, [pc, #356]	@ (800320c <HAL_ADC_Start_DMA+0x18c>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fd62 	bl	8002b70 <LL_ADC_GetMultimode>
 80030ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fe01 	bl	8002cba <LL_ADC_REG_IsConversionOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 809b 	bne.w	80031f6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_Start_DMA+0x4e>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e096      	b.n	80031fc <HAL_ADC_Start_DMA+0x17c>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4d      	ldr	r2, [pc, #308]	@ (8003210 <HAL_ADC_Start_DMA+0x190>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d008      	beq.n	80030f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b05      	cmp	r3, #5
 80030ea:	d002      	beq.n	80030f2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b09      	cmp	r3, #9
 80030f0:	d17a      	bne.n	80031e8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 ff60 	bl	8003fb8 <ADC_Enable>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d16d      	bne.n	80031de <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a3a      	ldr	r2, [pc, #232]	@ (8003204 <HAL_ADC_Start_DMA+0x184>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_ADC_Start_DMA+0xb4>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a3b      	ldr	r2, [pc, #236]	@ (8003214 <HAL_ADC_Start_DMA+0x194>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d002      	beq.n	8003130 <HAL_ADC_Start_DMA+0xb0>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	e003      	b.n	8003138 <HAL_ADC_Start_DMA+0xb8>
 8003130:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <HAL_ADC_Start_DMA+0x198>)
 8003132:	e001      	b.n	8003138 <HAL_ADC_Start_DMA+0xb8>
 8003134:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4293      	cmp	r3, r2
 800313e:	d002      	beq.n	8003146 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f023 0206 	bic.w	r2, r3, #6
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60
 800316a:	e002      	b.n	8003172 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	4a29      	ldr	r2, [pc, #164]	@ (800321c <HAL_ADC_Start_DMA+0x19c>)
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	4a28      	ldr	r2, [pc, #160]	@ (8003220 <HAL_ADC_Start_DMA+0x1a0>)
 8003180:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <HAL_ADC_Start_DMA+0x1a4>)
 8003188:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	221c      	movs	r2, #28
 8003190:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0210 	orr.w	r2, r2, #16
 80031a8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3340      	adds	r3, #64	@ 0x40
 80031c4:	4619      	mov	r1, r3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f001 fb07 	bl	80047dc <HAL_DMA_Start_IT>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fd5b 	bl	8002c92 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031dc:	e00d      	b.n	80031fa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80031e6:	e008      	b.n	80031fa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80031f4:	e001      	b.n	80031fa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	50000100 	.word	0x50000100
 8003208:	50000300 	.word	0x50000300
 800320c:	50000700 	.word	0x50000700
 8003210:	50000600 	.word	0x50000600
 8003214:	50000500 	.word	0x50000500
 8003218:	50000400 	.word	0x50000400
 800321c:	080040e5 	.word	0x080040e5
 8003220:	080041bd 	.word	0x080041bd
 8003224:	080041d9 	.word	0x080041d9

08003228 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800324c:	d004      	beq.n	8003258 <HAL_ADC_IRQHandler+0x30>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a8e      	ldr	r2, [pc, #568]	@ (800348c <HAL_ADC_IRQHandler+0x264>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_ADC_IRQHandler+0x34>
 8003258:	4b8d      	ldr	r3, [pc, #564]	@ (8003490 <HAL_ADC_IRQHandler+0x268>)
 800325a:	e000      	b.n	800325e <HAL_ADC_IRQHandler+0x36>
 800325c:	4b8d      	ldr	r3, [pc, #564]	@ (8003494 <HAL_ADC_IRQHandler+0x26c>)
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fc86 	bl	8002b70 <LL_ADC_GetMultimode>
 8003264:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_ADC_IRQHandler+0x78>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d012      	beq.n	80032a0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f001 f808 	bl	80042a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x8c>
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8094 	beq.w	80033e8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 808e 	beq.w	80033e8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fb9f 	bl	8002a2c <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d072      	beq.n	80033da <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a64      	ldr	r2, [pc, #400]	@ (800348c <HAL_ADC_IRQHandler+0x264>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_ADC_IRQHandler+0xea>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a65      	ldr	r2, [pc, #404]	@ (8003498 <HAL_ADC_IRQHandler+0x270>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d002      	beq.n	800330e <HAL_ADC_IRQHandler+0xe6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	e003      	b.n	8003316 <HAL_ADC_IRQHandler+0xee>
 800330e:	4b63      	ldr	r3, [pc, #396]	@ (800349c <HAL_ADC_IRQHandler+0x274>)
 8003310:	e001      	b.n	8003316 <HAL_ADC_IRQHandler+0xee>
 8003312:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	4293      	cmp	r3, r2
 800331c:	d008      	beq.n	8003330 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b05      	cmp	r3, #5
 8003328:	d002      	beq.n	8003330 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b09      	cmp	r3, #9
 800332e:	d104      	bne.n	800333a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	e014      	b.n	8003364 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a53      	ldr	r2, [pc, #332]	@ (800348c <HAL_ADC_IRQHandler+0x264>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_ADC_IRQHandler+0x130>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a53      	ldr	r2, [pc, #332]	@ (8003498 <HAL_ADC_IRQHandler+0x270>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d002      	beq.n	8003354 <HAL_ADC_IRQHandler+0x12c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	e003      	b.n	800335c <HAL_ADC_IRQHandler+0x134>
 8003354:	4b51      	ldr	r3, [pc, #324]	@ (800349c <HAL_ADC_IRQHandler+0x274>)
 8003356:	e001      	b.n	800335c <HAL_ADC_IRQHandler+0x134>
 8003358:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800335c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d135      	bne.n	80033da <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d12e      	bne.n	80033da <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fc9a 	bl	8002cba <LL_ADC_REG_IsConversionOngoing>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11a      	bne.n	80033c2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 020c 	bic.w	r2, r2, #12
 800339a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d112      	bne.n	80033da <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033c0:	e00b      	b.n	80033da <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	f043 0210 	orr.w	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f984 	bl	80036e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	220c      	movs	r2, #12
 80033e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_ADC_IRQHandler+0x1d4>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80b3 	beq.w	800356e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80ad 	beq.w	800356e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fb3a 	bl	8002aaa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003436:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff faf5 	bl	8002a2c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003442:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a10      	ldr	r2, [pc, #64]	@ (800348c <HAL_ADC_IRQHandler+0x264>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_ADC_IRQHandler+0x23a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a11      	ldr	r2, [pc, #68]	@ (8003498 <HAL_ADC_IRQHandler+0x270>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d002      	beq.n	800345e <HAL_ADC_IRQHandler+0x236>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e003      	b.n	8003466 <HAL_ADC_IRQHandler+0x23e>
 800345e:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <HAL_ADC_IRQHandler+0x274>)
 8003460:	e001      	b.n	8003466 <HAL_ADC_IRQHandler+0x23e>
 8003462:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4293      	cmp	r3, r2
 800346c:	d008      	beq.n	8003480 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d002      	beq.n	8003480 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b07      	cmp	r3, #7
 800347e:	d10f      	bne.n	80034a0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	e01f      	b.n	80034ca <HAL_ADC_IRQHandler+0x2a2>
 800348a:	bf00      	nop
 800348c:	50000100 	.word	0x50000100
 8003490:	50000300 	.word	0x50000300
 8003494:	50000700 	.word	0x50000700
 8003498:	50000500 	.word	0x50000500
 800349c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a8b      	ldr	r2, [pc, #556]	@ (80036d4 <HAL_ADC_IRQHandler+0x4ac>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_ADC_IRQHandler+0x296>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a8a      	ldr	r2, [pc, #552]	@ (80036d8 <HAL_ADC_IRQHandler+0x4b0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d002      	beq.n	80034ba <HAL_ADC_IRQHandler+0x292>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_IRQHandler+0x29a>
 80034ba:	4b88      	ldr	r3, [pc, #544]	@ (80036dc <HAL_ADC_IRQHandler+0x4b4>)
 80034bc:	e001      	b.n	80034c2 <HAL_ADC_IRQHandler+0x29a>
 80034be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034c2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d047      	beq.n	8003560 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_ADC_IRQHandler+0x2c2>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d03f      	beq.n	8003560 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d13a      	bne.n	8003560 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d133      	bne.n	8003560 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d12e      	bne.n	8003560 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fbea 	bl	8002ce0 <LL_ADC_INJ_IsConversionOngoing>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d11a      	bne.n	8003548 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003520:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003526:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d112      	bne.n	8003560 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003546:	e00b      	b.n	8003560 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fe79 	bl	8004258 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2260      	movs	r2, #96	@ 0x60
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	d011      	beq.n	800359c <HAL_ADC_IRQHandler+0x374>
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8be 	bl	8003710 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2280      	movs	r2, #128	@ 0x80
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <HAL_ADC_IRQHandler+0x3a4>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fe5f 	bl	8004280 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_ADC_IRQHandler+0x3d4>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fe51 	bl	8004294 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d043      	beq.n	800368e <HAL_ADC_IRQHandler+0x466>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03e      	beq.n	800368e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003618:	2301      	movs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
 800361c:	e021      	b.n	8003662 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800362c:	d004      	beq.n	8003638 <HAL_ADC_IRQHandler+0x410>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a28      	ldr	r2, [pc, #160]	@ (80036d4 <HAL_ADC_IRQHandler+0x4ac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_ADC_IRQHandler+0x414>
 8003638:	4b29      	ldr	r3, [pc, #164]	@ (80036e0 <HAL_ADC_IRQHandler+0x4b8>)
 800363a:	e000      	b.n	800363e <HAL_ADC_IRQHandler+0x416>
 800363c:	4b29      	ldr	r3, [pc, #164]	@ (80036e4 <HAL_ADC_IRQHandler+0x4bc>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff faa4 	bl	8002b8c <LL_ADC_GetMultiDMATransfer>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800364a:	2301      	movs	r3, #1
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
 800364e:	e008      	b.n	8003662 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800365e:	2301      	movs	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10e      	bne.n	8003686 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003678:	f043 0202 	orr.w	r2, r3, #2
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f84f 	bl	8003724 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2210      	movs	r2, #16
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d018      	beq.n	80036ca <HAL_ADC_IRQHandler+0x4a2>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d013      	beq.n	80036ca <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f043 0208 	orr.w	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fdd1 	bl	800426c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80036ca:	bf00      	nop
 80036cc:	3728      	adds	r7, #40	@ 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	50000100 	.word	0x50000100
 80036d8:	50000500 	.word	0x50000500
 80036dc:	50000400 	.word	0x50000400
 80036e0:	50000300 	.word	0x50000300
 80036e4:	50000700 	.word	0x50000700

080036e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0b6      	sub	sp, #216	@ 0xd8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_ADC_ConfigChannel+0x24>
 8003756:	2302      	movs	r3, #2
 8003758:	f000 bc13 	b.w	8003f82 <HAL_ADC_ConfigChannel+0x84a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff faa6 	bl	8002cba <LL_ADC_REG_IsConversionOngoing>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 83f3 	bne.w	8003f5c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f7ff f965 	bl	8002a52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fa94 	bl	8002cba <LL_ADC_REG_IsConversionOngoing>
 8003792:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff faa0 	bl	8002ce0 <LL_ADC_INJ_IsConversionOngoing>
 80037a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 81d9 	bne.w	8003b60 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 81d4 	bne.w	8003b60 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037c0:	d10f      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2200      	movs	r2, #0
 80037cc:	4619      	mov	r1, r3
 80037ce:	f7ff f97f 	bl	8002ad0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff f913 	bl	8002a06 <LL_ADC_SetSamplingTimeCommonConfig>
 80037e0:	e00e      	b.n	8003800 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f7ff f96e 	bl	8002ad0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f903 	bl	8002a06 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	08db      	lsrs	r3, r3, #3
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d022      	beq.n	8003868 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6919      	ldr	r1, [r3, #16]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003832:	f7ff f85d 	bl	80028f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6919      	ldr	r1, [r3, #16]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	461a      	mov	r2, r3
 8003844:	f7ff f8a9 	bl	800299a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003854:	2b01      	cmp	r3, #1
 8003856:	d102      	bne.n	800385e <HAL_ADC_ConfigChannel+0x126>
 8003858:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800385c:	e000      	b.n	8003860 <HAL_ADC_ConfigChannel+0x128>
 800385e:	2300      	movs	r3, #0
 8003860:	461a      	mov	r2, r3
 8003862:	f7ff f8b5 	bl	80029d0 <LL_ADC_SetOffsetSaturation>
 8003866:	e17b      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff f862 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003874:	4603      	mov	r3, r0
 8003876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x15c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff f857 	bl	8002938 <LL_ADC_GetOffsetChannel>
 800388a:	4603      	mov	r3, r0
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	f003 021f 	and.w	r2, r3, #31
 8003892:	e01e      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x19a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f84c 	bl	8002938 <LL_ADC_GetOffsetChannel>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80038c2:	2320      	movs	r3, #32
 80038c4:	e004      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80038c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x1b2>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0e9b      	lsrs	r3, r3, #26
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	e018      	b.n	800391c <HAL_ADC_ConfigChannel+0x1e4>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80038fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800390e:	2320      	movs	r3, #32
 8003910:	e004      	b.n	800391c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800391c:	429a      	cmp	r2, r3
 800391e:	d106      	bne.n	800392e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff f81b 	bl	8002964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2101      	movs	r1, #1
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe ffff 	bl	8002938 <LL_ADC_GetOffsetChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <HAL_ADC_ConfigChannel+0x222>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fff4 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003950:	4603      	mov	r3, r0
 8003952:	0e9b      	lsrs	r3, r3, #26
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	e01e      	b.n	8003998 <HAL_ADC_ConfigChannel+0x260>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe ffe9 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003966:	4603      	mov	r3, r0
 8003968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003978:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800397c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e004      	b.n	8003996 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800398c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x278>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	e018      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x2aa>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80039c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80039cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80039d4:	2320      	movs	r3, #32
 80039d6:	e004      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80039d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d106      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2101      	movs	r1, #1
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe ffb8 	bl	8002964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2102      	movs	r1, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe ff9c 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x2e8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe ff91 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003a16:	4603      	mov	r3, r0
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	f003 021f 	and.w	r2, r3, #31
 8003a1e:	e01e      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x326>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2102      	movs	r1, #2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe ff86 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003a3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a4e:	2320      	movs	r3, #32
 8003a50:	e004      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x33e>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0e9b      	lsrs	r3, r3, #26
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	e016      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x36c>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a96:	2320      	movs	r3, #32
 8003a98:	e004      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d106      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe ff57 	bl	8002964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2103      	movs	r1, #3
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe ff3b 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x3aa>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe ff30 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	0e9b      	lsrs	r3, r3, #26
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	e017      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x3da>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2103      	movs	r1, #3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe ff25 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003aee:	4603      	mov	r3, r0
 8003af0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003afc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b04:	2320      	movs	r3, #32
 8003b06:	e003      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x3f2>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0e9b      	lsrs	r3, r3, #26
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	e011      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x416>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b42:	2320      	movs	r3, #32
 8003b44:	e003      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d106      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2103      	movs	r1, #3
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe ff02 	bl	8002964 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f881 	bl	8002c6c <LL_ADC_IsEnabled>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f040 813d 	bne.w	8003dec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f7fe ffd2 	bl	8002b28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4aa2      	ldr	r2, [pc, #648]	@ (8003e14 <HAL_ADC_ConfigChannel+0x6dc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	f040 812e 	bne.w	8003dec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x480>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	bf94      	ite	ls
 8003bb0:	2301      	movls	r3, #1
 8003bb2:	2300      	movhi	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e019      	b.n	8003bec <HAL_ADC_ConfigChannel+0x4b4>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e003      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003bd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2b09      	cmp	r3, #9
 8003be4:	bf94      	ite	ls
 8003be6:	2301      	movls	r3, #1
 8003be8:	2300      	movhi	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d079      	beq.n	8003ce4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x4d4>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0e9b      	lsrs	r3, r3, #26
 8003c02:	3301      	adds	r3, #1
 8003c04:	069b      	lsls	r3, r3, #26
 8003c06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c0a:	e015      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x500>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c24:	2320      	movs	r3, #32
 8003c26:	e003      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	069b      	lsls	r3, r3, #26
 8003c34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x520>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2101      	movs	r1, #1
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	e017      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x550>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	ea42 0103 	orr.w	r1, r2, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x576>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	051b      	lsls	r3, r3, #20
 8003cac:	e018      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x5a8>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	e003      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	e07e      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x5c8>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	0e9b      	lsrs	r3, r3, #26
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	069b      	lsls	r3, r3, #26
 8003cfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cfe:	e015      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x5f4>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e003      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	fab3 f383 	clz	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	069b      	lsls	r3, r3, #26
 8003d28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x614>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	e017      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x644>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	61fb      	str	r3, [r7, #28]
  return result;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d64:	2320      	movs	r3, #32
 8003d66:	e003      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	3301      	adds	r3, #1
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	ea42 0103 	orr.w	r1, r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x670>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	3301      	adds	r3, #1
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3b1e      	subs	r3, #30
 8003da0:	051b      	lsls	r3, r3, #20
 8003da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	e01b      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x6a8>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	613b      	str	r3, [r7, #16]
  return result;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	e003      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f003 021f 	and.w	r2, r3, #31
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3b1e      	subs	r3, #30
 8003dda:	051b      	lsls	r3, r3, #20
 8003ddc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7fe fe72 	bl	8002ad0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <HAL_ADC_ConfigChannel+0x6e0>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80be 	beq.w	8003f76 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e02:	d004      	beq.n	8003e0e <HAL_ADC_ConfigChannel+0x6d6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a04      	ldr	r2, [pc, #16]	@ (8003e1c <HAL_ADC_ConfigChannel+0x6e4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10a      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x6ec>
 8003e0e:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e10:	e009      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x6ee>
 8003e12:	bf00      	nop
 8003e14:	407f0000 	.word	0x407f0000
 8003e18:	80080000 	.word	0x80080000
 8003e1c:	50000100 	.word	0x50000100
 8003e20:	50000300 	.word	0x50000300
 8003e24:	4b59      	ldr	r3, [pc, #356]	@ (8003f8c <HAL_ADC_ConfigChannel+0x854>)
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fd54 	bl	80028d4 <LL_ADC_GetCommonPathInternalCh>
 8003e2c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a56      	ldr	r2, [pc, #344]	@ (8003f90 <HAL_ADC_ConfigChannel+0x858>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_ADC_ConfigChannel+0x70c>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a55      	ldr	r2, [pc, #340]	@ (8003f94 <HAL_ADC_ConfigChannel+0x85c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d13a      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d134      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e58:	d005      	beq.n	8003e66 <HAL_ADC_ConfigChannel+0x72e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8003f98 <HAL_ADC_ConfigChannel+0x860>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	f040 8085 	bne.w	8003f70 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e6e:	d004      	beq.n	8003e7a <HAL_ADC_ConfigChannel+0x742>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a49      	ldr	r2, [pc, #292]	@ (8003f9c <HAL_ADC_ConfigChannel+0x864>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x746>
 8003e7a:	4a49      	ldr	r2, [pc, #292]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x868>)
 8003e7c:	e000      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x748>
 8003e7e:	4a43      	ldr	r2, [pc, #268]	@ (8003f8c <HAL_ADC_ConfigChannel+0x854>)
 8003e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fe fd0f 	bl	80028ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e90:	4b44      	ldr	r3, [pc, #272]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x86c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	4a44      	ldr	r2, [pc, #272]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x870>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eaa:	e002      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f9      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb8:	e05a      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8003fac <HAL_ADC_ConfigChannel+0x874>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d125      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11f      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a31      	ldr	r2, [pc, #196]	@ (8003f9c <HAL_ADC_ConfigChannel+0x864>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d104      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x7ac>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a34      	ldr	r2, [pc, #208]	@ (8003fb0 <HAL_ADC_ConfigChannel+0x878>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d047      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eec:	d004      	beq.n	8003ef8 <HAL_ADC_ConfigChannel+0x7c0>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f9c <HAL_ADC_ConfigChannel+0x864>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x7c4>
 8003ef8:	4a29      	ldr	r2, [pc, #164]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x868>)
 8003efa:	e000      	b.n	8003efe <HAL_ADC_ConfigChannel+0x7c6>
 8003efc:	4a23      	ldr	r2, [pc, #140]	@ (8003f8c <HAL_ADC_ConfigChannel+0x854>)
 8003efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7fe fcd0 	bl	80028ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f0e:	e031      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a27      	ldr	r2, [pc, #156]	@ (8003fb4 <HAL_ADC_ConfigChannel+0x87c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d12d      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d127      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f9c <HAL_ADC_ConfigChannel+0x864>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f38:	d004      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x80c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <HAL_ADC_ConfigChannel+0x864>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x810>
 8003f44:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x868>)
 8003f46:	e000      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x812>
 8003f48:	4a10      	ldr	r2, [pc, #64]	@ (8003f8c <HAL_ADC_ConfigChannel+0x854>)
 8003f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fe fcaa 	bl	80028ae <LL_ADC_SetCommonPathInternalCh>
 8003f5a:	e00c      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003f6e:	e002      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	37d8      	adds	r7, #216	@ 0xd8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	50000700 	.word	0x50000700
 8003f90:	c3210000 	.word	0xc3210000
 8003f94:	90c00010 	.word	0x90c00010
 8003f98:	50000600 	.word	0x50000600
 8003f9c:	50000100 	.word	0x50000100
 8003fa0:	50000300 	.word	0x50000300
 8003fa4:	20000004 	.word	0x20000004
 8003fa8:	053e2d63 	.word	0x053e2d63
 8003fac:	c7520000 	.word	0xc7520000
 8003fb0:	50000500 	.word	0x50000500
 8003fb4:	cb840000 	.word	0xcb840000

08003fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fe4f 	bl	8002c6c <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d176      	bne.n	80040c2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b3c      	ldr	r3, [pc, #240]	@ (80040cc <ADC_Enable+0x114>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe6:	f043 0210 	orr.w	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e062      	b.n	80040c4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fe1e 	bl	8002c44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004010:	d004      	beq.n	800401c <ADC_Enable+0x64>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2e      	ldr	r2, [pc, #184]	@ (80040d0 <ADC_Enable+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <ADC_Enable+0x68>
 800401c:	4b2d      	ldr	r3, [pc, #180]	@ (80040d4 <ADC_Enable+0x11c>)
 800401e:	e000      	b.n	8004022 <ADC_Enable+0x6a>
 8004020:	4b2d      	ldr	r3, [pc, #180]	@ (80040d8 <ADC_Enable+0x120>)
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fc56 	bl	80028d4 <LL_ADC_GetCommonPathInternalCh>
 8004028:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800402a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004032:	4b2a      	ldr	r3, [pc, #168]	@ (80040dc <ADC_Enable+0x124>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	4a29      	ldr	r2, [pc, #164]	@ (80040e0 <ADC_Enable+0x128>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800404c:	e002      	b.n	8004054 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3b01      	subs	r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f9      	bne.n	800404e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800405a:	f7fe fbe7 	bl	800282c <HAL_GetTick>
 800405e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004060:	e028      	b.n	80040b4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fe00 	bl	8002c6c <LL_ADC_IsEnabled>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fde4 	bl	8002c44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800407c:	f7fe fbd6 	bl	800282c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d914      	bls.n	80040b4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d00d      	beq.n	80040b4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409c:	f043 0210 	orr.w	r2, r3, #16
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e007      	b.n	80040c4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d1cf      	bne.n	8004062 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	8000003f 	.word	0x8000003f
 80040d0:	50000100 	.word	0x50000100
 80040d4:	50000300 	.word	0x50000300
 80040d8:	50000700 	.word	0x50000700
 80040dc:	20000004 	.word	0x20000004
 80040e0:	053e2d63 	.word	0x053e2d63

080040e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d14b      	bne.n	8004196 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004102:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d021      	beq.n	800415c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fc85 	bl	8002a2c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d032      	beq.n	800418e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d12b      	bne.n	800418e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004146:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11f      	bne.n	800418e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	65da      	str	r2, [r3, #92]	@ 0x5c
 800415a:	e018      	b.n	800418e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d111      	bne.n	800418e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004186:	f043 0201 	orr.w	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff faaa 	bl	80036e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004194:	e00e      	b.n	80041b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff fabe 	bl	8003724 <HAL_ADC_ErrorCallback>
}
 80041a8:	e004      	b.n	80041b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fa96 	bl	80036fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fa90 	bl	8003724 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <LL_ADC_IsEnabled>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <LL_ADC_IsEnabled+0x18>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <LL_ADC_IsEnabled+0x1a>
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_ADC_REG_IsConversionOngoing>:
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d101      	bne.n	800424a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b0a1      	sub	sp, #132	@ 0x84
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0e7      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80042e2:	2300      	movs	r3, #0
 80042e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80042e6:	2300      	movs	r3, #0
 80042e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f2:	d102      	bne.n	80042fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	@ (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	e009      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6e      	ldr	r2, [pc, #440]	@ (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d102      	bne.n	800430a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004304:	4b6d      	ldr	r3, [pc, #436]	@ (80044bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	e001      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0be      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff7f 	bl	8004232 <LL_ADC_REG_IsConversionOngoing>
 8004334:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff79 	bl	8004232 <LL_ADC_REG_IsConversionOngoing>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 80a0 	bne.w	8004488 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 809c 	bne.w	8004488 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004358:	d004      	beq.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a55      	ldr	r2, [pc, #340]	@ (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004364:	4b56      	ldr	r3, [pc, #344]	@ (80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004366:	e000      	b.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004368:	4b56      	ldr	r3, [pc, #344]	@ (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800436a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d04b      	beq.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004374:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004386:	035b      	lsls	r3, r3, #13
 8004388:	430b      	orrs	r3, r1
 800438a:	431a      	orrs	r2, r3
 800438c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800438e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004398:	d004      	beq.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a45      	ldr	r2, [pc, #276]	@ (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10f      	bne.n	80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80043a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80043a8:	f7ff ff30 	bl	800420c <LL_ADC_IsEnabled>
 80043ac:	4604      	mov	r4, r0
 80043ae:	4841      	ldr	r0, [pc, #260]	@ (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043b0:	f7ff ff2c 	bl	800420c <LL_ADC_IsEnabled>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4323      	orrs	r3, r4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e012      	b.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80043c4:	483c      	ldr	r0, [pc, #240]	@ (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043c6:	f7ff ff21 	bl	800420c <LL_ADC_IsEnabled>
 80043ca:	4604      	mov	r4, r0
 80043cc:	483b      	ldr	r0, [pc, #236]	@ (80044bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043ce:	f7ff ff1d 	bl	800420c <LL_ADC_IsEnabled>
 80043d2:	4603      	mov	r3, r0
 80043d4:	431c      	orrs	r4, r3
 80043d6:	483c      	ldr	r0, [pc, #240]	@ (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043d8:	f7ff ff18 	bl	800420c <LL_ADC_IsEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	4323      	orrs	r3, r4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d056      	beq.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80043f6:	f023 030f 	bic.w	r3, r3, #15
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	6811      	ldr	r1, [r2, #0]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	6892      	ldr	r2, [r2, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	431a      	orrs	r2, r3
 8004406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004408:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800440a:	e047      	b.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800440c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004416:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004420:	d004      	beq.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a23      	ldr	r2, [pc, #140]	@ (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10f      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800442c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004430:	f7ff feec 	bl	800420c <LL_ADC_IsEnabled>
 8004434:	4604      	mov	r4, r0
 8004436:	481f      	ldr	r0, [pc, #124]	@ (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004438:	f7ff fee8 	bl	800420c <LL_ADC_IsEnabled>
 800443c:	4603      	mov	r3, r0
 800443e:	4323      	orrs	r3, r4
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e012      	b.n	8004472 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800444c:	481a      	ldr	r0, [pc, #104]	@ (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800444e:	f7ff fedd 	bl	800420c <LL_ADC_IsEnabled>
 8004452:	4604      	mov	r4, r0
 8004454:	4819      	ldr	r0, [pc, #100]	@ (80044bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004456:	f7ff fed9 	bl	800420c <LL_ADC_IsEnabled>
 800445a:	4603      	mov	r3, r0
 800445c:	431c      	orrs	r4, r3
 800445e:	481a      	ldr	r0, [pc, #104]	@ (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004460:	f7ff fed4 	bl	800420c <LL_ADC_IsEnabled>
 8004464:	4603      	mov	r3, r0
 8004466:	4323      	orrs	r3, r4
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d012      	beq.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800447e:	f023 030f 	bic.w	r3, r3, #15
 8004482:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004484:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004486:	e009      	b.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800449a:	e000      	b.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800449c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80044a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3784      	adds	r7, #132	@ 0x84
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}
 80044b2:	bf00      	nop
 80044b4:	50000100 	.word	0x50000100
 80044b8:	50000400 	.word	0x50000400
 80044bc:	50000500 	.word	0x50000500
 80044c0:	50000300 	.word	0x50000300
 80044c4:	50000700 	.word	0x50000700
 80044c8:	50000600 	.word	0x50000600

080044cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <__NVIC_SetPriorityGrouping+0x44>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044e8:	4013      	ands	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044fe:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <__NVIC_SetPriorityGrouping+0x44>)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	60d3      	str	r3, [r2, #12]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <__NVIC_GetPriorityGrouping+0x18>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	f003 0307 	and.w	r3, r3, #7
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	2b00      	cmp	r3, #0
 8004540:	db0b      	blt.n	800455a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	f003 021f 	and.w	r2, r3, #31
 8004548:	4907      	ldr	r1, [pc, #28]	@ (8004568 <__NVIC_EnableIRQ+0x38>)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2001      	movs	r0, #1
 8004552:	fa00 f202 	lsl.w	r2, r0, r2
 8004556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000e100 	.word	0xe000e100

0800456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	@ (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	@ (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	@ 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f1c3 0307 	rsb	r3, r3, #7
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf28      	it	cs
 80045de:	2304      	movcs	r3, #4
 80045e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d902      	bls.n	80045f0 <NVIC_EncodePriority+0x30>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3b03      	subs	r3, #3
 80045ee:	e000      	b.n	80045f2 <NVIC_EncodePriority+0x32>
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	401a      	ands	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004608:	f04f 31ff 	mov.w	r1, #4294967295
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	43d9      	mvns	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	4313      	orrs	r3, r2
         );
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	@ 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ff4c 	bl	80044cc <__NVIC_SetPriorityGrouping>
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800464a:	f7ff ff63 	bl	8004514 <__NVIC_GetPriorityGrouping>
 800464e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	6978      	ldr	r0, [r7, #20]
 8004656:	f7ff ffb3 	bl	80045c0 <NVIC_EncodePriority>
 800465a:	4602      	mov	r2, r0
 800465c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff ff82 	bl	800456c <__NVIC_SetPriority>
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ff56 	bl	8004530 <__NVIC_EnableIRQ>
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e08d      	b.n	80047ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <HAL_DMA_Init+0x138>)
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d80f      	bhi.n	80046ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <HAL_DMA_Init+0x13c>)
 80046b2:	4413      	add	r3, r2
 80046b4:	4a45      	ldr	r2, [pc, #276]	@ (80047cc <HAL_DMA_Init+0x140>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	009a      	lsls	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a42      	ldr	r2, [pc, #264]	@ (80047d0 <HAL_DMA_Init+0x144>)
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80046c8:	e00e      	b.n	80046e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b40      	ldr	r3, [pc, #256]	@ (80047d4 <HAL_DMA_Init+0x148>)
 80046d2:	4413      	add	r3, r2
 80046d4:	4a3d      	ldr	r2, [pc, #244]	@ (80047cc <HAL_DMA_Init+0x140>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	009a      	lsls	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a3c      	ldr	r2, [pc, #240]	@ (80047d8 <HAL_DMA_Init+0x14c>)
 80046e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80046fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800470c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa76 	bl	8004c2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004748:	d102      	bne.n	8004750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004764:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <HAL_DMA_Init+0x104>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d80c      	bhi.n	8004790 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa96 	bl	8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	e008      	b.n	80047a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40020407 	.word	0x40020407
 80047c8:	bffdfff8 	.word	0xbffdfff8
 80047cc:	cccccccd 	.word	0xcccccccd
 80047d0:	40020000 	.word	0x40020000
 80047d4:	bffdfbf8 	.word	0xbffdfbf8
 80047d8:	40020400 	.word	0x40020400

080047dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_DMA_Start_IT+0x20>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e066      	b.n	80048ca <HAL_DMA_Start_IT+0xee>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d155      	bne.n	80048bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f9bb 	bl	8004bb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 020e 	orr.w	r2, r2, #14
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e00f      	b.n	8004874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 020a 	orr.w	r2, r2, #10
 8004872:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800488c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004890:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e005      	b.n	80048c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
 80048c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d005      	beq.n	80048f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2204      	movs	r2, #4
 80048ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e037      	b.n	8004966 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 020e 	bic.w	r2, r2, #14
 8004904:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004914:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	f003 021f 	and.w	r2, r3, #31
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	2101      	movs	r1, #1
 8004934:	fa01 f202 	lsl.w	r2, r1, r2
 8004938:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004942:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00c      	beq.n	8004966 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800495a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004964:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d00d      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2204      	movs	r2, #4
 80049a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
 80049b6:	e047      	b.n	8004a48 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 020e 	bic.w	r2, r2, #14
 80049c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f202 	lsl.w	r2, r1, r2
 80049fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
    }
  }
  return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2204      	movs	r2, #4
 8004a74:	409a      	lsls	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d026      	beq.n	8004acc <HAL_DMA_IRQHandler+0x7a>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d021      	beq.n	8004acc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0204 	bic.w	r2, r2, #4
 8004aa4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f003 021f 	and.w	r2, r3, #31
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2104      	movs	r1, #4
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d071      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004aca:	e06c      	b.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d029      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 020a 	bic.w	r2, r2, #10
 8004b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d038      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b3c:	e033      	b.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2208      	movs	r2, #8
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d025      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 020e 	bic.w	r2, r2, #14
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b70:	f003 021f 	and.w	r2, r3, #31
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
}
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bc6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bd8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	f003 021f 	and.w	r2, r3, #31
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2101      	movs	r1, #1
 8004be8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d108      	bne.n	8004c10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c0e:	e007      	b.n	8004c20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b16      	ldr	r3, [pc, #88]	@ (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d802      	bhi.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c40:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	e001      	b.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c48:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3b08      	subs	r3, #8
 8004c56:	4a12      	ldr	r2, [pc, #72]	@ (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	009a      	lsls	r2, r3, #2
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2201      	movs	r2, #1
 8004c80:	409a      	lsls	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40020407 	.word	0x40020407
 8004c98:	40020800 	.word	0x40020800
 8004c9c:	40020820 	.word	0x40020820
 8004ca0:	cccccccd 	.word	0xcccccccd
 8004ca4:	40020880 	.word	0x40020880

08004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	1000823f 	.word	0x1000823f
 8004cec:	40020940 	.word	0x40020940

08004cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cfe:	e15a      	b.n	8004fb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 814c 	beq.w	8004fb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d005      	beq.n	8004d30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d130      	bne.n	8004d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d66:	2201      	movs	r2, #1
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 0201 	and.w	r2, r3, #1
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d017      	beq.n	8004dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2203      	movs	r2, #3
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4013      	ands	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d123      	bne.n	8004e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	08da      	lsrs	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3208      	adds	r2, #8
 8004de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	220f      	movs	r2, #15
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	08da      	lsrs	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3208      	adds	r2, #8
 8004e1c:	6939      	ldr	r1, [r7, #16]
 8004e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0203 	and.w	r2, r3, #3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80a6 	beq.w	8004fb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e64:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd4 <HAL_GPIO_Init+0x2e4>)
 8004e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e68:	4a5a      	ldr	r2, [pc, #360]	@ (8004fd4 <HAL_GPIO_Init+0x2e4>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e70:	4b58      	ldr	r3, [pc, #352]	@ (8004fd4 <HAL_GPIO_Init+0x2e4>)
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e7c:	4a56      	ldr	r2, [pc, #344]	@ (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	089b      	lsrs	r3, r3, #2
 8004e82:	3302      	adds	r3, #2
 8004e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	220f      	movs	r2, #15
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ea6:	d01f      	beq.n	8004ee8 <HAL_GPIO_Init+0x1f8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a4c      	ldr	r2, [pc, #304]	@ (8004fdc <HAL_GPIO_Init+0x2ec>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d019      	beq.n	8004ee4 <HAL_GPIO_Init+0x1f4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8004fe0 <HAL_GPIO_Init+0x2f0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_GPIO_Init+0x1f0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a4a      	ldr	r2, [pc, #296]	@ (8004fe4 <HAL_GPIO_Init+0x2f4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00d      	beq.n	8004edc <HAL_GPIO_Init+0x1ec>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a49      	ldr	r2, [pc, #292]	@ (8004fe8 <HAL_GPIO_Init+0x2f8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <HAL_GPIO_Init+0x1e8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a48      	ldr	r2, [pc, #288]	@ (8004fec <HAL_GPIO_Init+0x2fc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_GPIO_Init+0x1e4>
 8004ed0:	2305      	movs	r3, #5
 8004ed2:	e00a      	b.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004ed4:	2306      	movs	r3, #6
 8004ed6:	e008      	b.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	e006      	b.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004edc:	2303      	movs	r3, #3
 8004ede:	e004      	b.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e002      	b.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e000      	b.n	8004eea <HAL_GPIO_Init+0x1fa>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	f002 0203 	and.w	r2, r2, #3
 8004ef0:	0092      	lsls	r2, r2, #2
 8004ef2:	4093      	lsls	r3, r2
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004efa:	4937      	ldr	r1, [pc, #220]	@ (8004fd8 <HAL_GPIO_Init+0x2e8>)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	3302      	adds	r3, #2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f08:	4b39      	ldr	r3, [pc, #228]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	43db      	mvns	r3, r3
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4013      	ands	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f2c:	4a30      	ldr	r2, [pc, #192]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f32:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f56:	4a26      	ldr	r2, [pc, #152]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f5c:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f86:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4013      	ands	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004faa:	4a11      	ldr	r2, [pc, #68]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f47f ae9d 	bne.w	8004d00 <HAL_GPIO_Init+0x10>
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	48000400 	.word	0x48000400
 8004fe0:	48000800 	.word	0x48000800
 8004fe4:	48000c00 	.word	0x48000c00
 8004fe8:	48001000 	.word	0x48001000
 8004fec:	48001400 	.word	0x48001400
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
 8005000:	4613      	mov	r3, r2
 8005002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005004:	787b      	ldrb	r3, [r7, #1]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800500a:	887a      	ldrh	r2, [r7, #2]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005010:	e002      	b.n	8005018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800502e:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	4013      	ands	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800503a:	4a05      	ldr	r2, [pc, #20]	@ (8005050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f806 	bl	8005054 <HAL_GPIO_EXTI_Callback>
  }
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40010400 	.word	0x40010400

08005054 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d141      	bne.n	80050fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507a:	4b4b      	ldr	r3, [pc, #300]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005086:	d131      	bne.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005088:	4b47      	ldr	r3, [pc, #284]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800508e:	4a46      	ldr	r2, [pc, #280]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005098:	4b43      	ldr	r3, [pc, #268]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050a0:	4a41      	ldr	r2, [pc, #260]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050a8:	4b40      	ldr	r3, [pc, #256]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2232      	movs	r2, #50	@ 0x32
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
 80050b2:	4a3f      	ldr	r2, [pc, #252]	@ (80051b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	0c9b      	lsrs	r3, r3, #18
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050be:	e002      	b.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c6:	4b38      	ldr	r3, [pc, #224]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d2:	d102      	bne.n	80050da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f2      	bne.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050da:	4b33      	ldr	r3, [pc, #204]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e6:	d158      	bne.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e057      	b.n	800519c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ec:	4b2e      	ldr	r3, [pc, #184]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f2:	4a2d      	ldr	r2, [pc, #180]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050fc:	e04d      	b.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005104:	d141      	bne.n	800518a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005106:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005112:	d131      	bne.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005114:	4b24      	ldr	r3, [pc, #144]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800511a:	4a23      	ldr	r2, [pc, #140]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005120:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005124:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800512c:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005134:	4b1d      	ldr	r3, [pc, #116]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2232      	movs	r2, #50	@ 0x32
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	4a1c      	ldr	r2, [pc, #112]	@ (80051b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	0c9b      	lsrs	r3, r3, #18
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800514a:	e002      	b.n	8005152 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b01      	subs	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005152:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515e:	d102      	bne.n	8005166 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f2      	bne.n	800514c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005172:	d112      	bne.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e011      	b.n	800519c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005178:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517e:	4a0a      	ldr	r2, [pc, #40]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005184:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005188:	e007      	b.n	800519a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005192:	4a05      	ldr	r2, [pc, #20]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005198:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40007000 	.word	0x40007000
 80051ac:	20000004 	.word	0x20000004
 80051b0:	431bde83 	.word	0x431bde83

080051b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a04      	ldr	r2, [pc, #16]	@ (80051d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051c2:	6093      	str	r3, [r2, #8]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40007000 	.word	0x40007000

080051d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e2fe      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d075      	beq.n	80052de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f2:	4b97      	ldr	r3, [pc, #604]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051fc:	4b94      	ldr	r3, [pc, #592]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d102      	bne.n	8005212 <HAL_RCC_OscConfig+0x3e>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d002      	beq.n	8005218 <HAL_RCC_OscConfig+0x44>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10b      	bne.n	8005230 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	4b8d      	ldr	r3, [pc, #564]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d05b      	beq.n	80052dc <HAL_RCC_OscConfig+0x108>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d157      	bne.n	80052dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e2d9      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005238:	d106      	bne.n	8005248 <HAL_RCC_OscConfig+0x74>
 800523a:	4b85      	ldr	r3, [pc, #532]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a84      	ldr	r2, [pc, #528]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e01d      	b.n	8005284 <HAL_RCC_OscConfig+0xb0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x98>
 8005252:	4b7f      	ldr	r3, [pc, #508]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7e      	ldr	r2, [pc, #504]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4b7c      	ldr	r3, [pc, #496]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7b      	ldr	r2, [pc, #492]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0xb0>
 800526c:	4b78      	ldr	r3, [pc, #480]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a77      	ldr	r2, [pc, #476]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b75      	ldr	r3, [pc, #468]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a74      	ldr	r2, [pc, #464]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800527e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd face 	bl	800282c <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7fd faca 	bl	800282c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	@ 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e29e      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0xc0>
 80052b2:	e014      	b.n	80052de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fd faba 	bl	800282c <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fd fab6 	bl	800282c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	@ 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e28a      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ce:	4b60      	ldr	r3, [pc, #384]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0xe8>
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d075      	beq.n	80053d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ea:	4b59      	ldr	r3, [pc, #356]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f4:	4b56      	ldr	r3, [pc, #344]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d102      	bne.n	800530a <HAL_RCC_OscConfig+0x136>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d002      	beq.n	8005310 <HAL_RCC_OscConfig+0x13c>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d11f      	bne.n	8005350 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005310:	4b4f      	ldr	r3, [pc, #316]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_OscConfig+0x154>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e25d      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005328:	4b49      	ldr	r3, [pc, #292]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	4946      	ldr	r1, [pc, #280]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800533c:	4b45      	ldr	r3, [pc, #276]	@ (8005454 <HAL_RCC_OscConfig+0x280>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7fc fc39 	bl	8001bb8 <HAL_InitTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d043      	beq.n	80053d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e249      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d023      	beq.n	80053a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005358:	4b3d      	ldr	r3, [pc, #244]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3c      	ldr	r2, [pc, #240]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800535e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fd fa62 	bl	800282c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536c:	f7fd fa5e 	bl	800282c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e232      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537e:	4b34      	ldr	r3, [pc, #208]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538a:	4b31      	ldr	r3, [pc, #196]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	061b      	lsls	r3, r3, #24
 8005398:	492d      	ldr	r1, [pc, #180]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
 800539e:	e01a      	b.n	80053d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fd fa3e 	bl	800282c <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b4:	f7fd fa3a 	bl	800282c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e20e      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c6:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x1e0>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d041      	beq.n	8005466 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01c      	beq.n	8005424 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ea:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80053ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fa:	f7fd fa17 	bl	800282c <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005402:	f7fd fa13 	bl	800282c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e1e7      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005414:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0ef      	beq.n	8005402 <HAL_RCC_OscConfig+0x22e>
 8005422:	e020      	b.n	8005466 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005424:	4b0a      	ldr	r3, [pc, #40]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800542a:	4a09      	ldr	r2, [pc, #36]	@ (8005450 <HAL_RCC_OscConfig+0x27c>)
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fd f9fa 	bl	800282c <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800543a:	e00d      	b.n	8005458 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800543c:	f7fd f9f6 	bl	800282c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d906      	bls.n	8005458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e1ca      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005458:	4b8c      	ldr	r3, [pc, #560]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1ea      	bne.n	800543c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80a6 	beq.w	80055c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005474:	2300      	movs	r3, #0
 8005476:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005478:	4b84      	ldr	r3, [pc, #528]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_OscConfig+0x2b4>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x2b6>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	4b7f      	ldr	r3, [pc, #508]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005492:	4a7e      	ldr	r2, [pc, #504]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005498:	6593      	str	r3, [r2, #88]	@ 0x58
 800549a:	4b7c      	ldr	r3, [pc, #496]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800549c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054a6:	2301      	movs	r3, #1
 80054a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054aa:	4b79      	ldr	r3, [pc, #484]	@ (8005690 <HAL_RCC_OscConfig+0x4bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d118      	bne.n	80054e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b6:	4b76      	ldr	r3, [pc, #472]	@ (8005690 <HAL_RCC_OscConfig+0x4bc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a75      	ldr	r2, [pc, #468]	@ (8005690 <HAL_RCC_OscConfig+0x4bc>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c2:	f7fd f9b3 	bl	800282c <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ca:	f7fd f9af 	bl	800282c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e183      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054dc:	4b6c      	ldr	r3, [pc, #432]	@ (8005690 <HAL_RCC_OscConfig+0x4bc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d108      	bne.n	8005502 <HAL_RCC_OscConfig+0x32e>
 80054f0:	4b66      	ldr	r3, [pc, #408]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f6:	4a65      	ldr	r2, [pc, #404]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005500:	e024      	b.n	800554c <HAL_RCC_OscConfig+0x378>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d110      	bne.n	800552c <HAL_RCC_OscConfig+0x358>
 800550a:	4b60      	ldr	r3, [pc, #384]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005510:	4a5e      	ldr	r2, [pc, #376]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005512:	f043 0304 	orr.w	r3, r3, #4
 8005516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800551a:	4b5c      	ldr	r3, [pc, #368]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005520:	4a5a      	ldr	r2, [pc, #360]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800552a:	e00f      	b.n	800554c <HAL_RCC_OscConfig+0x378>
 800552c:	4b57      	ldr	r3, [pc, #348]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005532:	4a56      	ldr	r2, [pc, #344]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800553c:	4b53      	ldr	r3, [pc, #332]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005542:	4a52      	ldr	r2, [pc, #328]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005544:	f023 0304 	bic.w	r3, r3, #4
 8005548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d016      	beq.n	8005582 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005554:	f7fd f96a 	bl	800282c <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555a:	e00a      	b.n	8005572 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f7fd f966 	bl	800282c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e138      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005572:	4b46      	ldr	r3, [pc, #280]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ed      	beq.n	800555c <HAL_RCC_OscConfig+0x388>
 8005580:	e015      	b.n	80055ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005582:	f7fd f953 	bl	800282c <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fd f94f 	bl	800282c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e121      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a0:	4b3a      	ldr	r3, [pc, #232]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ed      	bne.n	800558a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b4:	4b35      	ldr	r3, [pc, #212]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b8:	4a34      	ldr	r2, [pc, #208]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d03c      	beq.n	8005646 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01c      	beq.n	800560e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d4:	4b2d      	ldr	r3, [pc, #180]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 80055d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055da:	4a2c      	ldr	r2, [pc, #176]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fd f922 	bl	800282c <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ec:	f7fd f91e 	bl	800282c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0f2      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055fe:	4b23      	ldr	r3, [pc, #140]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005600:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ef      	beq.n	80055ec <HAL_RCC_OscConfig+0x418>
 800560c:	e01b      	b.n	8005646 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800560e:	4b1f      	ldr	r3, [pc, #124]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005614:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561e:	f7fd f905 	bl	800282c <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005626:	f7fd f901 	bl	800282c <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e0d5      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005638:	4b14      	ldr	r3, [pc, #80]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800563a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1ef      	bne.n	8005626 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80c9 	beq.w	80057e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005650:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 030c 	and.w	r3, r3, #12
 8005658:	2b0c      	cmp	r3, #12
 800565a:	f000 8083 	beq.w	8005764 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d15e      	bne.n	8005724 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005666:	4b09      	ldr	r3, [pc, #36]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a08      	ldr	r2, [pc, #32]	@ (800568c <HAL_RCC_OscConfig+0x4b8>)
 800566c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005672:	f7fd f8db 	bl	800282c <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005678:	e00c      	b.n	8005694 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567a:	f7fd f8d7 	bl	800282c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d905      	bls.n	8005694 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e0ab      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
 800568c:	40021000 	.word	0x40021000
 8005690:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005694:	4b55      	ldr	r3, [pc, #340]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ec      	bne.n	800567a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a0:	4b52      	ldr	r3, [pc, #328]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	4b52      	ldr	r3, [pc, #328]	@ (80057f0 <HAL_RCC_OscConfig+0x61c>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6a11      	ldr	r1, [r2, #32]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056b0:	3a01      	subs	r2, #1
 80056b2:	0112      	lsls	r2, r2, #4
 80056b4:	4311      	orrs	r1, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80056ba:	0212      	lsls	r2, r2, #8
 80056bc:	4311      	orrs	r1, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	3a01      	subs	r2, #1
 80056c6:	0552      	lsls	r2, r2, #21
 80056c8:	4311      	orrs	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056ce:	0852      	lsrs	r2, r2, #1
 80056d0:	3a01      	subs	r2, #1
 80056d2:	0652      	lsls	r2, r2, #25
 80056d4:	4311      	orrs	r1, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056da:	06d2      	lsls	r2, r2, #27
 80056dc:	430a      	orrs	r2, r1
 80056de:	4943      	ldr	r1, [pc, #268]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e4:	4b41      	ldr	r3, [pc, #260]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a40      	ldr	r2, [pc, #256]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 80056ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056f0:	4b3e      	ldr	r3, [pc, #248]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a3d      	ldr	r2, [pc, #244]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 80056f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fd f896 	bl	800282c <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005704:	f7fd f892 	bl	800282c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e066      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005716:	4b35      	ldr	r3, [pc, #212]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCC_OscConfig+0x530>
 8005722:	e05e      	b.n	80057e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005724:	4b31      	ldr	r3, [pc, #196]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a30      	ldr	r2, [pc, #192]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 800572a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800572e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fd f87c 	bl	800282c <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005738:	f7fd f878 	bl	800282c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e04c      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574a:	4b28      	ldr	r3, [pc, #160]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005756:	4b25      	ldr	r3, [pc, #148]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	4924      	ldr	r1, [pc, #144]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 800575c:	4b25      	ldr	r3, [pc, #148]	@ (80057f4 <HAL_RCC_OscConfig+0x620>)
 800575e:	4013      	ands	r3, r2
 8005760:	60cb      	str	r3, [r1, #12]
 8005762:	e03e      	b.n	80057e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e039      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005770:	4b1e      	ldr	r3, [pc, #120]	@ (80057ec <HAL_RCC_OscConfig+0x618>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 0203 	and.w	r2, r3, #3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	429a      	cmp	r2, r3
 8005782:	d12c      	bne.n	80057de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	3b01      	subs	r3, #1
 8005790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d123      	bne.n	80057de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d11b      	bne.n	80057de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d113      	bne.n	80057de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	3b01      	subs	r3, #1
 80057c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d109      	bne.n	80057de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	3b01      	subs	r3, #1
 80057d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d001      	beq.n	80057e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021000 	.word	0x40021000
 80057f0:	019f800c 	.word	0x019f800c
 80057f4:	feeefffc 	.word	0xfeeefffc

080057f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e11e      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005810:	4b91      	ldr	r3, [pc, #580]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d910      	bls.n	8005840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b8e      	ldr	r3, [pc, #568]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f023 020f 	bic.w	r2, r3, #15
 8005826:	498c      	ldr	r1, [pc, #560]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b8a      	ldr	r3, [pc, #552]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e106      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d073      	beq.n	8005934 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b03      	cmp	r3, #3
 8005852:	d129      	bne.n	80058a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005854:	4b81      	ldr	r3, [pc, #516]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0f4      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005864:	f000 f9d0 	bl	8005c08 <RCC_GetSysClockFreqFromPLLSource>
 8005868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4a7c      	ldr	r2, [pc, #496]	@ (8005a60 <HAL_RCC_ClockConfig+0x268>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d93f      	bls.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005872:	4b7a      	ldr	r3, [pc, #488]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005886:	2b00      	cmp	r3, #0
 8005888:	d033      	beq.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800588e:	2b00      	cmp	r3, #0
 8005890:	d12f      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005892:	4b72      	ldr	r3, [pc, #456]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800589a:	4a70      	ldr	r2, [pc, #448]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 800589c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058a2:	2380      	movs	r3, #128	@ 0x80
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e024      	b.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0c6      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c0:	4b66      	ldr	r3, [pc, #408]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0be      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058d0:	f000 f8ce 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4a61      	ldr	r2, [pc, #388]	@ (8005a60 <HAL_RCC_ClockConfig+0x268>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d909      	bls.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058de:	4b5f      	ldr	r3, [pc, #380]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058e6:	4a5d      	ldr	r2, [pc, #372]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058ee:	2380      	movs	r3, #128	@ 0x80
 80058f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058f2:	4b5a      	ldr	r3, [pc, #360]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 0203 	bic.w	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4957      	ldr	r1, [pc, #348]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005900:	4313      	orrs	r3, r2
 8005902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005904:	f7fc ff92 	bl	800282c <HAL_GetTick>
 8005908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590a:	e00a      	b.n	8005922 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590c:	f7fc ff8e 	bl	800282c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e095      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005922:	4b4e      	ldr	r3, [pc, #312]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 020c 	and.w	r2, r3, #12
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	429a      	cmp	r2, r3
 8005932:	d1eb      	bne.n	800590c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d023      	beq.n	8005988 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800594c:	4b43      	ldr	r3, [pc, #268]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a42      	ldr	r2, [pc, #264]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005952:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005956:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005964:	4b3d      	ldr	r3, [pc, #244]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800596c:	4a3b      	ldr	r2, [pc, #236]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 800596e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005974:	4b39      	ldr	r3, [pc, #228]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4936      	ldr	r1, [pc, #216]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
 8005986:	e008      	b.n	800599a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b80      	cmp	r3, #128	@ 0x80
 800598c:	d105      	bne.n	800599a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800598e:	4b33      	ldr	r3, [pc, #204]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a32      	ldr	r2, [pc, #200]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005994:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005998:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800599a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d21d      	bcs.n	80059e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 020f 	bic.w	r2, r3, #15
 80059b0:	4929      	ldr	r1, [pc, #164]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059b8:	f7fc ff38 	bl	800282c <HAL_GetTick>
 80059bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c0:	f7fc ff34 	bl	800282c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e03b      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b20      	ldr	r3, [pc, #128]	@ (8005a58 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d1ed      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4917      	ldr	r1, [pc, #92]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a0e:	4b13      	ldr	r3, [pc, #76]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	490f      	ldr	r1, [pc, #60]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a22:	f000 f825 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b0c      	ldr	r3, [pc, #48]	@ (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	490c      	ldr	r1, [pc, #48]	@ (8005a64 <HAL_RCC_ClockConfig+0x26c>)
 8005a34:	5ccb      	ldrb	r3, [r1, r3]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <HAL_RCC_ClockConfig+0x270>)
 8005a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a42:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <HAL_RCC_ClockConfig+0x274>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fc f8b6 	bl	8001bb8 <HAL_InitTick>
 8005a4c:	4603      	mov	r3, r0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40022000 	.word	0x40022000
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	04c4b400 	.word	0x04c4b400
 8005a64:	0800d398 	.word	0x0800d398
 8005a68:	20000004 	.word	0x20000004
 8005a6c:	20000008 	.word	0x20000008

08005a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a76:	4b2c      	ldr	r3, [pc, #176]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d102      	bne.n	8005a88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a82:	4b2a      	ldr	r3, [pc, #168]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	e047      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a88:	4b27      	ldr	r3, [pc, #156]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d102      	bne.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a94:	4b26      	ldr	r3, [pc, #152]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e03e      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a9a:	4b23      	ldr	r3, [pc, #140]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d136      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aa6:	4b20      	ldr	r3, [pc, #128]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	3301      	adds	r3, #1
 8005abc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d10c      	bne.n	8005ade <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	0a12      	lsrs	r2, r2, #8
 8005ad2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	617b      	str	r3, [r7, #20]
      break;
 8005adc:	e00c      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ade:	4a13      	ldr	r2, [pc, #76]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	4a10      	ldr	r2, [pc, #64]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	0a12      	lsrs	r2, r2, #8
 8005aec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
      break;
 8005af6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005af8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	0e5b      	lsrs	r3, r3, #25
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	3301      	adds	r3, #1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e001      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b18:	693b      	ldr	r3, [r7, #16]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	00f42400 	.word	0x00f42400
 8005b30:	016e3600 	.word	0x016e3600

08005b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b38:	4b03      	ldr	r3, [pc, #12]	@ (8005b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000004 	.word	0x20000004

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b50:	f7ff fff0 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4904      	ldr	r1, [pc, #16]	@ (8005b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40021000 	.word	0x40021000
 8005b74:	0800d3a8 	.word	0x0800d3a8

08005b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b7c:	f7ff ffda 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	0adb      	lsrs	r3, r3, #11
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	4904      	ldr	r1, [pc, #16]	@ (8005ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b8e:	5ccb      	ldrb	r3, [r1, r3]
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	0800d3a8 	.word	0x0800d3a8

08005ba4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	220f      	movs	r2, #15
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005bb4:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <HAL_RCC_GetClockConfig+0x5c>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 0203 	and.w	r2, r3, #3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <HAL_RCC_GetClockConfig+0x5c>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <HAL_RCC_GetClockConfig+0x5c>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005bd8:	4b09      	ldr	r3, [pc, #36]	@ (8005c00 <HAL_RCC_GetClockConfig+0x5c>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	08db      	lsrs	r3, r3, #3
 8005bde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <HAL_RCC_GetClockConfig+0x60>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 020f 	and.w	r2, r3, #15
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	40022000 	.word	0x40022000

08005c08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c18:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d10c      	bne.n	8005c46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c2c:	4a17      	ldr	r2, [pc, #92]	@ (8005c8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	4a14      	ldr	r2, [pc, #80]	@ (8005c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c36:	68d2      	ldr	r2, [r2, #12]
 8005c38:	0a12      	lsrs	r2, r2, #8
 8005c3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	617b      	str	r3, [r7, #20]
    break;
 8005c44:	e00c      	b.n	8005c60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c46:	4a12      	ldr	r2, [pc, #72]	@ (8005c90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c50:	68d2      	ldr	r2, [r2, #12]
 8005c52:	0a12      	lsrs	r2, r2, #8
 8005c54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
 8005c5c:	617b      	str	r3, [r7, #20]
    break;
 8005c5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c60:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	0e5b      	lsrs	r3, r3, #25
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c7a:	687b      	ldr	r3, [r7, #4]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	016e3600 	.word	0x016e3600
 8005c90:	00f42400 	.word	0x00f42400

08005c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8098 	beq.w	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb6:	4b43      	ldr	r3, [pc, #268]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10d      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc2:	4b40      	ldr	r3, [pc, #256]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cce:	4b3d      	ldr	r3, [pc, #244]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cde:	4b3a      	ldr	r3, [pc, #232]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a39      	ldr	r2, [pc, #228]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cea:	f7fc fd9f 	bl	800282c <HAL_GetTick>
 8005cee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cf0:	e009      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf2:	f7fc fd9b 	bl	800282c <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d902      	bls.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	74fb      	strb	r3, [r7, #19]
        break;
 8005d04:	e005      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d06:	4b30      	ldr	r3, [pc, #192]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0ef      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d12:	7cfb      	ldrb	r3, [r7, #19]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d159      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d18:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01e      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d019      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d34:	4b23      	ldr	r3, [pc, #140]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d40:	4b20      	ldr	r3, [pc, #128]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d46:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d50:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d56:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d60:	4a18      	ldr	r2, [pc, #96]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d72:	f7fc fd5b 	bl	800282c <HAL_GetTick>
 8005d76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d78:	e00b      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7a:	f7fc fd57 	bl	800282c <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d902      	bls.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005d90:	e006      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d92:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0ec      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005da6:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db4:	4903      	ldr	r1, [pc, #12]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dbe:	7cfb      	ldrb	r3, [r7, #19]
 8005dc0:	74bb      	strb	r3, [r7, #18]
 8005dc2:	e005      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	7cfb      	ldrb	r3, [r7, #19]
 8005dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dd0:	7c7b      	ldrb	r3, [r7, #17]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd6:	4ba7      	ldr	r3, [pc, #668]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dda:	4aa6      	ldr	r2, [pc, #664]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dee:	4ba1      	ldr	r3, [pc, #644]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df4:	f023 0203 	bic.w	r2, r3, #3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	499d      	ldr	r1, [pc, #628]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e10:	4b98      	ldr	r3, [pc, #608]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e16:	f023 020c 	bic.w	r2, r3, #12
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4995      	ldr	r1, [pc, #596]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e32:	4b90      	ldr	r3, [pc, #576]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	498c      	ldr	r1, [pc, #560]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e54:	4b87      	ldr	r3, [pc, #540]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	4984      	ldr	r1, [pc, #528]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e76:	4b7f      	ldr	r3, [pc, #508]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	497b      	ldr	r1, [pc, #492]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e98:	4b76      	ldr	r3, [pc, #472]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	4973      	ldr	r1, [pc, #460]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eba:	4b6e      	ldr	r3, [pc, #440]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	496a      	ldr	r1, [pc, #424]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005edc:	4b65      	ldr	r3, [pc, #404]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	4962      	ldr	r1, [pc, #392]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005efe:	4b5d      	ldr	r3, [pc, #372]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	4959      	ldr	r1, [pc, #356]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f20:	4b54      	ldr	r3, [pc, #336]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f26:	f023 0203 	bic.w	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	4951      	ldr	r1, [pc, #324]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f42:	4b4c      	ldr	r3, [pc, #304]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f50:	4948      	ldr	r1, [pc, #288]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d015      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f64:	4b43      	ldr	r3, [pc, #268]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	4940      	ldr	r1, [pc, #256]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f82:	d105      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f84:	4b3b      	ldr	r3, [pc, #236]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4a3a      	ldr	r2, [pc, #232]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f8e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d015      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f9c:	4b35      	ldr	r3, [pc, #212]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005faa:	4932      	ldr	r1, [pc, #200]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fba:	d105      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fc6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fd4:	4b27      	ldr	r3, [pc, #156]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe2:	4924      	ldr	r1, [pc, #144]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ff2:	d105      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ffe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d015      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800600c:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006012:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	4916      	ldr	r1, [pc, #88]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800602a:	d105      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800602c:	4b11      	ldr	r3, [pc, #68]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4a10      	ldr	r2, [pc, #64]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006036:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d019      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006044:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	4908      	ldr	r1, [pc, #32]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006062:	d109      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006064:	4b03      	ldr	r3, [pc, #12]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a02      	ldr	r2, [pc, #8]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800606e:	60d3      	str	r3, [r2, #12]
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d015      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006084:	4b29      	ldr	r3, [pc, #164]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	4926      	ldr	r1, [pc, #152]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a2:	d105      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060a4:	4b21      	ldr	r3, [pc, #132]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a20      	ldr	r2, [pc, #128]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060bc:	4b1b      	ldr	r3, [pc, #108]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ca:	4918      	ldr	r1, [pc, #96]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060da:	d105      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060dc:	4b13      	ldr	r3, [pc, #76]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	4a12      	ldr	r2, [pc, #72]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d015      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060f4:	4b0d      	ldr	r3, [pc, #52]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006102:	490a      	ldr	r1, [pc, #40]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800610e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006112:	d105      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a04      	ldr	r2, [pc, #16]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800611e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006120:	7cbb      	ldrb	r3, [r7, #18]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000

08006130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e049      	b.n	80061d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fc f86c 	bl	8002234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f000 fec6 	bl	8006f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e04c      	b.n	8006292 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a26      	ldr	r2, [pc, #152]	@ (80062a0 <HAL_TIM_Base_Start+0xc0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d022      	beq.n	8006250 <HAL_TIM_Base_Start+0x70>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006212:	d01d      	beq.n	8006250 <HAL_TIM_Base_Start+0x70>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	@ (80062a4 <HAL_TIM_Base_Start+0xc4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d018      	beq.n	8006250 <HAL_TIM_Base_Start+0x70>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	@ (80062a8 <HAL_TIM_Base_Start+0xc8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <HAL_TIM_Base_Start+0x70>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1f      	ldr	r2, [pc, #124]	@ (80062ac <HAL_TIM_Base_Start+0xcc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_TIM_Base_Start+0x70>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <HAL_TIM_Base_Start+0xd0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_TIM_Base_Start+0x70>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1c      	ldr	r2, [pc, #112]	@ (80062b4 <HAL_TIM_Base_Start+0xd4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIM_Base_Start+0x70>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1b      	ldr	r2, [pc, #108]	@ (80062b8 <HAL_TIM_Base_Start+0xd8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d115      	bne.n	800627c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <HAL_TIM_Base_Start+0xdc>)
 8006258:	4013      	ands	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b06      	cmp	r3, #6
 8006260:	d015      	beq.n	800628e <HAL_TIM_Base_Start+0xae>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006268:	d011      	beq.n	800628e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0201 	orr.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627a:	e008      	b.n	800628e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e000      	b.n	8006290 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40000800 	.word	0x40000800
 80062ac:	40000c00 	.word	0x40000c00
 80062b0:	40013400 	.word	0x40013400
 80062b4:	40014000 	.word	0x40014000
 80062b8:	40015000 	.word	0x40015000
 80062bc:	00010007 	.word	0x00010007

080062c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d001      	beq.n	80062d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e054      	b.n	8006382 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a26      	ldr	r2, [pc, #152]	@ (8006390 <HAL_TIM_Base_Start_IT+0xd0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d022      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x80>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006302:	d01d      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x80>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a22      	ldr	r2, [pc, #136]	@ (8006394 <HAL_TIM_Base_Start_IT+0xd4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d018      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x80>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a21      	ldr	r2, [pc, #132]	@ (8006398 <HAL_TIM_Base_Start_IT+0xd8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x80>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1f      	ldr	r2, [pc, #124]	@ (800639c <HAL_TIM_Base_Start_IT+0xdc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00e      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x80>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1e      	ldr	r2, [pc, #120]	@ (80063a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d009      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x80>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1c      	ldr	r2, [pc, #112]	@ (80063a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x80>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1b      	ldr	r2, [pc, #108]	@ (80063a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d115      	bne.n	800636c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	4b19      	ldr	r3, [pc, #100]	@ (80063ac <HAL_TIM_Base_Start_IT+0xec>)
 8006348:	4013      	ands	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b06      	cmp	r3, #6
 8006350:	d015      	beq.n	800637e <HAL_TIM_Base_Start_IT+0xbe>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006358:	d011      	beq.n	800637e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0201 	orr.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636a:	e008      	b.n	800637e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e000      	b.n	8006380 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40015000 	.word	0x40015000
 80063ac:	00010007 	.word	0x00010007

080063b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e049      	b.n	8006456 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb ff90 	bl	80022fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f000 fd86 	bl	8006f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d109      	bne.n	8006484 <HAL_TIM_PWM_Start+0x24>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	e03c      	b.n	80064fe <HAL_TIM_PWM_Start+0x9e>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b04      	cmp	r3, #4
 8006488:	d109      	bne.n	800649e <HAL_TIM_PWM_Start+0x3e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b01      	cmp	r3, #1
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	e02f      	b.n	80064fe <HAL_TIM_PWM_Start+0x9e>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d109      	bne.n	80064b8 <HAL_TIM_PWM_Start+0x58>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	bf14      	ite	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	2300      	moveq	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e022      	b.n	80064fe <HAL_TIM_PWM_Start+0x9e>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b0c      	cmp	r3, #12
 80064bc:	d109      	bne.n	80064d2 <HAL_TIM_PWM_Start+0x72>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	bf14      	ite	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	2300      	moveq	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	e015      	b.n	80064fe <HAL_TIM_PWM_Start+0x9e>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d109      	bne.n	80064ec <HAL_TIM_PWM_Start+0x8c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	bf14      	ite	ne
 80064e4:	2301      	movne	r3, #1
 80064e6:	2300      	moveq	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	e008      	b.n	80064fe <HAL_TIM_PWM_Start+0x9e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e0a6      	b.n	8006654 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <HAL_TIM_PWM_Start+0xb6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006514:	e023      	b.n	800655e <HAL_TIM_PWM_Start+0xfe>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b04      	cmp	r3, #4
 800651a:	d104      	bne.n	8006526 <HAL_TIM_PWM_Start+0xc6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006524:	e01b      	b.n	800655e <HAL_TIM_PWM_Start+0xfe>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d104      	bne.n	8006536 <HAL_TIM_PWM_Start+0xd6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006534:	e013      	b.n	800655e <HAL_TIM_PWM_Start+0xfe>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b0c      	cmp	r3, #12
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start+0xe6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006544:	e00b      	b.n	800655e <HAL_TIM_PWM_Start+0xfe>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b10      	cmp	r3, #16
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Start+0xf6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006554:	e003      	b.n	800655e <HAL_TIM_PWM_Start+0xfe>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2202      	movs	r2, #2
 800655a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f001 f9b8 	bl	80078dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a3a      	ldr	r2, [pc, #232]	@ (800665c <HAL_TIM_PWM_Start+0x1fc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d018      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x148>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a39      	ldr	r2, [pc, #228]	@ (8006660 <HAL_TIM_PWM_Start+0x200>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x148>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a37      	ldr	r2, [pc, #220]	@ (8006664 <HAL_TIM_PWM_Start+0x204>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00e      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x148>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a36      	ldr	r2, [pc, #216]	@ (8006668 <HAL_TIM_PWM_Start+0x208>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x148>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a34      	ldr	r2, [pc, #208]	@ (800666c <HAL_TIM_PWM_Start+0x20c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x148>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a33      	ldr	r2, [pc, #204]	@ (8006670 <HAL_TIM_PWM_Start+0x210>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d101      	bne.n	80065ac <HAL_TIM_PWM_Start+0x14c>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <HAL_TIM_PWM_Start+0x14e>
 80065ac:	2300      	movs	r3, #0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a25      	ldr	r2, [pc, #148]	@ (800665c <HAL_TIM_PWM_Start+0x1fc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d022      	beq.n	8006612 <HAL_TIM_PWM_Start+0x1b2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d4:	d01d      	beq.n	8006612 <HAL_TIM_PWM_Start+0x1b2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <HAL_TIM_PWM_Start+0x214>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d018      	beq.n	8006612 <HAL_TIM_PWM_Start+0x1b2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a24      	ldr	r2, [pc, #144]	@ (8006678 <HAL_TIM_PWM_Start+0x218>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <HAL_TIM_PWM_Start+0x1b2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a23      	ldr	r2, [pc, #140]	@ (800667c <HAL_TIM_PWM_Start+0x21c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_TIM_PWM_Start+0x1b2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a19      	ldr	r2, [pc, #100]	@ (8006660 <HAL_TIM_PWM_Start+0x200>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_TIM_PWM_Start+0x1b2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a18      	ldr	r2, [pc, #96]	@ (8006664 <HAL_TIM_PWM_Start+0x204>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_TIM_PWM_Start+0x1b2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_TIM_PWM_Start+0x210>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d115      	bne.n	800663e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	4b19      	ldr	r3, [pc, #100]	@ (8006680 <HAL_TIM_PWM_Start+0x220>)
 800661a:	4013      	ands	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b06      	cmp	r3, #6
 8006622:	d015      	beq.n	8006650 <HAL_TIM_PWM_Start+0x1f0>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662a:	d011      	beq.n	8006650 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663c:	e008      	b.n	8006650 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e000      	b.n	8006652 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006650:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40013400 	.word	0x40013400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800
 8006670:	40015000 	.word	0x40015000
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	00010007 	.word	0x00010007

08006684 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f001 f920 	bl	80078dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a40      	ldr	r2, [pc, #256]	@ (80067a4 <HAL_TIM_PWM_Stop+0x120>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d018      	beq.n	80066d8 <HAL_TIM_PWM_Stop+0x54>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a3f      	ldr	r2, [pc, #252]	@ (80067a8 <HAL_TIM_PWM_Stop+0x124>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d013      	beq.n	80066d8 <HAL_TIM_PWM_Stop+0x54>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a3d      	ldr	r2, [pc, #244]	@ (80067ac <HAL_TIM_PWM_Stop+0x128>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00e      	beq.n	80066d8 <HAL_TIM_PWM_Stop+0x54>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a3c      	ldr	r2, [pc, #240]	@ (80067b0 <HAL_TIM_PWM_Stop+0x12c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d009      	beq.n	80066d8 <HAL_TIM_PWM_Stop+0x54>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a3a      	ldr	r2, [pc, #232]	@ (80067b4 <HAL_TIM_PWM_Stop+0x130>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <HAL_TIM_PWM_Stop+0x54>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a39      	ldr	r2, [pc, #228]	@ (80067b8 <HAL_TIM_PWM_Stop+0x134>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d101      	bne.n	80066dc <HAL_TIM_PWM_Stop+0x58>
 80066d8:	2301      	movs	r3, #1
 80066da:	e000      	b.n	80066de <HAL_TIM_PWM_Stop+0x5a>
 80066dc:	2300      	movs	r3, #0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d017      	beq.n	8006712 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a1a      	ldr	r2, [r3, #32]
 80066e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10f      	bne.n	8006712 <HAL_TIM_PWM_Stop+0x8e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f244 4344 	movw	r3, #17476	@ 0x4444
 80066fc:	4013      	ands	r3, r2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d107      	bne.n	8006712 <HAL_TIM_PWM_Stop+0x8e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006710:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	f241 1311 	movw	r3, #4369	@ 0x1111
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10f      	bne.n	8006742 <HAL_TIM_PWM_Stop+0xbe>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	f244 4344 	movw	r3, #17476	@ 0x4444
 800672c:	4013      	ands	r3, r2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d107      	bne.n	8006742 <HAL_TIM_PWM_Stop+0xbe>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0201 	bic.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Stop+0xce>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006750:	e023      	b.n	800679a <HAL_TIM_PWM_Stop+0x116>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Stop+0xde>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006760:	e01b      	b.n	800679a <HAL_TIM_PWM_Stop+0x116>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Stop+0xee>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006770:	e013      	b.n	800679a <HAL_TIM_PWM_Stop+0x116>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b0c      	cmp	r3, #12
 8006776:	d104      	bne.n	8006782 <HAL_TIM_PWM_Stop+0xfe>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006780:	e00b      	b.n	800679a <HAL_TIM_PWM_Stop+0x116>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b10      	cmp	r3, #16
 8006786:	d104      	bne.n	8006792 <HAL_TIM_PWM_Stop+0x10e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006790:	e003      	b.n	800679a <HAL_TIM_PWM_Stop+0x116>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40013400 	.word	0x40013400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40014400 	.word	0x40014400
 80067b4:	40014800 	.word	0x40014800
 80067b8:	40015000 	.word	0x40015000

080067bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d020      	beq.n	8006820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01b      	beq.n	8006820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0202 	mvn.w	r2, #2
 80067f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb5c 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fb4e 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb5f 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d020      	beq.n	800686c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01b      	beq.n	800686c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0204 	mvn.w	r2, #4
 800683c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fb36 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 8006858:	e005      	b.n	8006866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fb28 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb39 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d020      	beq.n	80068b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01b      	beq.n	80068b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0208 	mvn.w	r2, #8
 8006888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb10 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 80068a4:	e005      	b.n	80068b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fb02 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fb13 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d020      	beq.n	8006904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01b      	beq.n	8006904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0210 	mvn.w	r2, #16
 80068d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2208      	movs	r2, #8
 80068da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 faea 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 80068f0:	e005      	b.n	80068fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fadc 	bl	8006eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 faed 	bl	8006ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d007      	beq.n	8006928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0201 	mvn.w	r2, #1
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fb f8f6 	bl	8001b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00c      	beq.n	8006956 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800694e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 faeb 	bl	8007f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fae3 	bl	8007f40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00c      	beq.n	800699e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 faa7 	bl	8006eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0220 	mvn.w	r2, #32
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 faab 	bl	8007f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80069de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fab7 	bl	8007f54 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 faaf 	bl	8007f68 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00c      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 faa7 	bl	8007f7c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00c      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fa9f 	bl	8007f90 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e0ff      	b.n	8006c7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b14      	cmp	r3, #20
 8006a86:	f200 80f0 	bhi.w	8006c6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006ae5 	.word	0x08006ae5
 8006a94:	08006c6b 	.word	0x08006c6b
 8006a98:	08006c6b 	.word	0x08006c6b
 8006a9c:	08006c6b 	.word	0x08006c6b
 8006aa0:	08006b25 	.word	0x08006b25
 8006aa4:	08006c6b 	.word	0x08006c6b
 8006aa8:	08006c6b 	.word	0x08006c6b
 8006aac:	08006c6b 	.word	0x08006c6b
 8006ab0:	08006b67 	.word	0x08006b67
 8006ab4:	08006c6b 	.word	0x08006c6b
 8006ab8:	08006c6b 	.word	0x08006c6b
 8006abc:	08006c6b 	.word	0x08006c6b
 8006ac0:	08006ba7 	.word	0x08006ba7
 8006ac4:	08006c6b 	.word	0x08006c6b
 8006ac8:	08006c6b 	.word	0x08006c6b
 8006acc:	08006c6b 	.word	0x08006c6b
 8006ad0:	08006be9 	.word	0x08006be9
 8006ad4:	08006c6b 	.word	0x08006c6b
 8006ad8:	08006c6b 	.word	0x08006c6b
 8006adc:	08006c6b 	.word	0x08006c6b
 8006ae0:	08006c29 	.word	0x08006c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fabc 	bl	8007068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0208 	orr.w	r2, r2, #8
 8006afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0204 	bic.w	r2, r2, #4
 8006b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6999      	ldr	r1, [r3, #24]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	619a      	str	r2, [r3, #24]
      break;
 8006b22:	e0a5      	b.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68b9      	ldr	r1, [r7, #8]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fb36 	bl	800719c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6999      	ldr	r1, [r3, #24]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	021a      	lsls	r2, r3, #8
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	619a      	str	r2, [r3, #24]
      break;
 8006b64:	e084      	b.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fba9 	bl	80072c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69da      	ldr	r2, [r3, #28]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0208 	orr.w	r2, r2, #8
 8006b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69da      	ldr	r2, [r3, #28]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0204 	bic.w	r2, r2, #4
 8006b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69d9      	ldr	r1, [r3, #28]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	61da      	str	r2, [r3, #28]
      break;
 8006ba4:	e064      	b.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fc1b 	bl	80073e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69da      	ldr	r2, [r3, #28]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69d9      	ldr	r1, [r3, #28]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	021a      	lsls	r2, r3, #8
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	61da      	str	r2, [r3, #28]
      break;
 8006be6:	e043      	b.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fc8e 	bl	8007510 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0208 	orr.w	r2, r2, #8
 8006c02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0204 	bic.w	r2, r2, #4
 8006c12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c26:	e023      	b.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fcd8 	bl	80075e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	021a      	lsls	r2, r3, #8
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c68:	e002      	b.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop

08006c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e0f6      	b.n	8006e8e <HAL_TIM_ConfigClockSource+0x20a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a6f      	ldr	r2, [pc, #444]	@ (8006e98 <HAL_TIM_ConfigClockSource+0x214>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	f000 80c1 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006ce0:	4a6d      	ldr	r2, [pc, #436]	@ (8006e98 <HAL_TIM_ConfigClockSource+0x214>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	f200 80c6 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ce8:	4a6c      	ldr	r2, [pc, #432]	@ (8006e9c <HAL_TIM_ConfigClockSource+0x218>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	f000 80b9 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8006e9c <HAL_TIM_ConfigClockSource+0x218>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	f200 80be 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cf8:	4a69      	ldr	r2, [pc, #420]	@ (8006ea0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f000 80b1 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006d00:	4a67      	ldr	r2, [pc, #412]	@ (8006ea0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	f200 80b6 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d08:	4a66      	ldr	r2, [pc, #408]	@ (8006ea4 <HAL_TIM_ConfigClockSource+0x220>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	f000 80a9 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006d10:	4a64      	ldr	r2, [pc, #400]	@ (8006ea4 <HAL_TIM_ConfigClockSource+0x220>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	f200 80ae 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d18:	4a63      	ldr	r2, [pc, #396]	@ (8006ea8 <HAL_TIM_ConfigClockSource+0x224>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	f000 80a1 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006d20:	4a61      	ldr	r2, [pc, #388]	@ (8006ea8 <HAL_TIM_ConfigClockSource+0x224>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	f200 80a6 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d28:	4a60      	ldr	r2, [pc, #384]	@ (8006eac <HAL_TIM_ConfigClockSource+0x228>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f000 8099 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006d30:	4a5e      	ldr	r2, [pc, #376]	@ (8006eac <HAL_TIM_ConfigClockSource+0x228>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	f200 809e 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d3c:	f000 8091 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006d40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d44:	f200 8096 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d4c:	f000 8089 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d54:	f200 808e 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d5c:	d03e      	beq.n	8006ddc <HAL_TIM_ConfigClockSource+0x158>
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d62:	f200 8087 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6a:	f000 8086 	beq.w	8006e7a <HAL_TIM_ConfigClockSource+0x1f6>
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d72:	d87f      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d74:	2b70      	cmp	r3, #112	@ 0x70
 8006d76:	d01a      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x12a>
 8006d78:	2b70      	cmp	r3, #112	@ 0x70
 8006d7a:	d87b      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d7c:	2b60      	cmp	r3, #96	@ 0x60
 8006d7e:	d050      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0x19e>
 8006d80:	2b60      	cmp	r3, #96	@ 0x60
 8006d82:	d877      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d84:	2b50      	cmp	r3, #80	@ 0x50
 8006d86:	d03c      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x17e>
 8006d88:	2b50      	cmp	r3, #80	@ 0x50
 8006d8a:	d873      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d8c:	2b40      	cmp	r3, #64	@ 0x40
 8006d8e:	d058      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x1be>
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d86f      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d94:	2b30      	cmp	r3, #48	@ 0x30
 8006d96:	d064      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006d98:	2b30      	cmp	r3, #48	@ 0x30
 8006d9a:	d86b      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d060      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d867      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d05c      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d05a      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x1de>
 8006dac:	e062      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dbe:	f000 fd6d 	bl	800789c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	609a      	str	r2, [r3, #8]
      break;
 8006dda:	e04f      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dec:	f000 fd56 	bl	800789c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dfe:	609a      	str	r2, [r3, #8]
      break;
 8006e00:	e03c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f000 fcc8 	bl	80077a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2150      	movs	r1, #80	@ 0x50
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fd21 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 8006e20:	e02c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f000 fce7 	bl	8007802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2160      	movs	r1, #96	@ 0x60
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fd11 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 8006e40:	e01c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f000 fca8 	bl	80077a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2140      	movs	r1, #64	@ 0x40
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fd01 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 8006e60:	e00c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f000 fcf8 	bl	8007862 <TIM_ITRx_SetConfig>
      break;
 8006e72:	e003      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
      break;
 8006e78:	e000      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	00100070 	.word	0x00100070
 8006e9c:	00100060 	.word	0x00100060
 8006ea0:	00100050 	.word	0x00100050
 8006ea4:	00100040 	.word	0x00100040
 8006ea8:	00100030 	.word	0x00100030
 8006eac:	00100020 	.word	0x00100020

08006eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a4c      	ldr	r2, [pc, #304]	@ (8007044 <TIM_Base_SetConfig+0x144>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d017      	beq.n	8006f48 <TIM_Base_SetConfig+0x48>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f1e:	d013      	beq.n	8006f48 <TIM_Base_SetConfig+0x48>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a49      	ldr	r2, [pc, #292]	@ (8007048 <TIM_Base_SetConfig+0x148>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00f      	beq.n	8006f48 <TIM_Base_SetConfig+0x48>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a48      	ldr	r2, [pc, #288]	@ (800704c <TIM_Base_SetConfig+0x14c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00b      	beq.n	8006f48 <TIM_Base_SetConfig+0x48>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a47      	ldr	r2, [pc, #284]	@ (8007050 <TIM_Base_SetConfig+0x150>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d007      	beq.n	8006f48 <TIM_Base_SetConfig+0x48>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a46      	ldr	r2, [pc, #280]	@ (8007054 <TIM_Base_SetConfig+0x154>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d003      	beq.n	8006f48 <TIM_Base_SetConfig+0x48>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a45      	ldr	r2, [pc, #276]	@ (8007058 <TIM_Base_SetConfig+0x158>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d108      	bne.n	8006f5a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a39      	ldr	r2, [pc, #228]	@ (8007044 <TIM_Base_SetConfig+0x144>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d023      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f68:	d01f      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a36      	ldr	r2, [pc, #216]	@ (8007048 <TIM_Base_SetConfig+0x148>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01b      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a35      	ldr	r2, [pc, #212]	@ (800704c <TIM_Base_SetConfig+0x14c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d017      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a34      	ldr	r2, [pc, #208]	@ (8007050 <TIM_Base_SetConfig+0x150>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a33      	ldr	r2, [pc, #204]	@ (8007054 <TIM_Base_SetConfig+0x154>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00f      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a33      	ldr	r2, [pc, #204]	@ (800705c <TIM_Base_SetConfig+0x15c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00b      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a32      	ldr	r2, [pc, #200]	@ (8007060 <TIM_Base_SetConfig+0x160>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a31      	ldr	r2, [pc, #196]	@ (8007064 <TIM_Base_SetConfig+0x164>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_Base_SetConfig+0xaa>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8007058 <TIM_Base_SetConfig+0x158>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d108      	bne.n	8006fbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	@ (8007044 <TIM_Base_SetConfig+0x144>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d013      	beq.n	8007010 <TIM_Base_SetConfig+0x110>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a1a      	ldr	r2, [pc, #104]	@ (8007054 <TIM_Base_SetConfig+0x154>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00f      	beq.n	8007010 <TIM_Base_SetConfig+0x110>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800705c <TIM_Base_SetConfig+0x15c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_Base_SetConfig+0x110>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a19      	ldr	r2, [pc, #100]	@ (8007060 <TIM_Base_SetConfig+0x160>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_Base_SetConfig+0x110>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <TIM_Base_SetConfig+0x164>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_Base_SetConfig+0x110>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a13      	ldr	r2, [pc, #76]	@ (8007058 <TIM_Base_SetConfig+0x158>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d103      	bne.n	8007018 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b01      	cmp	r3, #1
 8007028:	d105      	bne.n	8007036 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	611a      	str	r2, [r3, #16]
  }
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40012c00 	.word	0x40012c00
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40013400 	.word	0x40013400
 8007058:	40015000 	.word	0x40015000
 800705c:	40014000 	.word	0x40014000
 8007060:	40014400 	.word	0x40014400
 8007064:	40014800 	.word	0x40014800

08007068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f023 0201 	bic.w	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 0302 	bic.w	r3, r3, #2
 80070b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a30      	ldr	r2, [pc, #192]	@ (8007184 <TIM_OC1_SetConfig+0x11c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a2f      	ldr	r2, [pc, #188]	@ (8007188 <TIM_OC1_SetConfig+0x120>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00f      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a2e      	ldr	r2, [pc, #184]	@ (800718c <TIM_OC1_SetConfig+0x124>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00b      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a2d      	ldr	r2, [pc, #180]	@ (8007190 <TIM_OC1_SetConfig+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d007      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007194 <TIM_OC1_SetConfig+0x12c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_OC1_SetConfig+0x88>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007198 <TIM_OC1_SetConfig+0x130>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10c      	bne.n	800710a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0308 	bic.w	r3, r3, #8
 80070f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 0304 	bic.w	r3, r3, #4
 8007108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a1d      	ldr	r2, [pc, #116]	@ (8007184 <TIM_OC1_SetConfig+0x11c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1c      	ldr	r2, [pc, #112]	@ (8007188 <TIM_OC1_SetConfig+0x120>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00f      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <TIM_OC1_SetConfig+0x124>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00b      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a1a      	ldr	r2, [pc, #104]	@ (8007190 <TIM_OC1_SetConfig+0x128>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d007      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a19      	ldr	r2, [pc, #100]	@ (8007194 <TIM_OC1_SetConfig+0x12c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC1_SetConfig+0xd2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a18      	ldr	r2, [pc, #96]	@ (8007198 <TIM_OC1_SetConfig+0x130>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d111      	bne.n	800715e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	621a      	str	r2, [r3, #32]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	40012c00 	.word	0x40012c00
 8007188:	40013400 	.word	0x40013400
 800718c:	40014000 	.word	0x40014000
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800
 8007198:	40015000 	.word	0x40015000

0800719c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f023 0210 	bic.w	r2, r3, #16
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0320 	bic.w	r3, r3, #32
 80071ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a2c      	ldr	r2, [pc, #176]	@ (80072ac <TIM_OC2_SetConfig+0x110>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_OC2_SetConfig+0x74>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a2b      	ldr	r2, [pc, #172]	@ (80072b0 <TIM_OC2_SetConfig+0x114>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC2_SetConfig+0x74>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a2a      	ldr	r2, [pc, #168]	@ (80072b4 <TIM_OC2_SetConfig+0x118>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10d      	bne.n	800722c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800722a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a1f      	ldr	r2, [pc, #124]	@ (80072ac <TIM_OC2_SetConfig+0x110>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a1e      	ldr	r2, [pc, #120]	@ (80072b0 <TIM_OC2_SetConfig+0x114>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00f      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a1e      	ldr	r2, [pc, #120]	@ (80072b8 <TIM_OC2_SetConfig+0x11c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00b      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a1d      	ldr	r2, [pc, #116]	@ (80072bc <TIM_OC2_SetConfig+0x120>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d007      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a1c      	ldr	r2, [pc, #112]	@ (80072c0 <TIM_OC2_SetConfig+0x124>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_OC2_SetConfig+0xc0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a17      	ldr	r2, [pc, #92]	@ (80072b4 <TIM_OC2_SetConfig+0x118>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d113      	bne.n	8007284 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800726a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40013400 	.word	0x40013400
 80072b4:	40015000 	.word	0x40015000
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800

080072c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a2b      	ldr	r2, [pc, #172]	@ (80073d0 <TIM_OC3_SetConfig+0x10c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_OC3_SetConfig+0x72>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a2a      	ldr	r2, [pc, #168]	@ (80073d4 <TIM_OC3_SetConfig+0x110>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_OC3_SetConfig+0x72>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a29      	ldr	r2, [pc, #164]	@ (80073d8 <TIM_OC3_SetConfig+0x114>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d10d      	bne.n	8007352 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800733c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a1e      	ldr	r2, [pc, #120]	@ (80073d0 <TIM_OC3_SetConfig+0x10c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a1d      	ldr	r2, [pc, #116]	@ (80073d4 <TIM_OC3_SetConfig+0x110>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00f      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1d      	ldr	r2, [pc, #116]	@ (80073dc <TIM_OC3_SetConfig+0x118>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00b      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1c      	ldr	r2, [pc, #112]	@ (80073e0 <TIM_OC3_SetConfig+0x11c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d007      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1b      	ldr	r2, [pc, #108]	@ (80073e4 <TIM_OC3_SetConfig+0x120>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC3_SetConfig+0xbe>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a16      	ldr	r2, [pc, #88]	@ (80073d8 <TIM_OC3_SetConfig+0x114>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d113      	bne.n	80073aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	621a      	str	r2, [r3, #32]
}
 80073c4:	bf00      	nop
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40013400 	.word	0x40013400
 80073d8:	40015000 	.word	0x40015000
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40014400 	.word	0x40014400
 80073e4:	40014800 	.word	0x40014800

080073e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a2c      	ldr	r2, [pc, #176]	@ (80074f8 <TIM_OC4_SetConfig+0x110>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <TIM_OC4_SetConfig+0x74>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a2b      	ldr	r2, [pc, #172]	@ (80074fc <TIM_OC4_SetConfig+0x114>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_OC4_SetConfig+0x74>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a2a      	ldr	r2, [pc, #168]	@ (8007500 <TIM_OC4_SetConfig+0x118>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d10d      	bne.n	8007478 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007476:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a1f      	ldr	r2, [pc, #124]	@ (80074f8 <TIM_OC4_SetConfig+0x110>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d013      	beq.n	80074a8 <TIM_OC4_SetConfig+0xc0>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a1e      	ldr	r2, [pc, #120]	@ (80074fc <TIM_OC4_SetConfig+0x114>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00f      	beq.n	80074a8 <TIM_OC4_SetConfig+0xc0>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a1e      	ldr	r2, [pc, #120]	@ (8007504 <TIM_OC4_SetConfig+0x11c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00b      	beq.n	80074a8 <TIM_OC4_SetConfig+0xc0>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a1d      	ldr	r2, [pc, #116]	@ (8007508 <TIM_OC4_SetConfig+0x120>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d007      	beq.n	80074a8 <TIM_OC4_SetConfig+0xc0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a1c      	ldr	r2, [pc, #112]	@ (800750c <TIM_OC4_SetConfig+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d003      	beq.n	80074a8 <TIM_OC4_SetConfig+0xc0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a17      	ldr	r2, [pc, #92]	@ (8007500 <TIM_OC4_SetConfig+0x118>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d113      	bne.n	80074d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	019b      	lsls	r3, r3, #6
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	019b      	lsls	r3, r3, #6
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40015000 	.word	0x40015000
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800

08007510 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800753e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007554:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a19      	ldr	r2, [pc, #100]	@ (80075cc <TIM_OC5_SetConfig+0xbc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <TIM_OC5_SetConfig+0x82>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a18      	ldr	r2, [pc, #96]	@ (80075d0 <TIM_OC5_SetConfig+0xc0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00f      	beq.n	8007592 <TIM_OC5_SetConfig+0x82>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <TIM_OC5_SetConfig+0xc4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00b      	beq.n	8007592 <TIM_OC5_SetConfig+0x82>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a16      	ldr	r2, [pc, #88]	@ (80075d8 <TIM_OC5_SetConfig+0xc8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d007      	beq.n	8007592 <TIM_OC5_SetConfig+0x82>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a15      	ldr	r2, [pc, #84]	@ (80075dc <TIM_OC5_SetConfig+0xcc>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d003      	beq.n	8007592 <TIM_OC5_SetConfig+0x82>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a14      	ldr	r2, [pc, #80]	@ (80075e0 <TIM_OC5_SetConfig+0xd0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d109      	bne.n	80075a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007598:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	621a      	str	r2, [r3, #32]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40013400 	.word	0x40013400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40014400 	.word	0x40014400
 80075dc:	40014800 	.word	0x40014800
 80075e0:	40015000 	.word	0x40015000

080075e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800762a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	051b      	lsls	r3, r3, #20
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a1a      	ldr	r2, [pc, #104]	@ (80076a4 <TIM_OC6_SetConfig+0xc0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d013      	beq.n	8007668 <TIM_OC6_SetConfig+0x84>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a19      	ldr	r2, [pc, #100]	@ (80076a8 <TIM_OC6_SetConfig+0xc4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00f      	beq.n	8007668 <TIM_OC6_SetConfig+0x84>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <TIM_OC6_SetConfig+0xc8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00b      	beq.n	8007668 <TIM_OC6_SetConfig+0x84>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <TIM_OC6_SetConfig+0xcc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d007      	beq.n	8007668 <TIM_OC6_SetConfig+0x84>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <TIM_OC6_SetConfig+0xd0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_OC6_SetConfig+0x84>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a15      	ldr	r2, [pc, #84]	@ (80076b8 <TIM_OC6_SetConfig+0xd4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d109      	bne.n	800767c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800766e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	029b      	lsls	r3, r3, #10
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	621a      	str	r2, [r3, #32]
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800
 80076b8:	40015000 	.word	0x40015000

080076bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f023 0201 	bic.w	r2, r3, #1
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4a28      	ldr	r2, [pc, #160]	@ (8007788 <TIM_TI1_SetConfig+0xcc>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01b      	beq.n	8007722 <TIM_TI1_SetConfig+0x66>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f0:	d017      	beq.n	8007722 <TIM_TI1_SetConfig+0x66>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a25      	ldr	r2, [pc, #148]	@ (800778c <TIM_TI1_SetConfig+0xd0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <TIM_TI1_SetConfig+0x66>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a24      	ldr	r2, [pc, #144]	@ (8007790 <TIM_TI1_SetConfig+0xd4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00f      	beq.n	8007722 <TIM_TI1_SetConfig+0x66>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4a23      	ldr	r2, [pc, #140]	@ (8007794 <TIM_TI1_SetConfig+0xd8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00b      	beq.n	8007722 <TIM_TI1_SetConfig+0x66>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4a22      	ldr	r2, [pc, #136]	@ (8007798 <TIM_TI1_SetConfig+0xdc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d007      	beq.n	8007722 <TIM_TI1_SetConfig+0x66>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a21      	ldr	r2, [pc, #132]	@ (800779c <TIM_TI1_SetConfig+0xe0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_TI1_SetConfig+0x66>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4a20      	ldr	r2, [pc, #128]	@ (80077a0 <TIM_TI1_SetConfig+0xe4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d101      	bne.n	8007726 <TIM_TI1_SetConfig+0x6a>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <TIM_TI1_SetConfig+0x6c>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d008      	beq.n	800773e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0303 	bic.w	r3, r3, #3
 8007732:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e003      	b.n	8007746 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800774c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	b2db      	uxtb	r3, r3
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f023 030a 	bic.w	r3, r3, #10
 8007760:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f003 030a 	and.w	r3, r3, #10
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40013400 	.word	0x40013400
 800779c:	40014000 	.word	0x40014000
 80077a0:	40015000 	.word	0x40015000

080077a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f023 0201 	bic.w	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f023 030a 	bic.w	r3, r3, #10
 80077e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	621a      	str	r2, [r3, #32]
}
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007802:	b480      	push	{r7}
 8007804:	b087      	sub	sp, #28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	f023 0210 	bic.w	r2, r3, #16
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800782c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	031b      	lsls	r3, r3, #12
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800783e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	621a      	str	r2, [r3, #32]
}
 8007856:	bf00      	nop
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800787c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	f043 0307 	orr.w	r3, r3, #7
 8007888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	609a      	str	r2, [r3, #8]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	021a      	lsls	r2, r3, #8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	431a      	orrs	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	609a      	str	r2, [r3, #8]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 031f 	and.w	r3, r3, #31
 80078ee:	2201      	movs	r2, #1
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	43db      	mvns	r3, r3
 80078fe:	401a      	ands	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a1a      	ldr	r2, [r3, #32]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	fa01 f303 	lsl.w	r3, r1, r3
 8007914:	431a      	orrs	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b08a      	sub	sp, #40	@ 0x28
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e0a0      	b.n	8007a7c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fa fcf2 	bl	8002338 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f7ff faca 	bl	8006f00 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	6819      	ldr	r1, [r3, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2203      	movs	r2, #3
 800797a:	f7ff fe9f 	bl	80076bc <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 020c 	bic.w	r2, r2, #12
 800798c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6999      	ldr	r1, [r3, #24]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079ae:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6812      	ldr	r2, [r2, #0]
 80079ba:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079d2:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e2:	f023 0307 	bic.w	r3, r3, #7
 80079e6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0204 	orr.w	r2, r2, #4
 80079f6:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80079fc:	2300      	movs	r3, #0
 80079fe:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007a00:	2370      	movs	r3, #112	@ 0x70
 8007a02:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007a04:	2300      	movs	r3, #0
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f107 020c 	add.w	r2, r7, #12
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff fbbb 	bl	800719c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a38:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007a48:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3728      	adds	r7, #40	@ 0x28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <HAL_TIMEx_PWMN_Start+0x24>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	bf14      	ite	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e022      	b.n	8007aee <HAL_TIMEx_PWMN_Start+0x6a>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d109      	bne.n	8007ac2 <HAL_TIMEx_PWMN_Start+0x3e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	bf14      	ite	ne
 8007aba:	2301      	movne	r3, #1
 8007abc:	2300      	moveq	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	e015      	b.n	8007aee <HAL_TIMEx_PWMN_Start+0x6a>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d109      	bne.n	8007adc <HAL_TIMEx_PWMN_Start+0x58>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e008      	b.n	8007aee <HAL_TIMEx_PWMN_Start+0x6a>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	bf14      	ite	ne
 8007ae8:	2301      	movne	r3, #1
 8007aea:	2300      	moveq	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e073      	b.n	8007bde <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <HAL_TIMEx_PWMN_Start+0x82>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b04:	e013      	b.n	8007b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	d104      	bne.n	8007b16 <HAL_TIMEx_PWMN_Start+0x92>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b14:	e00b      	b.n	8007b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d104      	bne.n	8007b26 <HAL_TIMEx_PWMN_Start+0xa2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b24:	e003      	b.n	8007b2e <HAL_TIMEx_PWMN_Start+0xaa>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2204      	movs	r2, #4
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fa34 	bl	8007fa4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a25      	ldr	r2, [pc, #148]	@ (8007be8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d022      	beq.n	8007b9c <HAL_TIMEx_PWMN_Start+0x118>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5e:	d01d      	beq.n	8007b9c <HAL_TIMEx_PWMN_Start+0x118>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a21      	ldr	r2, [pc, #132]	@ (8007bec <HAL_TIMEx_PWMN_Start+0x168>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d018      	beq.n	8007b9c <HAL_TIMEx_PWMN_Start+0x118>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a20      	ldr	r2, [pc, #128]	@ (8007bf0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d013      	beq.n	8007b9c <HAL_TIMEx_PWMN_Start+0x118>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1e      	ldr	r2, [pc, #120]	@ (8007bf4 <HAL_TIMEx_PWMN_Start+0x170>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00e      	beq.n	8007b9c <HAL_TIMEx_PWMN_Start+0x118>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf8 <HAL_TIMEx_PWMN_Start+0x174>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d009      	beq.n	8007b9c <HAL_TIMEx_PWMN_Start+0x118>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bfc <HAL_TIMEx_PWMN_Start+0x178>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d004      	beq.n	8007b9c <HAL_TIMEx_PWMN_Start+0x118>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1a      	ldr	r2, [pc, #104]	@ (8007c00 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d115      	bne.n	8007bc8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	4b18      	ldr	r3, [pc, #96]	@ (8007c04 <HAL_TIMEx_PWMN_Start+0x180>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b06      	cmp	r3, #6
 8007bac:	d015      	beq.n	8007bda <HAL_TIMEx_PWMN_Start+0x156>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d011      	beq.n	8007bda <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0201 	orr.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc6:	e008      	b.n	8007bda <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0201 	orr.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e000      	b.n	8007bdc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40015000 	.word	0x40015000
 8007c04:	00010007 	.word	0x00010007

08007c08 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2200      	movs	r2, #0
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f9c2 	bl	8007fa4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6a1a      	ldr	r2, [r3, #32]
 8007c26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10f      	bne.n	8007c50 <HAL_TIMEx_PWMN_Stop+0x48>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <HAL_TIMEx_PWMN_Stop+0x48>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6a1a      	ldr	r2, [r3, #32]
 8007c56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10f      	bne.n	8007c80 <HAL_TIMEx_PWMN_Stop+0x78>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6a1a      	ldr	r2, [r3, #32]
 8007c66:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d107      	bne.n	8007c80 <HAL_TIMEx_PWMN_Stop+0x78>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <HAL_TIMEx_PWMN_Stop+0x88>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c8e:	e013      	b.n	8007cb8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d104      	bne.n	8007ca0 <HAL_TIMEx_PWMN_Stop+0x98>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c9e:	e00b      	b.n	8007cb8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d104      	bne.n	8007cb0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cae:	e003      	b.n	8007cb8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e074      	b.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a34      	ldr	r2, [pc, #208]	@ (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a33      	ldr	r2, [pc, #204]	@ (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a31      	ldr	r2, [pc, #196]	@ (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d108      	bne.n	8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a21      	ldr	r2, [pc, #132]	@ (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d022      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5c:	d01d      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1f      	ldr	r2, [pc, #124]	@ (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d018      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1c      	ldr	r2, [pc, #112]	@ (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00e      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a15      	ldr	r2, [pc, #84]	@ (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d009      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a18      	ldr	r2, [pc, #96]	@ (8007dec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a11      	ldr	r2, [pc, #68]	@ (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d10c      	bne.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40012c00 	.word	0x40012c00
 8007dd8:	40013400 	.word	0x40013400
 8007ddc:	40015000 	.word	0x40015000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40014000 	.word	0x40014000

08007df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e078      	b.n	8007efe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	041b      	lsls	r3, r3, #16
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1c      	ldr	r2, [pc, #112]	@ (8007f0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8007f10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a19      	ldr	r2, [pc, #100]	@ (8007f14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d11c      	bne.n	8007eec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	051b      	lsls	r3, r3, #20
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40015000 	.word	0x40015000

08007f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1a      	ldr	r2, [r3, #32]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	401a      	ands	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a1a      	ldr	r2, [r3, #32]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e042      	b.n	8008086 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fa fb16 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2224      	movs	r2, #36	@ 0x24
 800801c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 ff61 	bl	8008f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fc62 	bl	8008908 <UART_SetConfig>
 8008044:	4603      	mov	r3, r0
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e01b      	b.n	8008086 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800805c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800806c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 ffe0 	bl	8009044 <UART_CheckIdleState>
 8008084:	4603      	mov	r3, r0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b08a      	sub	sp, #40	@ 0x28
 8008092:	af02      	add	r7, sp, #8
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	603b      	str	r3, [r7, #0]
 800809a:	4613      	mov	r3, r2
 800809c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d17b      	bne.n	80081a0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_UART_Transmit+0x26>
 80080ae:	88fb      	ldrh	r3, [r7, #6]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e074      	b.n	80081a2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2221      	movs	r2, #33	@ 0x21
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080c8:	f7fa fbb0 	bl	800282c <HAL_GetTick>
 80080cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	88fa      	ldrh	r2, [r7, #6]
 80080d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e6:	d108      	bne.n	80080fa <HAL_UART_Transmit+0x6c>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	61bb      	str	r3, [r7, #24]
 80080f8:	e003      	b.n	8008102 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008102:	e030      	b.n	8008166 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2200      	movs	r2, #0
 800810c:	2180      	movs	r1, #128	@ 0x80
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 f842 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e03d      	b.n	80081a2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800813a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	3302      	adds	r3, #2
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	e007      	b.n	8008154 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	781a      	ldrb	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3301      	adds	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1c8      	bne.n	8008104 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2200      	movs	r2, #0
 800817a:	2140      	movs	r1, #64	@ 0x40
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f001 f80b 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e006      	b.n	80081a2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2220      	movs	r2, #32
 8008198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	e000      	b.n	80081a2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80081a0:	2302      	movs	r3, #2
  }
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	@ 0x28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d137      	bne.n	8008234 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <HAL_UART_Receive_IT+0x24>
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e030      	b.n	8008236 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a18      	ldr	r2, [pc, #96]	@ (8008240 <HAL_UART_Receive_IT+0x94>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d01f      	beq.n	8008224 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d018      	beq.n	8008224 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008206:	627b      	str	r3, [r7, #36]	@ 0x24
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	623b      	str	r3, [r7, #32]
 8008212:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	69f9      	ldr	r1, [r7, #28]
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	61bb      	str	r3, [r7, #24]
   return(result);
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e6      	bne.n	80081f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008224:	88fb      	ldrh	r3, [r7, #6]
 8008226:	461a      	mov	r2, r3
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 f822 	bl	8009274 <UART_Start_Receive_IT>
 8008230:	4603      	mov	r3, r0
 8008232:	e000      	b.n	8008236 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008234:	2302      	movs	r3, #2
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3728      	adds	r7, #40	@ 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40008000 	.word	0x40008000

08008244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b0ba      	sub	sp, #232	@ 0xe8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800826a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800826e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008272:	4013      	ands	r3, r2
 8008274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800827c:	2b00      	cmp	r3, #0
 800827e:	d11b      	bne.n	80082b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008284:	f003 0320 	and.w	r3, r3, #32
 8008288:	2b00      	cmp	r3, #0
 800828a:	d015      	beq.n	80082b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800828c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008290:	f003 0320 	and.w	r3, r3, #32
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800829c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8300 	beq.w	80088ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
      }
      return;
 80082b6:	e2fa      	b.n	80088ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8123 	beq.w	8008508 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082c6:	4b8d      	ldr	r3, [pc, #564]	@ (80084fc <HAL_UART_IRQHandler+0x2b8>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80082d2:	4b8b      	ldr	r3, [pc, #556]	@ (8008500 <HAL_UART_IRQHandler+0x2bc>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8116 	beq.w	8008508 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d011      	beq.n	800830c <HAL_UART_IRQHandler+0xc8>
 80082e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2201      	movs	r2, #1
 80082fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008302:	f043 0201 	orr.w	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d011      	beq.n	800833c <HAL_UART_IRQHandler+0xf8>
 8008318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2202      	movs	r2, #2
 800832a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008332:	f043 0204 	orr.w	r2, r3, #4
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800833c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	d011      	beq.n	800836c <HAL_UART_IRQHandler+0x128>
 8008348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2204      	movs	r2, #4
 800835a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008362:	f043 0202 	orr.w	r2, r3, #2
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800836c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008384:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008388:	4b5c      	ldr	r3, [pc, #368]	@ (80084fc <HAL_UART_IRQHandler+0x2b8>)
 800838a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2208      	movs	r2, #8
 8008396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839e:	f043 0208 	orr.w	r2, r3, #8
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d012      	beq.n	80083da <HAL_UART_IRQHandler+0x196>
 80083b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00c      	beq.n	80083da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d0:	f043 0220 	orr.w	r2, r3, #32
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8266 	beq.w	80088b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d013      	beq.n	800841a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d105      	bne.n	800840a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008420:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842e:	2b40      	cmp	r3, #64	@ 0x40
 8008430:	d005      	beq.n	800843e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008436:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800843a:	2b00      	cmp	r3, #0
 800843c:	d054      	beq.n	80084e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 f83a 	bl	80094b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844e:	2b40      	cmp	r3, #64	@ 0x40
 8008450:	d146      	bne.n	80084e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800846c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3308      	adds	r3, #8
 800847a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800847e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800848a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1d9      	bne.n	8008452 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d017      	beq.n	80084d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ae:	4a15      	ldr	r2, [pc, #84]	@ (8008504 <HAL_UART_IRQHandler+0x2c0>)
 80084b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fc fa63 	bl	8004984 <HAL_DMA_Abort_IT>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d019      	beq.n	80084f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80084d2:	4610      	mov	r0, r2
 80084d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d6:	e00f      	b.n	80084f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f9ff 	bl	80088dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084de:	e00b      	b.n	80084f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9fb 	bl	80088dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e6:	e007      	b.n	80084f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f9f7 	bl	80088dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80084f6:	e1dc      	b.n	80088b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f8:	bf00      	nop
    return;
 80084fa:	e1da      	b.n	80088b2 <HAL_UART_IRQHandler+0x66e>
 80084fc:	10000001 	.word	0x10000001
 8008500:	04000120 	.word	0x04000120
 8008504:	08009585 	.word	0x08009585

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800850c:	2b01      	cmp	r3, #1
 800850e:	f040 8170 	bne.w	80087f2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008516:	f003 0310 	and.w	r3, r3, #16
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8169 	beq.w	80087f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8162 	beq.w	80087f2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2210      	movs	r2, #16
 8008534:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008540:	2b40      	cmp	r3, #64	@ 0x40
 8008542:	f040 80d8 	bne.w	80086f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80af 	beq.w	80086bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008568:	429a      	cmp	r2, r3
 800856a:	f080 80a7 	bcs.w	80086bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 8087 	bne.w	800869a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80085a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80085ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80085c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80085ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1da      	bne.n	800858c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3308      	adds	r3, #8
 80085dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80085e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3308      	adds	r3, #8
 80085f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008602:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800860c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e1      	bne.n	80085d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008636:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008638:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800863c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e3      	bne.n	8008612 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008668:	f023 0310 	bic.w	r3, r3, #16
 800866c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800867a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800867c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e4      	bne.n	8008658 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008694:	4618      	mov	r0, r3
 8008696:	f7fc f91c 	bl	80048d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2202      	movs	r2, #2
 800869e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f91b 	bl	80088f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80086ba:	e0fc      	b.n	80088b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f040 80f5 	bne.w	80088b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b20      	cmp	r3, #32
 80086dc:	f040 80eb 	bne.w	80088b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f8fe 	bl	80088f0 <HAL_UARTEx_RxEventCallback>
      return;
 80086f4:	e0df      	b.n	80088b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008702:	b29b      	uxth	r3, r3
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80d1 	beq.w	80088ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80cc 	beq.w	80088ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008744:	647b      	str	r3, [r7, #68]	@ 0x44
 8008746:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800874a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e4      	bne.n	8008722 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	623b      	str	r3, [r7, #32]
   return(result);
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3308      	adds	r3, #8
 800877c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008780:	633a      	str	r2, [r7, #48]	@ 0x30
 8008782:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e1      	bne.n	8008758 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f023 0310 	bic.w	r3, r3, #16
 80087bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	69b9      	ldr	r1, [r7, #24]
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	617b      	str	r3, [r7, #20]
   return(result);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e4      	bne.n	80087a8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f880 	bl	80088f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087f0:	e063      	b.n	80088ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00e      	beq.n	800881c <HAL_UART_IRQHandler+0x5d8>
 80087fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d008      	beq.n	800881c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 fc13 	bl	800a040 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800881a:	e051      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800881c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008824:	2b00      	cmp	r3, #0
 8008826:	d014      	beq.n	8008852 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800882c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008838:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d008      	beq.n	8008852 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008844:	2b00      	cmp	r3, #0
 8008846:	d03a      	beq.n	80088be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	4798      	blx	r3
    }
    return;
 8008850:	e035      	b.n	80088be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <HAL_UART_IRQHandler+0x62e>
 800885e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fe9c 	bl	80095a8 <UART_EndTransmit_IT>
    return;
 8008870:	e026      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d009      	beq.n	8008892 <HAL_UART_IRQHandler+0x64e>
 800887e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008882:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 fbec 	bl	800a068 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008890:	e016      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d010      	beq.n	80088c0 <HAL_UART_IRQHandler+0x67c>
 800889e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	da0c      	bge.n	80088c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 fbd4 	bl	800a054 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088ac:	e008      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80088ae:	bf00      	nop
 80088b0:	e006      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80088b2:	bf00      	nop
 80088b4:	e004      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80088b6:	bf00      	nop
 80088b8:	e002      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80088ba:	bf00      	nop
 80088bc:	e000      	b.n	80088c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80088be:	bf00      	nop
  }
}
 80088c0:	37e8      	adds	r7, #232	@ 0xe8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop

080088c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800890c:	b08c      	sub	sp, #48	@ 0x30
 800890e:	af00      	add	r7, sp, #0
 8008910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	431a      	orrs	r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	431a      	orrs	r2, r3
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	4313      	orrs	r3, r2
 800892e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4baa      	ldr	r3, [pc, #680]	@ (8008be0 <UART_SetConfig+0x2d8>)
 8008938:	4013      	ands	r3, r2
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008940:	430b      	orrs	r3, r1
 8008942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a9f      	ldr	r2, [pc, #636]	@ (8008be4 <UART_SetConfig+0x2dc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d004      	beq.n	8008974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008970:	4313      	orrs	r3, r2
 8008972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800897e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008988:	430b      	orrs	r3, r1
 800898a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008992:	f023 010f 	bic.w	r1, r3, #15
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a90      	ldr	r2, [pc, #576]	@ (8008be8 <UART_SetConfig+0x2e0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d125      	bne.n	80089f8 <UART_SetConfig+0xf0>
 80089ac:	4b8f      	ldr	r3, [pc, #572]	@ (8008bec <UART_SetConfig+0x2e4>)
 80089ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d81a      	bhi.n	80089f0 <UART_SetConfig+0xe8>
 80089ba:	a201      	add	r2, pc, #4	@ (adr r2, 80089c0 <UART_SetConfig+0xb8>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	080089d9 	.word	0x080089d9
 80089cc:	080089e9 	.word	0x080089e9
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d6:	e116      	b.n	8008c06 <UART_SetConfig+0x2fe>
 80089d8:	2302      	movs	r3, #2
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089de:	e112      	b.n	8008c06 <UART_SetConfig+0x2fe>
 80089e0:	2304      	movs	r3, #4
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e6:	e10e      	b.n	8008c06 <UART_SetConfig+0x2fe>
 80089e8:	2308      	movs	r3, #8
 80089ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ee:	e10a      	b.n	8008c06 <UART_SetConfig+0x2fe>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089f6:	e106      	b.n	8008c06 <UART_SetConfig+0x2fe>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a7c      	ldr	r2, [pc, #496]	@ (8008bf0 <UART_SetConfig+0x2e8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d138      	bne.n	8008a74 <UART_SetConfig+0x16c>
 8008a02:	4b7a      	ldr	r3, [pc, #488]	@ (8008bec <UART_SetConfig+0x2e4>)
 8008a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a08:	f003 030c 	and.w	r3, r3, #12
 8008a0c:	2b0c      	cmp	r3, #12
 8008a0e:	d82d      	bhi.n	8008a6c <UART_SetConfig+0x164>
 8008a10:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <UART_SetConfig+0x110>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a4d 	.word	0x08008a4d
 8008a1c:	08008a6d 	.word	0x08008a6d
 8008a20:	08008a6d 	.word	0x08008a6d
 8008a24:	08008a6d 	.word	0x08008a6d
 8008a28:	08008a5d 	.word	0x08008a5d
 8008a2c:	08008a6d 	.word	0x08008a6d
 8008a30:	08008a6d 	.word	0x08008a6d
 8008a34:	08008a6d 	.word	0x08008a6d
 8008a38:	08008a55 	.word	0x08008a55
 8008a3c:	08008a6d 	.word	0x08008a6d
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	08008a6d 	.word	0x08008a6d
 8008a48:	08008a65 	.word	0x08008a65
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a52:	e0d8      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008a54:	2302      	movs	r3, #2
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5a:	e0d4      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a62:	e0d0      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008a64:	2308      	movs	r3, #8
 8008a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a6a:	e0cc      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a72:	e0c8      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a5e      	ldr	r2, [pc, #376]	@ (8008bf4 <UART_SetConfig+0x2ec>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d125      	bne.n	8008aca <UART_SetConfig+0x1c2>
 8008a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8008bec <UART_SetConfig+0x2e4>)
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a88:	2b30      	cmp	r3, #48	@ 0x30
 8008a8a:	d016      	beq.n	8008aba <UART_SetConfig+0x1b2>
 8008a8c:	2b30      	cmp	r3, #48	@ 0x30
 8008a8e:	d818      	bhi.n	8008ac2 <UART_SetConfig+0x1ba>
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d00a      	beq.n	8008aaa <UART_SetConfig+0x1a2>
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d814      	bhi.n	8008ac2 <UART_SetConfig+0x1ba>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <UART_SetConfig+0x19a>
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d008      	beq.n	8008ab2 <UART_SetConfig+0x1aa>
 8008aa0:	e00f      	b.n	8008ac2 <UART_SetConfig+0x1ba>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa8:	e0ad      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab0:	e0a9      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab8:	e0a5      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008aba:	2308      	movs	r3, #8
 8008abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ac0:	e0a1      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008ac2:	2310      	movs	r3, #16
 8008ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ac8:	e09d      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a4a      	ldr	r2, [pc, #296]	@ (8008bf8 <UART_SetConfig+0x2f0>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d125      	bne.n	8008b20 <UART_SetConfig+0x218>
 8008ad4:	4b45      	ldr	r3, [pc, #276]	@ (8008bec <UART_SetConfig+0x2e4>)
 8008ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ada:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ae0:	d016      	beq.n	8008b10 <UART_SetConfig+0x208>
 8008ae2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ae4:	d818      	bhi.n	8008b18 <UART_SetConfig+0x210>
 8008ae6:	2b80      	cmp	r3, #128	@ 0x80
 8008ae8:	d00a      	beq.n	8008b00 <UART_SetConfig+0x1f8>
 8008aea:	2b80      	cmp	r3, #128	@ 0x80
 8008aec:	d814      	bhi.n	8008b18 <UART_SetConfig+0x210>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <UART_SetConfig+0x1f0>
 8008af2:	2b40      	cmp	r3, #64	@ 0x40
 8008af4:	d008      	beq.n	8008b08 <UART_SetConfig+0x200>
 8008af6:	e00f      	b.n	8008b18 <UART_SetConfig+0x210>
 8008af8:	2300      	movs	r3, #0
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afe:	e082      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b00:	2302      	movs	r3, #2
 8008b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b06:	e07e      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b08:	2304      	movs	r3, #4
 8008b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b0e:	e07a      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b10:	2308      	movs	r3, #8
 8008b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b16:	e076      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b1e:	e072      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a35      	ldr	r2, [pc, #212]	@ (8008bfc <UART_SetConfig+0x2f4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d12a      	bne.n	8008b80 <UART_SetConfig+0x278>
 8008b2a:	4b30      	ldr	r3, [pc, #192]	@ (8008bec <UART_SetConfig+0x2e4>)
 8008b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b38:	d01a      	beq.n	8008b70 <UART_SetConfig+0x268>
 8008b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b3e:	d81b      	bhi.n	8008b78 <UART_SetConfig+0x270>
 8008b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b44:	d00c      	beq.n	8008b60 <UART_SetConfig+0x258>
 8008b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b4a:	d815      	bhi.n	8008b78 <UART_SetConfig+0x270>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <UART_SetConfig+0x250>
 8008b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b54:	d008      	beq.n	8008b68 <UART_SetConfig+0x260>
 8008b56:	e00f      	b.n	8008b78 <UART_SetConfig+0x270>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5e:	e052      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b60:	2302      	movs	r3, #2
 8008b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b66:	e04e      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b68:	2304      	movs	r3, #4
 8008b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6e:	e04a      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b70:	2308      	movs	r3, #8
 8008b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b76:	e046      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b78:	2310      	movs	r3, #16
 8008b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b7e:	e042      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a17      	ldr	r2, [pc, #92]	@ (8008be4 <UART_SetConfig+0x2dc>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d13a      	bne.n	8008c00 <UART_SetConfig+0x2f8>
 8008b8a:	4b18      	ldr	r3, [pc, #96]	@ (8008bec <UART_SetConfig+0x2e4>)
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b98:	d01a      	beq.n	8008bd0 <UART_SetConfig+0x2c8>
 8008b9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b9e:	d81b      	bhi.n	8008bd8 <UART_SetConfig+0x2d0>
 8008ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ba4:	d00c      	beq.n	8008bc0 <UART_SetConfig+0x2b8>
 8008ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008baa:	d815      	bhi.n	8008bd8 <UART_SetConfig+0x2d0>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <UART_SetConfig+0x2b0>
 8008bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb4:	d008      	beq.n	8008bc8 <UART_SetConfig+0x2c0>
 8008bb6:	e00f      	b.n	8008bd8 <UART_SetConfig+0x2d0>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bbe:	e022      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc6:	e01e      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bce:	e01a      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bd6:	e016      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bde:	e012      	b.n	8008c06 <UART_SetConfig+0x2fe>
 8008be0:	cfff69f3 	.word	0xcfff69f3
 8008be4:	40008000 	.word	0x40008000
 8008be8:	40013800 	.word	0x40013800
 8008bec:	40021000 	.word	0x40021000
 8008bf0:	40004400 	.word	0x40004400
 8008bf4:	40004800 	.word	0x40004800
 8008bf8:	40004c00 	.word	0x40004c00
 8008bfc:	40005000 	.word	0x40005000
 8008c00:	2310      	movs	r3, #16
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4aae      	ldr	r2, [pc, #696]	@ (8008ec4 <UART_SetConfig+0x5bc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	f040 8097 	bne.w	8008d40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	d823      	bhi.n	8008c62 <UART_SetConfig+0x35a>
 8008c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c20 <UART_SetConfig+0x318>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c45 	.word	0x08008c45
 8008c24:	08008c63 	.word	0x08008c63
 8008c28:	08008c4d 	.word	0x08008c4d
 8008c2c:	08008c63 	.word	0x08008c63
 8008c30:	08008c53 	.word	0x08008c53
 8008c34:	08008c63 	.word	0x08008c63
 8008c38:	08008c63 	.word	0x08008c63
 8008c3c:	08008c63 	.word	0x08008c63
 8008c40:	08008c5b 	.word	0x08008c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c44:	f7fc ff82 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8008c48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c4a:	e010      	b.n	8008c6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c4c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec8 <UART_SetConfig+0x5c0>)
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c50:	e00d      	b.n	8008c6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c52:	f7fc ff0d 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8008c56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c58:	e009      	b.n	8008c6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c60:	e005      	b.n	8008c6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 8130 	beq.w	8008ed6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7a:	4a94      	ldr	r2, [pc, #592]	@ (8008ecc <UART_SetConfig+0x5c4>)
 8008c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c80:	461a      	mov	r2, r3
 8008c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	4413      	add	r3, r2
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d305      	bcc.n	8008ca6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d903      	bls.n	8008cae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cac:	e113      	b.n	8008ed6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	60bb      	str	r3, [r7, #8]
 8008cb4:	60fa      	str	r2, [r7, #12]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cba:	4a84      	ldr	r2, [pc, #528]	@ (8008ecc <UART_SetConfig+0x5c4>)
 8008cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	603b      	str	r3, [r7, #0]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cd0:	f7f7 ffa2 	bl	8000c18 <__aeabi_uldivmod>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4619      	mov	r1, r3
 8008cdc:	f04f 0200 	mov.w	r2, #0
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	020b      	lsls	r3, r1, #8
 8008ce6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cea:	0202      	lsls	r2, r0, #8
 8008cec:	6979      	ldr	r1, [r7, #20]
 8008cee:	6849      	ldr	r1, [r1, #4]
 8008cf0:	0849      	lsrs	r1, r1, #1
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	eb12 0804 	adds.w	r8, r2, r4
 8008cfc:	eb43 0905 	adc.w	r9, r3, r5
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	469a      	mov	sl, r3
 8008d08:	4693      	mov	fp, r2
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4649      	mov	r1, r9
 8008d12:	f7f7 ff81 	bl	8000c18 <__aeabi_uldivmod>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d24:	d308      	bcc.n	8008d38 <UART_SetConfig+0x430>
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d2c:	d204      	bcs.n	8008d38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6a3a      	ldr	r2, [r7, #32]
 8008d34:	60da      	str	r2, [r3, #12]
 8008d36:	e0ce      	b.n	8008ed6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d3e:	e0ca      	b.n	8008ed6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d48:	d166      	bne.n	8008e18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d4e:	2b08      	cmp	r3, #8
 8008d50:	d827      	bhi.n	8008da2 <UART_SetConfig+0x49a>
 8008d52:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <UART_SetConfig+0x450>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008d7d 	.word	0x08008d7d
 8008d5c:	08008d85 	.word	0x08008d85
 8008d60:	08008d8d 	.word	0x08008d8d
 8008d64:	08008da3 	.word	0x08008da3
 8008d68:	08008d93 	.word	0x08008d93
 8008d6c:	08008da3 	.word	0x08008da3
 8008d70:	08008da3 	.word	0x08008da3
 8008d74:	08008da3 	.word	0x08008da3
 8008d78:	08008d9b 	.word	0x08008d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d7c:	f7fc fee6 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8008d80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d82:	e014      	b.n	8008dae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d84:	f7fc fef8 	bl	8005b78 <HAL_RCC_GetPCLK2Freq>
 8008d88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d8a:	e010      	b.n	8008dae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d8c:	4b4e      	ldr	r3, [pc, #312]	@ (8008ec8 <UART_SetConfig+0x5c0>)
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d90:	e00d      	b.n	8008dae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d92:	f7fc fe6d 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8008d96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d98:	e009      	b.n	8008dae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008da0:	e005      	b.n	8008dae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 8090 	beq.w	8008ed6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dba:	4a44      	ldr	r2, [pc, #272]	@ (8008ecc <UART_SetConfig+0x5c4>)
 8008dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dc8:	005a      	lsls	r2, r3, #1
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	441a      	add	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	2b0f      	cmp	r3, #15
 8008de0:	d916      	bls.n	8008e10 <UART_SetConfig+0x508>
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008de8:	d212      	bcs.n	8008e10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f023 030f 	bic.w	r3, r3, #15
 8008df2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	085b      	lsrs	r3, r3, #1
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	8bfb      	ldrh	r3, [r7, #30]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	8bfa      	ldrh	r2, [r7, #30]
 8008e0c:	60da      	str	r2, [r3, #12]
 8008e0e:	e062      	b.n	8008ed6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e16:	e05e      	b.n	8008ed6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	d828      	bhi.n	8008e72 <UART_SetConfig+0x56a>
 8008e20:	a201      	add	r2, pc, #4	@ (adr r2, 8008e28 <UART_SetConfig+0x520>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e4d 	.word	0x08008e4d
 8008e2c:	08008e55 	.word	0x08008e55
 8008e30:	08008e5d 	.word	0x08008e5d
 8008e34:	08008e73 	.word	0x08008e73
 8008e38:	08008e63 	.word	0x08008e63
 8008e3c:	08008e73 	.word	0x08008e73
 8008e40:	08008e73 	.word	0x08008e73
 8008e44:	08008e73 	.word	0x08008e73
 8008e48:	08008e6b 	.word	0x08008e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e4c:	f7fc fe7e 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8008e50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e52:	e014      	b.n	8008e7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e54:	f7fc fe90 	bl	8005b78 <HAL_RCC_GetPCLK2Freq>
 8008e58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e5a:	e010      	b.n	8008e7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ec8 <UART_SetConfig+0x5c0>)
 8008e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e60:	e00d      	b.n	8008e7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e62:	f7fc fe05 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8008e66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e68:	e009      	b.n	8008e7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e70:	e005      	b.n	8008e7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d028      	beq.n	8008ed6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e88:	4a10      	ldr	r2, [pc, #64]	@ (8008ecc <UART_SetConfig+0x5c4>)
 8008e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	441a      	add	r2, r3
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	2b0f      	cmp	r3, #15
 8008eac:	d910      	bls.n	8008ed0 <UART_SetConfig+0x5c8>
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb4:	d20c      	bcs.n	8008ed0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60da      	str	r2, [r3, #12]
 8008ec0:	e009      	b.n	8008ed6 <UART_SetConfig+0x5ce>
 8008ec2:	bf00      	nop
 8008ec4:	40008000 	.word	0x40008000
 8008ec8:	00f42400 	.word	0x00f42400
 8008ecc:	0800d3b0 	.word	0x0800d3b0
      }
      else
      {
        ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ef2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3730      	adds	r7, #48	@ 0x30
 8008efa:	46bd      	mov	sp, r7
 8008efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	f003 0308 	and.w	r3, r3, #8
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01a      	beq.n	8009016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ffe:	d10a      	bne.n	8009016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	605a      	str	r2, [r3, #4]
  }
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b098      	sub	sp, #96	@ 0x60
 8009048:	af02      	add	r7, sp, #8
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009054:	f7f9 fbea 	bl	800282c <HAL_GetTick>
 8009058:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b08      	cmp	r3, #8
 8009066:	d12f      	bne.n	80090c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009068:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009070:	2200      	movs	r2, #0
 8009072:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f88e 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d022      	beq.n	80090c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009096:	653b      	str	r3, [r7, #80]	@ 0x50
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e6      	bne.n	8009082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e063      	b.n	8009190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d149      	bne.n	800916a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090de:	2200      	movs	r2, #0
 80090e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f857 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d03c      	beq.n	800916a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	623b      	str	r3, [r7, #32]
   return(result);
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800910e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009110:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	60fb      	str	r3, [r7, #12]
   return(result);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009142:	61fa      	str	r2, [r7, #28]
 8009144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	69b9      	ldr	r1, [r7, #24]
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	617b      	str	r3, [r7, #20]
   return(result);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e012      	b.n	8009190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3758      	adds	r7, #88	@ 0x58
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	4613      	mov	r3, r2
 80091a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a8:	e04f      	b.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d04b      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b2:	f7f9 fb3b 	bl	800282c <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d302      	bcc.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e04e      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d037      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b80      	cmp	r3, #128	@ 0x80
 80091de:	d034      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b40      	cmp	r3, #64	@ 0x40
 80091e4:	d031      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d110      	bne.n	8009216 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2208      	movs	r2, #8
 80091fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f95b 	bl	80094b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2208      	movs	r2, #8
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e029      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009224:	d111      	bne.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800922e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f941 	bl	80094b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2220      	movs	r2, #32
 800923a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e00f      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	429a      	cmp	r2, r3
 8009258:	bf0c      	ite	eq
 800925a:	2301      	moveq	r3, #1
 800925c:	2300      	movne	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	461a      	mov	r2, r3
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	429a      	cmp	r2, r3
 8009266:	d0a0      	beq.n	80091aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009274:	b480      	push	{r7}
 8009276:	b0a3      	sub	sp, #140	@ 0x8c
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	88fa      	ldrh	r2, [r7, #6]
 800928c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a6:	d10e      	bne.n	80092c6 <UART_Start_Receive_IT+0x52>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d105      	bne.n	80092bc <UART_Start_Receive_IT+0x48>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80092b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092ba:	e02d      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	22ff      	movs	r2, #255	@ 0xff
 80092c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092c4:	e028      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10d      	bne.n	80092ea <UART_Start_Receive_IT+0x76>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <UART_Start_Receive_IT+0x6c>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	22ff      	movs	r2, #255	@ 0xff
 80092da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092de:	e01b      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	227f      	movs	r2, #127	@ 0x7f
 80092e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092e8:	e016      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092f2:	d10d      	bne.n	8009310 <UART_Start_Receive_IT+0x9c>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <UART_Start_Receive_IT+0x92>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	227f      	movs	r2, #127	@ 0x7f
 8009300:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009304:	e008      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	223f      	movs	r2, #63	@ 0x3f
 800930a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800930e:	e003      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2222      	movs	r2, #34	@ 0x22
 8009324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3308      	adds	r3, #8
 800932e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800934c:	673a      	str	r2, [r7, #112]	@ 0x70
 800934e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009352:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800935a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e3      	bne.n	8009328 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009368:	d14f      	bne.n	800940a <UART_Start_Receive_IT+0x196>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009370:	88fa      	ldrh	r2, [r7, #6]
 8009372:	429a      	cmp	r2, r3
 8009374:	d349      	bcc.n	800940a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800937e:	d107      	bne.n	8009390 <UART_Start_Receive_IT+0x11c>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a47      	ldr	r2, [pc, #284]	@ (80094a8 <UART_Start_Receive_IT+0x234>)
 800938c:	675a      	str	r2, [r3, #116]	@ 0x74
 800938e:	e002      	b.n	8009396 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a46      	ldr	r2, [pc, #280]	@ (80094ac <UART_Start_Receive_IT+0x238>)
 8009394:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01a      	beq.n	80093d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80093ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093c2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80093c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80093ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e4      	bne.n	800939e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3308      	adds	r3, #8
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80093f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80093f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e5      	bne.n	80093d4 <UART_Start_Receive_IT+0x160>
 8009408:	e046      	b.n	8009498 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009412:	d107      	bne.n	8009424 <UART_Start_Receive_IT+0x1b0>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a24      	ldr	r2, [pc, #144]	@ (80094b0 <UART_Start_Receive_IT+0x23c>)
 8009420:	675a      	str	r2, [r3, #116]	@ 0x74
 8009422:	e002      	b.n	800942a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a23      	ldr	r2, [pc, #140]	@ (80094b4 <UART_Start_Receive_IT+0x240>)
 8009428:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d019      	beq.n	8009466 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009446:	677b      	str	r3, [r7, #116]	@ 0x74
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
 8009452:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e6      	bne.n	8009432 <UART_Start_Receive_IT+0x1be>
 8009464:	e018      	b.n	8009498 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	e853 3f00 	ldrex	r3, [r3]
 8009472:	613b      	str	r3, [r7, #16]
   return(result);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f043 0320 	orr.w	r3, r3, #32
 800947a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	461a      	mov	r2, r3
 8009482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009484:	623b      	str	r3, [r7, #32]
 8009486:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	6a3a      	ldr	r2, [r7, #32]
 800948c:	e841 2300 	strex	r3, r2, [r1]
 8009490:	61bb      	str	r3, [r7, #24]
   return(result);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1e6      	bne.n	8009466 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	378c      	adds	r7, #140	@ 0x8c
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	08009cd5 	.word	0x08009cd5
 80094ac:	08009971 	.word	0x08009971
 80094b0:	080097b9 	.word	0x080097b9
 80094b4:	08009601 	.word	0x08009601

080094b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b095      	sub	sp, #84	@ 0x54
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094de:	643b      	str	r3, [r7, #64]	@ 0x40
 80094e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e6      	bne.n	80094c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	61fb      	str	r3, [r7, #28]
   return(result);
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800951c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e3      	bne.n	80094f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800952e:	2b01      	cmp	r3, #1
 8009530:	d118      	bne.n	8009564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f023 0310 	bic.w	r3, r3, #16
 8009546:	647b      	str	r3, [r7, #68]	@ 0x44
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009550:	61bb      	str	r3, [r7, #24]
 8009552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6979      	ldr	r1, [r7, #20]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	613b      	str	r3, [r7, #16]
   return(result);
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e6      	bne.n	8009532 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009578:	bf00      	nop
 800957a:	3754      	adds	r7, #84	@ 0x54
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff f99e 	bl	80088dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b088      	sub	sp, #32
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095c4:	61fb      	str	r3, [r7, #28]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	61bb      	str	r3, [r7, #24]
 80095d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6979      	ldr	r1, [r7, #20]
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	613b      	str	r3, [r7, #16]
   return(result);
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e6      	bne.n	80095b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff f969 	bl	80088c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095f6:	bf00      	nop
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b09c      	sub	sp, #112	@ 0x70
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800960e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009618:	2b22      	cmp	r3, #34	@ 0x22
 800961a:	f040 80be 	bne.w	800979a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009624:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009628:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800962c:	b2d9      	uxtb	r1, r3
 800962e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009632:	b2da      	uxtb	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009638:	400a      	ands	r2, r1
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 80a1 	bne.w	80097aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800967c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009686:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009688:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800968c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e6      	bne.n	8009668 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ac:	f023 0301 	bic.w	r3, r3, #1
 80096b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80096ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80096bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e5      	bne.n	800969a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a33      	ldr	r2, [pc, #204]	@ (80097b4 <UART_RxISR_8BIT+0x1b4>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d01f      	beq.n	800972c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d018      	beq.n	800972c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	e853 3f00 	ldrex	r3, [r3]
 8009706:	623b      	str	r3, [r7, #32]
   return(result);
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800970e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009718:	633b      	str	r3, [r7, #48]	@ 0x30
 800971a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800971e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009720:	e841 2300 	strex	r3, r2, [r1]
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e6      	bne.n	80096fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009730:	2b01      	cmp	r3, #1
 8009732:	d12e      	bne.n	8009792 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	60fb      	str	r3, [r7, #12]
   return(result);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0310 	bic.w	r3, r3, #16
 800974e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975c:	69b9      	ldr	r1, [r7, #24]
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	e841 2300 	strex	r3, r2, [r1]
 8009764:	617b      	str	r3, [r7, #20]
   return(result);
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1e6      	bne.n	800973a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b10      	cmp	r3, #16
 8009778:	d103      	bne.n	8009782 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2210      	movs	r2, #16
 8009780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff f8b0 	bl	80088f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009790:	e00b      	b.n	80097aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7f8 f8b4 	bl	8001900 <HAL_UART_RxCpltCallback>
}
 8009798:	e007      	b.n	80097aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699a      	ldr	r2, [r3, #24]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0208 	orr.w	r2, r2, #8
 80097a8:	619a      	str	r2, [r3, #24]
}
 80097aa:	bf00      	nop
 80097ac:	3770      	adds	r7, #112	@ 0x70
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40008000 	.word	0x40008000

080097b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b09c      	sub	sp, #112	@ 0x70
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097d0:	2b22      	cmp	r3, #34	@ 0x22
 80097d2:	f040 80be 	bne.w	8009952 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80097e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80097ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80097ee:	4013      	ands	r3, r2
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fa:	1c9a      	adds	r2, r3, #2
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009806:	b29b      	uxth	r3, r3
 8009808:	3b01      	subs	r3, #1
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009818:	b29b      	uxth	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	f040 80a1 	bne.w	8009962 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800982e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009834:	667b      	str	r3, [r7, #100]	@ 0x64
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800983e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009840:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009844:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800984c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e6      	bne.n	8009820 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	663b      	str	r3, [r7, #96]	@ 0x60
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009872:	643a      	str	r2, [r7, #64]	@ 0x40
 8009874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e5      	bne.n	8009852 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a33      	ldr	r2, [pc, #204]	@ (800996c <UART_RxISR_16BIT+0x1b4>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d01f      	beq.n	80098e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d018      	beq.n	80098e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	e853 3f00 	ldrex	r3, [r3]
 80098be:	61fb      	str	r3, [r7, #28]
   return(result);
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d8:	e841 2300 	strex	r3, r2, [r1]
 80098dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e6      	bne.n	80098b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d12e      	bne.n	800994a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	f023 0310 	bic.w	r3, r3, #16
 8009906:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009910:	61bb      	str	r3, [r7, #24]
 8009912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	6979      	ldr	r1, [r7, #20]
 8009916:	69ba      	ldr	r2, [r7, #24]
 8009918:	e841 2300 	strex	r3, r2, [r1]
 800991c:	613b      	str	r3, [r7, #16]
   return(result);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e6      	bne.n	80098f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	f003 0310 	and.w	r3, r3, #16
 800992e:	2b10      	cmp	r3, #16
 8009930:	d103      	bne.n	800993a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2210      	movs	r2, #16
 8009938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7fe ffd4 	bl	80088f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009948:	e00b      	b.n	8009962 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7f7 ffd8 	bl	8001900 <HAL_UART_RxCpltCallback>
}
 8009950:	e007      	b.n	8009962 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	699a      	ldr	r2, [r3, #24]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f042 0208 	orr.w	r2, r2, #8
 8009960:	619a      	str	r2, [r3, #24]
}
 8009962:	bf00      	nop
 8009964:	3770      	adds	r7, #112	@ 0x70
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	40008000 	.word	0x40008000

08009970 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b0ac      	sub	sp, #176	@ 0xb0
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800997e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099a6:	2b22      	cmp	r3, #34	@ 0x22
 80099a8:	f040 8183 	bne.w	8009cb2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80099b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099b6:	e126      	b.n	8009c06 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80099c6:	b2d9      	uxtb	r1, r3
 80099c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d2:	400a      	ands	r2, r1
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d053      	beq.n	8009ab2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d011      	beq.n	8009a3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00b      	beq.n	8009a3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2201      	movs	r2, #1
 8009a28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a30:	f043 0201 	orr.w	r2, r3, #1
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a3e:	f003 0302 	and.w	r3, r3, #2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d011      	beq.n	8009a6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00b      	beq.n	8009a6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2202      	movs	r2, #2
 8009a58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a60:	f043 0204 	orr.w	r2, r3, #4
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d011      	beq.n	8009a9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2204      	movs	r2, #4
 8009a88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a90:	f043 0202 	orr.w	r2, r3, #2
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7fe ff19 	bl	80088dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 80a3 	bne.w	8009c06 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ae4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009ae8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009af0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e4      	bne.n	8009ac0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3308      	adds	r3, #8
 8009afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009b06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b0c:	f023 0301 	bic.w	r3, r3, #1
 8009b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b1e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009b20:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009b24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e1      	bne.n	8009af6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a60      	ldr	r2, [pc, #384]	@ (8009ccc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d021      	beq.n	8009b94 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01a      	beq.n	8009b94 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b80:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b82:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e4      	bne.n	8009b5e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d130      	bne.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	f023 0310 	bic.w	r3, r3, #16
 8009bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bcc:	e841 2300 	strex	r3, r2, [r1]
 8009bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e4      	bne.n	8009ba2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f003 0310 	and.w	r3, r3, #16
 8009be2:	2b10      	cmp	r3, #16
 8009be4:	d103      	bne.n	8009bee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2210      	movs	r2, #16
 8009bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7fe fe7a 	bl	80088f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009bfc:	e00e      	b.n	8009c1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7f7 fe7e 	bl	8001900 <HAL_UART_RxCpltCallback>
        break;
 8009c04:	e00a      	b.n	8009c1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c06:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d006      	beq.n	8009c1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c12:	f003 0320 	and.w	r3, r3, #32
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f47f aece 	bne.w	80099b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c22:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d049      	beq.n	8009cc2 <UART_RxISR_8BIT_FIFOEN+0x352>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c34:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d242      	bcs.n	8009cc2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3308      	adds	r3, #8
 8009c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009c60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e3      	bne.n	8009c3c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a16      	ldr	r2, [pc, #88]	@ (8009cd0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009c78:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	e853 3f00 	ldrex	r3, [r3]
 8009c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f043 0320 	orr.w	r3, r3, #32
 8009c8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	6979      	ldr	r1, [r7, #20]
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	e841 2300 	strex	r3, r2, [r1]
 8009ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1e4      	bne.n	8009c7a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cb0:	e007      	b.n	8009cc2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0208 	orr.w	r2, r2, #8
 8009cc0:	619a      	str	r2, [r3, #24]
}
 8009cc2:	bf00      	nop
 8009cc4:	37b0      	adds	r7, #176	@ 0xb0
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	40008000 	.word	0x40008000
 8009cd0:	08009601 	.word	0x08009601

08009cd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b0ae      	sub	sp, #184	@ 0xb8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ce2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d0a:	2b22      	cmp	r3, #34	@ 0x22
 8009d0c:	f040 8187 	bne.w	800a01e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d16:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d1a:	e12a      	b.n	8009f72 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009d2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009d32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009d36:	4013      	ands	r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d44:	1c9a      	adds	r2, r3, #2
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3b01      	subs	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d053      	beq.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d011      	beq.n	8009da2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00b      	beq.n	8009da2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d98:	f043 0201 	orr.w	r2, r3, #1
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d011      	beq.n	8009dd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00b      	beq.n	8009dd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dc8:	f043 0204 	orr.w	r2, r3, #4
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dd6:	f003 0304 	and.w	r3, r3, #4
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d011      	beq.n	8009e02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00b      	beq.n	8009e02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2204      	movs	r2, #4
 8009df0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df8:	f043 0202 	orr.w	r2, r3, #2
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d006      	beq.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7fe fd65 	bl	80088dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f040 80a5 	bne.w	8009f72 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e2      	bne.n	8009e28 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3308      	adds	r3, #8
 8009e68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e6c:	e853 3f00 	ldrex	r3, [r3]
 8009e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e78:	f023 0301 	bic.w	r3, r3, #1
 8009e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3308      	adds	r3, #8
 8009e86:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009e8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e1      	bne.n	8009e62 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a60      	ldr	r2, [pc, #384]	@ (800a038 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d021      	beq.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01a      	beq.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ed2:	e853 3f00 	ldrex	r3, [r3]
 8009ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009eec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ef2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ef4:	e841 2300 	strex	r3, r2, [r1]
 8009ef8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e4      	bne.n	8009eca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d130      	bne.n	8009f6a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f1e:	f023 0310 	bic.w	r3, r3, #16
 8009f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e4      	bne.n	8009f0e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b10      	cmp	r3, #16
 8009f50:	d103      	bne.n	8009f5a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2210      	movs	r2, #16
 8009f58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7fe fcc4 	bl	80088f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009f68:	e00e      	b.n	8009f88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7f7 fcc8 	bl	8001900 <HAL_UART_RxCpltCallback>
        break;
 8009f70:	e00a      	b.n	8009f88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f72:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d006      	beq.n	8009f88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f7e:	f003 0320 	and.w	r3, r3, #32
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f47f aeca 	bne.w	8009d1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f8e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d049      	beq.n	800a02e <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009fa0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d242      	bcs.n	800a02e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3308      	adds	r3, #8
 8009fae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	e853 3f00 	ldrex	r3, [r3]
 8009fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e3      	bne.n	8009fa8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a16      	ldr	r2, [pc, #88]	@ (800a03c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009fe4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	e853 3f00 	ldrex	r3, [r3]
 8009ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f043 0320 	orr.w	r3, r3, #32
 8009ffa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00c:	69b9      	ldr	r1, [r7, #24]
 800a00e:	69fa      	ldr	r2, [r7, #28]
 800a010:	e841 2300 	strex	r3, r2, [r1]
 800a014:	617b      	str	r3, [r7, #20]
   return(result);
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e4      	bne.n	8009fe6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a01c:	e007      	b.n	800a02e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	699a      	ldr	r2, [r3, #24]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0208 	orr.w	r2, r2, #8
 800a02c:	619a      	str	r2, [r3, #24]
}
 800a02e:	bf00      	nop
 800a030:	37b8      	adds	r7, #184	@ 0xb8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	40008000 	.word	0x40008000
 800a03c:	080097b9 	.word	0x080097b9

0800a040 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <HAL_UARTEx_DisableFifoMode+0x16>
 800a08e:	2302      	movs	r3, #2
 800a090:	e027      	b.n	800a0e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2224      	movs	r2, #36	@ 0x24
 800a09e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f022 0201 	bic.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a0c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d101      	bne.n	800a106 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a102:	2302      	movs	r3, #2
 800a104:	e02d      	b.n	800a162 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2224      	movs	r2, #36	@ 0x24
 800a112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0201 	bic.w	r2, r2, #1
 800a12c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f850 	bl	800a1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a17e:	2302      	movs	r3, #2
 800a180:	e02d      	b.n	800a1de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2224      	movs	r2, #36	@ 0x24
 800a18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0201 	bic.w	r2, r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f812 	bl	800a1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d108      	bne.n	800a20a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a208:	e031      	b.n	800a26e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a20a:	2308      	movs	r3, #8
 800a20c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a20e:	2308      	movs	r3, #8
 800a210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	0e5b      	lsrs	r3, r3, #25
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f003 0307 	and.w	r3, r3, #7
 800a220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	0f5b      	lsrs	r3, r3, #29
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0307 	and.w	r3, r3, #7
 800a230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	7b3a      	ldrb	r2, [r7, #12]
 800a236:	4911      	ldr	r1, [pc, #68]	@ (800a27c <UARTEx_SetNbDataToProcess+0x94>)
 800a238:	5c8a      	ldrb	r2, [r1, r2]
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a23e:	7b3a      	ldrb	r2, [r7, #12]
 800a240:	490f      	ldr	r1, [pc, #60]	@ (800a280 <UARTEx_SetNbDataToProcess+0x98>)
 800a242:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a244:	fb93 f3f2 	sdiv	r3, r3, r2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	7b7a      	ldrb	r2, [r7, #13]
 800a254:	4909      	ldr	r1, [pc, #36]	@ (800a27c <UARTEx_SetNbDataToProcess+0x94>)
 800a256:	5c8a      	ldrb	r2, [r1, r2]
 800a258:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a25c:	7b7a      	ldrb	r2, [r7, #13]
 800a25e:	4908      	ldr	r1, [pc, #32]	@ (800a280 <UARTEx_SetNbDataToProcess+0x98>)
 800a260:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a262:	fb93 f3f2 	sdiv	r3, r3, r2
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	0800d3c8 	.word	0x0800d3c8
 800a280:	0800d3d0 	.word	0x0800d3d0

0800a284 <atoi>:
 800a284:	220a      	movs	r2, #10
 800a286:	2100      	movs	r1, #0
 800a288:	f000 b87a 	b.w	800a380 <strtol>

0800a28c <_strtol_l.constprop.0>:
 800a28c:	2b24      	cmp	r3, #36	@ 0x24
 800a28e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a292:	4686      	mov	lr, r0
 800a294:	4690      	mov	r8, r2
 800a296:	d801      	bhi.n	800a29c <_strtol_l.constprop.0+0x10>
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d106      	bne.n	800a2aa <_strtol_l.constprop.0+0x1e>
 800a29c:	f000 feb8 	bl	800b010 <__errno>
 800a2a0:	2316      	movs	r3, #22
 800a2a2:	6003      	str	r3, [r0, #0]
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2aa:	4834      	ldr	r0, [pc, #208]	@ (800a37c <_strtol_l.constprop.0+0xf0>)
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2b4:	5d06      	ldrb	r6, [r0, r4]
 800a2b6:	f016 0608 	ands.w	r6, r6, #8
 800a2ba:	d1f8      	bne.n	800a2ae <_strtol_l.constprop.0+0x22>
 800a2bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a2be:	d12d      	bne.n	800a31c <_strtol_l.constprop.0+0x90>
 800a2c0:	782c      	ldrb	r4, [r5, #0]
 800a2c2:	2601      	movs	r6, #1
 800a2c4:	1c95      	adds	r5, r2, #2
 800a2c6:	f033 0210 	bics.w	r2, r3, #16
 800a2ca:	d109      	bne.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a2cc:	2c30      	cmp	r4, #48	@ 0x30
 800a2ce:	d12a      	bne.n	800a326 <_strtol_l.constprop.0+0x9a>
 800a2d0:	782a      	ldrb	r2, [r5, #0]
 800a2d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2d6:	2a58      	cmp	r2, #88	@ 0x58
 800a2d8:	d125      	bne.n	800a326 <_strtol_l.constprop.0+0x9a>
 800a2da:	786c      	ldrb	r4, [r5, #1]
 800a2dc:	2310      	movs	r3, #16
 800a2de:	3502      	adds	r5, #2
 800a2e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a2e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	fbbc f9f3 	udiv	r9, ip, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a2f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a2f8:	2f09      	cmp	r7, #9
 800a2fa:	d81b      	bhi.n	800a334 <_strtol_l.constprop.0+0xa8>
 800a2fc:	463c      	mov	r4, r7
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	dd27      	ble.n	800a352 <_strtol_l.constprop.0+0xc6>
 800a302:	1c57      	adds	r7, r2, #1
 800a304:	d007      	beq.n	800a316 <_strtol_l.constprop.0+0x8a>
 800a306:	4581      	cmp	r9, r0
 800a308:	d320      	bcc.n	800a34c <_strtol_l.constprop.0+0xc0>
 800a30a:	d101      	bne.n	800a310 <_strtol_l.constprop.0+0x84>
 800a30c:	45a2      	cmp	sl, r4
 800a30e:	db1d      	blt.n	800a34c <_strtol_l.constprop.0+0xc0>
 800a310:	fb00 4003 	mla	r0, r0, r3, r4
 800a314:	2201      	movs	r2, #1
 800a316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a31a:	e7eb      	b.n	800a2f4 <_strtol_l.constprop.0+0x68>
 800a31c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a31e:	bf04      	itt	eq
 800a320:	782c      	ldrbeq	r4, [r5, #0]
 800a322:	1c95      	addeq	r5, r2, #2
 800a324:	e7cf      	b.n	800a2c6 <_strtol_l.constprop.0+0x3a>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1da      	bne.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a32a:	2c30      	cmp	r4, #48	@ 0x30
 800a32c:	bf0c      	ite	eq
 800a32e:	2308      	moveq	r3, #8
 800a330:	230a      	movne	r3, #10
 800a332:	e7d5      	b.n	800a2e0 <_strtol_l.constprop.0+0x54>
 800a334:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a338:	2f19      	cmp	r7, #25
 800a33a:	d801      	bhi.n	800a340 <_strtol_l.constprop.0+0xb4>
 800a33c:	3c37      	subs	r4, #55	@ 0x37
 800a33e:	e7de      	b.n	800a2fe <_strtol_l.constprop.0+0x72>
 800a340:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a344:	2f19      	cmp	r7, #25
 800a346:	d804      	bhi.n	800a352 <_strtol_l.constprop.0+0xc6>
 800a348:	3c57      	subs	r4, #87	@ 0x57
 800a34a:	e7d8      	b.n	800a2fe <_strtol_l.constprop.0+0x72>
 800a34c:	f04f 32ff 	mov.w	r2, #4294967295
 800a350:	e7e1      	b.n	800a316 <_strtol_l.constprop.0+0x8a>
 800a352:	1c53      	adds	r3, r2, #1
 800a354:	d108      	bne.n	800a368 <_strtol_l.constprop.0+0xdc>
 800a356:	2322      	movs	r3, #34	@ 0x22
 800a358:	f8ce 3000 	str.w	r3, [lr]
 800a35c:	4660      	mov	r0, ip
 800a35e:	f1b8 0f00 	cmp.w	r8, #0
 800a362:	d0a0      	beq.n	800a2a6 <_strtol_l.constprop.0+0x1a>
 800a364:	1e69      	subs	r1, r5, #1
 800a366:	e006      	b.n	800a376 <_strtol_l.constprop.0+0xea>
 800a368:	b106      	cbz	r6, 800a36c <_strtol_l.constprop.0+0xe0>
 800a36a:	4240      	negs	r0, r0
 800a36c:	f1b8 0f00 	cmp.w	r8, #0
 800a370:	d099      	beq.n	800a2a6 <_strtol_l.constprop.0+0x1a>
 800a372:	2a00      	cmp	r2, #0
 800a374:	d1f6      	bne.n	800a364 <_strtol_l.constprop.0+0xd8>
 800a376:	f8c8 1000 	str.w	r1, [r8]
 800a37a:	e794      	b.n	800a2a6 <_strtol_l.constprop.0+0x1a>
 800a37c:	0800d3d9 	.word	0x0800d3d9

0800a380 <strtol>:
 800a380:	4613      	mov	r3, r2
 800a382:	460a      	mov	r2, r1
 800a384:	4601      	mov	r1, r0
 800a386:	4802      	ldr	r0, [pc, #8]	@ (800a390 <strtol+0x10>)
 800a388:	6800      	ldr	r0, [r0, #0]
 800a38a:	f7ff bf7f 	b.w	800a28c <_strtol_l.constprop.0>
 800a38e:	bf00      	nop
 800a390:	2000001c 	.word	0x2000001c

0800a394 <__cvt>:
 800a394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a398:	ec57 6b10 	vmov	r6, r7, d0
 800a39c:	2f00      	cmp	r7, #0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	bfbb      	ittet	lt
 800a3a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a3aa:	461f      	movlt	r7, r3
 800a3ac:	2300      	movge	r3, #0
 800a3ae:	232d      	movlt	r3, #45	@ 0x2d
 800a3b0:	700b      	strb	r3, [r1, #0]
 800a3b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a3b8:	4691      	mov	r9, r2
 800a3ba:	f023 0820 	bic.w	r8, r3, #32
 800a3be:	bfbc      	itt	lt
 800a3c0:	4632      	movlt	r2, r6
 800a3c2:	4616      	movlt	r6, r2
 800a3c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3c8:	d005      	beq.n	800a3d6 <__cvt+0x42>
 800a3ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a3ce:	d100      	bne.n	800a3d2 <__cvt+0x3e>
 800a3d0:	3401      	adds	r4, #1
 800a3d2:	2102      	movs	r1, #2
 800a3d4:	e000      	b.n	800a3d8 <__cvt+0x44>
 800a3d6:	2103      	movs	r1, #3
 800a3d8:	ab03      	add	r3, sp, #12
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	ab02      	add	r3, sp, #8
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	ec47 6b10 	vmov	d0, r6, r7
 800a3e4:	4653      	mov	r3, sl
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	f000 fee6 	bl	800b1b8 <_dtoa_r>
 800a3ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	d119      	bne.n	800a428 <__cvt+0x94>
 800a3f4:	f019 0f01 	tst.w	r9, #1
 800a3f8:	d00e      	beq.n	800a418 <__cvt+0x84>
 800a3fa:	eb00 0904 	add.w	r9, r0, r4
 800a3fe:	2200      	movs	r2, #0
 800a400:	2300      	movs	r3, #0
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f6 fb97 	bl	8000b38 <__aeabi_dcmpeq>
 800a40a:	b108      	cbz	r0, 800a410 <__cvt+0x7c>
 800a40c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a410:	2230      	movs	r2, #48	@ 0x30
 800a412:	9b03      	ldr	r3, [sp, #12]
 800a414:	454b      	cmp	r3, r9
 800a416:	d31e      	bcc.n	800a456 <__cvt+0xc2>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a41c:	1b5b      	subs	r3, r3, r5
 800a41e:	4628      	mov	r0, r5
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	b004      	add	sp, #16
 800a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a42c:	eb00 0904 	add.w	r9, r0, r4
 800a430:	d1e5      	bne.n	800a3fe <__cvt+0x6a>
 800a432:	7803      	ldrb	r3, [r0, #0]
 800a434:	2b30      	cmp	r3, #48	@ 0x30
 800a436:	d10a      	bne.n	800a44e <__cvt+0xba>
 800a438:	2200      	movs	r2, #0
 800a43a:	2300      	movs	r3, #0
 800a43c:	4630      	mov	r0, r6
 800a43e:	4639      	mov	r1, r7
 800a440:	f7f6 fb7a 	bl	8000b38 <__aeabi_dcmpeq>
 800a444:	b918      	cbnz	r0, 800a44e <__cvt+0xba>
 800a446:	f1c4 0401 	rsb	r4, r4, #1
 800a44a:	f8ca 4000 	str.w	r4, [sl]
 800a44e:	f8da 3000 	ldr.w	r3, [sl]
 800a452:	4499      	add	r9, r3
 800a454:	e7d3      	b.n	800a3fe <__cvt+0x6a>
 800a456:	1c59      	adds	r1, r3, #1
 800a458:	9103      	str	r1, [sp, #12]
 800a45a:	701a      	strb	r2, [r3, #0]
 800a45c:	e7d9      	b.n	800a412 <__cvt+0x7e>

0800a45e <__exponent>:
 800a45e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a460:	2900      	cmp	r1, #0
 800a462:	bfba      	itte	lt
 800a464:	4249      	neglt	r1, r1
 800a466:	232d      	movlt	r3, #45	@ 0x2d
 800a468:	232b      	movge	r3, #43	@ 0x2b
 800a46a:	2909      	cmp	r1, #9
 800a46c:	7002      	strb	r2, [r0, #0]
 800a46e:	7043      	strb	r3, [r0, #1]
 800a470:	dd29      	ble.n	800a4c6 <__exponent+0x68>
 800a472:	f10d 0307 	add.w	r3, sp, #7
 800a476:	461d      	mov	r5, r3
 800a478:	270a      	movs	r7, #10
 800a47a:	461a      	mov	r2, r3
 800a47c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a480:	fb07 1416 	mls	r4, r7, r6, r1
 800a484:	3430      	adds	r4, #48	@ 0x30
 800a486:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a48a:	460c      	mov	r4, r1
 800a48c:	2c63      	cmp	r4, #99	@ 0x63
 800a48e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a492:	4631      	mov	r1, r6
 800a494:	dcf1      	bgt.n	800a47a <__exponent+0x1c>
 800a496:	3130      	adds	r1, #48	@ 0x30
 800a498:	1e94      	subs	r4, r2, #2
 800a49a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a49e:	1c41      	adds	r1, r0, #1
 800a4a0:	4623      	mov	r3, r4
 800a4a2:	42ab      	cmp	r3, r5
 800a4a4:	d30a      	bcc.n	800a4bc <__exponent+0x5e>
 800a4a6:	f10d 0309 	add.w	r3, sp, #9
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	42ac      	cmp	r4, r5
 800a4ae:	bf88      	it	hi
 800a4b0:	2300      	movhi	r3, #0
 800a4b2:	3302      	adds	r3, #2
 800a4b4:	4403      	add	r3, r0
 800a4b6:	1a18      	subs	r0, r3, r0
 800a4b8:	b003      	add	sp, #12
 800a4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a4c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a4c4:	e7ed      	b.n	800a4a2 <__exponent+0x44>
 800a4c6:	2330      	movs	r3, #48	@ 0x30
 800a4c8:	3130      	adds	r1, #48	@ 0x30
 800a4ca:	7083      	strb	r3, [r0, #2]
 800a4cc:	70c1      	strb	r1, [r0, #3]
 800a4ce:	1d03      	adds	r3, r0, #4
 800a4d0:	e7f1      	b.n	800a4b6 <__exponent+0x58>
	...

0800a4d4 <_printf_float>:
 800a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d8:	b08d      	sub	sp, #52	@ 0x34
 800a4da:	460c      	mov	r4, r1
 800a4dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a4e0:	4616      	mov	r6, r2
 800a4e2:	461f      	mov	r7, r3
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	f000 fd49 	bl	800af7c <_localeconv_r>
 800a4ea:	6803      	ldr	r3, [r0, #0]
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f5 fef6 	bl	80002e0 <strlen>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4fc:	9005      	str	r0, [sp, #20]
 800a4fe:	3307      	adds	r3, #7
 800a500:	f023 0307 	bic.w	r3, r3, #7
 800a504:	f103 0208 	add.w	r2, r3, #8
 800a508:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a50c:	f8d4 b000 	ldr.w	fp, [r4]
 800a510:	f8c8 2000 	str.w	r2, [r8]
 800a514:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a518:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a51c:	9307      	str	r3, [sp, #28]
 800a51e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a522:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a52a:	4b9c      	ldr	r3, [pc, #624]	@ (800a79c <_printf_float+0x2c8>)
 800a52c:	f04f 32ff 	mov.w	r2, #4294967295
 800a530:	f7f6 fb34 	bl	8000b9c <__aeabi_dcmpun>
 800a534:	bb70      	cbnz	r0, 800a594 <_printf_float+0xc0>
 800a536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a53a:	4b98      	ldr	r3, [pc, #608]	@ (800a79c <_printf_float+0x2c8>)
 800a53c:	f04f 32ff 	mov.w	r2, #4294967295
 800a540:	f7f6 fb0e 	bl	8000b60 <__aeabi_dcmple>
 800a544:	bb30      	cbnz	r0, 800a594 <_printf_float+0xc0>
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	4640      	mov	r0, r8
 800a54c:	4649      	mov	r1, r9
 800a54e:	f7f6 fafd 	bl	8000b4c <__aeabi_dcmplt>
 800a552:	b110      	cbz	r0, 800a55a <_printf_float+0x86>
 800a554:	232d      	movs	r3, #45	@ 0x2d
 800a556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a55a:	4a91      	ldr	r2, [pc, #580]	@ (800a7a0 <_printf_float+0x2cc>)
 800a55c:	4b91      	ldr	r3, [pc, #580]	@ (800a7a4 <_printf_float+0x2d0>)
 800a55e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a562:	bf94      	ite	ls
 800a564:	4690      	movls	r8, r2
 800a566:	4698      	movhi	r8, r3
 800a568:	2303      	movs	r3, #3
 800a56a:	6123      	str	r3, [r4, #16]
 800a56c:	f02b 0304 	bic.w	r3, fp, #4
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	f04f 0900 	mov.w	r9, #0
 800a576:	9700      	str	r7, [sp, #0]
 800a578:	4633      	mov	r3, r6
 800a57a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a57c:	4621      	mov	r1, r4
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f9d2 	bl	800a928 <_printf_common>
 800a584:	3001      	adds	r0, #1
 800a586:	f040 808d 	bne.w	800a6a4 <_printf_float+0x1d0>
 800a58a:	f04f 30ff 	mov.w	r0, #4294967295
 800a58e:	b00d      	add	sp, #52	@ 0x34
 800a590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a594:	4642      	mov	r2, r8
 800a596:	464b      	mov	r3, r9
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f6 fafe 	bl	8000b9c <__aeabi_dcmpun>
 800a5a0:	b140      	cbz	r0, 800a5b4 <_printf_float+0xe0>
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bfbc      	itt	lt
 800a5a8:	232d      	movlt	r3, #45	@ 0x2d
 800a5aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a5ae:	4a7e      	ldr	r2, [pc, #504]	@ (800a7a8 <_printf_float+0x2d4>)
 800a5b0:	4b7e      	ldr	r3, [pc, #504]	@ (800a7ac <_printf_float+0x2d8>)
 800a5b2:	e7d4      	b.n	800a55e <_printf_float+0x8a>
 800a5b4:	6863      	ldr	r3, [r4, #4]
 800a5b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a5ba:	9206      	str	r2, [sp, #24]
 800a5bc:	1c5a      	adds	r2, r3, #1
 800a5be:	d13b      	bne.n	800a638 <_printf_float+0x164>
 800a5c0:	2306      	movs	r3, #6
 800a5c2:	6063      	str	r3, [r4, #4]
 800a5c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	6022      	str	r2, [r4, #0]
 800a5cc:	9303      	str	r3, [sp, #12]
 800a5ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800a5d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a5d4:	ab09      	add	r3, sp, #36	@ 0x24
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	6861      	ldr	r1, [r4, #4]
 800a5da:	ec49 8b10 	vmov	d0, r8, r9
 800a5de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f7ff fed6 	bl	800a394 <__cvt>
 800a5e8:	9b06      	ldr	r3, [sp, #24]
 800a5ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5ec:	2b47      	cmp	r3, #71	@ 0x47
 800a5ee:	4680      	mov	r8, r0
 800a5f0:	d129      	bne.n	800a646 <_printf_float+0x172>
 800a5f2:	1cc8      	adds	r0, r1, #3
 800a5f4:	db02      	blt.n	800a5fc <_printf_float+0x128>
 800a5f6:	6863      	ldr	r3, [r4, #4]
 800a5f8:	4299      	cmp	r1, r3
 800a5fa:	dd41      	ble.n	800a680 <_printf_float+0x1ac>
 800a5fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a600:	fa5f fa8a 	uxtb.w	sl, sl
 800a604:	3901      	subs	r1, #1
 800a606:	4652      	mov	r2, sl
 800a608:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a60c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a60e:	f7ff ff26 	bl	800a45e <__exponent>
 800a612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a614:	1813      	adds	r3, r2, r0
 800a616:	2a01      	cmp	r2, #1
 800a618:	4681      	mov	r9, r0
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	dc02      	bgt.n	800a624 <_printf_float+0x150>
 800a61e:	6822      	ldr	r2, [r4, #0]
 800a620:	07d2      	lsls	r2, r2, #31
 800a622:	d501      	bpl.n	800a628 <_printf_float+0x154>
 800a624:	3301      	adds	r3, #1
 800a626:	6123      	str	r3, [r4, #16]
 800a628:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0a2      	beq.n	800a576 <_printf_float+0xa2>
 800a630:	232d      	movs	r3, #45	@ 0x2d
 800a632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a636:	e79e      	b.n	800a576 <_printf_float+0xa2>
 800a638:	9a06      	ldr	r2, [sp, #24]
 800a63a:	2a47      	cmp	r2, #71	@ 0x47
 800a63c:	d1c2      	bne.n	800a5c4 <_printf_float+0xf0>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1c0      	bne.n	800a5c4 <_printf_float+0xf0>
 800a642:	2301      	movs	r3, #1
 800a644:	e7bd      	b.n	800a5c2 <_printf_float+0xee>
 800a646:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a64a:	d9db      	bls.n	800a604 <_printf_float+0x130>
 800a64c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a650:	d118      	bne.n	800a684 <_printf_float+0x1b0>
 800a652:	2900      	cmp	r1, #0
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	dd0b      	ble.n	800a670 <_printf_float+0x19c>
 800a658:	6121      	str	r1, [r4, #16]
 800a65a:	b913      	cbnz	r3, 800a662 <_printf_float+0x18e>
 800a65c:	6822      	ldr	r2, [r4, #0]
 800a65e:	07d0      	lsls	r0, r2, #31
 800a660:	d502      	bpl.n	800a668 <_printf_float+0x194>
 800a662:	3301      	adds	r3, #1
 800a664:	440b      	add	r3, r1
 800a666:	6123      	str	r3, [r4, #16]
 800a668:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a66a:	f04f 0900 	mov.w	r9, #0
 800a66e:	e7db      	b.n	800a628 <_printf_float+0x154>
 800a670:	b913      	cbnz	r3, 800a678 <_printf_float+0x1a4>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	07d2      	lsls	r2, r2, #31
 800a676:	d501      	bpl.n	800a67c <_printf_float+0x1a8>
 800a678:	3302      	adds	r3, #2
 800a67a:	e7f4      	b.n	800a666 <_printf_float+0x192>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e7f2      	b.n	800a666 <_printf_float+0x192>
 800a680:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a686:	4299      	cmp	r1, r3
 800a688:	db05      	blt.n	800a696 <_printf_float+0x1c2>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	6121      	str	r1, [r4, #16]
 800a68e:	07d8      	lsls	r0, r3, #31
 800a690:	d5ea      	bpl.n	800a668 <_printf_float+0x194>
 800a692:	1c4b      	adds	r3, r1, #1
 800a694:	e7e7      	b.n	800a666 <_printf_float+0x192>
 800a696:	2900      	cmp	r1, #0
 800a698:	bfd4      	ite	le
 800a69a:	f1c1 0202 	rsble	r2, r1, #2
 800a69e:	2201      	movgt	r2, #1
 800a6a0:	4413      	add	r3, r2
 800a6a2:	e7e0      	b.n	800a666 <_printf_float+0x192>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	055a      	lsls	r2, r3, #21
 800a6a8:	d407      	bmi.n	800a6ba <_printf_float+0x1e6>
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d12b      	bne.n	800a710 <_printf_float+0x23c>
 800a6b8:	e767      	b.n	800a58a <_printf_float+0xb6>
 800a6ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6be:	f240 80dd 	bls.w	800a87c <_printf_float+0x3a8>
 800a6c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f7f6 fa35 	bl	8000b38 <__aeabi_dcmpeq>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d033      	beq.n	800a73a <_printf_float+0x266>
 800a6d2:	4a37      	ldr	r2, [pc, #220]	@ (800a7b0 <_printf_float+0x2dc>)
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b8      	blx	r7
 800a6dc:	3001      	adds	r0, #1
 800a6de:	f43f af54 	beq.w	800a58a <_printf_float+0xb6>
 800a6e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a6e6:	4543      	cmp	r3, r8
 800a6e8:	db02      	blt.n	800a6f0 <_printf_float+0x21c>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	07d8      	lsls	r0, r3, #31
 800a6ee:	d50f      	bpl.n	800a710 <_printf_float+0x23c>
 800a6f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b8      	blx	r7
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	f43f af45 	beq.w	800a58a <_printf_float+0xb6>
 800a700:	f04f 0900 	mov.w	r9, #0
 800a704:	f108 38ff 	add.w	r8, r8, #4294967295
 800a708:	f104 0a1a 	add.w	sl, r4, #26
 800a70c:	45c8      	cmp	r8, r9
 800a70e:	dc09      	bgt.n	800a724 <_printf_float+0x250>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	079b      	lsls	r3, r3, #30
 800a714:	f100 8103 	bmi.w	800a91e <_printf_float+0x44a>
 800a718:	68e0      	ldr	r0, [r4, #12]
 800a71a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a71c:	4298      	cmp	r0, r3
 800a71e:	bfb8      	it	lt
 800a720:	4618      	movlt	r0, r3
 800a722:	e734      	b.n	800a58e <_printf_float+0xba>
 800a724:	2301      	movs	r3, #1
 800a726:	4652      	mov	r2, sl
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	f43f af2b 	beq.w	800a58a <_printf_float+0xb6>
 800a734:	f109 0901 	add.w	r9, r9, #1
 800a738:	e7e8      	b.n	800a70c <_printf_float+0x238>
 800a73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	dc39      	bgt.n	800a7b4 <_printf_float+0x2e0>
 800a740:	4a1b      	ldr	r2, [pc, #108]	@ (800a7b0 <_printf_float+0x2dc>)
 800a742:	2301      	movs	r3, #1
 800a744:	4631      	mov	r1, r6
 800a746:	4628      	mov	r0, r5
 800a748:	47b8      	blx	r7
 800a74a:	3001      	adds	r0, #1
 800a74c:	f43f af1d 	beq.w	800a58a <_printf_float+0xb6>
 800a750:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a754:	ea59 0303 	orrs.w	r3, r9, r3
 800a758:	d102      	bne.n	800a760 <_printf_float+0x28c>
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	07d9      	lsls	r1, r3, #31
 800a75e:	d5d7      	bpl.n	800a710 <_printf_float+0x23c>
 800a760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a764:	4631      	mov	r1, r6
 800a766:	4628      	mov	r0, r5
 800a768:	47b8      	blx	r7
 800a76a:	3001      	adds	r0, #1
 800a76c:	f43f af0d 	beq.w	800a58a <_printf_float+0xb6>
 800a770:	f04f 0a00 	mov.w	sl, #0
 800a774:	f104 0b1a 	add.w	fp, r4, #26
 800a778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77a:	425b      	negs	r3, r3
 800a77c:	4553      	cmp	r3, sl
 800a77e:	dc01      	bgt.n	800a784 <_printf_float+0x2b0>
 800a780:	464b      	mov	r3, r9
 800a782:	e793      	b.n	800a6ac <_printf_float+0x1d8>
 800a784:	2301      	movs	r3, #1
 800a786:	465a      	mov	r2, fp
 800a788:	4631      	mov	r1, r6
 800a78a:	4628      	mov	r0, r5
 800a78c:	47b8      	blx	r7
 800a78e:	3001      	adds	r0, #1
 800a790:	f43f aefb 	beq.w	800a58a <_printf_float+0xb6>
 800a794:	f10a 0a01 	add.w	sl, sl, #1
 800a798:	e7ee      	b.n	800a778 <_printf_float+0x2a4>
 800a79a:	bf00      	nop
 800a79c:	7fefffff 	.word	0x7fefffff
 800a7a0:	0800d4d9 	.word	0x0800d4d9
 800a7a4:	0800d4dd 	.word	0x0800d4dd
 800a7a8:	0800d4e1 	.word	0x0800d4e1
 800a7ac:	0800d4e5 	.word	0x0800d4e5
 800a7b0:	0800d4e9 	.word	0x0800d4e9
 800a7b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a7b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a7ba:	4553      	cmp	r3, sl
 800a7bc:	bfa8      	it	ge
 800a7be:	4653      	movge	r3, sl
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	4699      	mov	r9, r3
 800a7c4:	dc36      	bgt.n	800a834 <_printf_float+0x360>
 800a7c6:	f04f 0b00 	mov.w	fp, #0
 800a7ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7ce:	f104 021a 	add.w	r2, r4, #26
 800a7d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a7d4:	9306      	str	r3, [sp, #24]
 800a7d6:	eba3 0309 	sub.w	r3, r3, r9
 800a7da:	455b      	cmp	r3, fp
 800a7dc:	dc31      	bgt.n	800a842 <_printf_float+0x36e>
 800a7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e0:	459a      	cmp	sl, r3
 800a7e2:	dc3a      	bgt.n	800a85a <_printf_float+0x386>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	07da      	lsls	r2, r3, #31
 800a7e8:	d437      	bmi.n	800a85a <_printf_float+0x386>
 800a7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ec:	ebaa 0903 	sub.w	r9, sl, r3
 800a7f0:	9b06      	ldr	r3, [sp, #24]
 800a7f2:	ebaa 0303 	sub.w	r3, sl, r3
 800a7f6:	4599      	cmp	r9, r3
 800a7f8:	bfa8      	it	ge
 800a7fa:	4699      	movge	r9, r3
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	dc33      	bgt.n	800a86a <_printf_float+0x396>
 800a802:	f04f 0800 	mov.w	r8, #0
 800a806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a80a:	f104 0b1a 	add.w	fp, r4, #26
 800a80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a810:	ebaa 0303 	sub.w	r3, sl, r3
 800a814:	eba3 0309 	sub.w	r3, r3, r9
 800a818:	4543      	cmp	r3, r8
 800a81a:	f77f af79 	ble.w	800a710 <_printf_float+0x23c>
 800a81e:	2301      	movs	r3, #1
 800a820:	465a      	mov	r2, fp
 800a822:	4631      	mov	r1, r6
 800a824:	4628      	mov	r0, r5
 800a826:	47b8      	blx	r7
 800a828:	3001      	adds	r0, #1
 800a82a:	f43f aeae 	beq.w	800a58a <_printf_float+0xb6>
 800a82e:	f108 0801 	add.w	r8, r8, #1
 800a832:	e7ec      	b.n	800a80e <_printf_float+0x33a>
 800a834:	4642      	mov	r2, r8
 800a836:	4631      	mov	r1, r6
 800a838:	4628      	mov	r0, r5
 800a83a:	47b8      	blx	r7
 800a83c:	3001      	adds	r0, #1
 800a83e:	d1c2      	bne.n	800a7c6 <_printf_float+0x2f2>
 800a840:	e6a3      	b.n	800a58a <_printf_float+0xb6>
 800a842:	2301      	movs	r3, #1
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	9206      	str	r2, [sp, #24]
 800a84a:	47b8      	blx	r7
 800a84c:	3001      	adds	r0, #1
 800a84e:	f43f ae9c 	beq.w	800a58a <_printf_float+0xb6>
 800a852:	9a06      	ldr	r2, [sp, #24]
 800a854:	f10b 0b01 	add.w	fp, fp, #1
 800a858:	e7bb      	b.n	800a7d2 <_printf_float+0x2fe>
 800a85a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a85e:	4631      	mov	r1, r6
 800a860:	4628      	mov	r0, r5
 800a862:	47b8      	blx	r7
 800a864:	3001      	adds	r0, #1
 800a866:	d1c0      	bne.n	800a7ea <_printf_float+0x316>
 800a868:	e68f      	b.n	800a58a <_printf_float+0xb6>
 800a86a:	9a06      	ldr	r2, [sp, #24]
 800a86c:	464b      	mov	r3, r9
 800a86e:	4442      	add	r2, r8
 800a870:	4631      	mov	r1, r6
 800a872:	4628      	mov	r0, r5
 800a874:	47b8      	blx	r7
 800a876:	3001      	adds	r0, #1
 800a878:	d1c3      	bne.n	800a802 <_printf_float+0x32e>
 800a87a:	e686      	b.n	800a58a <_printf_float+0xb6>
 800a87c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a880:	f1ba 0f01 	cmp.w	sl, #1
 800a884:	dc01      	bgt.n	800a88a <_printf_float+0x3b6>
 800a886:	07db      	lsls	r3, r3, #31
 800a888:	d536      	bpl.n	800a8f8 <_printf_float+0x424>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4642      	mov	r2, r8
 800a88e:	4631      	mov	r1, r6
 800a890:	4628      	mov	r0, r5
 800a892:	47b8      	blx	r7
 800a894:	3001      	adds	r0, #1
 800a896:	f43f ae78 	beq.w	800a58a <_printf_float+0xb6>
 800a89a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a89e:	4631      	mov	r1, r6
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b8      	blx	r7
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	f43f ae70 	beq.w	800a58a <_printf_float+0xb6>
 800a8aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8b6:	f7f6 f93f 	bl	8000b38 <__aeabi_dcmpeq>
 800a8ba:	b9c0      	cbnz	r0, 800a8ee <_printf_float+0x41a>
 800a8bc:	4653      	mov	r3, sl
 800a8be:	f108 0201 	add.w	r2, r8, #1
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d10c      	bne.n	800a8e6 <_printf_float+0x412>
 800a8cc:	e65d      	b.n	800a58a <_printf_float+0xb6>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	465a      	mov	r2, fp
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	47b8      	blx	r7
 800a8d8:	3001      	adds	r0, #1
 800a8da:	f43f ae56 	beq.w	800a58a <_printf_float+0xb6>
 800a8de:	f108 0801 	add.w	r8, r8, #1
 800a8e2:	45d0      	cmp	r8, sl
 800a8e4:	dbf3      	blt.n	800a8ce <_printf_float+0x3fa>
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a8ec:	e6df      	b.n	800a6ae <_printf_float+0x1da>
 800a8ee:	f04f 0800 	mov.w	r8, #0
 800a8f2:	f104 0b1a 	add.w	fp, r4, #26
 800a8f6:	e7f4      	b.n	800a8e2 <_printf_float+0x40e>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	e7e1      	b.n	800a8c2 <_printf_float+0x3ee>
 800a8fe:	2301      	movs	r3, #1
 800a900:	464a      	mov	r2, r9
 800a902:	4631      	mov	r1, r6
 800a904:	4628      	mov	r0, r5
 800a906:	47b8      	blx	r7
 800a908:	3001      	adds	r0, #1
 800a90a:	f43f ae3e 	beq.w	800a58a <_printf_float+0xb6>
 800a90e:	f108 0801 	add.w	r8, r8, #1
 800a912:	68e3      	ldr	r3, [r4, #12]
 800a914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a916:	1a5b      	subs	r3, r3, r1
 800a918:	4543      	cmp	r3, r8
 800a91a:	dcf0      	bgt.n	800a8fe <_printf_float+0x42a>
 800a91c:	e6fc      	b.n	800a718 <_printf_float+0x244>
 800a91e:	f04f 0800 	mov.w	r8, #0
 800a922:	f104 0919 	add.w	r9, r4, #25
 800a926:	e7f4      	b.n	800a912 <_printf_float+0x43e>

0800a928 <_printf_common>:
 800a928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	4616      	mov	r6, r2
 800a92e:	4698      	mov	r8, r3
 800a930:	688a      	ldr	r2, [r1, #8]
 800a932:	690b      	ldr	r3, [r1, #16]
 800a934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a938:	4293      	cmp	r3, r2
 800a93a:	bfb8      	it	lt
 800a93c:	4613      	movlt	r3, r2
 800a93e:	6033      	str	r3, [r6, #0]
 800a940:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a944:	4607      	mov	r7, r0
 800a946:	460c      	mov	r4, r1
 800a948:	b10a      	cbz	r2, 800a94e <_printf_common+0x26>
 800a94a:	3301      	adds	r3, #1
 800a94c:	6033      	str	r3, [r6, #0]
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	0699      	lsls	r1, r3, #26
 800a952:	bf42      	ittt	mi
 800a954:	6833      	ldrmi	r3, [r6, #0]
 800a956:	3302      	addmi	r3, #2
 800a958:	6033      	strmi	r3, [r6, #0]
 800a95a:	6825      	ldr	r5, [r4, #0]
 800a95c:	f015 0506 	ands.w	r5, r5, #6
 800a960:	d106      	bne.n	800a970 <_printf_common+0x48>
 800a962:	f104 0a19 	add.w	sl, r4, #25
 800a966:	68e3      	ldr	r3, [r4, #12]
 800a968:	6832      	ldr	r2, [r6, #0]
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	42ab      	cmp	r3, r5
 800a96e:	dc26      	bgt.n	800a9be <_printf_common+0x96>
 800a970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	3b00      	subs	r3, #0
 800a978:	bf18      	it	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	0692      	lsls	r2, r2, #26
 800a97e:	d42b      	bmi.n	800a9d8 <_printf_common+0xb0>
 800a980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a984:	4641      	mov	r1, r8
 800a986:	4638      	mov	r0, r7
 800a988:	47c8      	blx	r9
 800a98a:	3001      	adds	r0, #1
 800a98c:	d01e      	beq.n	800a9cc <_printf_common+0xa4>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	6922      	ldr	r2, [r4, #16]
 800a992:	f003 0306 	and.w	r3, r3, #6
 800a996:	2b04      	cmp	r3, #4
 800a998:	bf02      	ittt	eq
 800a99a:	68e5      	ldreq	r5, [r4, #12]
 800a99c:	6833      	ldreq	r3, [r6, #0]
 800a99e:	1aed      	subeq	r5, r5, r3
 800a9a0:	68a3      	ldr	r3, [r4, #8]
 800a9a2:	bf0c      	ite	eq
 800a9a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9a8:	2500      	movne	r5, #0
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	bfc4      	itt	gt
 800a9ae:	1a9b      	subgt	r3, r3, r2
 800a9b0:	18ed      	addgt	r5, r5, r3
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	341a      	adds	r4, #26
 800a9b6:	42b5      	cmp	r5, r6
 800a9b8:	d11a      	bne.n	800a9f0 <_printf_common+0xc8>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e008      	b.n	800a9d0 <_printf_common+0xa8>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	47c8      	blx	r9
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d103      	bne.n	800a9d4 <_printf_common+0xac>
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d4:	3501      	adds	r5, #1
 800a9d6:	e7c6      	b.n	800a966 <_printf_common+0x3e>
 800a9d8:	18e1      	adds	r1, r4, r3
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	2030      	movs	r0, #48	@ 0x30
 800a9de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9e2:	4422      	add	r2, r4
 800a9e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9ec:	3302      	adds	r3, #2
 800a9ee:	e7c7      	b.n	800a980 <_printf_common+0x58>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	4641      	mov	r1, r8
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	47c8      	blx	r9
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d0e6      	beq.n	800a9cc <_printf_common+0xa4>
 800a9fe:	3601      	adds	r6, #1
 800aa00:	e7d9      	b.n	800a9b6 <_printf_common+0x8e>
	...

0800aa04 <_printf_i>:
 800aa04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa08:	7e0f      	ldrb	r7, [r1, #24]
 800aa0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa0c:	2f78      	cmp	r7, #120	@ 0x78
 800aa0e:	4691      	mov	r9, r2
 800aa10:	4680      	mov	r8, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	469a      	mov	sl, r3
 800aa16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa1a:	d807      	bhi.n	800aa2c <_printf_i+0x28>
 800aa1c:	2f62      	cmp	r7, #98	@ 0x62
 800aa1e:	d80a      	bhi.n	800aa36 <_printf_i+0x32>
 800aa20:	2f00      	cmp	r7, #0
 800aa22:	f000 80d2 	beq.w	800abca <_printf_i+0x1c6>
 800aa26:	2f58      	cmp	r7, #88	@ 0x58
 800aa28:	f000 80b9 	beq.w	800ab9e <_printf_i+0x19a>
 800aa2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa34:	e03a      	b.n	800aaac <_printf_i+0xa8>
 800aa36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa3a:	2b15      	cmp	r3, #21
 800aa3c:	d8f6      	bhi.n	800aa2c <_printf_i+0x28>
 800aa3e:	a101      	add	r1, pc, #4	@ (adr r1, 800aa44 <_printf_i+0x40>)
 800aa40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa44:	0800aa9d 	.word	0x0800aa9d
 800aa48:	0800aab1 	.word	0x0800aab1
 800aa4c:	0800aa2d 	.word	0x0800aa2d
 800aa50:	0800aa2d 	.word	0x0800aa2d
 800aa54:	0800aa2d 	.word	0x0800aa2d
 800aa58:	0800aa2d 	.word	0x0800aa2d
 800aa5c:	0800aab1 	.word	0x0800aab1
 800aa60:	0800aa2d 	.word	0x0800aa2d
 800aa64:	0800aa2d 	.word	0x0800aa2d
 800aa68:	0800aa2d 	.word	0x0800aa2d
 800aa6c:	0800aa2d 	.word	0x0800aa2d
 800aa70:	0800abb1 	.word	0x0800abb1
 800aa74:	0800aadb 	.word	0x0800aadb
 800aa78:	0800ab6b 	.word	0x0800ab6b
 800aa7c:	0800aa2d 	.word	0x0800aa2d
 800aa80:	0800aa2d 	.word	0x0800aa2d
 800aa84:	0800abd3 	.word	0x0800abd3
 800aa88:	0800aa2d 	.word	0x0800aa2d
 800aa8c:	0800aadb 	.word	0x0800aadb
 800aa90:	0800aa2d 	.word	0x0800aa2d
 800aa94:	0800aa2d 	.word	0x0800aa2d
 800aa98:	0800ab73 	.word	0x0800ab73
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	1d1a      	adds	r2, r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6032      	str	r2, [r6, #0]
 800aaa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aaa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aaac:	2301      	movs	r3, #1
 800aaae:	e09d      	b.n	800abec <_printf_i+0x1e8>
 800aab0:	6833      	ldr	r3, [r6, #0]
 800aab2:	6820      	ldr	r0, [r4, #0]
 800aab4:	1d19      	adds	r1, r3, #4
 800aab6:	6031      	str	r1, [r6, #0]
 800aab8:	0606      	lsls	r6, r0, #24
 800aaba:	d501      	bpl.n	800aac0 <_printf_i+0xbc>
 800aabc:	681d      	ldr	r5, [r3, #0]
 800aabe:	e003      	b.n	800aac8 <_printf_i+0xc4>
 800aac0:	0645      	lsls	r5, r0, #25
 800aac2:	d5fb      	bpl.n	800aabc <_printf_i+0xb8>
 800aac4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aac8:	2d00      	cmp	r5, #0
 800aaca:	da03      	bge.n	800aad4 <_printf_i+0xd0>
 800aacc:	232d      	movs	r3, #45	@ 0x2d
 800aace:	426d      	negs	r5, r5
 800aad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aad4:	4859      	ldr	r0, [pc, #356]	@ (800ac3c <_printf_i+0x238>)
 800aad6:	230a      	movs	r3, #10
 800aad8:	e011      	b.n	800aafe <_printf_i+0xfa>
 800aada:	6821      	ldr	r1, [r4, #0]
 800aadc:	6833      	ldr	r3, [r6, #0]
 800aade:	0608      	lsls	r0, r1, #24
 800aae0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aae4:	d402      	bmi.n	800aaec <_printf_i+0xe8>
 800aae6:	0649      	lsls	r1, r1, #25
 800aae8:	bf48      	it	mi
 800aaea:	b2ad      	uxthmi	r5, r5
 800aaec:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaee:	4853      	ldr	r0, [pc, #332]	@ (800ac3c <_printf_i+0x238>)
 800aaf0:	6033      	str	r3, [r6, #0]
 800aaf2:	bf14      	ite	ne
 800aaf4:	230a      	movne	r3, #10
 800aaf6:	2308      	moveq	r3, #8
 800aaf8:	2100      	movs	r1, #0
 800aafa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aafe:	6866      	ldr	r6, [r4, #4]
 800ab00:	60a6      	str	r6, [r4, #8]
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	bfa2      	ittt	ge
 800ab06:	6821      	ldrge	r1, [r4, #0]
 800ab08:	f021 0104 	bicge.w	r1, r1, #4
 800ab0c:	6021      	strge	r1, [r4, #0]
 800ab0e:	b90d      	cbnz	r5, 800ab14 <_printf_i+0x110>
 800ab10:	2e00      	cmp	r6, #0
 800ab12:	d04b      	beq.n	800abac <_printf_i+0x1a8>
 800ab14:	4616      	mov	r6, r2
 800ab16:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab1a:	fb03 5711 	mls	r7, r3, r1, r5
 800ab1e:	5dc7      	ldrb	r7, [r0, r7]
 800ab20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab24:	462f      	mov	r7, r5
 800ab26:	42bb      	cmp	r3, r7
 800ab28:	460d      	mov	r5, r1
 800ab2a:	d9f4      	bls.n	800ab16 <_printf_i+0x112>
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d10b      	bne.n	800ab48 <_printf_i+0x144>
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	07df      	lsls	r7, r3, #31
 800ab34:	d508      	bpl.n	800ab48 <_printf_i+0x144>
 800ab36:	6923      	ldr	r3, [r4, #16]
 800ab38:	6861      	ldr	r1, [r4, #4]
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	bfde      	ittt	le
 800ab3e:	2330      	movle	r3, #48	@ 0x30
 800ab40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab48:	1b92      	subs	r2, r2, r6
 800ab4a:	6122      	str	r2, [r4, #16]
 800ab4c:	f8cd a000 	str.w	sl, [sp]
 800ab50:	464b      	mov	r3, r9
 800ab52:	aa03      	add	r2, sp, #12
 800ab54:	4621      	mov	r1, r4
 800ab56:	4640      	mov	r0, r8
 800ab58:	f7ff fee6 	bl	800a928 <_printf_common>
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d14a      	bne.n	800abf6 <_printf_i+0x1f2>
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	b004      	add	sp, #16
 800ab66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f043 0320 	orr.w	r3, r3, #32
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	4833      	ldr	r0, [pc, #204]	@ (800ac40 <_printf_i+0x23c>)
 800ab74:	2778      	movs	r7, #120	@ 0x78
 800ab76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	6831      	ldr	r1, [r6, #0]
 800ab7e:	061f      	lsls	r7, r3, #24
 800ab80:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab84:	d402      	bmi.n	800ab8c <_printf_i+0x188>
 800ab86:	065f      	lsls	r7, r3, #25
 800ab88:	bf48      	it	mi
 800ab8a:	b2ad      	uxthmi	r5, r5
 800ab8c:	6031      	str	r1, [r6, #0]
 800ab8e:	07d9      	lsls	r1, r3, #31
 800ab90:	bf44      	itt	mi
 800ab92:	f043 0320 	orrmi.w	r3, r3, #32
 800ab96:	6023      	strmi	r3, [r4, #0]
 800ab98:	b11d      	cbz	r5, 800aba2 <_printf_i+0x19e>
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	e7ac      	b.n	800aaf8 <_printf_i+0xf4>
 800ab9e:	4827      	ldr	r0, [pc, #156]	@ (800ac3c <_printf_i+0x238>)
 800aba0:	e7e9      	b.n	800ab76 <_printf_i+0x172>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	f023 0320 	bic.w	r3, r3, #32
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	e7f6      	b.n	800ab9a <_printf_i+0x196>
 800abac:	4616      	mov	r6, r2
 800abae:	e7bd      	b.n	800ab2c <_printf_i+0x128>
 800abb0:	6833      	ldr	r3, [r6, #0]
 800abb2:	6825      	ldr	r5, [r4, #0]
 800abb4:	6961      	ldr	r1, [r4, #20]
 800abb6:	1d18      	adds	r0, r3, #4
 800abb8:	6030      	str	r0, [r6, #0]
 800abba:	062e      	lsls	r6, r5, #24
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	d501      	bpl.n	800abc4 <_printf_i+0x1c0>
 800abc0:	6019      	str	r1, [r3, #0]
 800abc2:	e002      	b.n	800abca <_printf_i+0x1c6>
 800abc4:	0668      	lsls	r0, r5, #25
 800abc6:	d5fb      	bpl.n	800abc0 <_printf_i+0x1bc>
 800abc8:	8019      	strh	r1, [r3, #0]
 800abca:	2300      	movs	r3, #0
 800abcc:	6123      	str	r3, [r4, #16]
 800abce:	4616      	mov	r6, r2
 800abd0:	e7bc      	b.n	800ab4c <_printf_i+0x148>
 800abd2:	6833      	ldr	r3, [r6, #0]
 800abd4:	1d1a      	adds	r2, r3, #4
 800abd6:	6032      	str	r2, [r6, #0]
 800abd8:	681e      	ldr	r6, [r3, #0]
 800abda:	6862      	ldr	r2, [r4, #4]
 800abdc:	2100      	movs	r1, #0
 800abde:	4630      	mov	r0, r6
 800abe0:	f7f5 fb2e 	bl	8000240 <memchr>
 800abe4:	b108      	cbz	r0, 800abea <_printf_i+0x1e6>
 800abe6:	1b80      	subs	r0, r0, r6
 800abe8:	6060      	str	r0, [r4, #4]
 800abea:	6863      	ldr	r3, [r4, #4]
 800abec:	6123      	str	r3, [r4, #16]
 800abee:	2300      	movs	r3, #0
 800abf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abf4:	e7aa      	b.n	800ab4c <_printf_i+0x148>
 800abf6:	6923      	ldr	r3, [r4, #16]
 800abf8:	4632      	mov	r2, r6
 800abfa:	4649      	mov	r1, r9
 800abfc:	4640      	mov	r0, r8
 800abfe:	47d0      	blx	sl
 800ac00:	3001      	adds	r0, #1
 800ac02:	d0ad      	beq.n	800ab60 <_printf_i+0x15c>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	079b      	lsls	r3, r3, #30
 800ac08:	d413      	bmi.n	800ac32 <_printf_i+0x22e>
 800ac0a:	68e0      	ldr	r0, [r4, #12]
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	4298      	cmp	r0, r3
 800ac10:	bfb8      	it	lt
 800ac12:	4618      	movlt	r0, r3
 800ac14:	e7a6      	b.n	800ab64 <_printf_i+0x160>
 800ac16:	2301      	movs	r3, #1
 800ac18:	4632      	mov	r2, r6
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	47d0      	blx	sl
 800ac20:	3001      	adds	r0, #1
 800ac22:	d09d      	beq.n	800ab60 <_printf_i+0x15c>
 800ac24:	3501      	adds	r5, #1
 800ac26:	68e3      	ldr	r3, [r4, #12]
 800ac28:	9903      	ldr	r1, [sp, #12]
 800ac2a:	1a5b      	subs	r3, r3, r1
 800ac2c:	42ab      	cmp	r3, r5
 800ac2e:	dcf2      	bgt.n	800ac16 <_printf_i+0x212>
 800ac30:	e7eb      	b.n	800ac0a <_printf_i+0x206>
 800ac32:	2500      	movs	r5, #0
 800ac34:	f104 0619 	add.w	r6, r4, #25
 800ac38:	e7f5      	b.n	800ac26 <_printf_i+0x222>
 800ac3a:	bf00      	nop
 800ac3c:	0800d4eb 	.word	0x0800d4eb
 800ac40:	0800d4fc 	.word	0x0800d4fc

0800ac44 <std>:
 800ac44:	2300      	movs	r3, #0
 800ac46:	b510      	push	{r4, lr}
 800ac48:	4604      	mov	r4, r0
 800ac4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac52:	6083      	str	r3, [r0, #8]
 800ac54:	8181      	strh	r1, [r0, #12]
 800ac56:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac58:	81c2      	strh	r2, [r0, #14]
 800ac5a:	6183      	str	r3, [r0, #24]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	2208      	movs	r2, #8
 800ac60:	305c      	adds	r0, #92	@ 0x5c
 800ac62:	f000 f926 	bl	800aeb2 <memset>
 800ac66:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <std+0x58>)
 800ac68:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aca0 <std+0x5c>)
 800ac6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aca4 <std+0x60>)
 800ac70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac72:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <std+0x64>)
 800ac74:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac76:	4b0d      	ldr	r3, [pc, #52]	@ (800acac <std+0x68>)
 800ac78:	6224      	str	r4, [r4, #32]
 800ac7a:	429c      	cmp	r4, r3
 800ac7c:	d006      	beq.n	800ac8c <std+0x48>
 800ac7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac82:	4294      	cmp	r4, r2
 800ac84:	d002      	beq.n	800ac8c <std+0x48>
 800ac86:	33d0      	adds	r3, #208	@ 0xd0
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	d105      	bne.n	800ac98 <std+0x54>
 800ac8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac94:	f000 b9e6 	b.w	800b064 <__retarget_lock_init_recursive>
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	bf00      	nop
 800ac9c:	0800ae2d 	.word	0x0800ae2d
 800aca0:	0800ae4f 	.word	0x0800ae4f
 800aca4:	0800ae87 	.word	0x0800ae87
 800aca8:	0800aeab 	.word	0x0800aeab
 800acac:	2000062c 	.word	0x2000062c

0800acb0 <stdio_exit_handler>:
 800acb0:	4a02      	ldr	r2, [pc, #8]	@ (800acbc <stdio_exit_handler+0xc>)
 800acb2:	4903      	ldr	r1, [pc, #12]	@ (800acc0 <stdio_exit_handler+0x10>)
 800acb4:	4803      	ldr	r0, [pc, #12]	@ (800acc4 <stdio_exit_handler+0x14>)
 800acb6:	f000 b869 	b.w	800ad8c <_fwalk_sglue>
 800acba:	bf00      	nop
 800acbc:	20000010 	.word	0x20000010
 800acc0:	0800cc81 	.word	0x0800cc81
 800acc4:	20000020 	.word	0x20000020

0800acc8 <cleanup_stdio>:
 800acc8:	6841      	ldr	r1, [r0, #4]
 800acca:	4b0c      	ldr	r3, [pc, #48]	@ (800acfc <cleanup_stdio+0x34>)
 800accc:	4299      	cmp	r1, r3
 800acce:	b510      	push	{r4, lr}
 800acd0:	4604      	mov	r4, r0
 800acd2:	d001      	beq.n	800acd8 <cleanup_stdio+0x10>
 800acd4:	f001 ffd4 	bl	800cc80 <_fflush_r>
 800acd8:	68a1      	ldr	r1, [r4, #8]
 800acda:	4b09      	ldr	r3, [pc, #36]	@ (800ad00 <cleanup_stdio+0x38>)
 800acdc:	4299      	cmp	r1, r3
 800acde:	d002      	beq.n	800ace6 <cleanup_stdio+0x1e>
 800ace0:	4620      	mov	r0, r4
 800ace2:	f001 ffcd 	bl	800cc80 <_fflush_r>
 800ace6:	68e1      	ldr	r1, [r4, #12]
 800ace8:	4b06      	ldr	r3, [pc, #24]	@ (800ad04 <cleanup_stdio+0x3c>)
 800acea:	4299      	cmp	r1, r3
 800acec:	d004      	beq.n	800acf8 <cleanup_stdio+0x30>
 800acee:	4620      	mov	r0, r4
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	f001 bfc4 	b.w	800cc80 <_fflush_r>
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	2000062c 	.word	0x2000062c
 800ad00:	20000694 	.word	0x20000694
 800ad04:	200006fc 	.word	0x200006fc

0800ad08 <global_stdio_init.part.0>:
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad38 <global_stdio_init.part.0+0x30>)
 800ad0c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad3c <global_stdio_init.part.0+0x34>)
 800ad0e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad40 <global_stdio_init.part.0+0x38>)
 800ad10:	601a      	str	r2, [r3, #0]
 800ad12:	4620      	mov	r0, r4
 800ad14:	2200      	movs	r2, #0
 800ad16:	2104      	movs	r1, #4
 800ad18:	f7ff ff94 	bl	800ac44 <std>
 800ad1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad20:	2201      	movs	r2, #1
 800ad22:	2109      	movs	r1, #9
 800ad24:	f7ff ff8e 	bl	800ac44 <std>
 800ad28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad32:	2112      	movs	r1, #18
 800ad34:	f7ff bf86 	b.w	800ac44 <std>
 800ad38:	20000764 	.word	0x20000764
 800ad3c:	2000062c 	.word	0x2000062c
 800ad40:	0800acb1 	.word	0x0800acb1

0800ad44 <__sfp_lock_acquire>:
 800ad44:	4801      	ldr	r0, [pc, #4]	@ (800ad4c <__sfp_lock_acquire+0x8>)
 800ad46:	f000 b98e 	b.w	800b066 <__retarget_lock_acquire_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	2000076d 	.word	0x2000076d

0800ad50 <__sfp_lock_release>:
 800ad50:	4801      	ldr	r0, [pc, #4]	@ (800ad58 <__sfp_lock_release+0x8>)
 800ad52:	f000 b989 	b.w	800b068 <__retarget_lock_release_recursive>
 800ad56:	bf00      	nop
 800ad58:	2000076d 	.word	0x2000076d

0800ad5c <__sinit>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	4604      	mov	r4, r0
 800ad60:	f7ff fff0 	bl	800ad44 <__sfp_lock_acquire>
 800ad64:	6a23      	ldr	r3, [r4, #32]
 800ad66:	b11b      	cbz	r3, 800ad70 <__sinit+0x14>
 800ad68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad6c:	f7ff bff0 	b.w	800ad50 <__sfp_lock_release>
 800ad70:	4b04      	ldr	r3, [pc, #16]	@ (800ad84 <__sinit+0x28>)
 800ad72:	6223      	str	r3, [r4, #32]
 800ad74:	4b04      	ldr	r3, [pc, #16]	@ (800ad88 <__sinit+0x2c>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1f5      	bne.n	800ad68 <__sinit+0xc>
 800ad7c:	f7ff ffc4 	bl	800ad08 <global_stdio_init.part.0>
 800ad80:	e7f2      	b.n	800ad68 <__sinit+0xc>
 800ad82:	bf00      	nop
 800ad84:	0800acc9 	.word	0x0800acc9
 800ad88:	20000764 	.word	0x20000764

0800ad8c <_fwalk_sglue>:
 800ad8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad90:	4607      	mov	r7, r0
 800ad92:	4688      	mov	r8, r1
 800ad94:	4614      	mov	r4, r2
 800ad96:	2600      	movs	r6, #0
 800ad98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad9c:	f1b9 0901 	subs.w	r9, r9, #1
 800ada0:	d505      	bpl.n	800adae <_fwalk_sglue+0x22>
 800ada2:	6824      	ldr	r4, [r4, #0]
 800ada4:	2c00      	cmp	r4, #0
 800ada6:	d1f7      	bne.n	800ad98 <_fwalk_sglue+0xc>
 800ada8:	4630      	mov	r0, r6
 800adaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adae:	89ab      	ldrh	r3, [r5, #12]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d907      	bls.n	800adc4 <_fwalk_sglue+0x38>
 800adb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adb8:	3301      	adds	r3, #1
 800adba:	d003      	beq.n	800adc4 <_fwalk_sglue+0x38>
 800adbc:	4629      	mov	r1, r5
 800adbe:	4638      	mov	r0, r7
 800adc0:	47c0      	blx	r8
 800adc2:	4306      	orrs	r6, r0
 800adc4:	3568      	adds	r5, #104	@ 0x68
 800adc6:	e7e9      	b.n	800ad9c <_fwalk_sglue+0x10>

0800adc8 <iprintf>:
 800adc8:	b40f      	push	{r0, r1, r2, r3}
 800adca:	b507      	push	{r0, r1, r2, lr}
 800adcc:	4906      	ldr	r1, [pc, #24]	@ (800ade8 <iprintf+0x20>)
 800adce:	ab04      	add	r3, sp, #16
 800add0:	6808      	ldr	r0, [r1, #0]
 800add2:	f853 2b04 	ldr.w	r2, [r3], #4
 800add6:	6881      	ldr	r1, [r0, #8]
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	f001 fdb5 	bl	800c948 <_vfiprintf_r>
 800adde:	b003      	add	sp, #12
 800ade0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ade4:	b004      	add	sp, #16
 800ade6:	4770      	bx	lr
 800ade8:	2000001c 	.word	0x2000001c

0800adec <siprintf>:
 800adec:	b40e      	push	{r1, r2, r3}
 800adee:	b500      	push	{lr}
 800adf0:	b09c      	sub	sp, #112	@ 0x70
 800adf2:	ab1d      	add	r3, sp, #116	@ 0x74
 800adf4:	9002      	str	r0, [sp, #8]
 800adf6:	9006      	str	r0, [sp, #24]
 800adf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800adfc:	4809      	ldr	r0, [pc, #36]	@ (800ae24 <siprintf+0x38>)
 800adfe:	9107      	str	r1, [sp, #28]
 800ae00:	9104      	str	r1, [sp, #16]
 800ae02:	4909      	ldr	r1, [pc, #36]	@ (800ae28 <siprintf+0x3c>)
 800ae04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae08:	9105      	str	r1, [sp, #20]
 800ae0a:	6800      	ldr	r0, [r0, #0]
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	a902      	add	r1, sp, #8
 800ae10:	f001 fc74 	bl	800c6fc <_svfiprintf_r>
 800ae14:	9b02      	ldr	r3, [sp, #8]
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	b01c      	add	sp, #112	@ 0x70
 800ae1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae20:	b003      	add	sp, #12
 800ae22:	4770      	bx	lr
 800ae24:	2000001c 	.word	0x2000001c
 800ae28:	ffff0208 	.word	0xffff0208

0800ae2c <__sread>:
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	460c      	mov	r4, r1
 800ae30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae34:	f000 f8c8 	bl	800afc8 <_read_r>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	bfab      	itete	ge
 800ae3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae3e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae40:	181b      	addge	r3, r3, r0
 800ae42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae46:	bfac      	ite	ge
 800ae48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae4a:	81a3      	strhlt	r3, [r4, #12]
 800ae4c:	bd10      	pop	{r4, pc}

0800ae4e <__swrite>:
 800ae4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae52:	461f      	mov	r7, r3
 800ae54:	898b      	ldrh	r3, [r1, #12]
 800ae56:	05db      	lsls	r3, r3, #23
 800ae58:	4605      	mov	r5, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	4616      	mov	r6, r2
 800ae5e:	d505      	bpl.n	800ae6c <__swrite+0x1e>
 800ae60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae64:	2302      	movs	r3, #2
 800ae66:	2200      	movs	r2, #0
 800ae68:	f000 f89c 	bl	800afa4 <_lseek_r>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	4632      	mov	r2, r6
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae82:	f000 b8b3 	b.w	800afec <_write_r>

0800ae86 <__sseek>:
 800ae86:	b510      	push	{r4, lr}
 800ae88:	460c      	mov	r4, r1
 800ae8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8e:	f000 f889 	bl	800afa4 <_lseek_r>
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	bf15      	itete	ne
 800ae98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aea2:	81a3      	strheq	r3, [r4, #12]
 800aea4:	bf18      	it	ne
 800aea6:	81a3      	strhne	r3, [r4, #12]
 800aea8:	bd10      	pop	{r4, pc}

0800aeaa <__sclose>:
 800aeaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeae:	f000 b869 	b.w	800af84 <_close_r>

0800aeb2 <memset>:
 800aeb2:	4402      	add	r2, r0
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d100      	bne.n	800aebc <memset+0xa>
 800aeba:	4770      	bx	lr
 800aebc:	f803 1b01 	strb.w	r1, [r3], #1
 800aec0:	e7f9      	b.n	800aeb6 <memset+0x4>
	...

0800aec4 <strtok>:
 800aec4:	4b16      	ldr	r3, [pc, #88]	@ (800af20 <strtok+0x5c>)
 800aec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	681f      	ldr	r7, [r3, #0]
 800aecc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800aece:	4605      	mov	r5, r0
 800aed0:	460e      	mov	r6, r1
 800aed2:	b9ec      	cbnz	r4, 800af10 <strtok+0x4c>
 800aed4:	2050      	movs	r0, #80	@ 0x50
 800aed6:	f000 ff7d 	bl	800bdd4 <malloc>
 800aeda:	4602      	mov	r2, r0
 800aedc:	6478      	str	r0, [r7, #68]	@ 0x44
 800aede:	b920      	cbnz	r0, 800aeea <strtok+0x26>
 800aee0:	4b10      	ldr	r3, [pc, #64]	@ (800af24 <strtok+0x60>)
 800aee2:	4811      	ldr	r0, [pc, #68]	@ (800af28 <strtok+0x64>)
 800aee4:	215b      	movs	r1, #91	@ 0x5b
 800aee6:	f000 f8c1 	bl	800b06c <__assert_func>
 800aeea:	e9c0 4400 	strd	r4, r4, [r0]
 800aeee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aef2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aef6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800aefa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800aefe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800af02:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800af06:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800af0a:	6184      	str	r4, [r0, #24]
 800af0c:	7704      	strb	r4, [r0, #28]
 800af0e:	6244      	str	r4, [r0, #36]	@ 0x24
 800af10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af12:	4631      	mov	r1, r6
 800af14:	4628      	mov	r0, r5
 800af16:	2301      	movs	r3, #1
 800af18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af1c:	f000 b806 	b.w	800af2c <__strtok_r>
 800af20:	2000001c 	.word	0x2000001c
 800af24:	0800d50d 	.word	0x0800d50d
 800af28:	0800d524 	.word	0x0800d524

0800af2c <__strtok_r>:
 800af2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af2e:	4604      	mov	r4, r0
 800af30:	b908      	cbnz	r0, 800af36 <__strtok_r+0xa>
 800af32:	6814      	ldr	r4, [r2, #0]
 800af34:	b144      	cbz	r4, 800af48 <__strtok_r+0x1c>
 800af36:	4620      	mov	r0, r4
 800af38:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af3c:	460f      	mov	r7, r1
 800af3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af42:	b91e      	cbnz	r6, 800af4c <__strtok_r+0x20>
 800af44:	b965      	cbnz	r5, 800af60 <__strtok_r+0x34>
 800af46:	6015      	str	r5, [r2, #0]
 800af48:	2000      	movs	r0, #0
 800af4a:	e005      	b.n	800af58 <__strtok_r+0x2c>
 800af4c:	42b5      	cmp	r5, r6
 800af4e:	d1f6      	bne.n	800af3e <__strtok_r+0x12>
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1f0      	bne.n	800af36 <__strtok_r+0xa>
 800af54:	6014      	str	r4, [r2, #0]
 800af56:	7003      	strb	r3, [r0, #0]
 800af58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af5a:	461c      	mov	r4, r3
 800af5c:	e00c      	b.n	800af78 <__strtok_r+0x4c>
 800af5e:	b915      	cbnz	r5, 800af66 <__strtok_r+0x3a>
 800af60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af64:	460e      	mov	r6, r1
 800af66:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af6a:	42ab      	cmp	r3, r5
 800af6c:	d1f7      	bne.n	800af5e <__strtok_r+0x32>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0f3      	beq.n	800af5a <__strtok_r+0x2e>
 800af72:	2300      	movs	r3, #0
 800af74:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af78:	6014      	str	r4, [r2, #0]
 800af7a:	e7ed      	b.n	800af58 <__strtok_r+0x2c>

0800af7c <_localeconv_r>:
 800af7c:	4800      	ldr	r0, [pc, #0]	@ (800af80 <_localeconv_r+0x4>)
 800af7e:	4770      	bx	lr
 800af80:	2000015c 	.word	0x2000015c

0800af84 <_close_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d06      	ldr	r5, [pc, #24]	@ (800afa0 <_close_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	f7f6 ff66 	bl	8001e60 <_close>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_close_r+0x1a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_close_r+0x1a>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20000768 	.word	0x20000768

0800afa4 <_lseek_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d07      	ldr	r5, [pc, #28]	@ (800afc4 <_lseek_r+0x20>)
 800afa8:	4604      	mov	r4, r0
 800afaa:	4608      	mov	r0, r1
 800afac:	4611      	mov	r1, r2
 800afae:	2200      	movs	r2, #0
 800afb0:	602a      	str	r2, [r5, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	f7f6 ff7b 	bl	8001eae <_lseek>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_lseek_r+0x1e>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_lseek_r+0x1e>
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	20000768 	.word	0x20000768

0800afc8 <_read_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	@ (800afe8 <_read_r+0x20>)
 800afcc:	4604      	mov	r4, r0
 800afce:	4608      	mov	r0, r1
 800afd0:	4611      	mov	r1, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f7f6 ff09 	bl	8001dee <_read>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_read_r+0x1e>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_read_r+0x1e>
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	20000768 	.word	0x20000768

0800afec <_write_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d07      	ldr	r5, [pc, #28]	@ (800b00c <_write_r+0x20>)
 800aff0:	4604      	mov	r4, r0
 800aff2:	4608      	mov	r0, r1
 800aff4:	4611      	mov	r1, r2
 800aff6:	2200      	movs	r2, #0
 800aff8:	602a      	str	r2, [r5, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	f7f6 ff14 	bl	8001e28 <_write>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_write_r+0x1e>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b103      	cbz	r3, 800b00a <_write_r+0x1e>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	20000768 	.word	0x20000768

0800b010 <__errno>:
 800b010:	4b01      	ldr	r3, [pc, #4]	@ (800b018 <__errno+0x8>)
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	2000001c 	.word	0x2000001c

0800b01c <__libc_init_array>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	4d0d      	ldr	r5, [pc, #52]	@ (800b054 <__libc_init_array+0x38>)
 800b020:	4c0d      	ldr	r4, [pc, #52]	@ (800b058 <__libc_init_array+0x3c>)
 800b022:	1b64      	subs	r4, r4, r5
 800b024:	10a4      	asrs	r4, r4, #2
 800b026:	2600      	movs	r6, #0
 800b028:	42a6      	cmp	r6, r4
 800b02a:	d109      	bne.n	800b040 <__libc_init_array+0x24>
 800b02c:	4d0b      	ldr	r5, [pc, #44]	@ (800b05c <__libc_init_array+0x40>)
 800b02e:	4c0c      	ldr	r4, [pc, #48]	@ (800b060 <__libc_init_array+0x44>)
 800b030:	f002 f864 	bl	800d0fc <_init>
 800b034:	1b64      	subs	r4, r4, r5
 800b036:	10a4      	asrs	r4, r4, #2
 800b038:	2600      	movs	r6, #0
 800b03a:	42a6      	cmp	r6, r4
 800b03c:	d105      	bne.n	800b04a <__libc_init_array+0x2e>
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	f855 3b04 	ldr.w	r3, [r5], #4
 800b044:	4798      	blx	r3
 800b046:	3601      	adds	r6, #1
 800b048:	e7ee      	b.n	800b028 <__libc_init_array+0xc>
 800b04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b04e:	4798      	blx	r3
 800b050:	3601      	adds	r6, #1
 800b052:	e7f2      	b.n	800b03a <__libc_init_array+0x1e>
 800b054:	0800d7ac 	.word	0x0800d7ac
 800b058:	0800d7ac 	.word	0x0800d7ac
 800b05c:	0800d7ac 	.word	0x0800d7ac
 800b060:	0800d7b0 	.word	0x0800d7b0

0800b064 <__retarget_lock_init_recursive>:
 800b064:	4770      	bx	lr

0800b066 <__retarget_lock_acquire_recursive>:
 800b066:	4770      	bx	lr

0800b068 <__retarget_lock_release_recursive>:
 800b068:	4770      	bx	lr
	...

0800b06c <__assert_func>:
 800b06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b06e:	4614      	mov	r4, r2
 800b070:	461a      	mov	r2, r3
 800b072:	4b09      	ldr	r3, [pc, #36]	@ (800b098 <__assert_func+0x2c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4605      	mov	r5, r0
 800b078:	68d8      	ldr	r0, [r3, #12]
 800b07a:	b954      	cbnz	r4, 800b092 <__assert_func+0x26>
 800b07c:	4b07      	ldr	r3, [pc, #28]	@ (800b09c <__assert_func+0x30>)
 800b07e:	461c      	mov	r4, r3
 800b080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b084:	9100      	str	r1, [sp, #0]
 800b086:	462b      	mov	r3, r5
 800b088:	4905      	ldr	r1, [pc, #20]	@ (800b0a0 <__assert_func+0x34>)
 800b08a:	f001 fe21 	bl	800ccd0 <fiprintf>
 800b08e:	f001 fefd 	bl	800ce8c <abort>
 800b092:	4b04      	ldr	r3, [pc, #16]	@ (800b0a4 <__assert_func+0x38>)
 800b094:	e7f4      	b.n	800b080 <__assert_func+0x14>
 800b096:	bf00      	nop
 800b098:	2000001c 	.word	0x2000001c
 800b09c:	0800d5b9 	.word	0x0800d5b9
 800b0a0:	0800d58b 	.word	0x0800d58b
 800b0a4:	0800d57e 	.word	0x0800d57e

0800b0a8 <quorem>:
 800b0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	6903      	ldr	r3, [r0, #16]
 800b0ae:	690c      	ldr	r4, [r1, #16]
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	db7e      	blt.n	800b1b4 <quorem+0x10c>
 800b0b6:	3c01      	subs	r4, #1
 800b0b8:	f101 0814 	add.w	r8, r1, #20
 800b0bc:	00a3      	lsls	r3, r4, #2
 800b0be:	f100 0514 	add.w	r5, r0, #20
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0da:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0de:	d32e      	bcc.n	800b13e <quorem+0x96>
 800b0e0:	f04f 0a00 	mov.w	sl, #0
 800b0e4:	46c4      	mov	ip, r8
 800b0e6:	46ae      	mov	lr, r5
 800b0e8:	46d3      	mov	fp, sl
 800b0ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0ee:	b298      	uxth	r0, r3
 800b0f0:	fb06 a000 	mla	r0, r6, r0, sl
 800b0f4:	0c02      	lsrs	r2, r0, #16
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	fb06 2303 	mla	r3, r6, r3, r2
 800b0fc:	f8de 2000 	ldr.w	r2, [lr]
 800b100:	b280      	uxth	r0, r0
 800b102:	b292      	uxth	r2, r2
 800b104:	1a12      	subs	r2, r2, r0
 800b106:	445a      	add	r2, fp
 800b108:	f8de 0000 	ldr.w	r0, [lr]
 800b10c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b110:	b29b      	uxth	r3, r3
 800b112:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b116:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b11a:	b292      	uxth	r2, r2
 800b11c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b120:	45e1      	cmp	r9, ip
 800b122:	f84e 2b04 	str.w	r2, [lr], #4
 800b126:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b12a:	d2de      	bcs.n	800b0ea <quorem+0x42>
 800b12c:	9b00      	ldr	r3, [sp, #0]
 800b12e:	58eb      	ldr	r3, [r5, r3]
 800b130:	b92b      	cbnz	r3, 800b13e <quorem+0x96>
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	3b04      	subs	r3, #4
 800b136:	429d      	cmp	r5, r3
 800b138:	461a      	mov	r2, r3
 800b13a:	d32f      	bcc.n	800b19c <quorem+0xf4>
 800b13c:	613c      	str	r4, [r7, #16]
 800b13e:	4638      	mov	r0, r7
 800b140:	f001 f978 	bl	800c434 <__mcmp>
 800b144:	2800      	cmp	r0, #0
 800b146:	db25      	blt.n	800b194 <quorem+0xec>
 800b148:	4629      	mov	r1, r5
 800b14a:	2000      	movs	r0, #0
 800b14c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b150:	f8d1 c000 	ldr.w	ip, [r1]
 800b154:	fa1f fe82 	uxth.w	lr, r2
 800b158:	fa1f f38c 	uxth.w	r3, ip
 800b15c:	eba3 030e 	sub.w	r3, r3, lr
 800b160:	4403      	add	r3, r0
 800b162:	0c12      	lsrs	r2, r2, #16
 800b164:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b168:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b172:	45c1      	cmp	r9, r8
 800b174:	f841 3b04 	str.w	r3, [r1], #4
 800b178:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b17c:	d2e6      	bcs.n	800b14c <quorem+0xa4>
 800b17e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b186:	b922      	cbnz	r2, 800b192 <quorem+0xea>
 800b188:	3b04      	subs	r3, #4
 800b18a:	429d      	cmp	r5, r3
 800b18c:	461a      	mov	r2, r3
 800b18e:	d30b      	bcc.n	800b1a8 <quorem+0x100>
 800b190:	613c      	str	r4, [r7, #16]
 800b192:	3601      	adds	r6, #1
 800b194:	4630      	mov	r0, r6
 800b196:	b003      	add	sp, #12
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	3b04      	subs	r3, #4
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	d1cb      	bne.n	800b13c <quorem+0x94>
 800b1a4:	3c01      	subs	r4, #1
 800b1a6:	e7c6      	b.n	800b136 <quorem+0x8e>
 800b1a8:	6812      	ldr	r2, [r2, #0]
 800b1aa:	3b04      	subs	r3, #4
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	d1ef      	bne.n	800b190 <quorem+0xe8>
 800b1b0:	3c01      	subs	r4, #1
 800b1b2:	e7ea      	b.n	800b18a <quorem+0xe2>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7ee      	b.n	800b196 <quorem+0xee>

0800b1b8 <_dtoa_r>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	69c7      	ldr	r7, [r0, #28]
 800b1be:	b099      	sub	sp, #100	@ 0x64
 800b1c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1c4:	ec55 4b10 	vmov	r4, r5, d0
 800b1c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1cc:	4683      	mov	fp, r0
 800b1ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1d2:	b97f      	cbnz	r7, 800b1f4 <_dtoa_r+0x3c>
 800b1d4:	2010      	movs	r0, #16
 800b1d6:	f000 fdfd 	bl	800bdd4 <malloc>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b1e0:	b920      	cbnz	r0, 800b1ec <_dtoa_r+0x34>
 800b1e2:	4ba7      	ldr	r3, [pc, #668]	@ (800b480 <_dtoa_r+0x2c8>)
 800b1e4:	21ef      	movs	r1, #239	@ 0xef
 800b1e6:	48a7      	ldr	r0, [pc, #668]	@ (800b484 <_dtoa_r+0x2cc>)
 800b1e8:	f7ff ff40 	bl	800b06c <__assert_func>
 800b1ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b1f0:	6007      	str	r7, [r0, #0]
 800b1f2:	60c7      	str	r7, [r0, #12]
 800b1f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1f8:	6819      	ldr	r1, [r3, #0]
 800b1fa:	b159      	cbz	r1, 800b214 <_dtoa_r+0x5c>
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	604a      	str	r2, [r1, #4]
 800b200:	2301      	movs	r3, #1
 800b202:	4093      	lsls	r3, r2
 800b204:	608b      	str	r3, [r1, #8]
 800b206:	4658      	mov	r0, fp
 800b208:	f000 feda 	bl	800bfc0 <_Bfree>
 800b20c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b210:	2200      	movs	r2, #0
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	1e2b      	subs	r3, r5, #0
 800b216:	bfb9      	ittee	lt
 800b218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b21c:	9303      	strlt	r3, [sp, #12]
 800b21e:	2300      	movge	r3, #0
 800b220:	6033      	strge	r3, [r6, #0]
 800b222:	9f03      	ldr	r7, [sp, #12]
 800b224:	4b98      	ldr	r3, [pc, #608]	@ (800b488 <_dtoa_r+0x2d0>)
 800b226:	bfbc      	itt	lt
 800b228:	2201      	movlt	r2, #1
 800b22a:	6032      	strlt	r2, [r6, #0]
 800b22c:	43bb      	bics	r3, r7
 800b22e:	d112      	bne.n	800b256 <_dtoa_r+0x9e>
 800b230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b232:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b23c:	4323      	orrs	r3, r4
 800b23e:	f000 854d 	beq.w	800bcdc <_dtoa_r+0xb24>
 800b242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b49c <_dtoa_r+0x2e4>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 854f 	beq.w	800bcec <_dtoa_r+0xb34>
 800b24e:	f10a 0303 	add.w	r3, sl, #3
 800b252:	f000 bd49 	b.w	800bce8 <_dtoa_r+0xb30>
 800b256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b25a:	2200      	movs	r2, #0
 800b25c:	ec51 0b17 	vmov	r0, r1, d7
 800b260:	2300      	movs	r3, #0
 800b262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b266:	f7f5 fc67 	bl	8000b38 <__aeabi_dcmpeq>
 800b26a:	4680      	mov	r8, r0
 800b26c:	b158      	cbz	r0, 800b286 <_dtoa_r+0xce>
 800b26e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b270:	2301      	movs	r3, #1
 800b272:	6013      	str	r3, [r2, #0]
 800b274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b276:	b113      	cbz	r3, 800b27e <_dtoa_r+0xc6>
 800b278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b27a:	4b84      	ldr	r3, [pc, #528]	@ (800b48c <_dtoa_r+0x2d4>)
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4a0 <_dtoa_r+0x2e8>
 800b282:	f000 bd33 	b.w	800bcec <_dtoa_r+0xb34>
 800b286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b28a:	aa16      	add	r2, sp, #88	@ 0x58
 800b28c:	a917      	add	r1, sp, #92	@ 0x5c
 800b28e:	4658      	mov	r0, fp
 800b290:	f001 f980 	bl	800c594 <__d2b>
 800b294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b298:	4681      	mov	r9, r0
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	d077      	beq.n	800b38e <_dtoa_r+0x1d6>
 800b29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4b74      	ldr	r3, [pc, #464]	@ (800b490 <_dtoa_r+0x2d8>)
 800b2be:	f7f5 f81b 	bl	80002f8 <__aeabi_dsub>
 800b2c2:	a369      	add	r3, pc, #420	@ (adr r3, 800b468 <_dtoa_r+0x2b0>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f7f5 f9ce 	bl	8000668 <__aeabi_dmul>
 800b2cc:	a368      	add	r3, pc, #416	@ (adr r3, 800b470 <_dtoa_r+0x2b8>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f5 f813 	bl	80002fc <__adddf3>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4630      	mov	r0, r6
 800b2da:	460d      	mov	r5, r1
 800b2dc:	f7f5 f95a 	bl	8000594 <__aeabi_i2d>
 800b2e0:	a365      	add	r3, pc, #404	@ (adr r3, 800b478 <_dtoa_r+0x2c0>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f5 f9bf 	bl	8000668 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f5 f803 	bl	80002fc <__adddf3>
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	f7f5 fc65 	bl	8000bc8 <__aeabi_d2iz>
 800b2fe:	2200      	movs	r2, #0
 800b300:	4607      	mov	r7, r0
 800b302:	2300      	movs	r3, #0
 800b304:	4620      	mov	r0, r4
 800b306:	4629      	mov	r1, r5
 800b308:	f7f5 fc20 	bl	8000b4c <__aeabi_dcmplt>
 800b30c:	b140      	cbz	r0, 800b320 <_dtoa_r+0x168>
 800b30e:	4638      	mov	r0, r7
 800b310:	f7f5 f940 	bl	8000594 <__aeabi_i2d>
 800b314:	4622      	mov	r2, r4
 800b316:	462b      	mov	r3, r5
 800b318:	f7f5 fc0e 	bl	8000b38 <__aeabi_dcmpeq>
 800b31c:	b900      	cbnz	r0, 800b320 <_dtoa_r+0x168>
 800b31e:	3f01      	subs	r7, #1
 800b320:	2f16      	cmp	r7, #22
 800b322:	d851      	bhi.n	800b3c8 <_dtoa_r+0x210>
 800b324:	4b5b      	ldr	r3, [pc, #364]	@ (800b494 <_dtoa_r+0x2dc>)
 800b326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b332:	f7f5 fc0b 	bl	8000b4c <__aeabi_dcmplt>
 800b336:	2800      	cmp	r0, #0
 800b338:	d048      	beq.n	800b3cc <_dtoa_r+0x214>
 800b33a:	3f01      	subs	r7, #1
 800b33c:	2300      	movs	r3, #0
 800b33e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b342:	1b9b      	subs	r3, r3, r6
 800b344:	1e5a      	subs	r2, r3, #1
 800b346:	bf44      	itt	mi
 800b348:	f1c3 0801 	rsbmi	r8, r3, #1
 800b34c:	2300      	movmi	r3, #0
 800b34e:	9208      	str	r2, [sp, #32]
 800b350:	bf54      	ite	pl
 800b352:	f04f 0800 	movpl.w	r8, #0
 800b356:	9308      	strmi	r3, [sp, #32]
 800b358:	2f00      	cmp	r7, #0
 800b35a:	db39      	blt.n	800b3d0 <_dtoa_r+0x218>
 800b35c:	9b08      	ldr	r3, [sp, #32]
 800b35e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b360:	443b      	add	r3, r7
 800b362:	9308      	str	r3, [sp, #32]
 800b364:	2300      	movs	r3, #0
 800b366:	930a      	str	r3, [sp, #40]	@ 0x28
 800b368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36a:	2b09      	cmp	r3, #9
 800b36c:	d864      	bhi.n	800b438 <_dtoa_r+0x280>
 800b36e:	2b05      	cmp	r3, #5
 800b370:	bfc4      	itt	gt
 800b372:	3b04      	subgt	r3, #4
 800b374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b378:	f1a3 0302 	sub.w	r3, r3, #2
 800b37c:	bfcc      	ite	gt
 800b37e:	2400      	movgt	r4, #0
 800b380:	2401      	movle	r4, #1
 800b382:	2b03      	cmp	r3, #3
 800b384:	d863      	bhi.n	800b44e <_dtoa_r+0x296>
 800b386:	e8df f003 	tbb	[pc, r3]
 800b38a:	372a      	.short	0x372a
 800b38c:	5535      	.short	0x5535
 800b38e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b392:	441e      	add	r6, r3
 800b394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b398:	2b20      	cmp	r3, #32
 800b39a:	bfc1      	itttt	gt
 800b39c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3a0:	409f      	lslgt	r7, r3
 800b3a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3aa:	bfd6      	itet	le
 800b3ac:	f1c3 0320 	rsble	r3, r3, #32
 800b3b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3b4:	fa04 f003 	lslle.w	r0, r4, r3
 800b3b8:	f7f5 f8dc 	bl	8000574 <__aeabi_ui2d>
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3c2:	3e01      	subs	r6, #1
 800b3c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3c6:	e777      	b.n	800b2b8 <_dtoa_r+0x100>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e7b8      	b.n	800b33e <_dtoa_r+0x186>
 800b3cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3ce:	e7b7      	b.n	800b340 <_dtoa_r+0x188>
 800b3d0:	427b      	negs	r3, r7
 800b3d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	eba8 0807 	sub.w	r8, r8, r7
 800b3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3dc:	e7c4      	b.n	800b368 <_dtoa_r+0x1b0>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dc35      	bgt.n	800b454 <_dtoa_r+0x29c>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	9307      	str	r3, [sp, #28]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3f2:	e00b      	b.n	800b40c <_dtoa_r+0x254>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e7f3      	b.n	800b3e0 <_dtoa_r+0x228>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3fe:	18fb      	adds	r3, r7, r3
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	2b01      	cmp	r3, #1
 800b406:	9307      	str	r3, [sp, #28]
 800b408:	bfb8      	it	lt
 800b40a:	2301      	movlt	r3, #1
 800b40c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b410:	2100      	movs	r1, #0
 800b412:	2204      	movs	r2, #4
 800b414:	f102 0514 	add.w	r5, r2, #20
 800b418:	429d      	cmp	r5, r3
 800b41a:	d91f      	bls.n	800b45c <_dtoa_r+0x2a4>
 800b41c:	6041      	str	r1, [r0, #4]
 800b41e:	4658      	mov	r0, fp
 800b420:	f000 fd8e 	bl	800bf40 <_Balloc>
 800b424:	4682      	mov	sl, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	d13c      	bne.n	800b4a4 <_dtoa_r+0x2ec>
 800b42a:	4b1b      	ldr	r3, [pc, #108]	@ (800b498 <_dtoa_r+0x2e0>)
 800b42c:	4602      	mov	r2, r0
 800b42e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b432:	e6d8      	b.n	800b1e6 <_dtoa_r+0x2e>
 800b434:	2301      	movs	r3, #1
 800b436:	e7e0      	b.n	800b3fa <_dtoa_r+0x242>
 800b438:	2401      	movs	r4, #1
 800b43a:	2300      	movs	r3, #0
 800b43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b43e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	9307      	str	r3, [sp, #28]
 800b448:	2200      	movs	r2, #0
 800b44a:	2312      	movs	r3, #18
 800b44c:	e7d0      	b.n	800b3f0 <_dtoa_r+0x238>
 800b44e:	2301      	movs	r3, #1
 800b450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b452:	e7f5      	b.n	800b440 <_dtoa_r+0x288>
 800b454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	9307      	str	r3, [sp, #28]
 800b45a:	e7d7      	b.n	800b40c <_dtoa_r+0x254>
 800b45c:	3101      	adds	r1, #1
 800b45e:	0052      	lsls	r2, r2, #1
 800b460:	e7d8      	b.n	800b414 <_dtoa_r+0x25c>
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
 800b468:	636f4361 	.word	0x636f4361
 800b46c:	3fd287a7 	.word	0x3fd287a7
 800b470:	8b60c8b3 	.word	0x8b60c8b3
 800b474:	3fc68a28 	.word	0x3fc68a28
 800b478:	509f79fb 	.word	0x509f79fb
 800b47c:	3fd34413 	.word	0x3fd34413
 800b480:	0800d50d 	.word	0x0800d50d
 800b484:	0800d5c7 	.word	0x0800d5c7
 800b488:	7ff00000 	.word	0x7ff00000
 800b48c:	0800d4ea 	.word	0x0800d4ea
 800b490:	3ff80000 	.word	0x3ff80000
 800b494:	0800d6c0 	.word	0x0800d6c0
 800b498:	0800d61f 	.word	0x0800d61f
 800b49c:	0800d5c3 	.word	0x0800d5c3
 800b4a0:	0800d4e9 	.word	0x0800d4e9
 800b4a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4a8:	6018      	str	r0, [r3, #0]
 800b4aa:	9b07      	ldr	r3, [sp, #28]
 800b4ac:	2b0e      	cmp	r3, #14
 800b4ae:	f200 80a4 	bhi.w	800b5fa <_dtoa_r+0x442>
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	f000 80a1 	beq.w	800b5fa <_dtoa_r+0x442>
 800b4b8:	2f00      	cmp	r7, #0
 800b4ba:	dd33      	ble.n	800b524 <_dtoa_r+0x36c>
 800b4bc:	4bad      	ldr	r3, [pc, #692]	@ (800b774 <_dtoa_r+0x5bc>)
 800b4be:	f007 020f 	and.w	r2, r7, #15
 800b4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4c6:	ed93 7b00 	vldr	d7, [r3]
 800b4ca:	05f8      	lsls	r0, r7, #23
 800b4cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4d4:	d516      	bpl.n	800b504 <_dtoa_r+0x34c>
 800b4d6:	4ba8      	ldr	r3, [pc, #672]	@ (800b778 <_dtoa_r+0x5c0>)
 800b4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4e0:	f7f5 f9ec 	bl	80008bc <__aeabi_ddiv>
 800b4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4e8:	f004 040f 	and.w	r4, r4, #15
 800b4ec:	2603      	movs	r6, #3
 800b4ee:	4da2      	ldr	r5, [pc, #648]	@ (800b778 <_dtoa_r+0x5c0>)
 800b4f0:	b954      	cbnz	r4, 800b508 <_dtoa_r+0x350>
 800b4f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4fa:	f7f5 f9df 	bl	80008bc <__aeabi_ddiv>
 800b4fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b502:	e028      	b.n	800b556 <_dtoa_r+0x39e>
 800b504:	2602      	movs	r6, #2
 800b506:	e7f2      	b.n	800b4ee <_dtoa_r+0x336>
 800b508:	07e1      	lsls	r1, r4, #31
 800b50a:	d508      	bpl.n	800b51e <_dtoa_r+0x366>
 800b50c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b510:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b514:	f7f5 f8a8 	bl	8000668 <__aeabi_dmul>
 800b518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b51c:	3601      	adds	r6, #1
 800b51e:	1064      	asrs	r4, r4, #1
 800b520:	3508      	adds	r5, #8
 800b522:	e7e5      	b.n	800b4f0 <_dtoa_r+0x338>
 800b524:	f000 80d2 	beq.w	800b6cc <_dtoa_r+0x514>
 800b528:	427c      	negs	r4, r7
 800b52a:	4b92      	ldr	r3, [pc, #584]	@ (800b774 <_dtoa_r+0x5bc>)
 800b52c:	4d92      	ldr	r5, [pc, #584]	@ (800b778 <_dtoa_r+0x5c0>)
 800b52e:	f004 020f 	and.w	r2, r4, #15
 800b532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b53e:	f7f5 f893 	bl	8000668 <__aeabi_dmul>
 800b542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b546:	1124      	asrs	r4, r4, #4
 800b548:	2300      	movs	r3, #0
 800b54a:	2602      	movs	r6, #2
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	f040 80b2 	bne.w	800b6b6 <_dtoa_r+0x4fe>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1d3      	bne.n	800b4fe <_dtoa_r+0x346>
 800b556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 80b7 	beq.w	800b6d0 <_dtoa_r+0x518>
 800b562:	4b86      	ldr	r3, [pc, #536]	@ (800b77c <_dtoa_r+0x5c4>)
 800b564:	2200      	movs	r2, #0
 800b566:	4620      	mov	r0, r4
 800b568:	4629      	mov	r1, r5
 800b56a:	f7f5 faef 	bl	8000b4c <__aeabi_dcmplt>
 800b56e:	2800      	cmp	r0, #0
 800b570:	f000 80ae 	beq.w	800b6d0 <_dtoa_r+0x518>
 800b574:	9b07      	ldr	r3, [sp, #28]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 80aa 	beq.w	800b6d0 <_dtoa_r+0x518>
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dd37      	ble.n	800b5f2 <_dtoa_r+0x43a>
 800b582:	1e7b      	subs	r3, r7, #1
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	4620      	mov	r0, r4
 800b588:	4b7d      	ldr	r3, [pc, #500]	@ (800b780 <_dtoa_r+0x5c8>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	4629      	mov	r1, r5
 800b58e:	f7f5 f86b 	bl	8000668 <__aeabi_dmul>
 800b592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b596:	9c00      	ldr	r4, [sp, #0]
 800b598:	3601      	adds	r6, #1
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7f4 fffa 	bl	8000594 <__aeabi_i2d>
 800b5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5a4:	f7f5 f860 	bl	8000668 <__aeabi_dmul>
 800b5a8:	4b76      	ldr	r3, [pc, #472]	@ (800b784 <_dtoa_r+0x5cc>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f7f4 fea6 	bl	80002fc <__adddf3>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5b6:	2c00      	cmp	r4, #0
 800b5b8:	f040 808d 	bne.w	800b6d6 <_dtoa_r+0x51e>
 800b5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c0:	4b71      	ldr	r3, [pc, #452]	@ (800b788 <_dtoa_r+0x5d0>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7f4 fe98 	bl	80002f8 <__aeabi_dsub>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4633      	mov	r3, r6
 800b5d4:	f7f5 fad8 	bl	8000b88 <__aeabi_dcmpgt>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	f040 828b 	bne.w	800baf4 <_dtoa_r+0x93c>
 800b5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b5e8:	f7f5 fab0 	bl	8000b4c <__aeabi_dcmplt>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f040 8128 	bne.w	800b842 <_dtoa_r+0x68a>
 800b5f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b5f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b5fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f2c0 815a 	blt.w	800b8b6 <_dtoa_r+0x6fe>
 800b602:	2f0e      	cmp	r7, #14
 800b604:	f300 8157 	bgt.w	800b8b6 <_dtoa_r+0x6fe>
 800b608:	4b5a      	ldr	r3, [pc, #360]	@ (800b774 <_dtoa_r+0x5bc>)
 800b60a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b60e:	ed93 7b00 	vldr	d7, [r3]
 800b612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b614:	2b00      	cmp	r3, #0
 800b616:	ed8d 7b00 	vstr	d7, [sp]
 800b61a:	da03      	bge.n	800b624 <_dtoa_r+0x46c>
 800b61c:	9b07      	ldr	r3, [sp, #28]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f340 8101 	ble.w	800b826 <_dtoa_r+0x66e>
 800b624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b628:	4656      	mov	r6, sl
 800b62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b62e:	4620      	mov	r0, r4
 800b630:	4629      	mov	r1, r5
 800b632:	f7f5 f943 	bl	80008bc <__aeabi_ddiv>
 800b636:	f7f5 fac7 	bl	8000bc8 <__aeabi_d2iz>
 800b63a:	4680      	mov	r8, r0
 800b63c:	f7f4 ffaa 	bl	8000594 <__aeabi_i2d>
 800b640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b644:	f7f5 f810 	bl	8000668 <__aeabi_dmul>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4620      	mov	r0, r4
 800b64e:	4629      	mov	r1, r5
 800b650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b654:	f7f4 fe50 	bl	80002f8 <__aeabi_dsub>
 800b658:	f806 4b01 	strb.w	r4, [r6], #1
 800b65c:	9d07      	ldr	r5, [sp, #28]
 800b65e:	eba6 040a 	sub.w	r4, r6, sl
 800b662:	42a5      	cmp	r5, r4
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	f040 8117 	bne.w	800b89a <_dtoa_r+0x6e2>
 800b66c:	f7f4 fe46 	bl	80002fc <__adddf3>
 800b670:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b674:	4604      	mov	r4, r0
 800b676:	460d      	mov	r5, r1
 800b678:	f7f5 fa86 	bl	8000b88 <__aeabi_dcmpgt>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	f040 80f9 	bne.w	800b874 <_dtoa_r+0x6bc>
 800b682:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b686:	4620      	mov	r0, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	f7f5 fa55 	bl	8000b38 <__aeabi_dcmpeq>
 800b68e:	b118      	cbz	r0, 800b698 <_dtoa_r+0x4e0>
 800b690:	f018 0f01 	tst.w	r8, #1
 800b694:	f040 80ee 	bne.w	800b874 <_dtoa_r+0x6bc>
 800b698:	4649      	mov	r1, r9
 800b69a:	4658      	mov	r0, fp
 800b69c:	f000 fc90 	bl	800bfc0 <_Bfree>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	7033      	strb	r3, [r6, #0]
 800b6a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6a6:	3701      	adds	r7, #1
 800b6a8:	601f      	str	r7, [r3, #0]
 800b6aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 831d 	beq.w	800bcec <_dtoa_r+0xb34>
 800b6b2:	601e      	str	r6, [r3, #0]
 800b6b4:	e31a      	b.n	800bcec <_dtoa_r+0xb34>
 800b6b6:	07e2      	lsls	r2, r4, #31
 800b6b8:	d505      	bpl.n	800b6c6 <_dtoa_r+0x50e>
 800b6ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6be:	f7f4 ffd3 	bl	8000668 <__aeabi_dmul>
 800b6c2:	3601      	adds	r6, #1
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	1064      	asrs	r4, r4, #1
 800b6c8:	3508      	adds	r5, #8
 800b6ca:	e73f      	b.n	800b54c <_dtoa_r+0x394>
 800b6cc:	2602      	movs	r6, #2
 800b6ce:	e742      	b.n	800b556 <_dtoa_r+0x39e>
 800b6d0:	9c07      	ldr	r4, [sp, #28]
 800b6d2:	9704      	str	r7, [sp, #16]
 800b6d4:	e761      	b.n	800b59a <_dtoa_r+0x3e2>
 800b6d6:	4b27      	ldr	r3, [pc, #156]	@ (800b774 <_dtoa_r+0x5bc>)
 800b6d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6e2:	4454      	add	r4, sl
 800b6e4:	2900      	cmp	r1, #0
 800b6e6:	d053      	beq.n	800b790 <_dtoa_r+0x5d8>
 800b6e8:	4928      	ldr	r1, [pc, #160]	@ (800b78c <_dtoa_r+0x5d4>)
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f7f5 f8e6 	bl	80008bc <__aeabi_ddiv>
 800b6f0:	4633      	mov	r3, r6
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	f7f4 fe00 	bl	80002f8 <__aeabi_dsub>
 800b6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6fc:	4656      	mov	r6, sl
 800b6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b702:	f7f5 fa61 	bl	8000bc8 <__aeabi_d2iz>
 800b706:	4605      	mov	r5, r0
 800b708:	f7f4 ff44 	bl	8000594 <__aeabi_i2d>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b714:	f7f4 fdf0 	bl	80002f8 <__aeabi_dsub>
 800b718:	3530      	adds	r5, #48	@ 0x30
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b722:	f806 5b01 	strb.w	r5, [r6], #1
 800b726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b72a:	f7f5 fa0f 	bl	8000b4c <__aeabi_dcmplt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d171      	bne.n	800b816 <_dtoa_r+0x65e>
 800b732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b736:	4911      	ldr	r1, [pc, #68]	@ (800b77c <_dtoa_r+0x5c4>)
 800b738:	2000      	movs	r0, #0
 800b73a:	f7f4 fddd 	bl	80002f8 <__aeabi_dsub>
 800b73e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b742:	f7f5 fa03 	bl	8000b4c <__aeabi_dcmplt>
 800b746:	2800      	cmp	r0, #0
 800b748:	f040 8095 	bne.w	800b876 <_dtoa_r+0x6be>
 800b74c:	42a6      	cmp	r6, r4
 800b74e:	f43f af50 	beq.w	800b5f2 <_dtoa_r+0x43a>
 800b752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b756:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <_dtoa_r+0x5c8>)
 800b758:	2200      	movs	r2, #0
 800b75a:	f7f4 ff85 	bl	8000668 <__aeabi_dmul>
 800b75e:	4b08      	ldr	r3, [pc, #32]	@ (800b780 <_dtoa_r+0x5c8>)
 800b760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b764:	2200      	movs	r2, #0
 800b766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76a:	f7f4 ff7d 	bl	8000668 <__aeabi_dmul>
 800b76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b772:	e7c4      	b.n	800b6fe <_dtoa_r+0x546>
 800b774:	0800d6c0 	.word	0x0800d6c0
 800b778:	0800d698 	.word	0x0800d698
 800b77c:	3ff00000 	.word	0x3ff00000
 800b780:	40240000 	.word	0x40240000
 800b784:	401c0000 	.word	0x401c0000
 800b788:	40140000 	.word	0x40140000
 800b78c:	3fe00000 	.word	0x3fe00000
 800b790:	4631      	mov	r1, r6
 800b792:	4628      	mov	r0, r5
 800b794:	f7f4 ff68 	bl	8000668 <__aeabi_dmul>
 800b798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b79c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b79e:	4656      	mov	r6, sl
 800b7a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a4:	f7f5 fa10 	bl	8000bc8 <__aeabi_d2iz>
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	f7f4 fef3 	bl	8000594 <__aeabi_i2d>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b6:	f7f4 fd9f 	bl	80002f8 <__aeabi_dsub>
 800b7ba:	3530      	adds	r5, #48	@ 0x30
 800b7bc:	f806 5b01 	strb.w	r5, [r6], #1
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	42a6      	cmp	r6, r4
 800b7c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7ca:	f04f 0200 	mov.w	r2, #0
 800b7ce:	d124      	bne.n	800b81a <_dtoa_r+0x662>
 800b7d0:	4bac      	ldr	r3, [pc, #688]	@ (800ba84 <_dtoa_r+0x8cc>)
 800b7d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7d6:	f7f4 fd91 	bl	80002fc <__adddf3>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e2:	f7f5 f9d1 	bl	8000b88 <__aeabi_dcmpgt>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d145      	bne.n	800b876 <_dtoa_r+0x6be>
 800b7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7ee:	49a5      	ldr	r1, [pc, #660]	@ (800ba84 <_dtoa_r+0x8cc>)
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f7f4 fd81 	bl	80002f8 <__aeabi_dsub>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fe:	f7f5 f9a5 	bl	8000b4c <__aeabi_dcmplt>
 800b802:	2800      	cmp	r0, #0
 800b804:	f43f aef5 	beq.w	800b5f2 <_dtoa_r+0x43a>
 800b808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b80a:	1e73      	subs	r3, r6, #1
 800b80c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b80e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b812:	2b30      	cmp	r3, #48	@ 0x30
 800b814:	d0f8      	beq.n	800b808 <_dtoa_r+0x650>
 800b816:	9f04      	ldr	r7, [sp, #16]
 800b818:	e73e      	b.n	800b698 <_dtoa_r+0x4e0>
 800b81a:	4b9b      	ldr	r3, [pc, #620]	@ (800ba88 <_dtoa_r+0x8d0>)
 800b81c:	f7f4 ff24 	bl	8000668 <__aeabi_dmul>
 800b820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b824:	e7bc      	b.n	800b7a0 <_dtoa_r+0x5e8>
 800b826:	d10c      	bne.n	800b842 <_dtoa_r+0x68a>
 800b828:	4b98      	ldr	r3, [pc, #608]	@ (800ba8c <_dtoa_r+0x8d4>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b830:	f7f4 ff1a 	bl	8000668 <__aeabi_dmul>
 800b834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b838:	f7f5 f99c 	bl	8000b74 <__aeabi_dcmpge>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	f000 8157 	beq.w	800baf0 <_dtoa_r+0x938>
 800b842:	2400      	movs	r4, #0
 800b844:	4625      	mov	r5, r4
 800b846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b848:	43db      	mvns	r3, r3
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	4656      	mov	r6, sl
 800b84e:	2700      	movs	r7, #0
 800b850:	4621      	mov	r1, r4
 800b852:	4658      	mov	r0, fp
 800b854:	f000 fbb4 	bl	800bfc0 <_Bfree>
 800b858:	2d00      	cmp	r5, #0
 800b85a:	d0dc      	beq.n	800b816 <_dtoa_r+0x65e>
 800b85c:	b12f      	cbz	r7, 800b86a <_dtoa_r+0x6b2>
 800b85e:	42af      	cmp	r7, r5
 800b860:	d003      	beq.n	800b86a <_dtoa_r+0x6b2>
 800b862:	4639      	mov	r1, r7
 800b864:	4658      	mov	r0, fp
 800b866:	f000 fbab 	bl	800bfc0 <_Bfree>
 800b86a:	4629      	mov	r1, r5
 800b86c:	4658      	mov	r0, fp
 800b86e:	f000 fba7 	bl	800bfc0 <_Bfree>
 800b872:	e7d0      	b.n	800b816 <_dtoa_r+0x65e>
 800b874:	9704      	str	r7, [sp, #16]
 800b876:	4633      	mov	r3, r6
 800b878:	461e      	mov	r6, r3
 800b87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b87e:	2a39      	cmp	r2, #57	@ 0x39
 800b880:	d107      	bne.n	800b892 <_dtoa_r+0x6da>
 800b882:	459a      	cmp	sl, r3
 800b884:	d1f8      	bne.n	800b878 <_dtoa_r+0x6c0>
 800b886:	9a04      	ldr	r2, [sp, #16]
 800b888:	3201      	adds	r2, #1
 800b88a:	9204      	str	r2, [sp, #16]
 800b88c:	2230      	movs	r2, #48	@ 0x30
 800b88e:	f88a 2000 	strb.w	r2, [sl]
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	3201      	adds	r2, #1
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	e7bd      	b.n	800b816 <_dtoa_r+0x65e>
 800b89a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba88 <_dtoa_r+0x8d0>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	f7f4 fee3 	bl	8000668 <__aeabi_dmul>
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	f7f5 f945 	bl	8000b38 <__aeabi_dcmpeq>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f43f aebb 	beq.w	800b62a <_dtoa_r+0x472>
 800b8b4:	e6f0      	b.n	800b698 <_dtoa_r+0x4e0>
 800b8b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8b8:	2a00      	cmp	r2, #0
 800b8ba:	f000 80db 	beq.w	800ba74 <_dtoa_r+0x8bc>
 800b8be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8c0:	2a01      	cmp	r2, #1
 800b8c2:	f300 80bf 	bgt.w	800ba44 <_dtoa_r+0x88c>
 800b8c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8c8:	2a00      	cmp	r2, #0
 800b8ca:	f000 80b7 	beq.w	800ba3c <_dtoa_r+0x884>
 800b8ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8d4:	4646      	mov	r6, r8
 800b8d6:	9a08      	ldr	r2, [sp, #32]
 800b8d8:	2101      	movs	r1, #1
 800b8da:	441a      	add	r2, r3
 800b8dc:	4658      	mov	r0, fp
 800b8de:	4498      	add	r8, r3
 800b8e0:	9208      	str	r2, [sp, #32]
 800b8e2:	f000 fc21 	bl	800c128 <__i2b>
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	b15e      	cbz	r6, 800b902 <_dtoa_r+0x74a>
 800b8ea:	9b08      	ldr	r3, [sp, #32]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dd08      	ble.n	800b902 <_dtoa_r+0x74a>
 800b8f0:	42b3      	cmp	r3, r6
 800b8f2:	9a08      	ldr	r2, [sp, #32]
 800b8f4:	bfa8      	it	ge
 800b8f6:	4633      	movge	r3, r6
 800b8f8:	eba8 0803 	sub.w	r8, r8, r3
 800b8fc:	1af6      	subs	r6, r6, r3
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	9308      	str	r3, [sp, #32]
 800b902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b904:	b1f3      	cbz	r3, 800b944 <_dtoa_r+0x78c>
 800b906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f000 80b7 	beq.w	800ba7c <_dtoa_r+0x8c4>
 800b90e:	b18c      	cbz	r4, 800b934 <_dtoa_r+0x77c>
 800b910:	4629      	mov	r1, r5
 800b912:	4622      	mov	r2, r4
 800b914:	4658      	mov	r0, fp
 800b916:	f000 fcc7 	bl	800c2a8 <__pow5mult>
 800b91a:	464a      	mov	r2, r9
 800b91c:	4601      	mov	r1, r0
 800b91e:	4605      	mov	r5, r0
 800b920:	4658      	mov	r0, fp
 800b922:	f000 fc17 	bl	800c154 <__multiply>
 800b926:	4649      	mov	r1, r9
 800b928:	9004      	str	r0, [sp, #16]
 800b92a:	4658      	mov	r0, fp
 800b92c:	f000 fb48 	bl	800bfc0 <_Bfree>
 800b930:	9b04      	ldr	r3, [sp, #16]
 800b932:	4699      	mov	r9, r3
 800b934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b936:	1b1a      	subs	r2, r3, r4
 800b938:	d004      	beq.n	800b944 <_dtoa_r+0x78c>
 800b93a:	4649      	mov	r1, r9
 800b93c:	4658      	mov	r0, fp
 800b93e:	f000 fcb3 	bl	800c2a8 <__pow5mult>
 800b942:	4681      	mov	r9, r0
 800b944:	2101      	movs	r1, #1
 800b946:	4658      	mov	r0, fp
 800b948:	f000 fbee 	bl	800c128 <__i2b>
 800b94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b94e:	4604      	mov	r4, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 81cf 	beq.w	800bcf4 <_dtoa_r+0xb3c>
 800b956:	461a      	mov	r2, r3
 800b958:	4601      	mov	r1, r0
 800b95a:	4658      	mov	r0, fp
 800b95c:	f000 fca4 	bl	800c2a8 <__pow5mult>
 800b960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b962:	2b01      	cmp	r3, #1
 800b964:	4604      	mov	r4, r0
 800b966:	f300 8095 	bgt.w	800ba94 <_dtoa_r+0x8dc>
 800b96a:	9b02      	ldr	r3, [sp, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 8087 	bne.w	800ba80 <_dtoa_r+0x8c8>
 800b972:	9b03      	ldr	r3, [sp, #12]
 800b974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f040 8089 	bne.w	800ba90 <_dtoa_r+0x8d8>
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b984:	0d1b      	lsrs	r3, r3, #20
 800b986:	051b      	lsls	r3, r3, #20
 800b988:	b12b      	cbz	r3, 800b996 <_dtoa_r+0x7de>
 800b98a:	9b08      	ldr	r3, [sp, #32]
 800b98c:	3301      	adds	r3, #1
 800b98e:	9308      	str	r3, [sp, #32]
 800b990:	f108 0801 	add.w	r8, r8, #1
 800b994:	2301      	movs	r3, #1
 800b996:	930a      	str	r3, [sp, #40]	@ 0x28
 800b998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 81b0 	beq.w	800bd00 <_dtoa_r+0xb48>
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9a6:	6918      	ldr	r0, [r3, #16]
 800b9a8:	f000 fb72 	bl	800c090 <__hi0bits>
 800b9ac:	f1c0 0020 	rsb	r0, r0, #32
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	4418      	add	r0, r3
 800b9b4:	f010 001f 	ands.w	r0, r0, #31
 800b9b8:	d077      	beq.n	800baaa <_dtoa_r+0x8f2>
 800b9ba:	f1c0 0320 	rsb	r3, r0, #32
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	dd6b      	ble.n	800ba9a <_dtoa_r+0x8e2>
 800b9c2:	9b08      	ldr	r3, [sp, #32]
 800b9c4:	f1c0 001c 	rsb	r0, r0, #28
 800b9c8:	4403      	add	r3, r0
 800b9ca:	4480      	add	r8, r0
 800b9cc:	4406      	add	r6, r0
 800b9ce:	9308      	str	r3, [sp, #32]
 800b9d0:	f1b8 0f00 	cmp.w	r8, #0
 800b9d4:	dd05      	ble.n	800b9e2 <_dtoa_r+0x82a>
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	4642      	mov	r2, r8
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f000 fcbe 	bl	800c35c <__lshift>
 800b9e0:	4681      	mov	r9, r0
 800b9e2:	9b08      	ldr	r3, [sp, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dd05      	ble.n	800b9f4 <_dtoa_r+0x83c>
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	4658      	mov	r0, fp
 800b9ee:	f000 fcb5 	bl	800c35c <__lshift>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d059      	beq.n	800baae <_dtoa_r+0x8f6>
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	4648      	mov	r0, r9
 800b9fe:	f000 fd19 	bl	800c434 <__mcmp>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	da53      	bge.n	800baae <_dtoa_r+0x8f6>
 800ba06:	1e7b      	subs	r3, r7, #1
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	220a      	movs	r2, #10
 800ba10:	4658      	mov	r0, fp
 800ba12:	f000 faf7 	bl	800c004 <__multadd>
 800ba16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba18:	4681      	mov	r9, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 8172 	beq.w	800bd04 <_dtoa_r+0xb4c>
 800ba20:	2300      	movs	r3, #0
 800ba22:	4629      	mov	r1, r5
 800ba24:	220a      	movs	r2, #10
 800ba26:	4658      	mov	r0, fp
 800ba28:	f000 faec 	bl	800c004 <__multadd>
 800ba2c:	9b00      	ldr	r3, [sp, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	4605      	mov	r5, r0
 800ba32:	dc67      	bgt.n	800bb04 <_dtoa_r+0x94c>
 800ba34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	dc41      	bgt.n	800babe <_dtoa_r+0x906>
 800ba3a:	e063      	b.n	800bb04 <_dtoa_r+0x94c>
 800ba3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba42:	e746      	b.n	800b8d2 <_dtoa_r+0x71a>
 800ba44:	9b07      	ldr	r3, [sp, #28]
 800ba46:	1e5c      	subs	r4, r3, #1
 800ba48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba4a:	42a3      	cmp	r3, r4
 800ba4c:	bfbf      	itttt	lt
 800ba4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba54:	1ae3      	sublt	r3, r4, r3
 800ba56:	bfb4      	ite	lt
 800ba58:	18d2      	addlt	r2, r2, r3
 800ba5a:	1b1c      	subge	r4, r3, r4
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	bfbc      	itt	lt
 800ba60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba62:	2400      	movlt	r4, #0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	bfb5      	itete	lt
 800ba68:	eba8 0603 	sublt.w	r6, r8, r3
 800ba6c:	9b07      	ldrge	r3, [sp, #28]
 800ba6e:	2300      	movlt	r3, #0
 800ba70:	4646      	movge	r6, r8
 800ba72:	e730      	b.n	800b8d6 <_dtoa_r+0x71e>
 800ba74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba78:	4646      	mov	r6, r8
 800ba7a:	e735      	b.n	800b8e8 <_dtoa_r+0x730>
 800ba7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba7e:	e75c      	b.n	800b93a <_dtoa_r+0x782>
 800ba80:	2300      	movs	r3, #0
 800ba82:	e788      	b.n	800b996 <_dtoa_r+0x7de>
 800ba84:	3fe00000 	.word	0x3fe00000
 800ba88:	40240000 	.word	0x40240000
 800ba8c:	40140000 	.word	0x40140000
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	e780      	b.n	800b996 <_dtoa_r+0x7de>
 800ba94:	2300      	movs	r3, #0
 800ba96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba98:	e782      	b.n	800b9a0 <_dtoa_r+0x7e8>
 800ba9a:	d099      	beq.n	800b9d0 <_dtoa_r+0x818>
 800ba9c:	9a08      	ldr	r2, [sp, #32]
 800ba9e:	331c      	adds	r3, #28
 800baa0:	441a      	add	r2, r3
 800baa2:	4498      	add	r8, r3
 800baa4:	441e      	add	r6, r3
 800baa6:	9208      	str	r2, [sp, #32]
 800baa8:	e792      	b.n	800b9d0 <_dtoa_r+0x818>
 800baaa:	4603      	mov	r3, r0
 800baac:	e7f6      	b.n	800ba9c <_dtoa_r+0x8e4>
 800baae:	9b07      	ldr	r3, [sp, #28]
 800bab0:	9704      	str	r7, [sp, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	dc20      	bgt.n	800baf8 <_dtoa_r+0x940>
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baba:	2b02      	cmp	r3, #2
 800babc:	dd1e      	ble.n	800bafc <_dtoa_r+0x944>
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f47f aec0 	bne.w	800b846 <_dtoa_r+0x68e>
 800bac6:	4621      	mov	r1, r4
 800bac8:	2205      	movs	r2, #5
 800baca:	4658      	mov	r0, fp
 800bacc:	f000 fa9a 	bl	800c004 <__multadd>
 800bad0:	4601      	mov	r1, r0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4648      	mov	r0, r9
 800bad6:	f000 fcad 	bl	800c434 <__mcmp>
 800bada:	2800      	cmp	r0, #0
 800badc:	f77f aeb3 	ble.w	800b846 <_dtoa_r+0x68e>
 800bae0:	4656      	mov	r6, sl
 800bae2:	2331      	movs	r3, #49	@ 0x31
 800bae4:	f806 3b01 	strb.w	r3, [r6], #1
 800bae8:	9b04      	ldr	r3, [sp, #16]
 800baea:	3301      	adds	r3, #1
 800baec:	9304      	str	r3, [sp, #16]
 800baee:	e6ae      	b.n	800b84e <_dtoa_r+0x696>
 800baf0:	9c07      	ldr	r4, [sp, #28]
 800baf2:	9704      	str	r7, [sp, #16]
 800baf4:	4625      	mov	r5, r4
 800baf6:	e7f3      	b.n	800bae0 <_dtoa_r+0x928>
 800baf8:	9b07      	ldr	r3, [sp, #28]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 8104 	beq.w	800bd0c <_dtoa_r+0xb54>
 800bb04:	2e00      	cmp	r6, #0
 800bb06:	dd05      	ble.n	800bb14 <_dtoa_r+0x95c>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	4658      	mov	r0, fp
 800bb0e:	f000 fc25 	bl	800c35c <__lshift>
 800bb12:	4605      	mov	r5, r0
 800bb14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d05a      	beq.n	800bbd0 <_dtoa_r+0xa18>
 800bb1a:	6869      	ldr	r1, [r5, #4]
 800bb1c:	4658      	mov	r0, fp
 800bb1e:	f000 fa0f 	bl	800bf40 <_Balloc>
 800bb22:	4606      	mov	r6, r0
 800bb24:	b928      	cbnz	r0, 800bb32 <_dtoa_r+0x97a>
 800bb26:	4b84      	ldr	r3, [pc, #528]	@ (800bd38 <_dtoa_r+0xb80>)
 800bb28:	4602      	mov	r2, r0
 800bb2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb2e:	f7ff bb5a 	b.w	800b1e6 <_dtoa_r+0x2e>
 800bb32:	692a      	ldr	r2, [r5, #16]
 800bb34:	3202      	adds	r2, #2
 800bb36:	0092      	lsls	r2, r2, #2
 800bb38:	f105 010c 	add.w	r1, r5, #12
 800bb3c:	300c      	adds	r0, #12
 800bb3e:	f001 f997 	bl	800ce70 <memcpy>
 800bb42:	2201      	movs	r2, #1
 800bb44:	4631      	mov	r1, r6
 800bb46:	4658      	mov	r0, fp
 800bb48:	f000 fc08 	bl	800c35c <__lshift>
 800bb4c:	f10a 0301 	add.w	r3, sl, #1
 800bb50:	9307      	str	r3, [sp, #28]
 800bb52:	9b00      	ldr	r3, [sp, #0]
 800bb54:	4453      	add	r3, sl
 800bb56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb58:	9b02      	ldr	r3, [sp, #8]
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	462f      	mov	r7, r5
 800bb60:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb62:	4605      	mov	r5, r0
 800bb64:	9b07      	ldr	r3, [sp, #28]
 800bb66:	4621      	mov	r1, r4
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	4648      	mov	r0, r9
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	f7ff fa9b 	bl	800b0a8 <quorem>
 800bb72:	4639      	mov	r1, r7
 800bb74:	9002      	str	r0, [sp, #8]
 800bb76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb7a:	4648      	mov	r0, r9
 800bb7c:	f000 fc5a 	bl	800c434 <__mcmp>
 800bb80:	462a      	mov	r2, r5
 800bb82:	9008      	str	r0, [sp, #32]
 800bb84:	4621      	mov	r1, r4
 800bb86:	4658      	mov	r0, fp
 800bb88:	f000 fc70 	bl	800c46c <__mdiff>
 800bb8c:	68c2      	ldr	r2, [r0, #12]
 800bb8e:	4606      	mov	r6, r0
 800bb90:	bb02      	cbnz	r2, 800bbd4 <_dtoa_r+0xa1c>
 800bb92:	4601      	mov	r1, r0
 800bb94:	4648      	mov	r0, r9
 800bb96:	f000 fc4d 	bl	800c434 <__mcmp>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4658      	mov	r0, fp
 800bba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bba2:	f000 fa0d 	bl	800bfc0 <_Bfree>
 800bba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbaa:	9e07      	ldr	r6, [sp, #28]
 800bbac:	ea43 0102 	orr.w	r1, r3, r2
 800bbb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbb2:	4319      	orrs	r1, r3
 800bbb4:	d110      	bne.n	800bbd8 <_dtoa_r+0xa20>
 800bbb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbba:	d029      	beq.n	800bc10 <_dtoa_r+0xa58>
 800bbbc:	9b08      	ldr	r3, [sp, #32]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dd02      	ble.n	800bbc8 <_dtoa_r+0xa10>
 800bbc2:	9b02      	ldr	r3, [sp, #8]
 800bbc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bbc8:	9b00      	ldr	r3, [sp, #0]
 800bbca:	f883 8000 	strb.w	r8, [r3]
 800bbce:	e63f      	b.n	800b850 <_dtoa_r+0x698>
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	e7bb      	b.n	800bb4c <_dtoa_r+0x994>
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	e7e1      	b.n	800bb9c <_dtoa_r+0x9e4>
 800bbd8:	9b08      	ldr	r3, [sp, #32]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	db04      	blt.n	800bbe8 <_dtoa_r+0xa30>
 800bbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	d120      	bne.n	800bc2a <_dtoa_r+0xa72>
 800bbe8:	2a00      	cmp	r2, #0
 800bbea:	dded      	ble.n	800bbc8 <_dtoa_r+0xa10>
 800bbec:	4649      	mov	r1, r9
 800bbee:	2201      	movs	r2, #1
 800bbf0:	4658      	mov	r0, fp
 800bbf2:	f000 fbb3 	bl	800c35c <__lshift>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4681      	mov	r9, r0
 800bbfa:	f000 fc1b 	bl	800c434 <__mcmp>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	dc03      	bgt.n	800bc0a <_dtoa_r+0xa52>
 800bc02:	d1e1      	bne.n	800bbc8 <_dtoa_r+0xa10>
 800bc04:	f018 0f01 	tst.w	r8, #1
 800bc08:	d0de      	beq.n	800bbc8 <_dtoa_r+0xa10>
 800bc0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc0e:	d1d8      	bne.n	800bbc2 <_dtoa_r+0xa0a>
 800bc10:	9a00      	ldr	r2, [sp, #0]
 800bc12:	2339      	movs	r3, #57	@ 0x39
 800bc14:	7013      	strb	r3, [r2, #0]
 800bc16:	4633      	mov	r3, r6
 800bc18:	461e      	mov	r6, r3
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc20:	2a39      	cmp	r2, #57	@ 0x39
 800bc22:	d052      	beq.n	800bcca <_dtoa_r+0xb12>
 800bc24:	3201      	adds	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	e612      	b.n	800b850 <_dtoa_r+0x698>
 800bc2a:	2a00      	cmp	r2, #0
 800bc2c:	dd07      	ble.n	800bc3e <_dtoa_r+0xa86>
 800bc2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc32:	d0ed      	beq.n	800bc10 <_dtoa_r+0xa58>
 800bc34:	9a00      	ldr	r2, [sp, #0]
 800bc36:	f108 0301 	add.w	r3, r8, #1
 800bc3a:	7013      	strb	r3, [r2, #0]
 800bc3c:	e608      	b.n	800b850 <_dtoa_r+0x698>
 800bc3e:	9b07      	ldr	r3, [sp, #28]
 800bc40:	9a07      	ldr	r2, [sp, #28]
 800bc42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d028      	beq.n	800bc9e <_dtoa_r+0xae6>
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	2300      	movs	r3, #0
 800bc50:	220a      	movs	r2, #10
 800bc52:	4658      	mov	r0, fp
 800bc54:	f000 f9d6 	bl	800c004 <__multadd>
 800bc58:	42af      	cmp	r7, r5
 800bc5a:	4681      	mov	r9, r0
 800bc5c:	f04f 0300 	mov.w	r3, #0
 800bc60:	f04f 020a 	mov.w	r2, #10
 800bc64:	4639      	mov	r1, r7
 800bc66:	4658      	mov	r0, fp
 800bc68:	d107      	bne.n	800bc7a <_dtoa_r+0xac2>
 800bc6a:	f000 f9cb 	bl	800c004 <__multadd>
 800bc6e:	4607      	mov	r7, r0
 800bc70:	4605      	mov	r5, r0
 800bc72:	9b07      	ldr	r3, [sp, #28]
 800bc74:	3301      	adds	r3, #1
 800bc76:	9307      	str	r3, [sp, #28]
 800bc78:	e774      	b.n	800bb64 <_dtoa_r+0x9ac>
 800bc7a:	f000 f9c3 	bl	800c004 <__multadd>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4607      	mov	r7, r0
 800bc82:	2300      	movs	r3, #0
 800bc84:	220a      	movs	r2, #10
 800bc86:	4658      	mov	r0, fp
 800bc88:	f000 f9bc 	bl	800c004 <__multadd>
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	e7f0      	b.n	800bc72 <_dtoa_r+0xaba>
 800bc90:	9b00      	ldr	r3, [sp, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfcc      	ite	gt
 800bc96:	461e      	movgt	r6, r3
 800bc98:	2601      	movle	r6, #1
 800bc9a:	4456      	add	r6, sl
 800bc9c:	2700      	movs	r7, #0
 800bc9e:	4649      	mov	r1, r9
 800bca0:	2201      	movs	r2, #1
 800bca2:	4658      	mov	r0, fp
 800bca4:	f000 fb5a 	bl	800c35c <__lshift>
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4681      	mov	r9, r0
 800bcac:	f000 fbc2 	bl	800c434 <__mcmp>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dcb0      	bgt.n	800bc16 <_dtoa_r+0xa5e>
 800bcb4:	d102      	bne.n	800bcbc <_dtoa_r+0xb04>
 800bcb6:	f018 0f01 	tst.w	r8, #1
 800bcba:	d1ac      	bne.n	800bc16 <_dtoa_r+0xa5e>
 800bcbc:	4633      	mov	r3, r6
 800bcbe:	461e      	mov	r6, r3
 800bcc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcc4:	2a30      	cmp	r2, #48	@ 0x30
 800bcc6:	d0fa      	beq.n	800bcbe <_dtoa_r+0xb06>
 800bcc8:	e5c2      	b.n	800b850 <_dtoa_r+0x698>
 800bcca:	459a      	cmp	sl, r3
 800bccc:	d1a4      	bne.n	800bc18 <_dtoa_r+0xa60>
 800bcce:	9b04      	ldr	r3, [sp, #16]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	2331      	movs	r3, #49	@ 0x31
 800bcd6:	f88a 3000 	strb.w	r3, [sl]
 800bcda:	e5b9      	b.n	800b850 <_dtoa_r+0x698>
 800bcdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd3c <_dtoa_r+0xb84>
 800bce2:	b11b      	cbz	r3, 800bcec <_dtoa_r+0xb34>
 800bce4:	f10a 0308 	add.w	r3, sl, #8
 800bce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	4650      	mov	r0, sl
 800bcee:	b019      	add	sp, #100	@ 0x64
 800bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	f77f ae37 	ble.w	800b96a <_dtoa_r+0x7b2>
 800bcfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd00:	2001      	movs	r0, #1
 800bd02:	e655      	b.n	800b9b0 <_dtoa_r+0x7f8>
 800bd04:	9b00      	ldr	r3, [sp, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f77f aed6 	ble.w	800bab8 <_dtoa_r+0x900>
 800bd0c:	4656      	mov	r6, sl
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4648      	mov	r0, r9
 800bd12:	f7ff f9c9 	bl	800b0a8 <quorem>
 800bd16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd1a:	f806 8b01 	strb.w	r8, [r6], #1
 800bd1e:	9b00      	ldr	r3, [sp, #0]
 800bd20:	eba6 020a 	sub.w	r2, r6, sl
 800bd24:	4293      	cmp	r3, r2
 800bd26:	ddb3      	ble.n	800bc90 <_dtoa_r+0xad8>
 800bd28:	4649      	mov	r1, r9
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	220a      	movs	r2, #10
 800bd2e:	4658      	mov	r0, fp
 800bd30:	f000 f968 	bl	800c004 <__multadd>
 800bd34:	4681      	mov	r9, r0
 800bd36:	e7ea      	b.n	800bd0e <_dtoa_r+0xb56>
 800bd38:	0800d61f 	.word	0x0800d61f
 800bd3c:	0800d5ba 	.word	0x0800d5ba

0800bd40 <_free_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4605      	mov	r5, r0
 800bd44:	2900      	cmp	r1, #0
 800bd46:	d041      	beq.n	800bdcc <_free_r+0x8c>
 800bd48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd4c:	1f0c      	subs	r4, r1, #4
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	bfb8      	it	lt
 800bd52:	18e4      	addlt	r4, r4, r3
 800bd54:	f000 f8e8 	bl	800bf28 <__malloc_lock>
 800bd58:	4a1d      	ldr	r2, [pc, #116]	@ (800bdd0 <_free_r+0x90>)
 800bd5a:	6813      	ldr	r3, [r2, #0]
 800bd5c:	b933      	cbnz	r3, 800bd6c <_free_r+0x2c>
 800bd5e:	6063      	str	r3, [r4, #4]
 800bd60:	6014      	str	r4, [r2, #0]
 800bd62:	4628      	mov	r0, r5
 800bd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd68:	f000 b8e4 	b.w	800bf34 <__malloc_unlock>
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	d908      	bls.n	800bd82 <_free_r+0x42>
 800bd70:	6820      	ldr	r0, [r4, #0]
 800bd72:	1821      	adds	r1, r4, r0
 800bd74:	428b      	cmp	r3, r1
 800bd76:	bf01      	itttt	eq
 800bd78:	6819      	ldreq	r1, [r3, #0]
 800bd7a:	685b      	ldreq	r3, [r3, #4]
 800bd7c:	1809      	addeq	r1, r1, r0
 800bd7e:	6021      	streq	r1, [r4, #0]
 800bd80:	e7ed      	b.n	800bd5e <_free_r+0x1e>
 800bd82:	461a      	mov	r2, r3
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	b10b      	cbz	r3, 800bd8c <_free_r+0x4c>
 800bd88:	42a3      	cmp	r3, r4
 800bd8a:	d9fa      	bls.n	800bd82 <_free_r+0x42>
 800bd8c:	6811      	ldr	r1, [r2, #0]
 800bd8e:	1850      	adds	r0, r2, r1
 800bd90:	42a0      	cmp	r0, r4
 800bd92:	d10b      	bne.n	800bdac <_free_r+0x6c>
 800bd94:	6820      	ldr	r0, [r4, #0]
 800bd96:	4401      	add	r1, r0
 800bd98:	1850      	adds	r0, r2, r1
 800bd9a:	4283      	cmp	r3, r0
 800bd9c:	6011      	str	r1, [r2, #0]
 800bd9e:	d1e0      	bne.n	800bd62 <_free_r+0x22>
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	6053      	str	r3, [r2, #4]
 800bda6:	4408      	add	r0, r1
 800bda8:	6010      	str	r0, [r2, #0]
 800bdaa:	e7da      	b.n	800bd62 <_free_r+0x22>
 800bdac:	d902      	bls.n	800bdb4 <_free_r+0x74>
 800bdae:	230c      	movs	r3, #12
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	e7d6      	b.n	800bd62 <_free_r+0x22>
 800bdb4:	6820      	ldr	r0, [r4, #0]
 800bdb6:	1821      	adds	r1, r4, r0
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	bf04      	itt	eq
 800bdbc:	6819      	ldreq	r1, [r3, #0]
 800bdbe:	685b      	ldreq	r3, [r3, #4]
 800bdc0:	6063      	str	r3, [r4, #4]
 800bdc2:	bf04      	itt	eq
 800bdc4:	1809      	addeq	r1, r1, r0
 800bdc6:	6021      	streq	r1, [r4, #0]
 800bdc8:	6054      	str	r4, [r2, #4]
 800bdca:	e7ca      	b.n	800bd62 <_free_r+0x22>
 800bdcc:	bd38      	pop	{r3, r4, r5, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000774 	.word	0x20000774

0800bdd4 <malloc>:
 800bdd4:	4b02      	ldr	r3, [pc, #8]	@ (800bde0 <malloc+0xc>)
 800bdd6:	4601      	mov	r1, r0
 800bdd8:	6818      	ldr	r0, [r3, #0]
 800bdda:	f000 b825 	b.w	800be28 <_malloc_r>
 800bdde:	bf00      	nop
 800bde0:	2000001c 	.word	0x2000001c

0800bde4 <sbrk_aligned>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	4e0f      	ldr	r6, [pc, #60]	@ (800be24 <sbrk_aligned+0x40>)
 800bde8:	460c      	mov	r4, r1
 800bdea:	6831      	ldr	r1, [r6, #0]
 800bdec:	4605      	mov	r5, r0
 800bdee:	b911      	cbnz	r1, 800bdf6 <sbrk_aligned+0x12>
 800bdf0:	f001 f82e 	bl	800ce50 <_sbrk_r>
 800bdf4:	6030      	str	r0, [r6, #0]
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f001 f829 	bl	800ce50 <_sbrk_r>
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	d103      	bne.n	800be0a <sbrk_aligned+0x26>
 800be02:	f04f 34ff 	mov.w	r4, #4294967295
 800be06:	4620      	mov	r0, r4
 800be08:	bd70      	pop	{r4, r5, r6, pc}
 800be0a:	1cc4      	adds	r4, r0, #3
 800be0c:	f024 0403 	bic.w	r4, r4, #3
 800be10:	42a0      	cmp	r0, r4
 800be12:	d0f8      	beq.n	800be06 <sbrk_aligned+0x22>
 800be14:	1a21      	subs	r1, r4, r0
 800be16:	4628      	mov	r0, r5
 800be18:	f001 f81a 	bl	800ce50 <_sbrk_r>
 800be1c:	3001      	adds	r0, #1
 800be1e:	d1f2      	bne.n	800be06 <sbrk_aligned+0x22>
 800be20:	e7ef      	b.n	800be02 <sbrk_aligned+0x1e>
 800be22:	bf00      	nop
 800be24:	20000770 	.word	0x20000770

0800be28 <_malloc_r>:
 800be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	1ccd      	adds	r5, r1, #3
 800be2e:	f025 0503 	bic.w	r5, r5, #3
 800be32:	3508      	adds	r5, #8
 800be34:	2d0c      	cmp	r5, #12
 800be36:	bf38      	it	cc
 800be38:	250c      	movcc	r5, #12
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	4606      	mov	r6, r0
 800be3e:	db01      	blt.n	800be44 <_malloc_r+0x1c>
 800be40:	42a9      	cmp	r1, r5
 800be42:	d904      	bls.n	800be4e <_malloc_r+0x26>
 800be44:	230c      	movs	r3, #12
 800be46:	6033      	str	r3, [r6, #0]
 800be48:	2000      	movs	r0, #0
 800be4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf24 <_malloc_r+0xfc>
 800be52:	f000 f869 	bl	800bf28 <__malloc_lock>
 800be56:	f8d8 3000 	ldr.w	r3, [r8]
 800be5a:	461c      	mov	r4, r3
 800be5c:	bb44      	cbnz	r4, 800beb0 <_malloc_r+0x88>
 800be5e:	4629      	mov	r1, r5
 800be60:	4630      	mov	r0, r6
 800be62:	f7ff ffbf 	bl	800bde4 <sbrk_aligned>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	4604      	mov	r4, r0
 800be6a:	d158      	bne.n	800bf1e <_malloc_r+0xf6>
 800be6c:	f8d8 4000 	ldr.w	r4, [r8]
 800be70:	4627      	mov	r7, r4
 800be72:	2f00      	cmp	r7, #0
 800be74:	d143      	bne.n	800befe <_malloc_r+0xd6>
 800be76:	2c00      	cmp	r4, #0
 800be78:	d04b      	beq.n	800bf12 <_malloc_r+0xea>
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	4639      	mov	r1, r7
 800be7e:	4630      	mov	r0, r6
 800be80:	eb04 0903 	add.w	r9, r4, r3
 800be84:	f000 ffe4 	bl	800ce50 <_sbrk_r>
 800be88:	4581      	cmp	r9, r0
 800be8a:	d142      	bne.n	800bf12 <_malloc_r+0xea>
 800be8c:	6821      	ldr	r1, [r4, #0]
 800be8e:	1a6d      	subs	r5, r5, r1
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ffa6 	bl	800bde4 <sbrk_aligned>
 800be98:	3001      	adds	r0, #1
 800be9a:	d03a      	beq.n	800bf12 <_malloc_r+0xea>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	442b      	add	r3, r5
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	f8d8 3000 	ldr.w	r3, [r8]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	bb62      	cbnz	r2, 800bf04 <_malloc_r+0xdc>
 800beaa:	f8c8 7000 	str.w	r7, [r8]
 800beae:	e00f      	b.n	800bed0 <_malloc_r+0xa8>
 800beb0:	6822      	ldr	r2, [r4, #0]
 800beb2:	1b52      	subs	r2, r2, r5
 800beb4:	d420      	bmi.n	800bef8 <_malloc_r+0xd0>
 800beb6:	2a0b      	cmp	r2, #11
 800beb8:	d917      	bls.n	800beea <_malloc_r+0xc2>
 800beba:	1961      	adds	r1, r4, r5
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	6025      	str	r5, [r4, #0]
 800bec0:	bf18      	it	ne
 800bec2:	6059      	strne	r1, [r3, #4]
 800bec4:	6863      	ldr	r3, [r4, #4]
 800bec6:	bf08      	it	eq
 800bec8:	f8c8 1000 	streq.w	r1, [r8]
 800becc:	5162      	str	r2, [r4, r5]
 800bece:	604b      	str	r3, [r1, #4]
 800bed0:	4630      	mov	r0, r6
 800bed2:	f000 f82f 	bl	800bf34 <__malloc_unlock>
 800bed6:	f104 000b 	add.w	r0, r4, #11
 800beda:	1d23      	adds	r3, r4, #4
 800bedc:	f020 0007 	bic.w	r0, r0, #7
 800bee0:	1ac2      	subs	r2, r0, r3
 800bee2:	bf1c      	itt	ne
 800bee4:	1a1b      	subne	r3, r3, r0
 800bee6:	50a3      	strne	r3, [r4, r2]
 800bee8:	e7af      	b.n	800be4a <_malloc_r+0x22>
 800beea:	6862      	ldr	r2, [r4, #4]
 800beec:	42a3      	cmp	r3, r4
 800beee:	bf0c      	ite	eq
 800bef0:	f8c8 2000 	streq.w	r2, [r8]
 800bef4:	605a      	strne	r2, [r3, #4]
 800bef6:	e7eb      	b.n	800bed0 <_malloc_r+0xa8>
 800bef8:	4623      	mov	r3, r4
 800befa:	6864      	ldr	r4, [r4, #4]
 800befc:	e7ae      	b.n	800be5c <_malloc_r+0x34>
 800befe:	463c      	mov	r4, r7
 800bf00:	687f      	ldr	r7, [r7, #4]
 800bf02:	e7b6      	b.n	800be72 <_malloc_r+0x4a>
 800bf04:	461a      	mov	r2, r3
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	d1fb      	bne.n	800bf04 <_malloc_r+0xdc>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6053      	str	r3, [r2, #4]
 800bf10:	e7de      	b.n	800bed0 <_malloc_r+0xa8>
 800bf12:	230c      	movs	r3, #12
 800bf14:	6033      	str	r3, [r6, #0]
 800bf16:	4630      	mov	r0, r6
 800bf18:	f000 f80c 	bl	800bf34 <__malloc_unlock>
 800bf1c:	e794      	b.n	800be48 <_malloc_r+0x20>
 800bf1e:	6005      	str	r5, [r0, #0]
 800bf20:	e7d6      	b.n	800bed0 <_malloc_r+0xa8>
 800bf22:	bf00      	nop
 800bf24:	20000774 	.word	0x20000774

0800bf28 <__malloc_lock>:
 800bf28:	4801      	ldr	r0, [pc, #4]	@ (800bf30 <__malloc_lock+0x8>)
 800bf2a:	f7ff b89c 	b.w	800b066 <__retarget_lock_acquire_recursive>
 800bf2e:	bf00      	nop
 800bf30:	2000076c 	.word	0x2000076c

0800bf34 <__malloc_unlock>:
 800bf34:	4801      	ldr	r0, [pc, #4]	@ (800bf3c <__malloc_unlock+0x8>)
 800bf36:	f7ff b897 	b.w	800b068 <__retarget_lock_release_recursive>
 800bf3a:	bf00      	nop
 800bf3c:	2000076c 	.word	0x2000076c

0800bf40 <_Balloc>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	69c6      	ldr	r6, [r0, #28]
 800bf44:	4604      	mov	r4, r0
 800bf46:	460d      	mov	r5, r1
 800bf48:	b976      	cbnz	r6, 800bf68 <_Balloc+0x28>
 800bf4a:	2010      	movs	r0, #16
 800bf4c:	f7ff ff42 	bl	800bdd4 <malloc>
 800bf50:	4602      	mov	r2, r0
 800bf52:	61e0      	str	r0, [r4, #28]
 800bf54:	b920      	cbnz	r0, 800bf60 <_Balloc+0x20>
 800bf56:	4b18      	ldr	r3, [pc, #96]	@ (800bfb8 <_Balloc+0x78>)
 800bf58:	4818      	ldr	r0, [pc, #96]	@ (800bfbc <_Balloc+0x7c>)
 800bf5a:	216b      	movs	r1, #107	@ 0x6b
 800bf5c:	f7ff f886 	bl	800b06c <__assert_func>
 800bf60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf64:	6006      	str	r6, [r0, #0]
 800bf66:	60c6      	str	r6, [r0, #12]
 800bf68:	69e6      	ldr	r6, [r4, #28]
 800bf6a:	68f3      	ldr	r3, [r6, #12]
 800bf6c:	b183      	cbz	r3, 800bf90 <_Balloc+0x50>
 800bf6e:	69e3      	ldr	r3, [r4, #28]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf76:	b9b8      	cbnz	r0, 800bfa8 <_Balloc+0x68>
 800bf78:	2101      	movs	r1, #1
 800bf7a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf7e:	1d72      	adds	r2, r6, #5
 800bf80:	0092      	lsls	r2, r2, #2
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 ff89 	bl	800ce9a <_calloc_r>
 800bf88:	b160      	cbz	r0, 800bfa4 <_Balloc+0x64>
 800bf8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf8e:	e00e      	b.n	800bfae <_Balloc+0x6e>
 800bf90:	2221      	movs	r2, #33	@ 0x21
 800bf92:	2104      	movs	r1, #4
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 ff80 	bl	800ce9a <_calloc_r>
 800bf9a:	69e3      	ldr	r3, [r4, #28]
 800bf9c:	60f0      	str	r0, [r6, #12]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e4      	bne.n	800bf6e <_Balloc+0x2e>
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	6802      	ldr	r2, [r0, #0]
 800bfaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfae:	2300      	movs	r3, #0
 800bfb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfb4:	e7f7      	b.n	800bfa6 <_Balloc+0x66>
 800bfb6:	bf00      	nop
 800bfb8:	0800d50d 	.word	0x0800d50d
 800bfbc:	0800d630 	.word	0x0800d630

0800bfc0 <_Bfree>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	69c6      	ldr	r6, [r0, #28]
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	b976      	cbnz	r6, 800bfe8 <_Bfree+0x28>
 800bfca:	2010      	movs	r0, #16
 800bfcc:	f7ff ff02 	bl	800bdd4 <malloc>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	61e8      	str	r0, [r5, #28]
 800bfd4:	b920      	cbnz	r0, 800bfe0 <_Bfree+0x20>
 800bfd6:	4b09      	ldr	r3, [pc, #36]	@ (800bffc <_Bfree+0x3c>)
 800bfd8:	4809      	ldr	r0, [pc, #36]	@ (800c000 <_Bfree+0x40>)
 800bfda:	218f      	movs	r1, #143	@ 0x8f
 800bfdc:	f7ff f846 	bl	800b06c <__assert_func>
 800bfe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfe4:	6006      	str	r6, [r0, #0]
 800bfe6:	60c6      	str	r6, [r0, #12]
 800bfe8:	b13c      	cbz	r4, 800bffa <_Bfree+0x3a>
 800bfea:	69eb      	ldr	r3, [r5, #28]
 800bfec:	6862      	ldr	r2, [r4, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bff4:	6021      	str	r1, [r4, #0]
 800bff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	0800d50d 	.word	0x0800d50d
 800c000:	0800d630 	.word	0x0800d630

0800c004 <__multadd>:
 800c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c008:	690d      	ldr	r5, [r1, #16]
 800c00a:	4607      	mov	r7, r0
 800c00c:	460c      	mov	r4, r1
 800c00e:	461e      	mov	r6, r3
 800c010:	f101 0c14 	add.w	ip, r1, #20
 800c014:	2000      	movs	r0, #0
 800c016:	f8dc 3000 	ldr.w	r3, [ip]
 800c01a:	b299      	uxth	r1, r3
 800c01c:	fb02 6101 	mla	r1, r2, r1, r6
 800c020:	0c1e      	lsrs	r6, r3, #16
 800c022:	0c0b      	lsrs	r3, r1, #16
 800c024:	fb02 3306 	mla	r3, r2, r6, r3
 800c028:	b289      	uxth	r1, r1
 800c02a:	3001      	adds	r0, #1
 800c02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c030:	4285      	cmp	r5, r0
 800c032:	f84c 1b04 	str.w	r1, [ip], #4
 800c036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c03a:	dcec      	bgt.n	800c016 <__multadd+0x12>
 800c03c:	b30e      	cbz	r6, 800c082 <__multadd+0x7e>
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	42ab      	cmp	r3, r5
 800c042:	dc19      	bgt.n	800c078 <__multadd+0x74>
 800c044:	6861      	ldr	r1, [r4, #4]
 800c046:	4638      	mov	r0, r7
 800c048:	3101      	adds	r1, #1
 800c04a:	f7ff ff79 	bl	800bf40 <_Balloc>
 800c04e:	4680      	mov	r8, r0
 800c050:	b928      	cbnz	r0, 800c05e <__multadd+0x5a>
 800c052:	4602      	mov	r2, r0
 800c054:	4b0c      	ldr	r3, [pc, #48]	@ (800c088 <__multadd+0x84>)
 800c056:	480d      	ldr	r0, [pc, #52]	@ (800c08c <__multadd+0x88>)
 800c058:	21ba      	movs	r1, #186	@ 0xba
 800c05a:	f7ff f807 	bl	800b06c <__assert_func>
 800c05e:	6922      	ldr	r2, [r4, #16]
 800c060:	3202      	adds	r2, #2
 800c062:	f104 010c 	add.w	r1, r4, #12
 800c066:	0092      	lsls	r2, r2, #2
 800c068:	300c      	adds	r0, #12
 800c06a:	f000 ff01 	bl	800ce70 <memcpy>
 800c06e:	4621      	mov	r1, r4
 800c070:	4638      	mov	r0, r7
 800c072:	f7ff ffa5 	bl	800bfc0 <_Bfree>
 800c076:	4644      	mov	r4, r8
 800c078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c07c:	3501      	adds	r5, #1
 800c07e:	615e      	str	r6, [r3, #20]
 800c080:	6125      	str	r5, [r4, #16]
 800c082:	4620      	mov	r0, r4
 800c084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c088:	0800d61f 	.word	0x0800d61f
 800c08c:	0800d630 	.word	0x0800d630

0800c090 <__hi0bits>:
 800c090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c094:	4603      	mov	r3, r0
 800c096:	bf36      	itet	cc
 800c098:	0403      	lslcc	r3, r0, #16
 800c09a:	2000      	movcs	r0, #0
 800c09c:	2010      	movcc	r0, #16
 800c09e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0a2:	bf3c      	itt	cc
 800c0a4:	021b      	lslcc	r3, r3, #8
 800c0a6:	3008      	addcc	r0, #8
 800c0a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0ac:	bf3c      	itt	cc
 800c0ae:	011b      	lslcc	r3, r3, #4
 800c0b0:	3004      	addcc	r0, #4
 800c0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b6:	bf3c      	itt	cc
 800c0b8:	009b      	lslcc	r3, r3, #2
 800c0ba:	3002      	addcc	r0, #2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	db05      	blt.n	800c0cc <__hi0bits+0x3c>
 800c0c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0c4:	f100 0001 	add.w	r0, r0, #1
 800c0c8:	bf08      	it	eq
 800c0ca:	2020      	moveq	r0, #32
 800c0cc:	4770      	bx	lr

0800c0ce <__lo0bits>:
 800c0ce:	6803      	ldr	r3, [r0, #0]
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	f013 0007 	ands.w	r0, r3, #7
 800c0d6:	d00b      	beq.n	800c0f0 <__lo0bits+0x22>
 800c0d8:	07d9      	lsls	r1, r3, #31
 800c0da:	d421      	bmi.n	800c120 <__lo0bits+0x52>
 800c0dc:	0798      	lsls	r0, r3, #30
 800c0de:	bf49      	itett	mi
 800c0e0:	085b      	lsrmi	r3, r3, #1
 800c0e2:	089b      	lsrpl	r3, r3, #2
 800c0e4:	2001      	movmi	r0, #1
 800c0e6:	6013      	strmi	r3, [r2, #0]
 800c0e8:	bf5c      	itt	pl
 800c0ea:	6013      	strpl	r3, [r2, #0]
 800c0ec:	2002      	movpl	r0, #2
 800c0ee:	4770      	bx	lr
 800c0f0:	b299      	uxth	r1, r3
 800c0f2:	b909      	cbnz	r1, 800c0f8 <__lo0bits+0x2a>
 800c0f4:	0c1b      	lsrs	r3, r3, #16
 800c0f6:	2010      	movs	r0, #16
 800c0f8:	b2d9      	uxtb	r1, r3
 800c0fa:	b909      	cbnz	r1, 800c100 <__lo0bits+0x32>
 800c0fc:	3008      	adds	r0, #8
 800c0fe:	0a1b      	lsrs	r3, r3, #8
 800c100:	0719      	lsls	r1, r3, #28
 800c102:	bf04      	itt	eq
 800c104:	091b      	lsreq	r3, r3, #4
 800c106:	3004      	addeq	r0, #4
 800c108:	0799      	lsls	r1, r3, #30
 800c10a:	bf04      	itt	eq
 800c10c:	089b      	lsreq	r3, r3, #2
 800c10e:	3002      	addeq	r0, #2
 800c110:	07d9      	lsls	r1, r3, #31
 800c112:	d403      	bmi.n	800c11c <__lo0bits+0x4e>
 800c114:	085b      	lsrs	r3, r3, #1
 800c116:	f100 0001 	add.w	r0, r0, #1
 800c11a:	d003      	beq.n	800c124 <__lo0bits+0x56>
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	4770      	bx	lr
 800c120:	2000      	movs	r0, #0
 800c122:	4770      	bx	lr
 800c124:	2020      	movs	r0, #32
 800c126:	4770      	bx	lr

0800c128 <__i2b>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	460c      	mov	r4, r1
 800c12c:	2101      	movs	r1, #1
 800c12e:	f7ff ff07 	bl	800bf40 <_Balloc>
 800c132:	4602      	mov	r2, r0
 800c134:	b928      	cbnz	r0, 800c142 <__i2b+0x1a>
 800c136:	4b05      	ldr	r3, [pc, #20]	@ (800c14c <__i2b+0x24>)
 800c138:	4805      	ldr	r0, [pc, #20]	@ (800c150 <__i2b+0x28>)
 800c13a:	f240 1145 	movw	r1, #325	@ 0x145
 800c13e:	f7fe ff95 	bl	800b06c <__assert_func>
 800c142:	2301      	movs	r3, #1
 800c144:	6144      	str	r4, [r0, #20]
 800c146:	6103      	str	r3, [r0, #16]
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	bf00      	nop
 800c14c:	0800d61f 	.word	0x0800d61f
 800c150:	0800d630 	.word	0x0800d630

0800c154 <__multiply>:
 800c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c158:	4614      	mov	r4, r2
 800c15a:	690a      	ldr	r2, [r1, #16]
 800c15c:	6923      	ldr	r3, [r4, #16]
 800c15e:	429a      	cmp	r2, r3
 800c160:	bfa8      	it	ge
 800c162:	4623      	movge	r3, r4
 800c164:	460f      	mov	r7, r1
 800c166:	bfa4      	itt	ge
 800c168:	460c      	movge	r4, r1
 800c16a:	461f      	movge	r7, r3
 800c16c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c174:	68a3      	ldr	r3, [r4, #8]
 800c176:	6861      	ldr	r1, [r4, #4]
 800c178:	eb0a 0609 	add.w	r6, sl, r9
 800c17c:	42b3      	cmp	r3, r6
 800c17e:	b085      	sub	sp, #20
 800c180:	bfb8      	it	lt
 800c182:	3101      	addlt	r1, #1
 800c184:	f7ff fedc 	bl	800bf40 <_Balloc>
 800c188:	b930      	cbnz	r0, 800c198 <__multiply+0x44>
 800c18a:	4602      	mov	r2, r0
 800c18c:	4b44      	ldr	r3, [pc, #272]	@ (800c2a0 <__multiply+0x14c>)
 800c18e:	4845      	ldr	r0, [pc, #276]	@ (800c2a4 <__multiply+0x150>)
 800c190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c194:	f7fe ff6a 	bl	800b06c <__assert_func>
 800c198:	f100 0514 	add.w	r5, r0, #20
 800c19c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1a0:	462b      	mov	r3, r5
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	4543      	cmp	r3, r8
 800c1a6:	d321      	bcc.n	800c1ec <__multiply+0x98>
 800c1a8:	f107 0114 	add.w	r1, r7, #20
 800c1ac:	f104 0214 	add.w	r2, r4, #20
 800c1b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c1b8:	9302      	str	r3, [sp, #8]
 800c1ba:	1b13      	subs	r3, r2, r4
 800c1bc:	3b15      	subs	r3, #21
 800c1be:	f023 0303 	bic.w	r3, r3, #3
 800c1c2:	3304      	adds	r3, #4
 800c1c4:	f104 0715 	add.w	r7, r4, #21
 800c1c8:	42ba      	cmp	r2, r7
 800c1ca:	bf38      	it	cc
 800c1cc:	2304      	movcc	r3, #4
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	9103      	str	r1, [sp, #12]
 800c1d4:	428b      	cmp	r3, r1
 800c1d6:	d80c      	bhi.n	800c1f2 <__multiply+0x9e>
 800c1d8:	2e00      	cmp	r6, #0
 800c1da:	dd03      	ble.n	800c1e4 <__multiply+0x90>
 800c1dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d05b      	beq.n	800c29c <__multiply+0x148>
 800c1e4:	6106      	str	r6, [r0, #16]
 800c1e6:	b005      	add	sp, #20
 800c1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ec:	f843 2b04 	str.w	r2, [r3], #4
 800c1f0:	e7d8      	b.n	800c1a4 <__multiply+0x50>
 800c1f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1f6:	f1ba 0f00 	cmp.w	sl, #0
 800c1fa:	d024      	beq.n	800c246 <__multiply+0xf2>
 800c1fc:	f104 0e14 	add.w	lr, r4, #20
 800c200:	46a9      	mov	r9, r5
 800c202:	f04f 0c00 	mov.w	ip, #0
 800c206:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c20a:	f8d9 3000 	ldr.w	r3, [r9]
 800c20e:	fa1f fb87 	uxth.w	fp, r7
 800c212:	b29b      	uxth	r3, r3
 800c214:	fb0a 330b 	mla	r3, sl, fp, r3
 800c218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c21c:	f8d9 7000 	ldr.w	r7, [r9]
 800c220:	4463      	add	r3, ip
 800c222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c226:	fb0a c70b 	mla	r7, sl, fp, ip
 800c22a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c22e:	b29b      	uxth	r3, r3
 800c230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c234:	4572      	cmp	r2, lr
 800c236:	f849 3b04 	str.w	r3, [r9], #4
 800c23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c23e:	d8e2      	bhi.n	800c206 <__multiply+0xb2>
 800c240:	9b01      	ldr	r3, [sp, #4]
 800c242:	f845 c003 	str.w	ip, [r5, r3]
 800c246:	9b03      	ldr	r3, [sp, #12]
 800c248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c24c:	3104      	adds	r1, #4
 800c24e:	f1b9 0f00 	cmp.w	r9, #0
 800c252:	d021      	beq.n	800c298 <__multiply+0x144>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	f104 0c14 	add.w	ip, r4, #20
 800c25a:	46ae      	mov	lr, r5
 800c25c:	f04f 0a00 	mov.w	sl, #0
 800c260:	f8bc b000 	ldrh.w	fp, [ip]
 800c264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c268:	fb09 770b 	mla	r7, r9, fp, r7
 800c26c:	4457      	add	r7, sl
 800c26e:	b29b      	uxth	r3, r3
 800c270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c274:	f84e 3b04 	str.w	r3, [lr], #4
 800c278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c27c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c280:	f8be 3000 	ldrh.w	r3, [lr]
 800c284:	fb09 330a 	mla	r3, r9, sl, r3
 800c288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c28c:	4562      	cmp	r2, ip
 800c28e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c292:	d8e5      	bhi.n	800c260 <__multiply+0x10c>
 800c294:	9f01      	ldr	r7, [sp, #4]
 800c296:	51eb      	str	r3, [r5, r7]
 800c298:	3504      	adds	r5, #4
 800c29a:	e799      	b.n	800c1d0 <__multiply+0x7c>
 800c29c:	3e01      	subs	r6, #1
 800c29e:	e79b      	b.n	800c1d8 <__multiply+0x84>
 800c2a0:	0800d61f 	.word	0x0800d61f
 800c2a4:	0800d630 	.word	0x0800d630

0800c2a8 <__pow5mult>:
 800c2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2ac:	4615      	mov	r5, r2
 800c2ae:	f012 0203 	ands.w	r2, r2, #3
 800c2b2:	4607      	mov	r7, r0
 800c2b4:	460e      	mov	r6, r1
 800c2b6:	d007      	beq.n	800c2c8 <__pow5mult+0x20>
 800c2b8:	4c25      	ldr	r4, [pc, #148]	@ (800c350 <__pow5mult+0xa8>)
 800c2ba:	3a01      	subs	r2, #1
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2c2:	f7ff fe9f 	bl	800c004 <__multadd>
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	10ad      	asrs	r5, r5, #2
 800c2ca:	d03d      	beq.n	800c348 <__pow5mult+0xa0>
 800c2cc:	69fc      	ldr	r4, [r7, #28]
 800c2ce:	b97c      	cbnz	r4, 800c2f0 <__pow5mult+0x48>
 800c2d0:	2010      	movs	r0, #16
 800c2d2:	f7ff fd7f 	bl	800bdd4 <malloc>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	61f8      	str	r0, [r7, #28]
 800c2da:	b928      	cbnz	r0, 800c2e8 <__pow5mult+0x40>
 800c2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800c354 <__pow5mult+0xac>)
 800c2de:	481e      	ldr	r0, [pc, #120]	@ (800c358 <__pow5mult+0xb0>)
 800c2e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2e4:	f7fe fec2 	bl	800b06c <__assert_func>
 800c2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2ec:	6004      	str	r4, [r0, #0]
 800c2ee:	60c4      	str	r4, [r0, #12]
 800c2f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2f8:	b94c      	cbnz	r4, 800c30e <__pow5mult+0x66>
 800c2fa:	f240 2171 	movw	r1, #625	@ 0x271
 800c2fe:	4638      	mov	r0, r7
 800c300:	f7ff ff12 	bl	800c128 <__i2b>
 800c304:	2300      	movs	r3, #0
 800c306:	f8c8 0008 	str.w	r0, [r8, #8]
 800c30a:	4604      	mov	r4, r0
 800c30c:	6003      	str	r3, [r0, #0]
 800c30e:	f04f 0900 	mov.w	r9, #0
 800c312:	07eb      	lsls	r3, r5, #31
 800c314:	d50a      	bpl.n	800c32c <__pow5mult+0x84>
 800c316:	4631      	mov	r1, r6
 800c318:	4622      	mov	r2, r4
 800c31a:	4638      	mov	r0, r7
 800c31c:	f7ff ff1a 	bl	800c154 <__multiply>
 800c320:	4631      	mov	r1, r6
 800c322:	4680      	mov	r8, r0
 800c324:	4638      	mov	r0, r7
 800c326:	f7ff fe4b 	bl	800bfc0 <_Bfree>
 800c32a:	4646      	mov	r6, r8
 800c32c:	106d      	asrs	r5, r5, #1
 800c32e:	d00b      	beq.n	800c348 <__pow5mult+0xa0>
 800c330:	6820      	ldr	r0, [r4, #0]
 800c332:	b938      	cbnz	r0, 800c344 <__pow5mult+0x9c>
 800c334:	4622      	mov	r2, r4
 800c336:	4621      	mov	r1, r4
 800c338:	4638      	mov	r0, r7
 800c33a:	f7ff ff0b 	bl	800c154 <__multiply>
 800c33e:	6020      	str	r0, [r4, #0]
 800c340:	f8c0 9000 	str.w	r9, [r0]
 800c344:	4604      	mov	r4, r0
 800c346:	e7e4      	b.n	800c312 <__pow5mult+0x6a>
 800c348:	4630      	mov	r0, r6
 800c34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c34e:	bf00      	nop
 800c350:	0800d68c 	.word	0x0800d68c
 800c354:	0800d50d 	.word	0x0800d50d
 800c358:	0800d630 	.word	0x0800d630

0800c35c <__lshift>:
 800c35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c360:	460c      	mov	r4, r1
 800c362:	6849      	ldr	r1, [r1, #4]
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	4607      	mov	r7, r0
 800c36e:	4691      	mov	r9, r2
 800c370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c374:	f108 0601 	add.w	r6, r8, #1
 800c378:	42b3      	cmp	r3, r6
 800c37a:	db0b      	blt.n	800c394 <__lshift+0x38>
 800c37c:	4638      	mov	r0, r7
 800c37e:	f7ff fddf 	bl	800bf40 <_Balloc>
 800c382:	4605      	mov	r5, r0
 800c384:	b948      	cbnz	r0, 800c39a <__lshift+0x3e>
 800c386:	4602      	mov	r2, r0
 800c388:	4b28      	ldr	r3, [pc, #160]	@ (800c42c <__lshift+0xd0>)
 800c38a:	4829      	ldr	r0, [pc, #164]	@ (800c430 <__lshift+0xd4>)
 800c38c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c390:	f7fe fe6c 	bl	800b06c <__assert_func>
 800c394:	3101      	adds	r1, #1
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	e7ee      	b.n	800c378 <__lshift+0x1c>
 800c39a:	2300      	movs	r3, #0
 800c39c:	f100 0114 	add.w	r1, r0, #20
 800c3a0:	f100 0210 	add.w	r2, r0, #16
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	4553      	cmp	r3, sl
 800c3a8:	db33      	blt.n	800c412 <__lshift+0xb6>
 800c3aa:	6920      	ldr	r0, [r4, #16]
 800c3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3b0:	f104 0314 	add.w	r3, r4, #20
 800c3b4:	f019 091f 	ands.w	r9, r9, #31
 800c3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3c0:	d02b      	beq.n	800c41a <__lshift+0xbe>
 800c3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c3c6:	468a      	mov	sl, r1
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800c3d0:	4310      	orrs	r0, r2
 800c3d2:	f84a 0b04 	str.w	r0, [sl], #4
 800c3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3da:	459c      	cmp	ip, r3
 800c3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3e0:	d8f3      	bhi.n	800c3ca <__lshift+0x6e>
 800c3e2:	ebac 0304 	sub.w	r3, ip, r4
 800c3e6:	3b15      	subs	r3, #21
 800c3e8:	f023 0303 	bic.w	r3, r3, #3
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	f104 0015 	add.w	r0, r4, #21
 800c3f2:	4584      	cmp	ip, r0
 800c3f4:	bf38      	it	cc
 800c3f6:	2304      	movcc	r3, #4
 800c3f8:	50ca      	str	r2, [r1, r3]
 800c3fa:	b10a      	cbz	r2, 800c400 <__lshift+0xa4>
 800c3fc:	f108 0602 	add.w	r6, r8, #2
 800c400:	3e01      	subs	r6, #1
 800c402:	4638      	mov	r0, r7
 800c404:	612e      	str	r6, [r5, #16]
 800c406:	4621      	mov	r1, r4
 800c408:	f7ff fdda 	bl	800bfc0 <_Bfree>
 800c40c:	4628      	mov	r0, r5
 800c40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c412:	f842 0f04 	str.w	r0, [r2, #4]!
 800c416:	3301      	adds	r3, #1
 800c418:	e7c5      	b.n	800c3a6 <__lshift+0x4a>
 800c41a:	3904      	subs	r1, #4
 800c41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c420:	f841 2f04 	str.w	r2, [r1, #4]!
 800c424:	459c      	cmp	ip, r3
 800c426:	d8f9      	bhi.n	800c41c <__lshift+0xc0>
 800c428:	e7ea      	b.n	800c400 <__lshift+0xa4>
 800c42a:	bf00      	nop
 800c42c:	0800d61f 	.word	0x0800d61f
 800c430:	0800d630 	.word	0x0800d630

0800c434 <__mcmp>:
 800c434:	690a      	ldr	r2, [r1, #16]
 800c436:	4603      	mov	r3, r0
 800c438:	6900      	ldr	r0, [r0, #16]
 800c43a:	1a80      	subs	r0, r0, r2
 800c43c:	b530      	push	{r4, r5, lr}
 800c43e:	d10e      	bne.n	800c45e <__mcmp+0x2a>
 800c440:	3314      	adds	r3, #20
 800c442:	3114      	adds	r1, #20
 800c444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c44c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c454:	4295      	cmp	r5, r2
 800c456:	d003      	beq.n	800c460 <__mcmp+0x2c>
 800c458:	d205      	bcs.n	800c466 <__mcmp+0x32>
 800c45a:	f04f 30ff 	mov.w	r0, #4294967295
 800c45e:	bd30      	pop	{r4, r5, pc}
 800c460:	42a3      	cmp	r3, r4
 800c462:	d3f3      	bcc.n	800c44c <__mcmp+0x18>
 800c464:	e7fb      	b.n	800c45e <__mcmp+0x2a>
 800c466:	2001      	movs	r0, #1
 800c468:	e7f9      	b.n	800c45e <__mcmp+0x2a>
	...

0800c46c <__mdiff>:
 800c46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	4689      	mov	r9, r1
 800c472:	4606      	mov	r6, r0
 800c474:	4611      	mov	r1, r2
 800c476:	4648      	mov	r0, r9
 800c478:	4614      	mov	r4, r2
 800c47a:	f7ff ffdb 	bl	800c434 <__mcmp>
 800c47e:	1e05      	subs	r5, r0, #0
 800c480:	d112      	bne.n	800c4a8 <__mdiff+0x3c>
 800c482:	4629      	mov	r1, r5
 800c484:	4630      	mov	r0, r6
 800c486:	f7ff fd5b 	bl	800bf40 <_Balloc>
 800c48a:	4602      	mov	r2, r0
 800c48c:	b928      	cbnz	r0, 800c49a <__mdiff+0x2e>
 800c48e:	4b3f      	ldr	r3, [pc, #252]	@ (800c58c <__mdiff+0x120>)
 800c490:	f240 2137 	movw	r1, #567	@ 0x237
 800c494:	483e      	ldr	r0, [pc, #248]	@ (800c590 <__mdiff+0x124>)
 800c496:	f7fe fde9 	bl	800b06c <__assert_func>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	b003      	add	sp, #12
 800c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a8:	bfbc      	itt	lt
 800c4aa:	464b      	movlt	r3, r9
 800c4ac:	46a1      	movlt	r9, r4
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4b4:	bfba      	itte	lt
 800c4b6:	461c      	movlt	r4, r3
 800c4b8:	2501      	movlt	r5, #1
 800c4ba:	2500      	movge	r5, #0
 800c4bc:	f7ff fd40 	bl	800bf40 <_Balloc>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	b918      	cbnz	r0, 800c4cc <__mdiff+0x60>
 800c4c4:	4b31      	ldr	r3, [pc, #196]	@ (800c58c <__mdiff+0x120>)
 800c4c6:	f240 2145 	movw	r1, #581	@ 0x245
 800c4ca:	e7e3      	b.n	800c494 <__mdiff+0x28>
 800c4cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4d0:	6926      	ldr	r6, [r4, #16]
 800c4d2:	60c5      	str	r5, [r0, #12]
 800c4d4:	f109 0310 	add.w	r3, r9, #16
 800c4d8:	f109 0514 	add.w	r5, r9, #20
 800c4dc:	f104 0e14 	add.w	lr, r4, #20
 800c4e0:	f100 0b14 	add.w	fp, r0, #20
 800c4e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	46d9      	mov	r9, fp
 800c4f0:	f04f 0c00 	mov.w	ip, #0
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4fe:	9301      	str	r3, [sp, #4]
 800c500:	fa1f f38a 	uxth.w	r3, sl
 800c504:	4619      	mov	r1, r3
 800c506:	b283      	uxth	r3, r0
 800c508:	1acb      	subs	r3, r1, r3
 800c50a:	0c00      	lsrs	r0, r0, #16
 800c50c:	4463      	add	r3, ip
 800c50e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c516:	b29b      	uxth	r3, r3
 800c518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c51c:	4576      	cmp	r6, lr
 800c51e:	f849 3b04 	str.w	r3, [r9], #4
 800c522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c526:	d8e5      	bhi.n	800c4f4 <__mdiff+0x88>
 800c528:	1b33      	subs	r3, r6, r4
 800c52a:	3b15      	subs	r3, #21
 800c52c:	f023 0303 	bic.w	r3, r3, #3
 800c530:	3415      	adds	r4, #21
 800c532:	3304      	adds	r3, #4
 800c534:	42a6      	cmp	r6, r4
 800c536:	bf38      	it	cc
 800c538:	2304      	movcc	r3, #4
 800c53a:	441d      	add	r5, r3
 800c53c:	445b      	add	r3, fp
 800c53e:	461e      	mov	r6, r3
 800c540:	462c      	mov	r4, r5
 800c542:	4544      	cmp	r4, r8
 800c544:	d30e      	bcc.n	800c564 <__mdiff+0xf8>
 800c546:	f108 0103 	add.w	r1, r8, #3
 800c54a:	1b49      	subs	r1, r1, r5
 800c54c:	f021 0103 	bic.w	r1, r1, #3
 800c550:	3d03      	subs	r5, #3
 800c552:	45a8      	cmp	r8, r5
 800c554:	bf38      	it	cc
 800c556:	2100      	movcc	r1, #0
 800c558:	440b      	add	r3, r1
 800c55a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c55e:	b191      	cbz	r1, 800c586 <__mdiff+0x11a>
 800c560:	6117      	str	r7, [r2, #16]
 800c562:	e79d      	b.n	800c4a0 <__mdiff+0x34>
 800c564:	f854 1b04 	ldr.w	r1, [r4], #4
 800c568:	46e6      	mov	lr, ip
 800c56a:	0c08      	lsrs	r0, r1, #16
 800c56c:	fa1c fc81 	uxtah	ip, ip, r1
 800c570:	4471      	add	r1, lr
 800c572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c576:	b289      	uxth	r1, r1
 800c578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c57c:	f846 1b04 	str.w	r1, [r6], #4
 800c580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c584:	e7dd      	b.n	800c542 <__mdiff+0xd6>
 800c586:	3f01      	subs	r7, #1
 800c588:	e7e7      	b.n	800c55a <__mdiff+0xee>
 800c58a:	bf00      	nop
 800c58c:	0800d61f 	.word	0x0800d61f
 800c590:	0800d630 	.word	0x0800d630

0800c594 <__d2b>:
 800c594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c598:	460f      	mov	r7, r1
 800c59a:	2101      	movs	r1, #1
 800c59c:	ec59 8b10 	vmov	r8, r9, d0
 800c5a0:	4616      	mov	r6, r2
 800c5a2:	f7ff fccd 	bl	800bf40 <_Balloc>
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	b930      	cbnz	r0, 800c5b8 <__d2b+0x24>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	4b23      	ldr	r3, [pc, #140]	@ (800c63c <__d2b+0xa8>)
 800c5ae:	4824      	ldr	r0, [pc, #144]	@ (800c640 <__d2b+0xac>)
 800c5b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5b4:	f7fe fd5a 	bl	800b06c <__assert_func>
 800c5b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5c0:	b10d      	cbz	r5, 800c5c6 <__d2b+0x32>
 800c5c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	f1b8 0300 	subs.w	r3, r8, #0
 800c5cc:	d023      	beq.n	800c616 <__d2b+0x82>
 800c5ce:	4668      	mov	r0, sp
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	f7ff fd7c 	bl	800c0ce <__lo0bits>
 800c5d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5da:	b1d0      	cbz	r0, 800c612 <__d2b+0x7e>
 800c5dc:	f1c0 0320 	rsb	r3, r0, #32
 800c5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	40c2      	lsrs	r2, r0
 800c5e8:	6163      	str	r3, [r4, #20]
 800c5ea:	9201      	str	r2, [sp, #4]
 800c5ec:	9b01      	ldr	r3, [sp, #4]
 800c5ee:	61a3      	str	r3, [r4, #24]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	bf0c      	ite	eq
 800c5f4:	2201      	moveq	r2, #1
 800c5f6:	2202      	movne	r2, #2
 800c5f8:	6122      	str	r2, [r4, #16]
 800c5fa:	b1a5      	cbz	r5, 800c626 <__d2b+0x92>
 800c5fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c600:	4405      	add	r5, r0
 800c602:	603d      	str	r5, [r7, #0]
 800c604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c608:	6030      	str	r0, [r6, #0]
 800c60a:	4620      	mov	r0, r4
 800c60c:	b003      	add	sp, #12
 800c60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c612:	6161      	str	r1, [r4, #20]
 800c614:	e7ea      	b.n	800c5ec <__d2b+0x58>
 800c616:	a801      	add	r0, sp, #4
 800c618:	f7ff fd59 	bl	800c0ce <__lo0bits>
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	6163      	str	r3, [r4, #20]
 800c620:	3020      	adds	r0, #32
 800c622:	2201      	movs	r2, #1
 800c624:	e7e8      	b.n	800c5f8 <__d2b+0x64>
 800c626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c62a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c62e:	6038      	str	r0, [r7, #0]
 800c630:	6918      	ldr	r0, [r3, #16]
 800c632:	f7ff fd2d 	bl	800c090 <__hi0bits>
 800c636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c63a:	e7e5      	b.n	800c608 <__d2b+0x74>
 800c63c:	0800d61f 	.word	0x0800d61f
 800c640:	0800d630 	.word	0x0800d630

0800c644 <__ssputs_r>:
 800c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c648:	688e      	ldr	r6, [r1, #8]
 800c64a:	461f      	mov	r7, r3
 800c64c:	42be      	cmp	r6, r7
 800c64e:	680b      	ldr	r3, [r1, #0]
 800c650:	4682      	mov	sl, r0
 800c652:	460c      	mov	r4, r1
 800c654:	4690      	mov	r8, r2
 800c656:	d82d      	bhi.n	800c6b4 <__ssputs_r+0x70>
 800c658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c65c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c660:	d026      	beq.n	800c6b0 <__ssputs_r+0x6c>
 800c662:	6965      	ldr	r5, [r4, #20]
 800c664:	6909      	ldr	r1, [r1, #16]
 800c666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c66a:	eba3 0901 	sub.w	r9, r3, r1
 800c66e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c672:	1c7b      	adds	r3, r7, #1
 800c674:	444b      	add	r3, r9
 800c676:	106d      	asrs	r5, r5, #1
 800c678:	429d      	cmp	r5, r3
 800c67a:	bf38      	it	cc
 800c67c:	461d      	movcc	r5, r3
 800c67e:	0553      	lsls	r3, r2, #21
 800c680:	d527      	bpl.n	800c6d2 <__ssputs_r+0x8e>
 800c682:	4629      	mov	r1, r5
 800c684:	f7ff fbd0 	bl	800be28 <_malloc_r>
 800c688:	4606      	mov	r6, r0
 800c68a:	b360      	cbz	r0, 800c6e6 <__ssputs_r+0xa2>
 800c68c:	6921      	ldr	r1, [r4, #16]
 800c68e:	464a      	mov	r2, r9
 800c690:	f000 fbee 	bl	800ce70 <memcpy>
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c69e:	81a3      	strh	r3, [r4, #12]
 800c6a0:	6126      	str	r6, [r4, #16]
 800c6a2:	6165      	str	r5, [r4, #20]
 800c6a4:	444e      	add	r6, r9
 800c6a6:	eba5 0509 	sub.w	r5, r5, r9
 800c6aa:	6026      	str	r6, [r4, #0]
 800c6ac:	60a5      	str	r5, [r4, #8]
 800c6ae:	463e      	mov	r6, r7
 800c6b0:	42be      	cmp	r6, r7
 800c6b2:	d900      	bls.n	800c6b6 <__ssputs_r+0x72>
 800c6b4:	463e      	mov	r6, r7
 800c6b6:	6820      	ldr	r0, [r4, #0]
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	4641      	mov	r1, r8
 800c6bc:	f000 fbae 	bl	800ce1c <memmove>
 800c6c0:	68a3      	ldr	r3, [r4, #8]
 800c6c2:	1b9b      	subs	r3, r3, r6
 800c6c4:	60a3      	str	r3, [r4, #8]
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	4433      	add	r3, r6
 800c6ca:	6023      	str	r3, [r4, #0]
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d2:	462a      	mov	r2, r5
 800c6d4:	f000 fc07 	bl	800cee6 <_realloc_r>
 800c6d8:	4606      	mov	r6, r0
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d1e0      	bne.n	800c6a0 <__ssputs_r+0x5c>
 800c6de:	6921      	ldr	r1, [r4, #16]
 800c6e0:	4650      	mov	r0, sl
 800c6e2:	f7ff fb2d 	bl	800bd40 <_free_r>
 800c6e6:	230c      	movs	r3, #12
 800c6e8:	f8ca 3000 	str.w	r3, [sl]
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f8:	e7e9      	b.n	800c6ce <__ssputs_r+0x8a>
	...

0800c6fc <_svfiprintf_r>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	4698      	mov	r8, r3
 800c702:	898b      	ldrh	r3, [r1, #12]
 800c704:	061b      	lsls	r3, r3, #24
 800c706:	b09d      	sub	sp, #116	@ 0x74
 800c708:	4607      	mov	r7, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	4614      	mov	r4, r2
 800c70e:	d510      	bpl.n	800c732 <_svfiprintf_r+0x36>
 800c710:	690b      	ldr	r3, [r1, #16]
 800c712:	b973      	cbnz	r3, 800c732 <_svfiprintf_r+0x36>
 800c714:	2140      	movs	r1, #64	@ 0x40
 800c716:	f7ff fb87 	bl	800be28 <_malloc_r>
 800c71a:	6028      	str	r0, [r5, #0]
 800c71c:	6128      	str	r0, [r5, #16]
 800c71e:	b930      	cbnz	r0, 800c72e <_svfiprintf_r+0x32>
 800c720:	230c      	movs	r3, #12
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	f04f 30ff 	mov.w	r0, #4294967295
 800c728:	b01d      	add	sp, #116	@ 0x74
 800c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72e:	2340      	movs	r3, #64	@ 0x40
 800c730:	616b      	str	r3, [r5, #20]
 800c732:	2300      	movs	r3, #0
 800c734:	9309      	str	r3, [sp, #36]	@ 0x24
 800c736:	2320      	movs	r3, #32
 800c738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c740:	2330      	movs	r3, #48	@ 0x30
 800c742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8e0 <_svfiprintf_r+0x1e4>
 800c746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c74a:	f04f 0901 	mov.w	r9, #1
 800c74e:	4623      	mov	r3, r4
 800c750:	469a      	mov	sl, r3
 800c752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c756:	b10a      	cbz	r2, 800c75c <_svfiprintf_r+0x60>
 800c758:	2a25      	cmp	r2, #37	@ 0x25
 800c75a:	d1f9      	bne.n	800c750 <_svfiprintf_r+0x54>
 800c75c:	ebba 0b04 	subs.w	fp, sl, r4
 800c760:	d00b      	beq.n	800c77a <_svfiprintf_r+0x7e>
 800c762:	465b      	mov	r3, fp
 800c764:	4622      	mov	r2, r4
 800c766:	4629      	mov	r1, r5
 800c768:	4638      	mov	r0, r7
 800c76a:	f7ff ff6b 	bl	800c644 <__ssputs_r>
 800c76e:	3001      	adds	r0, #1
 800c770:	f000 80a7 	beq.w	800c8c2 <_svfiprintf_r+0x1c6>
 800c774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c776:	445a      	add	r2, fp
 800c778:	9209      	str	r2, [sp, #36]	@ 0x24
 800c77a:	f89a 3000 	ldrb.w	r3, [sl]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 809f 	beq.w	800c8c2 <_svfiprintf_r+0x1c6>
 800c784:	2300      	movs	r3, #0
 800c786:	f04f 32ff 	mov.w	r2, #4294967295
 800c78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c78e:	f10a 0a01 	add.w	sl, sl, #1
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	9307      	str	r3, [sp, #28]
 800c796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c79a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c79c:	4654      	mov	r4, sl
 800c79e:	2205      	movs	r2, #5
 800c7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a4:	484e      	ldr	r0, [pc, #312]	@ (800c8e0 <_svfiprintf_r+0x1e4>)
 800c7a6:	f7f3 fd4b 	bl	8000240 <memchr>
 800c7aa:	9a04      	ldr	r2, [sp, #16]
 800c7ac:	b9d8      	cbnz	r0, 800c7e6 <_svfiprintf_r+0xea>
 800c7ae:	06d0      	lsls	r0, r2, #27
 800c7b0:	bf44      	itt	mi
 800c7b2:	2320      	movmi	r3, #32
 800c7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7b8:	0711      	lsls	r1, r2, #28
 800c7ba:	bf44      	itt	mi
 800c7bc:	232b      	movmi	r3, #43	@ 0x2b
 800c7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7c8:	d015      	beq.n	800c7f6 <_svfiprintf_r+0xfa>
 800c7ca:	9a07      	ldr	r2, [sp, #28]
 800c7cc:	4654      	mov	r4, sl
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	f04f 0c0a 	mov.w	ip, #10
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7da:	3b30      	subs	r3, #48	@ 0x30
 800c7dc:	2b09      	cmp	r3, #9
 800c7de:	d94b      	bls.n	800c878 <_svfiprintf_r+0x17c>
 800c7e0:	b1b0      	cbz	r0, 800c810 <_svfiprintf_r+0x114>
 800c7e2:	9207      	str	r2, [sp, #28]
 800c7e4:	e014      	b.n	800c810 <_svfiprintf_r+0x114>
 800c7e6:	eba0 0308 	sub.w	r3, r0, r8
 800c7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	46a2      	mov	sl, r4
 800c7f4:	e7d2      	b.n	800c79c <_svfiprintf_r+0xa0>
 800c7f6:	9b03      	ldr	r3, [sp, #12]
 800c7f8:	1d19      	adds	r1, r3, #4
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	9103      	str	r1, [sp, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bfbb      	ittet	lt
 800c802:	425b      	neglt	r3, r3
 800c804:	f042 0202 	orrlt.w	r2, r2, #2
 800c808:	9307      	strge	r3, [sp, #28]
 800c80a:	9307      	strlt	r3, [sp, #28]
 800c80c:	bfb8      	it	lt
 800c80e:	9204      	strlt	r2, [sp, #16]
 800c810:	7823      	ldrb	r3, [r4, #0]
 800c812:	2b2e      	cmp	r3, #46	@ 0x2e
 800c814:	d10a      	bne.n	800c82c <_svfiprintf_r+0x130>
 800c816:	7863      	ldrb	r3, [r4, #1]
 800c818:	2b2a      	cmp	r3, #42	@ 0x2a
 800c81a:	d132      	bne.n	800c882 <_svfiprintf_r+0x186>
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	1d1a      	adds	r2, r3, #4
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	9203      	str	r2, [sp, #12]
 800c824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c828:	3402      	adds	r4, #2
 800c82a:	9305      	str	r3, [sp, #20]
 800c82c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8f0 <_svfiprintf_r+0x1f4>
 800c830:	7821      	ldrb	r1, [r4, #0]
 800c832:	2203      	movs	r2, #3
 800c834:	4650      	mov	r0, sl
 800c836:	f7f3 fd03 	bl	8000240 <memchr>
 800c83a:	b138      	cbz	r0, 800c84c <_svfiprintf_r+0x150>
 800c83c:	9b04      	ldr	r3, [sp, #16]
 800c83e:	eba0 000a 	sub.w	r0, r0, sl
 800c842:	2240      	movs	r2, #64	@ 0x40
 800c844:	4082      	lsls	r2, r0
 800c846:	4313      	orrs	r3, r2
 800c848:	3401      	adds	r4, #1
 800c84a:	9304      	str	r3, [sp, #16]
 800c84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c850:	4824      	ldr	r0, [pc, #144]	@ (800c8e4 <_svfiprintf_r+0x1e8>)
 800c852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c856:	2206      	movs	r2, #6
 800c858:	f7f3 fcf2 	bl	8000240 <memchr>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d036      	beq.n	800c8ce <_svfiprintf_r+0x1d2>
 800c860:	4b21      	ldr	r3, [pc, #132]	@ (800c8e8 <_svfiprintf_r+0x1ec>)
 800c862:	bb1b      	cbnz	r3, 800c8ac <_svfiprintf_r+0x1b0>
 800c864:	9b03      	ldr	r3, [sp, #12]
 800c866:	3307      	adds	r3, #7
 800c868:	f023 0307 	bic.w	r3, r3, #7
 800c86c:	3308      	adds	r3, #8
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c872:	4433      	add	r3, r6
 800c874:	9309      	str	r3, [sp, #36]	@ 0x24
 800c876:	e76a      	b.n	800c74e <_svfiprintf_r+0x52>
 800c878:	fb0c 3202 	mla	r2, ip, r2, r3
 800c87c:	460c      	mov	r4, r1
 800c87e:	2001      	movs	r0, #1
 800c880:	e7a8      	b.n	800c7d4 <_svfiprintf_r+0xd8>
 800c882:	2300      	movs	r3, #0
 800c884:	3401      	adds	r4, #1
 800c886:	9305      	str	r3, [sp, #20]
 800c888:	4619      	mov	r1, r3
 800c88a:	f04f 0c0a 	mov.w	ip, #10
 800c88e:	4620      	mov	r0, r4
 800c890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c894:	3a30      	subs	r2, #48	@ 0x30
 800c896:	2a09      	cmp	r2, #9
 800c898:	d903      	bls.n	800c8a2 <_svfiprintf_r+0x1a6>
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d0c6      	beq.n	800c82c <_svfiprintf_r+0x130>
 800c89e:	9105      	str	r1, [sp, #20]
 800c8a0:	e7c4      	b.n	800c82c <_svfiprintf_r+0x130>
 800c8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e7f0      	b.n	800c88e <_svfiprintf_r+0x192>
 800c8ac:	ab03      	add	r3, sp, #12
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	462a      	mov	r2, r5
 800c8b2:	4b0e      	ldr	r3, [pc, #56]	@ (800c8ec <_svfiprintf_r+0x1f0>)
 800c8b4:	a904      	add	r1, sp, #16
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	f7fd fe0c 	bl	800a4d4 <_printf_float>
 800c8bc:	1c42      	adds	r2, r0, #1
 800c8be:	4606      	mov	r6, r0
 800c8c0:	d1d6      	bne.n	800c870 <_svfiprintf_r+0x174>
 800c8c2:	89ab      	ldrh	r3, [r5, #12]
 800c8c4:	065b      	lsls	r3, r3, #25
 800c8c6:	f53f af2d 	bmi.w	800c724 <_svfiprintf_r+0x28>
 800c8ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8cc:	e72c      	b.n	800c728 <_svfiprintf_r+0x2c>
 800c8ce:	ab03      	add	r3, sp, #12
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	462a      	mov	r2, r5
 800c8d4:	4b05      	ldr	r3, [pc, #20]	@ (800c8ec <_svfiprintf_r+0x1f0>)
 800c8d6:	a904      	add	r1, sp, #16
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f7fe f893 	bl	800aa04 <_printf_i>
 800c8de:	e7ed      	b.n	800c8bc <_svfiprintf_r+0x1c0>
 800c8e0:	0800d788 	.word	0x0800d788
 800c8e4:	0800d792 	.word	0x0800d792
 800c8e8:	0800a4d5 	.word	0x0800a4d5
 800c8ec:	0800c645 	.word	0x0800c645
 800c8f0:	0800d78e 	.word	0x0800d78e

0800c8f4 <__sfputc_r>:
 800c8f4:	6893      	ldr	r3, [r2, #8]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	b410      	push	{r4}
 800c8fc:	6093      	str	r3, [r2, #8]
 800c8fe:	da08      	bge.n	800c912 <__sfputc_r+0x1e>
 800c900:	6994      	ldr	r4, [r2, #24]
 800c902:	42a3      	cmp	r3, r4
 800c904:	db01      	blt.n	800c90a <__sfputc_r+0x16>
 800c906:	290a      	cmp	r1, #10
 800c908:	d103      	bne.n	800c912 <__sfputc_r+0x1e>
 800c90a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c90e:	f000 b9f1 	b.w	800ccf4 <__swbuf_r>
 800c912:	6813      	ldr	r3, [r2, #0]
 800c914:	1c58      	adds	r0, r3, #1
 800c916:	6010      	str	r0, [r2, #0]
 800c918:	7019      	strb	r1, [r3, #0]
 800c91a:	4608      	mov	r0, r1
 800c91c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <__sfputs_r>:
 800c922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c924:	4606      	mov	r6, r0
 800c926:	460f      	mov	r7, r1
 800c928:	4614      	mov	r4, r2
 800c92a:	18d5      	adds	r5, r2, r3
 800c92c:	42ac      	cmp	r4, r5
 800c92e:	d101      	bne.n	800c934 <__sfputs_r+0x12>
 800c930:	2000      	movs	r0, #0
 800c932:	e007      	b.n	800c944 <__sfputs_r+0x22>
 800c934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c938:	463a      	mov	r2, r7
 800c93a:	4630      	mov	r0, r6
 800c93c:	f7ff ffda 	bl	800c8f4 <__sfputc_r>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d1f3      	bne.n	800c92c <__sfputs_r+0xa>
 800c944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c948 <_vfiprintf_r>:
 800c948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	460d      	mov	r5, r1
 800c94e:	b09d      	sub	sp, #116	@ 0x74
 800c950:	4614      	mov	r4, r2
 800c952:	4698      	mov	r8, r3
 800c954:	4606      	mov	r6, r0
 800c956:	b118      	cbz	r0, 800c960 <_vfiprintf_r+0x18>
 800c958:	6a03      	ldr	r3, [r0, #32]
 800c95a:	b90b      	cbnz	r3, 800c960 <_vfiprintf_r+0x18>
 800c95c:	f7fe f9fe 	bl	800ad5c <__sinit>
 800c960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c962:	07d9      	lsls	r1, r3, #31
 800c964:	d405      	bmi.n	800c972 <_vfiprintf_r+0x2a>
 800c966:	89ab      	ldrh	r3, [r5, #12]
 800c968:	059a      	lsls	r2, r3, #22
 800c96a:	d402      	bmi.n	800c972 <_vfiprintf_r+0x2a>
 800c96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c96e:	f7fe fb7a 	bl	800b066 <__retarget_lock_acquire_recursive>
 800c972:	89ab      	ldrh	r3, [r5, #12]
 800c974:	071b      	lsls	r3, r3, #28
 800c976:	d501      	bpl.n	800c97c <_vfiprintf_r+0x34>
 800c978:	692b      	ldr	r3, [r5, #16]
 800c97a:	b99b      	cbnz	r3, 800c9a4 <_vfiprintf_r+0x5c>
 800c97c:	4629      	mov	r1, r5
 800c97e:	4630      	mov	r0, r6
 800c980:	f000 f9f6 	bl	800cd70 <__swsetup_r>
 800c984:	b170      	cbz	r0, 800c9a4 <_vfiprintf_r+0x5c>
 800c986:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c988:	07dc      	lsls	r4, r3, #31
 800c98a:	d504      	bpl.n	800c996 <_vfiprintf_r+0x4e>
 800c98c:	f04f 30ff 	mov.w	r0, #4294967295
 800c990:	b01d      	add	sp, #116	@ 0x74
 800c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	0598      	lsls	r0, r3, #22
 800c99a:	d4f7      	bmi.n	800c98c <_vfiprintf_r+0x44>
 800c99c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c99e:	f7fe fb63 	bl	800b068 <__retarget_lock_release_recursive>
 800c9a2:	e7f3      	b.n	800c98c <_vfiprintf_r+0x44>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a8:	2320      	movs	r3, #32
 800c9aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9b2:	2330      	movs	r3, #48	@ 0x30
 800c9b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb64 <_vfiprintf_r+0x21c>
 800c9b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9bc:	f04f 0901 	mov.w	r9, #1
 800c9c0:	4623      	mov	r3, r4
 800c9c2:	469a      	mov	sl, r3
 800c9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9c8:	b10a      	cbz	r2, 800c9ce <_vfiprintf_r+0x86>
 800c9ca:	2a25      	cmp	r2, #37	@ 0x25
 800c9cc:	d1f9      	bne.n	800c9c2 <_vfiprintf_r+0x7a>
 800c9ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c9d2:	d00b      	beq.n	800c9ec <_vfiprintf_r+0xa4>
 800c9d4:	465b      	mov	r3, fp
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	4629      	mov	r1, r5
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f7ff ffa1 	bl	800c922 <__sfputs_r>
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	f000 80a7 	beq.w	800cb34 <_vfiprintf_r+0x1ec>
 800c9e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9e8:	445a      	add	r2, fp
 800c9ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 809f 	beq.w	800cb34 <_vfiprintf_r+0x1ec>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca00:	f10a 0a01 	add.w	sl, sl, #1
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	9307      	str	r3, [sp, #28]
 800ca08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca0e:	4654      	mov	r4, sl
 800ca10:	2205      	movs	r2, #5
 800ca12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca16:	4853      	ldr	r0, [pc, #332]	@ (800cb64 <_vfiprintf_r+0x21c>)
 800ca18:	f7f3 fc12 	bl	8000240 <memchr>
 800ca1c:	9a04      	ldr	r2, [sp, #16]
 800ca1e:	b9d8      	cbnz	r0, 800ca58 <_vfiprintf_r+0x110>
 800ca20:	06d1      	lsls	r1, r2, #27
 800ca22:	bf44      	itt	mi
 800ca24:	2320      	movmi	r3, #32
 800ca26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca2a:	0713      	lsls	r3, r2, #28
 800ca2c:	bf44      	itt	mi
 800ca2e:	232b      	movmi	r3, #43	@ 0x2b
 800ca30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca34:	f89a 3000 	ldrb.w	r3, [sl]
 800ca38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca3a:	d015      	beq.n	800ca68 <_vfiprintf_r+0x120>
 800ca3c:	9a07      	ldr	r2, [sp, #28]
 800ca3e:	4654      	mov	r4, sl
 800ca40:	2000      	movs	r0, #0
 800ca42:	f04f 0c0a 	mov.w	ip, #10
 800ca46:	4621      	mov	r1, r4
 800ca48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca4c:	3b30      	subs	r3, #48	@ 0x30
 800ca4e:	2b09      	cmp	r3, #9
 800ca50:	d94b      	bls.n	800caea <_vfiprintf_r+0x1a2>
 800ca52:	b1b0      	cbz	r0, 800ca82 <_vfiprintf_r+0x13a>
 800ca54:	9207      	str	r2, [sp, #28]
 800ca56:	e014      	b.n	800ca82 <_vfiprintf_r+0x13a>
 800ca58:	eba0 0308 	sub.w	r3, r0, r8
 800ca5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca60:	4313      	orrs	r3, r2
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	46a2      	mov	sl, r4
 800ca66:	e7d2      	b.n	800ca0e <_vfiprintf_r+0xc6>
 800ca68:	9b03      	ldr	r3, [sp, #12]
 800ca6a:	1d19      	adds	r1, r3, #4
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	9103      	str	r1, [sp, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	bfbb      	ittet	lt
 800ca74:	425b      	neglt	r3, r3
 800ca76:	f042 0202 	orrlt.w	r2, r2, #2
 800ca7a:	9307      	strge	r3, [sp, #28]
 800ca7c:	9307      	strlt	r3, [sp, #28]
 800ca7e:	bfb8      	it	lt
 800ca80:	9204      	strlt	r2, [sp, #16]
 800ca82:	7823      	ldrb	r3, [r4, #0]
 800ca84:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca86:	d10a      	bne.n	800ca9e <_vfiprintf_r+0x156>
 800ca88:	7863      	ldrb	r3, [r4, #1]
 800ca8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca8c:	d132      	bne.n	800caf4 <_vfiprintf_r+0x1ac>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	1d1a      	adds	r2, r3, #4
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	9203      	str	r2, [sp, #12]
 800ca96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca9a:	3402      	adds	r4, #2
 800ca9c:	9305      	str	r3, [sp, #20]
 800ca9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb74 <_vfiprintf_r+0x22c>
 800caa2:	7821      	ldrb	r1, [r4, #0]
 800caa4:	2203      	movs	r2, #3
 800caa6:	4650      	mov	r0, sl
 800caa8:	f7f3 fbca 	bl	8000240 <memchr>
 800caac:	b138      	cbz	r0, 800cabe <_vfiprintf_r+0x176>
 800caae:	9b04      	ldr	r3, [sp, #16]
 800cab0:	eba0 000a 	sub.w	r0, r0, sl
 800cab4:	2240      	movs	r2, #64	@ 0x40
 800cab6:	4082      	lsls	r2, r0
 800cab8:	4313      	orrs	r3, r2
 800caba:	3401      	adds	r4, #1
 800cabc:	9304      	str	r3, [sp, #16]
 800cabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac2:	4829      	ldr	r0, [pc, #164]	@ (800cb68 <_vfiprintf_r+0x220>)
 800cac4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cac8:	2206      	movs	r2, #6
 800caca:	f7f3 fbb9 	bl	8000240 <memchr>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d03f      	beq.n	800cb52 <_vfiprintf_r+0x20a>
 800cad2:	4b26      	ldr	r3, [pc, #152]	@ (800cb6c <_vfiprintf_r+0x224>)
 800cad4:	bb1b      	cbnz	r3, 800cb1e <_vfiprintf_r+0x1d6>
 800cad6:	9b03      	ldr	r3, [sp, #12]
 800cad8:	3307      	adds	r3, #7
 800cada:	f023 0307 	bic.w	r3, r3, #7
 800cade:	3308      	adds	r3, #8
 800cae0:	9303      	str	r3, [sp, #12]
 800cae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cae4:	443b      	add	r3, r7
 800cae6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cae8:	e76a      	b.n	800c9c0 <_vfiprintf_r+0x78>
 800caea:	fb0c 3202 	mla	r2, ip, r2, r3
 800caee:	460c      	mov	r4, r1
 800caf0:	2001      	movs	r0, #1
 800caf2:	e7a8      	b.n	800ca46 <_vfiprintf_r+0xfe>
 800caf4:	2300      	movs	r3, #0
 800caf6:	3401      	adds	r4, #1
 800caf8:	9305      	str	r3, [sp, #20]
 800cafa:	4619      	mov	r1, r3
 800cafc:	f04f 0c0a 	mov.w	ip, #10
 800cb00:	4620      	mov	r0, r4
 800cb02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb06:	3a30      	subs	r2, #48	@ 0x30
 800cb08:	2a09      	cmp	r2, #9
 800cb0a:	d903      	bls.n	800cb14 <_vfiprintf_r+0x1cc>
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d0c6      	beq.n	800ca9e <_vfiprintf_r+0x156>
 800cb10:	9105      	str	r1, [sp, #20]
 800cb12:	e7c4      	b.n	800ca9e <_vfiprintf_r+0x156>
 800cb14:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb18:	4604      	mov	r4, r0
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e7f0      	b.n	800cb00 <_vfiprintf_r+0x1b8>
 800cb1e:	ab03      	add	r3, sp, #12
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	462a      	mov	r2, r5
 800cb24:	4b12      	ldr	r3, [pc, #72]	@ (800cb70 <_vfiprintf_r+0x228>)
 800cb26:	a904      	add	r1, sp, #16
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f7fd fcd3 	bl	800a4d4 <_printf_float>
 800cb2e:	4607      	mov	r7, r0
 800cb30:	1c78      	adds	r0, r7, #1
 800cb32:	d1d6      	bne.n	800cae2 <_vfiprintf_r+0x19a>
 800cb34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb36:	07d9      	lsls	r1, r3, #31
 800cb38:	d405      	bmi.n	800cb46 <_vfiprintf_r+0x1fe>
 800cb3a:	89ab      	ldrh	r3, [r5, #12]
 800cb3c:	059a      	lsls	r2, r3, #22
 800cb3e:	d402      	bmi.n	800cb46 <_vfiprintf_r+0x1fe>
 800cb40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb42:	f7fe fa91 	bl	800b068 <__retarget_lock_release_recursive>
 800cb46:	89ab      	ldrh	r3, [r5, #12]
 800cb48:	065b      	lsls	r3, r3, #25
 800cb4a:	f53f af1f 	bmi.w	800c98c <_vfiprintf_r+0x44>
 800cb4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb50:	e71e      	b.n	800c990 <_vfiprintf_r+0x48>
 800cb52:	ab03      	add	r3, sp, #12
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	462a      	mov	r2, r5
 800cb58:	4b05      	ldr	r3, [pc, #20]	@ (800cb70 <_vfiprintf_r+0x228>)
 800cb5a:	a904      	add	r1, sp, #16
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7fd ff51 	bl	800aa04 <_printf_i>
 800cb62:	e7e4      	b.n	800cb2e <_vfiprintf_r+0x1e6>
 800cb64:	0800d788 	.word	0x0800d788
 800cb68:	0800d792 	.word	0x0800d792
 800cb6c:	0800a4d5 	.word	0x0800a4d5
 800cb70:	0800c923 	.word	0x0800c923
 800cb74:	0800d78e 	.word	0x0800d78e

0800cb78 <__sflush_r>:
 800cb78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	0716      	lsls	r6, r2, #28
 800cb82:	4605      	mov	r5, r0
 800cb84:	460c      	mov	r4, r1
 800cb86:	d454      	bmi.n	800cc32 <__sflush_r+0xba>
 800cb88:	684b      	ldr	r3, [r1, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	dc02      	bgt.n	800cb94 <__sflush_r+0x1c>
 800cb8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	dd48      	ble.n	800cc26 <__sflush_r+0xae>
 800cb94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb96:	2e00      	cmp	r6, #0
 800cb98:	d045      	beq.n	800cc26 <__sflush_r+0xae>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cba0:	682f      	ldr	r7, [r5, #0]
 800cba2:	6a21      	ldr	r1, [r4, #32]
 800cba4:	602b      	str	r3, [r5, #0]
 800cba6:	d030      	beq.n	800cc0a <__sflush_r+0x92>
 800cba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	0759      	lsls	r1, r3, #29
 800cbae:	d505      	bpl.n	800cbbc <__sflush_r+0x44>
 800cbb0:	6863      	ldr	r3, [r4, #4]
 800cbb2:	1ad2      	subs	r2, r2, r3
 800cbb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbb6:	b10b      	cbz	r3, 800cbbc <__sflush_r+0x44>
 800cbb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbba:	1ad2      	subs	r2, r2, r3
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbc0:	6a21      	ldr	r1, [r4, #32]
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b0      	blx	r6
 800cbc6:	1c43      	adds	r3, r0, #1
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	d106      	bne.n	800cbda <__sflush_r+0x62>
 800cbcc:	6829      	ldr	r1, [r5, #0]
 800cbce:	291d      	cmp	r1, #29
 800cbd0:	d82b      	bhi.n	800cc2a <__sflush_r+0xb2>
 800cbd2:	4a2a      	ldr	r2, [pc, #168]	@ (800cc7c <__sflush_r+0x104>)
 800cbd4:	410a      	asrs	r2, r1
 800cbd6:	07d6      	lsls	r6, r2, #31
 800cbd8:	d427      	bmi.n	800cc2a <__sflush_r+0xb2>
 800cbda:	2200      	movs	r2, #0
 800cbdc:	6062      	str	r2, [r4, #4]
 800cbde:	04d9      	lsls	r1, r3, #19
 800cbe0:	6922      	ldr	r2, [r4, #16]
 800cbe2:	6022      	str	r2, [r4, #0]
 800cbe4:	d504      	bpl.n	800cbf0 <__sflush_r+0x78>
 800cbe6:	1c42      	adds	r2, r0, #1
 800cbe8:	d101      	bne.n	800cbee <__sflush_r+0x76>
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	b903      	cbnz	r3, 800cbf0 <__sflush_r+0x78>
 800cbee:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbf2:	602f      	str	r7, [r5, #0]
 800cbf4:	b1b9      	cbz	r1, 800cc26 <__sflush_r+0xae>
 800cbf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbfa:	4299      	cmp	r1, r3
 800cbfc:	d002      	beq.n	800cc04 <__sflush_r+0x8c>
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f7ff f89e 	bl	800bd40 <_free_r>
 800cc04:	2300      	movs	r3, #0
 800cc06:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc08:	e00d      	b.n	800cc26 <__sflush_r+0xae>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	47b0      	blx	r6
 800cc10:	4602      	mov	r2, r0
 800cc12:	1c50      	adds	r0, r2, #1
 800cc14:	d1c9      	bne.n	800cbaa <__sflush_r+0x32>
 800cc16:	682b      	ldr	r3, [r5, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d0c6      	beq.n	800cbaa <__sflush_r+0x32>
 800cc1c:	2b1d      	cmp	r3, #29
 800cc1e:	d001      	beq.n	800cc24 <__sflush_r+0xac>
 800cc20:	2b16      	cmp	r3, #22
 800cc22:	d11e      	bne.n	800cc62 <__sflush_r+0xea>
 800cc24:	602f      	str	r7, [r5, #0]
 800cc26:	2000      	movs	r0, #0
 800cc28:	e022      	b.n	800cc70 <__sflush_r+0xf8>
 800cc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc2e:	b21b      	sxth	r3, r3
 800cc30:	e01b      	b.n	800cc6a <__sflush_r+0xf2>
 800cc32:	690f      	ldr	r7, [r1, #16]
 800cc34:	2f00      	cmp	r7, #0
 800cc36:	d0f6      	beq.n	800cc26 <__sflush_r+0xae>
 800cc38:	0793      	lsls	r3, r2, #30
 800cc3a:	680e      	ldr	r6, [r1, #0]
 800cc3c:	bf08      	it	eq
 800cc3e:	694b      	ldreq	r3, [r1, #20]
 800cc40:	600f      	str	r7, [r1, #0]
 800cc42:	bf18      	it	ne
 800cc44:	2300      	movne	r3, #0
 800cc46:	eba6 0807 	sub.w	r8, r6, r7
 800cc4a:	608b      	str	r3, [r1, #8]
 800cc4c:	f1b8 0f00 	cmp.w	r8, #0
 800cc50:	dde9      	ble.n	800cc26 <__sflush_r+0xae>
 800cc52:	6a21      	ldr	r1, [r4, #32]
 800cc54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc56:	4643      	mov	r3, r8
 800cc58:	463a      	mov	r2, r7
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b0      	blx	r6
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	dc08      	bgt.n	800cc74 <__sflush_r+0xfc>
 800cc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc6a:	81a3      	strh	r3, [r4, #12]
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc74:	4407      	add	r7, r0
 800cc76:	eba8 0800 	sub.w	r8, r8, r0
 800cc7a:	e7e7      	b.n	800cc4c <__sflush_r+0xd4>
 800cc7c:	dfbffffe 	.word	0xdfbffffe

0800cc80 <_fflush_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	690b      	ldr	r3, [r1, #16]
 800cc84:	4605      	mov	r5, r0
 800cc86:	460c      	mov	r4, r1
 800cc88:	b913      	cbnz	r3, 800cc90 <_fflush_r+0x10>
 800cc8a:	2500      	movs	r5, #0
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	bd38      	pop	{r3, r4, r5, pc}
 800cc90:	b118      	cbz	r0, 800cc9a <_fflush_r+0x1a>
 800cc92:	6a03      	ldr	r3, [r0, #32]
 800cc94:	b90b      	cbnz	r3, 800cc9a <_fflush_r+0x1a>
 800cc96:	f7fe f861 	bl	800ad5c <__sinit>
 800cc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0f3      	beq.n	800cc8a <_fflush_r+0xa>
 800cca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cca4:	07d0      	lsls	r0, r2, #31
 800cca6:	d404      	bmi.n	800ccb2 <_fflush_r+0x32>
 800cca8:	0599      	lsls	r1, r3, #22
 800ccaa:	d402      	bmi.n	800ccb2 <_fflush_r+0x32>
 800ccac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccae:	f7fe f9da 	bl	800b066 <__retarget_lock_acquire_recursive>
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	f7ff ff5f 	bl	800cb78 <__sflush_r>
 800ccba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccbc:	07da      	lsls	r2, r3, #31
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	d4e4      	bmi.n	800cc8c <_fflush_r+0xc>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	059b      	lsls	r3, r3, #22
 800ccc6:	d4e1      	bmi.n	800cc8c <_fflush_r+0xc>
 800ccc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccca:	f7fe f9cd 	bl	800b068 <__retarget_lock_release_recursive>
 800ccce:	e7dd      	b.n	800cc8c <_fflush_r+0xc>

0800ccd0 <fiprintf>:
 800ccd0:	b40e      	push	{r1, r2, r3}
 800ccd2:	b503      	push	{r0, r1, lr}
 800ccd4:	4601      	mov	r1, r0
 800ccd6:	ab03      	add	r3, sp, #12
 800ccd8:	4805      	ldr	r0, [pc, #20]	@ (800ccf0 <fiprintf+0x20>)
 800ccda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccde:	6800      	ldr	r0, [r0, #0]
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	f7ff fe31 	bl	800c948 <_vfiprintf_r>
 800cce6:	b002      	add	sp, #8
 800cce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccec:	b003      	add	sp, #12
 800ccee:	4770      	bx	lr
 800ccf0:	2000001c 	.word	0x2000001c

0800ccf4 <__swbuf_r>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	460e      	mov	r6, r1
 800ccf8:	4614      	mov	r4, r2
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	b118      	cbz	r0, 800cd06 <__swbuf_r+0x12>
 800ccfe:	6a03      	ldr	r3, [r0, #32]
 800cd00:	b90b      	cbnz	r3, 800cd06 <__swbuf_r+0x12>
 800cd02:	f7fe f82b 	bl	800ad5c <__sinit>
 800cd06:	69a3      	ldr	r3, [r4, #24]
 800cd08:	60a3      	str	r3, [r4, #8]
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	071a      	lsls	r2, r3, #28
 800cd0e:	d501      	bpl.n	800cd14 <__swbuf_r+0x20>
 800cd10:	6923      	ldr	r3, [r4, #16]
 800cd12:	b943      	cbnz	r3, 800cd26 <__swbuf_r+0x32>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 f82a 	bl	800cd70 <__swsetup_r>
 800cd1c:	b118      	cbz	r0, 800cd26 <__swbuf_r+0x32>
 800cd1e:	f04f 37ff 	mov.w	r7, #4294967295
 800cd22:	4638      	mov	r0, r7
 800cd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	6922      	ldr	r2, [r4, #16]
 800cd2a:	1a98      	subs	r0, r3, r2
 800cd2c:	6963      	ldr	r3, [r4, #20]
 800cd2e:	b2f6      	uxtb	r6, r6
 800cd30:	4283      	cmp	r3, r0
 800cd32:	4637      	mov	r7, r6
 800cd34:	dc05      	bgt.n	800cd42 <__swbuf_r+0x4e>
 800cd36:	4621      	mov	r1, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f7ff ffa1 	bl	800cc80 <_fflush_r>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d1ed      	bne.n	800cd1e <__swbuf_r+0x2a>
 800cd42:	68a3      	ldr	r3, [r4, #8]
 800cd44:	3b01      	subs	r3, #1
 800cd46:	60a3      	str	r3, [r4, #8]
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	6022      	str	r2, [r4, #0]
 800cd4e:	701e      	strb	r6, [r3, #0]
 800cd50:	6962      	ldr	r2, [r4, #20]
 800cd52:	1c43      	adds	r3, r0, #1
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d004      	beq.n	800cd62 <__swbuf_r+0x6e>
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	07db      	lsls	r3, r3, #31
 800cd5c:	d5e1      	bpl.n	800cd22 <__swbuf_r+0x2e>
 800cd5e:	2e0a      	cmp	r6, #10
 800cd60:	d1df      	bne.n	800cd22 <__swbuf_r+0x2e>
 800cd62:	4621      	mov	r1, r4
 800cd64:	4628      	mov	r0, r5
 800cd66:	f7ff ff8b 	bl	800cc80 <_fflush_r>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d0d9      	beq.n	800cd22 <__swbuf_r+0x2e>
 800cd6e:	e7d6      	b.n	800cd1e <__swbuf_r+0x2a>

0800cd70 <__swsetup_r>:
 800cd70:	b538      	push	{r3, r4, r5, lr}
 800cd72:	4b29      	ldr	r3, [pc, #164]	@ (800ce18 <__swsetup_r+0xa8>)
 800cd74:	4605      	mov	r5, r0
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	460c      	mov	r4, r1
 800cd7a:	b118      	cbz	r0, 800cd84 <__swsetup_r+0x14>
 800cd7c:	6a03      	ldr	r3, [r0, #32]
 800cd7e:	b90b      	cbnz	r3, 800cd84 <__swsetup_r+0x14>
 800cd80:	f7fd ffec 	bl	800ad5c <__sinit>
 800cd84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd88:	0719      	lsls	r1, r3, #28
 800cd8a:	d422      	bmi.n	800cdd2 <__swsetup_r+0x62>
 800cd8c:	06da      	lsls	r2, r3, #27
 800cd8e:	d407      	bmi.n	800cda0 <__swsetup_r+0x30>
 800cd90:	2209      	movs	r2, #9
 800cd92:	602a      	str	r2, [r5, #0]
 800cd94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd98:	81a3      	strh	r3, [r4, #12]
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9e:	e033      	b.n	800ce08 <__swsetup_r+0x98>
 800cda0:	0758      	lsls	r0, r3, #29
 800cda2:	d512      	bpl.n	800cdca <__swsetup_r+0x5a>
 800cda4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cda6:	b141      	cbz	r1, 800cdba <__swsetup_r+0x4a>
 800cda8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdac:	4299      	cmp	r1, r3
 800cdae:	d002      	beq.n	800cdb6 <__swsetup_r+0x46>
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f7fe ffc5 	bl	800bd40 <_free_r>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdc0:	81a3      	strh	r3, [r4, #12]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	6063      	str	r3, [r4, #4]
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	f043 0308 	orr.w	r3, r3, #8
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	6923      	ldr	r3, [r4, #16]
 800cdd4:	b94b      	cbnz	r3, 800cdea <__swsetup_r+0x7a>
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cde0:	d003      	beq.n	800cdea <__swsetup_r+0x7a>
 800cde2:	4621      	mov	r1, r4
 800cde4:	4628      	mov	r0, r5
 800cde6:	f000 f8df 	bl	800cfa8 <__smakebuf_r>
 800cdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdee:	f013 0201 	ands.w	r2, r3, #1
 800cdf2:	d00a      	beq.n	800ce0a <__swsetup_r+0x9a>
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	60a2      	str	r2, [r4, #8]
 800cdf8:	6962      	ldr	r2, [r4, #20]
 800cdfa:	4252      	negs	r2, r2
 800cdfc:	61a2      	str	r2, [r4, #24]
 800cdfe:	6922      	ldr	r2, [r4, #16]
 800ce00:	b942      	cbnz	r2, 800ce14 <__swsetup_r+0xa4>
 800ce02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce06:	d1c5      	bne.n	800cd94 <__swsetup_r+0x24>
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
 800ce0a:	0799      	lsls	r1, r3, #30
 800ce0c:	bf58      	it	pl
 800ce0e:	6962      	ldrpl	r2, [r4, #20]
 800ce10:	60a2      	str	r2, [r4, #8]
 800ce12:	e7f4      	b.n	800cdfe <__swsetup_r+0x8e>
 800ce14:	2000      	movs	r0, #0
 800ce16:	e7f7      	b.n	800ce08 <__swsetup_r+0x98>
 800ce18:	2000001c 	.word	0x2000001c

0800ce1c <memmove>:
 800ce1c:	4288      	cmp	r0, r1
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	eb01 0402 	add.w	r4, r1, r2
 800ce24:	d902      	bls.n	800ce2c <memmove+0x10>
 800ce26:	4284      	cmp	r4, r0
 800ce28:	4623      	mov	r3, r4
 800ce2a:	d807      	bhi.n	800ce3c <memmove+0x20>
 800ce2c:	1e43      	subs	r3, r0, #1
 800ce2e:	42a1      	cmp	r1, r4
 800ce30:	d008      	beq.n	800ce44 <memmove+0x28>
 800ce32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce3a:	e7f8      	b.n	800ce2e <memmove+0x12>
 800ce3c:	4402      	add	r2, r0
 800ce3e:	4601      	mov	r1, r0
 800ce40:	428a      	cmp	r2, r1
 800ce42:	d100      	bne.n	800ce46 <memmove+0x2a>
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce4e:	e7f7      	b.n	800ce40 <memmove+0x24>

0800ce50 <_sbrk_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	4d06      	ldr	r5, [pc, #24]	@ (800ce6c <_sbrk_r+0x1c>)
 800ce54:	2300      	movs	r3, #0
 800ce56:	4604      	mov	r4, r0
 800ce58:	4608      	mov	r0, r1
 800ce5a:	602b      	str	r3, [r5, #0]
 800ce5c:	f7f5 f834 	bl	8001ec8 <_sbrk>
 800ce60:	1c43      	adds	r3, r0, #1
 800ce62:	d102      	bne.n	800ce6a <_sbrk_r+0x1a>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	b103      	cbz	r3, 800ce6a <_sbrk_r+0x1a>
 800ce68:	6023      	str	r3, [r4, #0]
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	20000768 	.word	0x20000768

0800ce70 <memcpy>:
 800ce70:	440a      	add	r2, r1
 800ce72:	4291      	cmp	r1, r2
 800ce74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce78:	d100      	bne.n	800ce7c <memcpy+0xc>
 800ce7a:	4770      	bx	lr
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce86:	4291      	cmp	r1, r2
 800ce88:	d1f9      	bne.n	800ce7e <memcpy+0xe>
 800ce8a:	bd10      	pop	{r4, pc}

0800ce8c <abort>:
 800ce8c:	b508      	push	{r3, lr}
 800ce8e:	2006      	movs	r0, #6
 800ce90:	f000 f8ee 	bl	800d070 <raise>
 800ce94:	2001      	movs	r0, #1
 800ce96:	f7f4 ff9f 	bl	8001dd8 <_exit>

0800ce9a <_calloc_r>:
 800ce9a:	b570      	push	{r4, r5, r6, lr}
 800ce9c:	fba1 5402 	umull	r5, r4, r1, r2
 800cea0:	b93c      	cbnz	r4, 800ceb2 <_calloc_r+0x18>
 800cea2:	4629      	mov	r1, r5
 800cea4:	f7fe ffc0 	bl	800be28 <_malloc_r>
 800cea8:	4606      	mov	r6, r0
 800ceaa:	b928      	cbnz	r0, 800ceb8 <_calloc_r+0x1e>
 800ceac:	2600      	movs	r6, #0
 800ceae:	4630      	mov	r0, r6
 800ceb0:	bd70      	pop	{r4, r5, r6, pc}
 800ceb2:	220c      	movs	r2, #12
 800ceb4:	6002      	str	r2, [r0, #0]
 800ceb6:	e7f9      	b.n	800ceac <_calloc_r+0x12>
 800ceb8:	462a      	mov	r2, r5
 800ceba:	4621      	mov	r1, r4
 800cebc:	f7fd fff9 	bl	800aeb2 <memset>
 800cec0:	e7f5      	b.n	800ceae <_calloc_r+0x14>

0800cec2 <__ascii_mbtowc>:
 800cec2:	b082      	sub	sp, #8
 800cec4:	b901      	cbnz	r1, 800cec8 <__ascii_mbtowc+0x6>
 800cec6:	a901      	add	r1, sp, #4
 800cec8:	b142      	cbz	r2, 800cedc <__ascii_mbtowc+0x1a>
 800ceca:	b14b      	cbz	r3, 800cee0 <__ascii_mbtowc+0x1e>
 800cecc:	7813      	ldrb	r3, [r2, #0]
 800cece:	600b      	str	r3, [r1, #0]
 800ced0:	7812      	ldrb	r2, [r2, #0]
 800ced2:	1e10      	subs	r0, r2, #0
 800ced4:	bf18      	it	ne
 800ced6:	2001      	movne	r0, #1
 800ced8:	b002      	add	sp, #8
 800ceda:	4770      	bx	lr
 800cedc:	4610      	mov	r0, r2
 800cede:	e7fb      	b.n	800ced8 <__ascii_mbtowc+0x16>
 800cee0:	f06f 0001 	mvn.w	r0, #1
 800cee4:	e7f8      	b.n	800ced8 <__ascii_mbtowc+0x16>

0800cee6 <_realloc_r>:
 800cee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceea:	4680      	mov	r8, r0
 800ceec:	4615      	mov	r5, r2
 800ceee:	460c      	mov	r4, r1
 800cef0:	b921      	cbnz	r1, 800cefc <_realloc_r+0x16>
 800cef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef6:	4611      	mov	r1, r2
 800cef8:	f7fe bf96 	b.w	800be28 <_malloc_r>
 800cefc:	b92a      	cbnz	r2, 800cf0a <_realloc_r+0x24>
 800cefe:	f7fe ff1f 	bl	800bd40 <_free_r>
 800cf02:	2400      	movs	r4, #0
 800cf04:	4620      	mov	r0, r4
 800cf06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0a:	f000 f8ef 	bl	800d0ec <_malloc_usable_size_r>
 800cf0e:	4285      	cmp	r5, r0
 800cf10:	4606      	mov	r6, r0
 800cf12:	d802      	bhi.n	800cf1a <_realloc_r+0x34>
 800cf14:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cf18:	d8f4      	bhi.n	800cf04 <_realloc_r+0x1e>
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	f7fe ff83 	bl	800be28 <_malloc_r>
 800cf22:	4607      	mov	r7, r0
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d0ec      	beq.n	800cf02 <_realloc_r+0x1c>
 800cf28:	42b5      	cmp	r5, r6
 800cf2a:	462a      	mov	r2, r5
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	bf28      	it	cs
 800cf30:	4632      	movcs	r2, r6
 800cf32:	f7ff ff9d 	bl	800ce70 <memcpy>
 800cf36:	4621      	mov	r1, r4
 800cf38:	4640      	mov	r0, r8
 800cf3a:	f7fe ff01 	bl	800bd40 <_free_r>
 800cf3e:	463c      	mov	r4, r7
 800cf40:	e7e0      	b.n	800cf04 <_realloc_r+0x1e>

0800cf42 <__ascii_wctomb>:
 800cf42:	4603      	mov	r3, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	b141      	cbz	r1, 800cf5a <__ascii_wctomb+0x18>
 800cf48:	2aff      	cmp	r2, #255	@ 0xff
 800cf4a:	d904      	bls.n	800cf56 <__ascii_wctomb+0x14>
 800cf4c:	228a      	movs	r2, #138	@ 0x8a
 800cf4e:	601a      	str	r2, [r3, #0]
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	4770      	bx	lr
 800cf56:	700a      	strb	r2, [r1, #0]
 800cf58:	2001      	movs	r0, #1
 800cf5a:	4770      	bx	lr

0800cf5c <__swhatbuf_r>:
 800cf5c:	b570      	push	{r4, r5, r6, lr}
 800cf5e:	460c      	mov	r4, r1
 800cf60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf64:	2900      	cmp	r1, #0
 800cf66:	b096      	sub	sp, #88	@ 0x58
 800cf68:	4615      	mov	r5, r2
 800cf6a:	461e      	mov	r6, r3
 800cf6c:	da0d      	bge.n	800cf8a <__swhatbuf_r+0x2e>
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cf74:	f04f 0100 	mov.w	r1, #0
 800cf78:	bf14      	ite	ne
 800cf7a:	2340      	movne	r3, #64	@ 0x40
 800cf7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf80:	2000      	movs	r0, #0
 800cf82:	6031      	str	r1, [r6, #0]
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	b016      	add	sp, #88	@ 0x58
 800cf88:	bd70      	pop	{r4, r5, r6, pc}
 800cf8a:	466a      	mov	r2, sp
 800cf8c:	f000 f878 	bl	800d080 <_fstat_r>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	dbec      	blt.n	800cf6e <__swhatbuf_r+0x12>
 800cf94:	9901      	ldr	r1, [sp, #4]
 800cf96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf9e:	4259      	negs	r1, r3
 800cfa0:	4159      	adcs	r1, r3
 800cfa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfa6:	e7eb      	b.n	800cf80 <__swhatbuf_r+0x24>

0800cfa8 <__smakebuf_r>:
 800cfa8:	898b      	ldrh	r3, [r1, #12]
 800cfaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfac:	079d      	lsls	r5, r3, #30
 800cfae:	4606      	mov	r6, r0
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	d507      	bpl.n	800cfc4 <__smakebuf_r+0x1c>
 800cfb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	6163      	str	r3, [r4, #20]
 800cfc0:	b003      	add	sp, #12
 800cfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc4:	ab01      	add	r3, sp, #4
 800cfc6:	466a      	mov	r2, sp
 800cfc8:	f7ff ffc8 	bl	800cf5c <__swhatbuf_r>
 800cfcc:	9f00      	ldr	r7, [sp, #0]
 800cfce:	4605      	mov	r5, r0
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f7fe ff28 	bl	800be28 <_malloc_r>
 800cfd8:	b948      	cbnz	r0, 800cfee <__smakebuf_r+0x46>
 800cfda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfde:	059a      	lsls	r2, r3, #22
 800cfe0:	d4ee      	bmi.n	800cfc0 <__smakebuf_r+0x18>
 800cfe2:	f023 0303 	bic.w	r3, r3, #3
 800cfe6:	f043 0302 	orr.w	r3, r3, #2
 800cfea:	81a3      	strh	r3, [r4, #12]
 800cfec:	e7e2      	b.n	800cfb4 <__smakebuf_r+0xc>
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	6020      	str	r0, [r4, #0]
 800cff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff6:	81a3      	strh	r3, [r4, #12]
 800cff8:	9b01      	ldr	r3, [sp, #4]
 800cffa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cffe:	b15b      	cbz	r3, 800d018 <__smakebuf_r+0x70>
 800d000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d004:	4630      	mov	r0, r6
 800d006:	f000 f84d 	bl	800d0a4 <_isatty_r>
 800d00a:	b128      	cbz	r0, 800d018 <__smakebuf_r+0x70>
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f023 0303 	bic.w	r3, r3, #3
 800d012:	f043 0301 	orr.w	r3, r3, #1
 800d016:	81a3      	strh	r3, [r4, #12]
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	431d      	orrs	r5, r3
 800d01c:	81a5      	strh	r5, [r4, #12]
 800d01e:	e7cf      	b.n	800cfc0 <__smakebuf_r+0x18>

0800d020 <_raise_r>:
 800d020:	291f      	cmp	r1, #31
 800d022:	b538      	push	{r3, r4, r5, lr}
 800d024:	4605      	mov	r5, r0
 800d026:	460c      	mov	r4, r1
 800d028:	d904      	bls.n	800d034 <_raise_r+0x14>
 800d02a:	2316      	movs	r3, #22
 800d02c:	6003      	str	r3, [r0, #0]
 800d02e:	f04f 30ff 	mov.w	r0, #4294967295
 800d032:	bd38      	pop	{r3, r4, r5, pc}
 800d034:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d036:	b112      	cbz	r2, 800d03e <_raise_r+0x1e>
 800d038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d03c:	b94b      	cbnz	r3, 800d052 <_raise_r+0x32>
 800d03e:	4628      	mov	r0, r5
 800d040:	f000 f852 	bl	800d0e8 <_getpid_r>
 800d044:	4622      	mov	r2, r4
 800d046:	4601      	mov	r1, r0
 800d048:	4628      	mov	r0, r5
 800d04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d04e:	f000 b839 	b.w	800d0c4 <_kill_r>
 800d052:	2b01      	cmp	r3, #1
 800d054:	d00a      	beq.n	800d06c <_raise_r+0x4c>
 800d056:	1c59      	adds	r1, r3, #1
 800d058:	d103      	bne.n	800d062 <_raise_r+0x42>
 800d05a:	2316      	movs	r3, #22
 800d05c:	6003      	str	r3, [r0, #0]
 800d05e:	2001      	movs	r0, #1
 800d060:	e7e7      	b.n	800d032 <_raise_r+0x12>
 800d062:	2100      	movs	r1, #0
 800d064:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d068:	4620      	mov	r0, r4
 800d06a:	4798      	blx	r3
 800d06c:	2000      	movs	r0, #0
 800d06e:	e7e0      	b.n	800d032 <_raise_r+0x12>

0800d070 <raise>:
 800d070:	4b02      	ldr	r3, [pc, #8]	@ (800d07c <raise+0xc>)
 800d072:	4601      	mov	r1, r0
 800d074:	6818      	ldr	r0, [r3, #0]
 800d076:	f7ff bfd3 	b.w	800d020 <_raise_r>
 800d07a:	bf00      	nop
 800d07c:	2000001c 	.word	0x2000001c

0800d080 <_fstat_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	4d07      	ldr	r5, [pc, #28]	@ (800d0a0 <_fstat_r+0x20>)
 800d084:	2300      	movs	r3, #0
 800d086:	4604      	mov	r4, r0
 800d088:	4608      	mov	r0, r1
 800d08a:	4611      	mov	r1, r2
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	f7f4 fef3 	bl	8001e78 <_fstat>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	d102      	bne.n	800d09c <_fstat_r+0x1c>
 800d096:	682b      	ldr	r3, [r5, #0]
 800d098:	b103      	cbz	r3, 800d09c <_fstat_r+0x1c>
 800d09a:	6023      	str	r3, [r4, #0]
 800d09c:	bd38      	pop	{r3, r4, r5, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000768 	.word	0x20000768

0800d0a4 <_isatty_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4d06      	ldr	r5, [pc, #24]	@ (800d0c0 <_isatty_r+0x1c>)
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4608      	mov	r0, r1
 800d0ae:	602b      	str	r3, [r5, #0]
 800d0b0:	f7f4 fef2 	bl	8001e98 <_isatty>
 800d0b4:	1c43      	adds	r3, r0, #1
 800d0b6:	d102      	bne.n	800d0be <_isatty_r+0x1a>
 800d0b8:	682b      	ldr	r3, [r5, #0]
 800d0ba:	b103      	cbz	r3, 800d0be <_isatty_r+0x1a>
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	bd38      	pop	{r3, r4, r5, pc}
 800d0c0:	20000768 	.word	0x20000768

0800d0c4 <_kill_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	4d07      	ldr	r5, [pc, #28]	@ (800d0e4 <_kill_r+0x20>)
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	602b      	str	r3, [r5, #0]
 800d0d2:	f7f4 fe71 	bl	8001db8 <_kill>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	d102      	bne.n	800d0e0 <_kill_r+0x1c>
 800d0da:	682b      	ldr	r3, [r5, #0]
 800d0dc:	b103      	cbz	r3, 800d0e0 <_kill_r+0x1c>
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	bd38      	pop	{r3, r4, r5, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20000768 	.word	0x20000768

0800d0e8 <_getpid_r>:
 800d0e8:	f7f4 be5e 	b.w	8001da8 <_getpid>

0800d0ec <_malloc_usable_size_r>:
 800d0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f0:	1f18      	subs	r0, r3, #4
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	bfbc      	itt	lt
 800d0f6:	580b      	ldrlt	r3, [r1, r0]
 800d0f8:	18c0      	addlt	r0, r0, r3
 800d0fa:	4770      	bx	lr

0800d0fc <_init>:
 800d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fe:	bf00      	nop
 800d100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d102:	bc08      	pop	{r3}
 800d104:	469e      	mov	lr, r3
 800d106:	4770      	bx	lr

0800d108 <_fini>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	bf00      	nop
 800d10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10e:	bc08      	pop	{r3}
 800d110:	469e      	mov	lr, r3
 800d112:	4770      	bx	lr
