
TP_SaC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000878c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800896c  0800896c  0000996c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c60  08008c60  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008c60  08008c60  00009c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c68  08008c68  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c68  08008c68  00009c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c6c  08008c6c  00009c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008c70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000068  08008cd8  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08008cd8  0000a54c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fff  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c1  00000000  00000000  00024097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00027558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001102  00000000  00000000  00028b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fb3  00000000  00000000  00029c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae25  00000000  00000000  00053c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114709  00000000  00000000  0006ea2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183133  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  00183178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00189880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008954 	.word	0x08008954

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08008954 	.word	0x08008954

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2220      	movs	r2, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f007 fabc 	bl	8007b66 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ee:	4b32      	ldr	r3, [pc, #200]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f6:	4b30      	ldr	r3, [pc, #192]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000618:	2204      	movs	r2, #4
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000622:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800062a:	2201      	movs	r2, #1
 800062c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800065a:	f001 fb19 	bl	8001c90 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 fbe8 	bl	8000e38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000674:	f002 f92e 	bl	80028d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 fbdb 	bl	8000e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_ADC1_Init+0xec>)
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	@ 0x7f
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80006a0:	f001 fcb2 	bl	8002008 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 fbc5 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	@ 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000084 	.word	0x20000084
 80006bc:	21800100 	.word	0x21800100

080006c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f007 fa4a 	bl	8007b66 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000784 <MX_ADC2_Init+0xc4>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800073c:	f001 faa8 	bl	8001c90 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 fb77 	bl	8000e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_ADC2_Init+0xc8>)
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2306      	movs	r3, #6
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000756:	237f      	movs	r3, #127	@ 0x7f
 8000758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000768:	f001 fc4e 	bl	8002008 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000772:	f000 fb61 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000f0 	.word	0x200000f0
 8000784:	50000100 	.word	0x50000100
 8000788:	19200040 	.word	0x19200040

0800078c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	@ 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a8:	2254      	movs	r2, #84	@ 0x54
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f007 f9da 	bl	8007b66 <memset>
  if(adcHandle->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ba:	d174      	bne.n	80008a6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fafb 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007d8:	f000 fb2e 	bl	8000e38 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007dc:	4b63      	ldr	r3, [pc, #396]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a62      	ldr	r2, [pc, #392]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007e6:	4b61      	ldr	r3, [pc, #388]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10b      	bne.n	8000806 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007ee:	4b60      	ldr	r3, [pc, #384]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a5f      	ldr	r2, [pc, #380]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
 8000804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b5a      	ldr	r3, [pc, #360]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a59      	ldr	r2, [pc, #356]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b57      	ldr	r3, [pc, #348]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b54      	ldr	r3, [pc, #336]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a53      	ldr	r2, [pc, #332]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b51      	ldr	r3, [pc, #324]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b4e      	ldr	r3, [pc, #312]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a4d      	ldr	r2, [pc, #308]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b4b      	ldr	r3, [pc, #300]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800084e:	2304      	movs	r3, #4
 8000850:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000862:	4619      	mov	r1, r3
 8000864:	4843      	ldr	r0, [pc, #268]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000866:	f002 fadd 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800086a:	2302      	movs	r3, #2
 800086c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f002 face 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000888:	2303      	movs	r3, #3
 800088a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800089c:	4619      	mov	r1, r3
 800089e:	4836      	ldr	r0, [pc, #216]	@ (8000978 <HAL_ADC_MspInit+0x1ec>)
 80008a0:	f002 fac0 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008a4:	e05e      	b.n	8000964 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a34      	ldr	r2, [pc, #208]	@ (800097c <HAL_ADC_MspInit+0x1f0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d159      	bne.n	8000964 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 fa81 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008cc:	f000 fab4 	bl	8000e38 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d10b      	bne.n	80008fa <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800092a:	230b      	movs	r3, #11
 800092c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000942:	f002 fa6f 	bl	8002e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f002 fa60 	bl	8002e24 <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3790      	adds	r7, #144	@ 0x90
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000015c 	.word	0x2000015c
 8000970:	40021000 	.word	0x40021000
 8000974:	48000800 	.word	0x48000800
 8000978:	48000400 	.word	0x48000400
 800097c:	50000100 	.word	0x50000100

08000980 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a94 <MX_GPIO_Init+0x114>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a38      	ldr	r2, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f002 fb87 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a20:	f002 fb82 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <MX_GPIO_Init+0x11c>)
 8000a3c:	f002 f9f2 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f002 f9e3 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a76:	f002 f9d5 	bl	8002e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f002 f8e8 	bl	8002c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	@ 0x28
 8000a86:	f002 f8ff 	bl	8002c88 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000c00 	.word	0x48000c00
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /** @brief Tableau des arguments extraits de la commande */
  char* argv[MAX_ARGS];

  /** @brief Nombre d'arguments */
  int argc = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	@ 0x34

  /** @brief Token pour l'analyse de la chaîne */
  char* token;

  /** @brief Flag indiquant qu'une nouvelle commande est prête */
  int newCmdReady = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fec0 	bl	8001832 <HAL_Init>

  /* USER CODE BEGIN Init */
  idxCmd = 0;
 8000ab2:	4b94      	ldr	r3, [pc, #592]	@ (8000d04 <main+0x264>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
  memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000ab8:	2240      	movs	r2, #64	@ 0x40
 8000aba:	2100      	movs	r1, #0
 8000abc:	4892      	ldr	r0, [pc, #584]	@ (8000d08 <main+0x268>)
 8000abe:	f007 f852 	bl	8007b66 <memset>
  memset(argv, 0, MAX_ARGS * sizeof(char*));
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2224      	movs	r2, #36	@ 0x24
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 f84b 	bl	8007b66 <memset>
  memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000ad0:	4b8e      	ldr	r3, [pc, #568]	@ (8000d0c <main+0x26c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 8000ad6:	2240      	movs	r2, #64	@ 0x40
 8000ad8:	2100      	movs	r1, #0
 8000ada:	488d      	ldr	r0, [pc, #564]	@ (8000d10 <main+0x270>)
 8000adc:	f007 f843 	bl	8007b66 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f938 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f7ff ff4c 	bl	8000980 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ae8:	f7ff fdea 	bl	80006c0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000aec:	f7ff fd70 	bl	80005d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000af0:	f000 fb5c 	bl	80011ac <MX_TIM1_Init>
  MX_TIM3_Init();
 8000af4:	f000 fc06 	bl	8001304 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 fd3a 	bl	8001570 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000afc:	f000 fd84 	bl	8001608 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b00:	2201      	movs	r2, #1
 8000b02:	4982      	ldr	r1, [pc, #520]	@ (8000d0c <main+0x26c>)
 8000b04:	4883      	ldr	r0, [pc, #524]	@ (8000d14 <main+0x274>)
 8000b06:	f004 feb9 	bl	800587c <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f000 fec8 	bl	80018a0 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, strlen((char*)started), HAL_MAX_DELAY);
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	2265      	movs	r2, #101	@ 0x65
 8000b16:	4980      	ldr	r1, [pc, #512]	@ (8000d18 <main+0x278>)
 8000b18:	487e      	ldr	r0, [pc, #504]	@ (8000d14 <main+0x274>)
 8000b1a:	f004 fe21 	bl	8005760 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	2217      	movs	r2, #23
 8000b24:	497d      	ldr	r1, [pc, #500]	@ (8000d1c <main+0x27c>)
 8000b26:	487b      	ldr	r0, [pc, #492]	@ (8000d14 <main+0x274>)
 8000b28:	f004 fe1a 	bl	8005760 <HAL_UART_Transmit>
  while (1)
  {
	/**
	   * @brief Vérifie si un caractère a été reçu sur l'UART.
	   */
    if (uartRxReceived)
 8000b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8000d20 <main+0x280>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 8086 	beq.w	8000c42 <main+0x1a2>
    {
      uint8_t receivedChar = uartRxBuffer[0];
 8000b36:	4b75      	ldr	r3, [pc, #468]	@ (8000d0c <main+0x26c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
      /**
        * @brief Écho du caractère reçu sur l'UART.
        */
      HAL_UART_Transmit(&huart2, &receivedChar, 1, HAL_MAX_DELAY);
 8000b3c:	1df9      	adds	r1, r7, #7
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	2201      	movs	r2, #1
 8000b44:	4873      	ldr	r0, [pc, #460]	@ (8000d14 <main+0x274>)
 8000b46:	f004 fe0b 	bl	8005760 <HAL_UART_Transmit>

      /**
        * @brief Traitement du caractère reçu.
        */
      switch (receivedChar)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b4e:	d033      	beq.n	8000bb8 <main+0x118>
 8000b50:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b52:	dc49      	bgt.n	8000be8 <main+0x148>
 8000b54:	2b0a      	cmp	r3, #10
 8000b56:	d001      	beq.n	8000b5c <main+0xbc>
 8000b58:	2b0d      	cmp	r3, #13
 8000b5a:	d145      	bne.n	8000be8 <main+0x148>
      /**
         * @brief Cas du retour chariot ou du saut de ligne : traite la commande entrée.
         */
        case ASCII_CR:
        case ASCII_LF:
          HAL_UART_Transmit(&huart2, newLine, strlen((char*)newLine), HAL_MAX_DELAY);
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	2202      	movs	r2, #2
 8000b62:	4970      	ldr	r1, [pc, #448]	@ (8000d24 <main+0x284>)
 8000b64:	486b      	ldr	r0, [pc, #428]	@ (8000d14 <main+0x274>)
 8000b66:	f004 fdfb 	bl	8005760 <HAL_UART_Transmit>
          cmd[idxCmd] = '\0';
 8000b6a:	4b66      	ldr	r3, [pc, #408]	@ (8000d04 <main+0x264>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a66      	ldr	r2, [pc, #408]	@ (8000d08 <main+0x268>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	54d1      	strb	r1, [r2, r3]
          argc = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
          token = strtok(cmd, " ");
 8000b78:	496b      	ldr	r1, [pc, #428]	@ (8000d28 <main+0x288>)
 8000b7a:	4863      	ldr	r0, [pc, #396]	@ (8000d08 <main+0x268>)
 8000b7c:	f006 fffc 	bl	8007b78 <strtok>
 8000b80:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000b82:	e00d      	b.n	8000ba0 <main+0x100>
          {
            argv[argc++] = token;
 8000b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	637a      	str	r2, [r7, #52]	@ 0x34
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	3338      	adds	r3, #56	@ 0x38
 8000b8e:	443b      	add	r3, r7
 8000b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b92:	f843 2c30 	str.w	r2, [r3, #-48]
            token = strtok(NULL, " ");
 8000b96:	4964      	ldr	r1, [pc, #400]	@ (8000d28 <main+0x288>)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f006 ffed 	bl	8007b78 <strtok>
 8000b9e:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <main+0x10c>
 8000ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	ddeb      	ble.n	8000b84 <main+0xe4>
          }

          idxCmd = 0;
 8000bac:	4b55      	ldr	r3, [pc, #340]	@ (8000d04 <main+0x264>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
          newCmdReady = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8000bb6:	e03c      	b.n	8000c32 <main+0x192>
          /**
              * @brief Cas de la suppression : efface le dernier caractère saisi.
              */
        case ASCII_DEL:
          if (idxCmd > 0)
 8000bb8:	4b52      	ldr	r3, [pc, #328]	@ (8000d04 <main+0x264>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd37      	ble.n	8000c30 <main+0x190>
          {
            idxCmd--;
 8000bc0:	4b50      	ldr	r3, [pc, #320]	@ (8000d04 <main+0x264>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	4a4f      	ldr	r2, [pc, #316]	@ (8000d04 <main+0x264>)
 8000bc8:	6013      	str	r3, [r2, #0]
            cmd[idxCmd] = '\0';
 8000bca:	4b4e      	ldr	r3, [pc, #312]	@ (8000d04 <main+0x264>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a4e      	ldr	r2, [pc, #312]	@ (8000d08 <main+0x268>)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	54d1      	strb	r1, [r2, r3]
            // Envoyer un retour en arrière pour effacer dans le terminal
            uint8_t backspace = '\b';
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	71bb      	strb	r3, [r7, #6]
            HAL_UART_Transmit(&huart2, &backspace, 1, HAL_MAX_DELAY);
 8000bd8:	1db9      	adds	r1, r7, #6
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	2201      	movs	r2, #1
 8000be0:	484c      	ldr	r0, [pc, #304]	@ (8000d14 <main+0x274>)
 8000be2:	f004 fdbd 	bl	8005760 <HAL_UART_Transmit>
          }
          break;
 8000be6:	e023      	b.n	8000c30 <main+0x190>

        /**
           * @brief Cas par défaut : ajoute le caractère au buffer de commande.
           */
        default:
          if (idxCmd < CMD_BUFFER_SIZE - 1)
 8000be8:	4b46      	ldr	r3, [pc, #280]	@ (8000d04 <main+0x264>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b3e      	cmp	r3, #62	@ 0x3e
 8000bee:	dc08      	bgt.n	8000c02 <main+0x162>
          {
            cmd[idxCmd++] = receivedChar;
 8000bf0:	4b44      	ldr	r3, [pc, #272]	@ (8000d04 <main+0x264>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	4943      	ldr	r1, [pc, #268]	@ (8000d04 <main+0x264>)
 8000bf8:	600a      	str	r2, [r1, #0]
 8000bfa:	79f9      	ldrb	r1, [r7, #7]
 8000bfc:	4a42      	ldr	r2, [pc, #264]	@ (8000d08 <main+0x268>)
 8000bfe:	54d1      	strb	r1, [r2, r3]
            idxCmd = 0;
            memset(cmd, '\0', CMD_BUFFER_SIZE);
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
          }
          break;
 8000c00:	e017      	b.n	8000c32 <main+0x192>
            idxCmd = 0;
 8000c02:	4b40      	ldr	r3, [pc, #256]	@ (8000d04 <main+0x264>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
            memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000c08:	2240      	movs	r2, #64	@ 0x40
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	483e      	ldr	r0, [pc, #248]	@ (8000d08 <main+0x268>)
 8000c0e:	f006 ffaa 	bl	8007b66 <memset>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	2212      	movs	r2, #18
 8000c18:	4944      	ldr	r1, [pc, #272]	@ (8000d2c <main+0x28c>)
 8000c1a:	483e      	ldr	r0, [pc, #248]	@ (8000d14 <main+0x274>)
 8000c1c:	f004 fda0 	bl	8005760 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	2217      	movs	r2, #23
 8000c26:	493d      	ldr	r1, [pc, #244]	@ (8000d1c <main+0x27c>)
 8000c28:	483a      	ldr	r0, [pc, #232]	@ (8000d14 <main+0x274>)
 8000c2a:	f004 fd99 	bl	8005760 <HAL_UART_Transmit>
          break;
 8000c2e:	e000      	b.n	8000c32 <main+0x192>
          break;
 8000c30:	bf00      	nop
      }
      uartRxReceived = 0;
 8000c32:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <main+0x280>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
      /**
        * @brief Relance la réception UART en interruption.
        */
      HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4934      	ldr	r1, [pc, #208]	@ (8000d0c <main+0x26c>)
 8000c3c:	4835      	ldr	r0, [pc, #212]	@ (8000d14 <main+0x274>)
 8000c3e:	f004 fe1d 	bl	800587c <HAL_UART_Receive_IT>
    }
    /**
      * @brief Vérifie si une nouvelle commande est prête à être traitée.
      */
    if (newCmdReady)
 8000c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f43f af71 	beq.w	8000b2c <main+0x8c>
    {
      newCmdReady = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (argc > 0)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	dd46      	ble.n	8000ce2 <main+0x242>
      {
    	/**
    	  * @brief Traite les commandes reconnues : help, pinout, start, stop.
    	  */
        if (strcmp(argv[0], "help") == 0)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4936      	ldr	r1, [pc, #216]	@ (8000d30 <main+0x290>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fae1 	bl	8000220 <strcmp>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d107      	bne.n	8000c74 <main+0x1d4>
        {
          HAL_UART_Transmit(&huart2, helpMsg, strlen((char*)helpMsg), HAL_MAX_DELAY);
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	22ac      	movs	r2, #172	@ 0xac
 8000c6a:	4932      	ldr	r1, [pc, #200]	@ (8000d34 <main+0x294>)
 8000c6c:	4829      	ldr	r0, [pc, #164]	@ (8000d14 <main+0x274>)
 8000c6e:	f004 fd77 	bl	8005760 <HAL_UART_Transmit>
 8000c72:	e036      	b.n	8000ce2 <main+0x242>
        }
        else if (strcmp(argv[0], "pinout") == 0)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4930      	ldr	r1, [pc, #192]	@ (8000d38 <main+0x298>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fad1 	bl	8000220 <strcmp>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d107      	bne.n	8000c94 <main+0x1f4>
        {
          HAL_UART_Transmit(&huart2, pinout, strlen((char*)pinout), HAL_MAX_DELAY);
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	2239      	movs	r2, #57	@ 0x39
 8000c8a:	492c      	ldr	r1, [pc, #176]	@ (8000d3c <main+0x29c>)
 8000c8c:	4821      	ldr	r0, [pc, #132]	@ (8000d14 <main+0x274>)
 8000c8e:	f004 fd67 	bl	8005760 <HAL_UART_Transmit>
 8000c92:	e026      	b.n	8000ce2 <main+0x242>
        }
        else if (strcmp(argv[0], "start") == 0)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	492a      	ldr	r1, [pc, #168]	@ (8000d40 <main+0x2a0>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fac1 	bl	8000220 <strcmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d107      	bne.n	8000cb4 <main+0x214>
        {
          HAL_UART_Transmit(&huart2, powerOn, strlen((char*)powerOn), HAL_MAX_DELAY);
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	220a      	movs	r2, #10
 8000caa:	4926      	ldr	r1, [pc, #152]	@ (8000d44 <main+0x2a4>)
 8000cac:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <main+0x274>)
 8000cae:	f004 fd57 	bl	8005760 <HAL_UART_Transmit>
 8000cb2:	e016      	b.n	8000ce2 <main+0x242>
        }
        else if (strcmp(argv[0], "stop") == 0)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4924      	ldr	r1, [pc, #144]	@ (8000d48 <main+0x2a8>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fab1 	bl	8000220 <strcmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <main+0x234>
        {
          HAL_UART_Transmit(&huart2, powerOff, strlen((char*)powerOff), HAL_MAX_DELAY);
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	220b      	movs	r2, #11
 8000cca:	4920      	ldr	r1, [pc, #128]	@ (8000d4c <main+0x2ac>)
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <main+0x274>)
 8000cce:	f004 fd47 	bl	8005760 <HAL_UART_Transmit>
 8000cd2:	e006      	b.n	8000ce2 <main+0x242>
        }
        else
        {
          HAL_UART_Transmit(&huart2, cmdNotFound, strlen((char*)cmdNotFound), HAL_MAX_DELAY);
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	2213      	movs	r2, #19
 8000cda:	491d      	ldr	r1, [pc, #116]	@ (8000d50 <main+0x2b0>)
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <main+0x274>)
 8000cde:	f004 fd3f 	bl	8005760 <HAL_UART_Transmit>
        }
      }
      // Afficher le prompt
      HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2217      	movs	r2, #23
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <main+0x27c>)
 8000cea:	480a      	ldr	r0, [pc, #40]	@ (8000d14 <main+0x274>)
 8000cec:	f004 fd38 	bl	8005760 <HAL_UART_Transmit>

      // Réinitialiser le buffer de commande et l'index
      idxCmd = 0;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <main+0x264>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
      memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000cf6:	2240      	movs	r2, #64	@ 0x40
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <main+0x268>)
 8000cfc:	f006 ff33 	bl	8007b66 <memset>
    if (uartRxReceived)
 8000d00:	e714      	b.n	8000b2c <main+0x8c>
 8000d02:	bf00      	nop
 8000d04:	200001e8 	.word	0x200001e8
 8000d08:	200001a8 	.word	0x200001a8
 8000d0c:	20000164 	.word	0x20000164
 8000d10:	20000168 	.word	0x20000168
 8000d14:	200002d4 	.word	0x200002d4
 8000d18:	080089bc 	.word	0x080089bc
 8000d1c:	080089a4 	.word	0x080089a4
 8000d20:	20000160 	.word	0x20000160
 8000d24:	08008a24 	.word	0x08008a24
 8000d28:	0800896c 	.word	0x0800896c
 8000d2c:	08008970 	.word	0x08008970
 8000d30:	08008984 	.word	0x08008984
 8000d34:	08008a28 	.word	0x08008a28
 8000d38:	0800898c 	.word	0x0800898c
 8000d3c:	08008ad8 	.word	0x08008ad8
 8000d40:	08008994 	.word	0x08008994
 8000d44:	08008b14 	.word	0x08008b14
 8000d48:	0800899c 	.word	0x0800899c
 8000d4c:	08008b20 	.word	0x08008b20
 8000d50:	08008b2c 	.word	0x08008b2c

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	@ 0x50
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	2238      	movs	r2, #56	@ 0x38
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f006 feff 	bl	8007b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f002 fa12 	bl	80031a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d92:	2355      	movs	r3, #85	@ 0x55
 8000d94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 faae 	bl	8003308 <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000db2:	f000 f841 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fdac 	bl	800392c <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000dda:	f000 f82d 	bl	8000e38 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3750      	adds	r7, #80	@ 0x50
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_UART_RxCpltCallback>:
  * @brief Callback appelé à la fin de la réception UART.
  * @param huart Handle de l'UART.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <HAL_UART_RxCpltCallback+0x24>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d102      	bne.n	8000e00 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxReceived = 1;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_UART_RxCpltCallback+0x28>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
    // La relance de la réception UART est effectuée dans la boucle principale
  }
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	20000160 	.word	0x20000160

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e26:	f000 fd1d 	bl	8001864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40001000 	.word	0x40001000

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e7a:	f002 fa35 	bl	80032e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	@ 0x30
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <HAL_InitTick+0xc4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f50 <HAL_InitTick+0xc4>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea8:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <HAL_InitTick+0xc4>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb4:	f107 020c 	add.w	r2, r7, #12
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 ff0a 	bl	8003cd8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ec4:	f002 fedc 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8000ec8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ecc:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_InitTick+0xc8>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000eda:	4a20      	ldr	r2, [pc, #128]	@ (8000f5c <HAL_InitTick+0xd0>)
 8000edc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000ee0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ee4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ef8:	4817      	ldr	r0, [pc, #92]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000efa:	f003 f9b3 	bl	8004264 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d11b      	bne.n	8000f44 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f0c:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <HAL_InitTick+0xcc>)
 8000f0e:	f003 fa0b 	bl	8004328 <HAL_TIM_Base_Start_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d111      	bne.n	8000f44 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f20:	2036      	movs	r0, #54	@ 0x36
 8000f22:	f001 feb1 	bl	8002c88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d808      	bhi.n	8000f3e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	2036      	movs	r0, #54	@ 0x36
 8000f32:	f001 fe8f 	bl	8002c54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <HAL_InitTick+0xd4>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e002      	b.n	8000f44 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3730      	adds	r7, #48	@ 0x30
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	431bde83 	.word	0x431bde83
 8000f58:	200001ec 	.word	0x200001ec
 8000f5c:	40001000 	.word	0x40001000
 8000f60:	20000004 	.word	0x20000004

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <USART2_IRQHandler+0x10>)
 8000fca:	f004 fca3 	bl	8005914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002d4 	.word	0x200002d4

08000fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000fdc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe0:	f002 f8ba 	bl	8003158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <TIM6_DAC_IRQHandler+0x10>)
 8000fee:	f003 fa6a 	bl	80044c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001ec 	.word	0x200001ec

08000ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return 1;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_kill>:

int _kill(int pid, int sig)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001016:	f006 fe51 	bl	8007cbc <__errno>
 800101a:	4603      	mov	r3, r0
 800101c:	2216      	movs	r2, #22
 800101e:	601a      	str	r2, [r3, #0]
  return -1;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_exit>:

void _exit (int status)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe7 	bl	800100c <_kill>
  while (1) {}    /* Make sure we hang here */
 800103e:	bf00      	nop
 8001040:	e7fd      	b.n	800103e <_exit+0x12>

08001042 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e00a      	b.n	800106a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001054:	f3af 8000 	nop.w
 8001058:	4601      	mov	r1, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	60ba      	str	r2, [r7, #8]
 8001060:	b2ca      	uxtb	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbf0      	blt.n	8001054 <_read+0x12>
  }

  return len;
 8001072:	687b      	ldr	r3, [r7, #4]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e009      	b.n	80010a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60ba      	str	r2, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbf1      	blt.n	800108e <_write+0x12>
  }
  return len;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_close>:

int _close(int file)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010dc:	605a      	str	r2, [r3, #4]
  return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_isatty>:

int _isatty(int file)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f006 fdb6 	bl	8007cbc <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20020000 	.word	0x20020000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000238 	.word	0x20000238
 8001184:	20000550 	.word	0x20000550

08001188 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b098      	sub	sp, #96	@ 0x60
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2234      	movs	r2, #52	@ 0x34
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 fcc4 	bl	8007b66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011de:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <MX_TIM1_Init+0x150>)
 80011e0:	4a47      	ldr	r2, [pc, #284]	@ (8001300 <MX_TIM1_Init+0x154>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011e4:	4b45      	ldr	r3, [pc, #276]	@ (80012fc <MX_TIM1_Init+0x150>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b44      	ldr	r3, [pc, #272]	@ (80012fc <MX_TIM1_Init+0x150>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011f0:	4b42      	ldr	r3, [pc, #264]	@ (80012fc <MX_TIM1_Init+0x150>)
 80011f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b40      	ldr	r3, [pc, #256]	@ (80012fc <MX_TIM1_Init+0x150>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011fe:	4b3f      	ldr	r3, [pc, #252]	@ (80012fc <MX_TIM1_Init+0x150>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001204:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <MX_TIM1_Init+0x150>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800120a:	483c      	ldr	r0, [pc, #240]	@ (80012fc <MX_TIM1_Init+0x150>)
 800120c:	f003 f904 	bl	8004418 <HAL_TIM_PWM_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f7ff fe0f 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001226:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800122a:	4619      	mov	r1, r3
 800122c:	4833      	ldr	r0, [pc, #204]	@ (80012fc <MX_TIM1_Init+0x150>)
 800122e:	f004 f8d7 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001238:	f7ff fdfe 	bl	8000e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123c:	2360      	movs	r3, #96	@ 0x60
 800123e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001258:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4826      	ldr	r0, [pc, #152]	@ (80012fc <MX_TIM1_Init+0x150>)
 8001262:	f003 fa7f 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800126c:	f7ff fde4 	bl	8000e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001270:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001274:	2204      	movs	r2, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4820      	ldr	r0, [pc, #128]	@ (80012fc <MX_TIM1_Init+0x150>)
 800127a:	f003 fa73 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001284:	f7ff fdd8 	bl	8000e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001288:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800128c:	2208      	movs	r2, #8
 800128e:	4619      	mov	r1, r3
 8001290:	481a      	ldr	r0, [pc, #104]	@ (80012fc <MX_TIM1_Init+0x150>)
 8001292:	f003 fa67 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800129c:	f7ff fdcc 	bl	8000e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <MX_TIM1_Init+0x150>)
 80012de:	f004 f915 	bl	800550c <HAL_TIMEx_ConfigBreakDeadTime>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80012e8:	f7ff fda6 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <MX_TIM1_Init+0x150>)
 80012ee:	f000 f8d7 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 80012f2:	bf00      	nop
 80012f4:	3760      	adds	r7, #96	@ 0x60
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000023c 	.word	0x2000023c
 8001300:	40012c00 	.word	0x40012c00

08001304 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_TIM3_Init+0x90>)
 8001324:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <MX_TIM3_Init+0x94>)
 8001326:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_TIM3_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_TIM3_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_TIM3_Init+0x90>)
 8001336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_TIM3_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_TIM3_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <MX_TIM3_Init+0x90>)
 8001360:	f003 ff8e 	bl	8005280 <HAL_TIMEx_HallSensor_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800136a:	f7ff fd65 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800136e:	2350      	movs	r3, #80	@ 0x50
 8001370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	@ (8001394 <MX_TIM3_Init+0x90>)
 800137c:	f004 f830 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001386:	f7ff fd57 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000288 	.word	0x20000288
 8001398:	40000400 	.word	0x40000400

0800139c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x38>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10b      	bne.n	80013c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80013b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40012c00 	.word	0x40012c00
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a26      	ldr	r2, [pc, #152]	@ (8001494 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d145      	bne.n	800148a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	4a25      	ldr	r2, [pc, #148]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6593      	str	r3, [r2, #88]	@ 0x58
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a19      	ldr	r2, [pc, #100]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001446:	2350      	movs	r3, #80	@ 0x50
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001456:	2302      	movs	r3, #2
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001464:	f001 fcde 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001468:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800147a:	2302      	movs	r3, #2
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001486:	f001 fccd 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	@ 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40000400 	.word	0x40000400
 8001498:	40021000 	.word	0x40021000
 800149c:	48000800 	.word	0x48000800

080014a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a29      	ldr	r2, [pc, #164]	@ (8001564 <HAL_TIM_MspPostInit+0xc4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d14b      	bne.n	800155a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b29      	ldr	r3, [pc, #164]	@ (8001568 <HAL_TIM_MspPostInit+0xc8>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	4a28      	ldr	r2, [pc, #160]	@ (8001568 <HAL_TIM_MspPostInit+0xc8>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <HAL_TIM_MspPostInit+0xc8>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <HAL_TIM_MspPostInit+0xc8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a22      	ldr	r2, [pc, #136]	@ (8001568 <HAL_TIM_MspPostInit+0xc8>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_TIM_MspPostInit+0xc8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80014f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001504:	2306      	movs	r3, #6
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4817      	ldr	r0, [pc, #92]	@ (800156c <HAL_TIM_MspPostInit+0xcc>)
 8001510:	f001 fc88 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001526:	2304      	movs	r3, #4
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	480e      	ldr	r0, [pc, #56]	@ (800156c <HAL_TIM_MspPostInit+0xcc>)
 8001532:	f001 fc77 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001536:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001548:	2306      	movs	r3, #6
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001556:	f001 fc65 	bl	8002e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	@ 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40012c00 	.word	0x40012c00
 8001568:	40021000 	.word	0x40021000
 800156c:	48000400 	.word	0x48000400

08001570 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 8001576:	4a23      	ldr	r2, [pc, #140]	@ (8001604 <MX_USART2_UART_Init+0x94>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b2:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b8:	4811      	ldr	r0, [pc, #68]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015ba:	f004 f881 	bl	80056c0 <HAL_UART_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015c4:	f7ff fc38 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c8:	2100      	movs	r1, #0
 80015ca:	480d      	ldr	r0, [pc, #52]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015cc:	f006 f8fb 	bl	80077c6 <HAL_UARTEx_SetTxFifoThreshold>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015d6:	f7ff fc2f 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4808      	ldr	r0, [pc, #32]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015de:	f006 f930 	bl	8007842 <HAL_UARTEx_SetRxFifoThreshold>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f7ff fc26 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	@ (8001600 <MX_USART2_UART_Init+0x90>)
 80015ee:	f006 f8b1 	bl	8007754 <HAL_UARTEx_DisableFifoMode>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f7ff fc1e 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002d4 	.word	0x200002d4
 8001604:	40004400 	.word	0x40004400

08001608 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800160c:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 800160e:	4a23      	ldr	r2, [pc, #140]	@ (800169c <MX_USART3_UART_Init+0x94>)
 8001610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001612:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001652:	f004 f835 	bl	80056c0 <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800165c:	f7ff fbec 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	480d      	ldr	r0, [pc, #52]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001664:	f006 f8af 	bl	80077c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800166e:	f7ff fbe3 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001672:	2100      	movs	r1, #0
 8001674:	4808      	ldr	r0, [pc, #32]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001676:	f006 f8e4 	bl	8007842 <HAL_UARTEx_SetRxFifoThreshold>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001680:	f7ff fbda 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_USART3_UART_Init+0x90>)
 8001686:	f006 f865 	bl	8007754 <HAL_UARTEx_DisableFifoMode>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001690:	f7ff fbd2 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000368 	.word	0x20000368
 800169c:	40004800 	.word	0x40004800

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0a0      	sub	sp, #128	@ 0x80
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	2254      	movs	r2, #84	@ 0x54
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f006 fa50 	bl	8007b66 <memset>
  if(uartHandle->Instance==USART2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a41      	ldr	r2, [pc, #260]	@ (80017d0 <HAL_UART_MspInit+0x130>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d13f      	bne.n	8001750 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fb73 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e8:	f7ff fba6 	bl	8000e38 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ec:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	4a38      	ldr	r2, [pc, #224]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 80016f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f8:	4b36      	ldr	r3, [pc, #216]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001708:	4a32      	ldr	r2, [pc, #200]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800171c:	230c      	movs	r3, #12
 800171e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172c:	2307      	movs	r3, #7
 800172e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173a:	f001 fb73 	bl	8002e24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2026      	movs	r0, #38	@ 0x26
 8001744:	f001 fa86 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001748:	2026      	movs	r0, #38	@ 0x26
 800174a:	f001 fa9d 	bl	8002c88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800174e:	e03b      	b.n	80017c8 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <HAL_UART_MspInit+0x138>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d136      	bne.n	80017c8 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800175a:	2304      	movs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fb2e 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001772:	f7ff fb61 	bl	8000e38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001780:	6593      	str	r3, [r2, #88]	@ 0x58
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_UART_MspInit+0x134>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b8:	2307      	movs	r3, #7
 80017ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	@ (80017dc <HAL_UART_MspInit+0x13c>)
 80017c4:	f001 fb2e 	bl	8002e24 <HAL_GPIO_Init>
}
 80017c8:	bf00      	nop
 80017ca:	3780      	adds	r7, #128	@ 0x80
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40004400 	.word	0x40004400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40004800 	.word	0x40004800
 80017dc:	48000800 	.word	0x48000800

080017e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e0:	480d      	ldr	r0, [pc, #52]	@ (8001818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e4:	f7ff fcd0 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	@ (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	@ (800182c <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f006 fa5b 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001812:	f7ff f945 	bl	8000aa0 <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   r0, =_estack
 8001818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001824:	08008c70 	.word	0x08008c70
  ldr r2, =_sbss
 8001828:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800182c:	2000054c 	.word	0x2000054c

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>

08001832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f001 f9fe 	bl	8002c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001842:	200f      	movs	r0, #15
 8001844:	f7ff fb22 	bl	8000e8c <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	e001      	b.n	8001858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001854:	f7ff faf6 	bl	8000e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001858:	79fb      	ldrb	r3, [r7, #7]

}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_IncTick+0x1c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_IncTick+0x20>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4413      	add	r3, r2
 8001872:	4a03      	ldr	r2, [pc, #12]	@ (8001880 <HAL_IncTick+0x1c>)
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	200003fc 	.word	0x200003fc
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200003fc 	.word	0x200003fc

080018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff ffee 	bl	8001888 <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d004      	beq.n	80018c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_Delay+0x40>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c4:	bf00      	nop
 80018c6:	f7ff ffdf 	bl	8001888 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d8f7      	bhi.n	80018c6 <HAL_Delay+0x26>
  {
  }
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000008 	.word	0x20000008

080018e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3360      	adds	r3, #96	@ 0x60
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <LL_ADC_SetOffset+0x44>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	4313      	orrs	r3, r2
 800197c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001984:	bf00      	nop
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	03fff000 	.word	0x03fff000

08001994 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3360      	adds	r3, #96	@ 0x60
 80019a2:	461a      	mov	r2, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3360      	adds	r3, #96	@ 0x60
 80019d0:	461a      	mov	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3360      	adds	r3, #96	@ 0x60
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3360      	adds	r3, #96	@ 0x60
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	615a      	str	r2, [r3, #20]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3330      	adds	r3, #48	@ 0x30
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	211f      	movs	r1, #31
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 011f 	and.w	r1, r3, #31
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3314      	adds	r3, #20
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	0e5b      	lsrs	r3, r3, #25
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0d1b      	lsrs	r3, r3, #20
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2107      	movs	r1, #7
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0d1b      	lsrs	r3, r3, #20
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0318 	and.w	r3, r3, #24
 8001b5a:	4908      	ldr	r1, [pc, #32]	@ (8001b7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b5c:	40d9      	lsrs	r1, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	400b      	ands	r3, r1
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	0007ffff 	.word	0x0007ffff

08001b80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6093      	str	r3, [r2, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bb8:	d101      	bne.n	8001bbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001be0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <LL_ADC_IsEnabled+0x18>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <LL_ADC_IsEnabled+0x1a>
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1a9      	b.n	8001ffe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fd67 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff67 	bl	8001ba4 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff4d 	bl	8001b80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff82 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d115      	bne.n	8001d22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff66 	bl	8001bcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d00:	4b9c      	ldr	r3, [pc, #624]	@ (8001f74 <HAL_ADC_Init+0x2e4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	4a9c      	ldr	r2, [pc, #624]	@ (8001f78 <HAL_ADC_Init+0x2e8>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff64 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff75 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 8142 	bne.w	8001fec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 813e 	bne.w	8001fec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff49 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d141      	bne.n	8001e14 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_Init+0x114>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a77      	ldr	r2, [pc, #476]	@ (8001f7c <HAL_ADC_Init+0x2ec>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10f      	bne.n	8001dc4 <HAL_ADC_Init+0x134>
 8001da4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001da8:	f7ff ff38 	bl	8001c1c <LL_ADC_IsEnabled>
 8001dac:	4604      	mov	r4, r0
 8001dae:	4873      	ldr	r0, [pc, #460]	@ (8001f7c <HAL_ADC_Init+0x2ec>)
 8001db0:	f7ff ff34 	bl	8001c1c <LL_ADC_IsEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4323      	orrs	r3, r4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e012      	b.n	8001dea <HAL_ADC_Init+0x15a>
 8001dc4:	486e      	ldr	r0, [pc, #440]	@ (8001f80 <HAL_ADC_Init+0x2f0>)
 8001dc6:	f7ff ff29 	bl	8001c1c <LL_ADC_IsEnabled>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	486d      	ldr	r0, [pc, #436]	@ (8001f84 <HAL_ADC_Init+0x2f4>)
 8001dce:	f7ff ff25 	bl	8001c1c <LL_ADC_IsEnabled>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	431c      	orrs	r4, r3
 8001dd6:	486c      	ldr	r0, [pc, #432]	@ (8001f88 <HAL_ADC_Init+0x2f8>)
 8001dd8:	f7ff ff20 	bl	8001c1c <LL_ADC_IsEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4323      	orrs	r3, r4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001df6:	d004      	beq.n	8001e02 <HAL_ADC_Init+0x172>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5f      	ldr	r2, [pc, #380]	@ (8001f7c <HAL_ADC_Init+0x2ec>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x176>
 8001e02:	4a62      	ldr	r2, [pc, #392]	@ (8001f8c <HAL_ADC_Init+0x2fc>)
 8001e04:	e000      	b.n	8001e08 <HAL_ADC_Init+0x178>
 8001e06:	4a62      	ldr	r2, [pc, #392]	@ (8001f90 <HAL_ADC_Init+0x300>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f7ff fd68 	bl	80018e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7f5b      	ldrb	r3, [r3, #29]
 8001e18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	045b      	lsls	r3, r3, #17
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b48      	ldr	r3, [pc, #288]	@ (8001f94 <HAL_ADC_Init+0x304>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fee4 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 8001ea0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d17f      	bne.n	8001fa8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d17c      	bne.n	8001fa8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eb2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001eba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eca:	f023 0302 	bic.w	r3, r3, #2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	69b9      	ldr	r1, [r7, #24]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d017      	beq.n	8001f10 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001eee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ef8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6911      	ldr	r1, [r2, #16]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f0e:	e013      	b.n	8001f38 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d12a      	bne.n	8001f98 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f58:	4311      	orrs	r1, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f64:	430a      	orrs	r2, r1
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	e019      	b.n	8001fa8 <HAL_ADC_Init+0x318>
 8001f74:	20000000 	.word	0x20000000
 8001f78:	053e2d63 	.word	0x053e2d63
 8001f7c:	50000100 	.word	0x50000100
 8001f80:	50000400 	.word	0x50000400
 8001f84:	50000500 	.word	0x50000500
 8001f88:	50000600 	.word	0x50000600
 8001f8c:	50000300 	.word	0x50000300
 8001f90:	50000700 	.word	0x50000700
 8001f94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10c      	bne.n	8001fca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f023 010f 	bic.w	r1, r3, #15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fc8:	e007      	b.n	8001fda <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 020f 	bic.w	r2, r2, #15
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fea:	e007      	b.n	8001ffc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop

08002008 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0b6      	sub	sp, #216	@ 0xd8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_ADC_ConfigChannel+0x24>
 8002026:	2302      	movs	r3, #2
 8002028:	f000 bc13 	b.w	8002852 <HAL_ADC_ConfigChannel+0x84a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fe02 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	f040 83f3 	bne.w	800282c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	f7ff fd18 	bl	8001a88 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fdf0 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8002062:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fdfc 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 8002070:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002074:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 81d9 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800207e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 81d4 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002090:	d10f      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	4619      	mov	r1, r3
 800209e:	f7ff fd1f 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fcd9 	bl	8001a62 <LL_ADC_SetSamplingTimeCommonConfig>
 80020b0:	e00e      	b.n	80020d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	461a      	mov	r2, r3
 80020c0:	f7ff fd0e 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fcc9 	bl	8001a62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	08db      	lsrs	r3, r3, #3
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d022      	beq.n	8002138 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6919      	ldr	r1, [r3, #16]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002102:	f7ff fc23 	bl	800194c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6919      	ldr	r1, [r3, #16]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	461a      	mov	r2, r3
 8002114:	f7ff fc6f 	bl	80019f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002124:	2b01      	cmp	r3, #1
 8002126:	d102      	bne.n	800212e <HAL_ADC_ConfigChannel+0x126>
 8002128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800212c:	e000      	b.n	8002130 <HAL_ADC_ConfigChannel+0x128>
 800212e:	2300      	movs	r3, #0
 8002130:	461a      	mov	r2, r3
 8002132:	f7ff fc7b 	bl	8001a2c <LL_ADC_SetOffsetSaturation>
 8002136:	e17b      	b.n	8002430 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc28 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x15c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fc1d 	bl	8001994 <LL_ADC_GetOffsetChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	f003 021f 	and.w	r2, r3, #31
 8002162:	e01e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x19a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fc12 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002186:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800218a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e004      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x1b2>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0e9b      	lsrs	r3, r3, #26
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	e018      	b.n	80021ec <HAL_ADC_ConfigChannel+0x1e4>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e004      	b.n	80021ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d106      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fbe1 	bl	80019c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbc5 	bl	8001994 <LL_ADC_GetOffsetChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <HAL_ADC_ConfigChannel+0x222>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fbba 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	e01e      	b.n	8002268 <HAL_ADC_ConfigChannel+0x260>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fbaf 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800224c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800225c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x278>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	e018      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x2aa>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002294:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800229c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e004      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fb7e 	bl	80019c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fb62 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x2e8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fb57 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 021f 	and.w	r2, r3, #31
 80022ee:	e01e      	b.n	800232e <HAL_ADC_ConfigChannel+0x326>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fb4c 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800230e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002316:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e004      	b.n	800232c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002322:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x33e>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0e9b      	lsrs	r3, r3, #26
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	e016      	b.n	8002374 <HAL_ADC_ConfigChannel+0x36c>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002358:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800235a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800235e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e004      	b.n	8002374 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800236a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	2102      	movs	r1, #2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fb1d 	bl	80019c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2103      	movs	r1, #3
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fb01 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x3aa>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2103      	movs	r1, #3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff faf6 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	e017      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x3da>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2103      	movs	r1, #3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff faeb 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80023ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e003      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x3f2>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	0e9b      	lsrs	r3, r3, #26
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	e011      	b.n	800241e <HAL_ADC_ConfigChannel+0x416>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800240a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800240c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e003      	b.n	800241e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800241e:	429a      	cmp	r2, r3
 8002420:	d106      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	2103      	movs	r1, #3
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fac8 	bl	80019c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fbf1 	bl	8001c1c <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 813d 	bne.w	80026bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6819      	ldr	r1, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	f7ff fb72 	bl	8001b38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4aa2      	ldr	r2, [pc, #648]	@ (80026e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	f040 812e 	bne.w	80026bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x480>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	3301      	adds	r3, #1
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	2b09      	cmp	r3, #9
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e019      	b.n	80024bc <HAL_ADC_ConfigChannel+0x4b4>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002498:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800249a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e003      	b.n	80024ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	bf94      	ite	ls
 80024b6:	2301      	movls	r3, #1
 80024b8:	2300      	movhi	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d079      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x4d4>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	069b      	lsls	r3, r3, #26
 80024d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024da:	e015      	b.n	8002508 <HAL_ADC_ConfigChannel+0x500>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x520>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	3301      	adds	r3, #1
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	e017      	b.n	8002558 <HAL_ADC_ConfigChannel+0x550>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002538:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800253a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	ea42 0103 	orr.w	r1, r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <HAL_ADC_ConfigChannel+0x576>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	051b      	lsls	r3, r3, #20
 800257c:	e018      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x5a8>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800258c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e003      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800259a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b0:	430b      	orrs	r3, r1
 80025b2:	e07e      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x5c8>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	3301      	adds	r3, #1
 80025c8:	069b      	lsls	r3, r3, #26
 80025ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ce:	e015      	b.n	80025fc <HAL_ADC_ConfigChannel+0x5f4>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	069b      	lsls	r3, r3, #26
 80025f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_ADC_ConfigChannel+0x614>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	3301      	adds	r3, #1
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	e017      	b.n	800264c <HAL_ADC_ConfigChannel+0x644>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	61fb      	str	r3, [r7, #28]
  return result;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	ea42 0103 	orr.w	r1, r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x670>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	3b1e      	subs	r3, #30
 8002670:	051b      	lsls	r3, r3, #20
 8002672:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002676:	e01b      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x6a8>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	613b      	str	r3, [r7, #16]
  return result;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e003      	b.n	800269c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f003 021f 	and.w	r2, r3, #31
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	051b      	lsls	r3, r3, #20
 80026ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7ff fa12 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80be 	beq.w	8002846 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d2:	d004      	beq.n	80026de <HAL_ADC_ConfigChannel+0x6d6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_ADC_ConfigChannel+0x6e4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x6ec>
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80026e0:	e009      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x6ee>
 80026e2:	bf00      	nop
 80026e4:	407f0000 	.word	0x407f0000
 80026e8:	80080000 	.word	0x80080000
 80026ec:	50000100 	.word	0x50000100
 80026f0:	50000300 	.word	0x50000300
 80026f4:	4b59      	ldr	r3, [pc, #356]	@ (800285c <HAL_ADC_ConfigChannel+0x854>)
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f91a 	bl	8001930 <LL_ADC_GetCommonPathInternalCh>
 80026fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a56      	ldr	r2, [pc, #344]	@ (8002860 <HAL_ADC_ConfigChannel+0x858>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_ADC_ConfigChannel+0x70c>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a55      	ldr	r2, [pc, #340]	@ (8002864 <HAL_ADC_ConfigChannel+0x85c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d13a      	bne.n	800278a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d134      	bne.n	800278a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002728:	d005      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x72e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a4e      	ldr	r2, [pc, #312]	@ (8002868 <HAL_ADC_ConfigChannel+0x860>)
 8002730:	4293      	cmp	r3, r2
 8002732:	f040 8085 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800273e:	d004      	beq.n	800274a <HAL_ADC_ConfigChannel+0x742>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a49      	ldr	r2, [pc, #292]	@ (800286c <HAL_ADC_ConfigChannel+0x864>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x746>
 800274a:	4a49      	ldr	r2, [pc, #292]	@ (8002870 <HAL_ADC_ConfigChannel+0x868>)
 800274c:	e000      	b.n	8002750 <HAL_ADC_ConfigChannel+0x748>
 800274e:	4a43      	ldr	r2, [pc, #268]	@ (800285c <HAL_ADC_ConfigChannel+0x854>)
 8002750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002754:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f7ff f8d5 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002760:	4b44      	ldr	r3, [pc, #272]	@ (8002874 <HAL_ADC_ConfigChannel+0x86c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	4a44      	ldr	r2, [pc, #272]	@ (8002878 <HAL_ADC_ConfigChannel+0x870>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800277a:	e002      	b.n	8002782 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3b01      	subs	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f9      	bne.n	800277c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002788:	e05a      	b.n	8002840 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a3b      	ldr	r2, [pc, #236]	@ (800287c <HAL_ADC_ConfigChannel+0x874>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d125      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11f      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a31      	ldr	r2, [pc, #196]	@ (800286c <HAL_ADC_ConfigChannel+0x864>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d104      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x7ac>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a34      	ldr	r2, [pc, #208]	@ (8002880 <HAL_ADC_ConfigChannel+0x878>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d047      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x7c0>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2a      	ldr	r2, [pc, #168]	@ (800286c <HAL_ADC_ConfigChannel+0x864>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x7c4>
 80027c8:	4a29      	ldr	r2, [pc, #164]	@ (8002870 <HAL_ADC_ConfigChannel+0x868>)
 80027ca:	e000      	b.n	80027ce <HAL_ADC_ConfigChannel+0x7c6>
 80027cc:	4a23      	ldr	r2, [pc, #140]	@ (800285c <HAL_ADC_ConfigChannel+0x854>)
 80027ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7ff f896 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027de:	e031      	b.n	8002844 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_ADC_ConfigChannel+0x87c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12d      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d127      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	@ (800286c <HAL_ADC_ConfigChannel+0x864>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d022      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002808:	d004      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x80c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a17      	ldr	r2, [pc, #92]	@ (800286c <HAL_ADC_ConfigChannel+0x864>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x810>
 8002814:	4a16      	ldr	r2, [pc, #88]	@ (8002870 <HAL_ADC_ConfigChannel+0x868>)
 8002816:	e000      	b.n	800281a <HAL_ADC_ConfigChannel+0x812>
 8002818:	4a10      	ldr	r2, [pc, #64]	@ (800285c <HAL_ADC_ConfigChannel+0x854>)
 800281a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800281e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f7ff f870 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
 800282a:	e00c      	b.n	8002846 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800283e:	e002      	b.n	8002846 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002840:	bf00      	nop
 8002842:	e000      	b.n	8002846 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002844:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800284e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002852:	4618      	mov	r0, r3
 8002854:	37d8      	adds	r7, #216	@ 0xd8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	50000700 	.word	0x50000700
 8002860:	c3210000 	.word	0xc3210000
 8002864:	90c00010 	.word	0x90c00010
 8002868:	50000600 	.word	0x50000600
 800286c:	50000100 	.word	0x50000100
 8002870:	50000300 	.word	0x50000300
 8002874:	20000000 	.word	0x20000000
 8002878:	053e2d63 	.word	0x053e2d63
 800287c:	c7520000 	.word	0xc7520000
 8002880:	50000500 	.word	0x50000500
 8002884:	cb840000 	.word	0xcb840000

08002888 <LL_ADC_IsEnabled>:
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <LL_ADC_IsEnabled+0x18>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_ADC_IsEnabled+0x1a>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <LL_ADC_REG_IsConversionOngoing>:
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d101      	bne.n	80028c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b0a1      	sub	sp, #132	@ 0x84
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e0e7      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028fa:	2300      	movs	r3, #0
 80028fc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028fe:	2300      	movs	r3, #0
 8002900:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800290a:	d102      	bne.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	e009      	b.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d102      	bne.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800291c:	4b6d      	ldr	r3, [pc, #436]	@ (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	e001      	b.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0be      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ffb1 	bl	80028ae <LL_ADC_REG_IsConversionOngoing>
 800294c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ffab 	bl	80028ae <LL_ADC_REG_IsConversionOngoing>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80a0 	bne.w	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 809c 	bne.w	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002970:	d004      	beq.n	800297c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a55      	ldr	r2, [pc, #340]	@ (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800297c:	4b56      	ldr	r3, [pc, #344]	@ (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800297e:	e000      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002980:	4b56      	ldr	r3, [pc, #344]	@ (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002982:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d04b      	beq.n	8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800298c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800299e:	035b      	lsls	r3, r3, #13
 80029a0:	430b      	orrs	r3, r1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029b0:	d004      	beq.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a45      	ldr	r2, [pc, #276]	@ (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d10f      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029c0:	f7ff ff62 	bl	8002888 <LL_ADC_IsEnabled>
 80029c4:	4604      	mov	r4, r0
 80029c6:	4841      	ldr	r0, [pc, #260]	@ (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029c8:	f7ff ff5e 	bl	8002888 <LL_ADC_IsEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4323      	orrs	r3, r4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e012      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029dc:	483c      	ldr	r0, [pc, #240]	@ (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029de:	f7ff ff53 	bl	8002888 <LL_ADC_IsEnabled>
 80029e2:	4604      	mov	r4, r0
 80029e4:	483b      	ldr	r0, [pc, #236]	@ (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029e6:	f7ff ff4f 	bl	8002888 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	431c      	orrs	r4, r3
 80029ee:	483c      	ldr	r0, [pc, #240]	@ (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029f0:	f7ff ff4a 	bl	8002888 <LL_ADC_IsEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4323      	orrs	r3, r4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d056      	beq.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a0e:	f023 030f 	bic.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	6811      	ldr	r1, [r2, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	6892      	ldr	r2, [r2, #8]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a20:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a22:	e047      	b.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a38:	d004      	beq.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a23      	ldr	r2, [pc, #140]	@ (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10f      	bne.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a48:	f7ff ff1e 	bl	8002888 <LL_ADC_IsEnabled>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	481f      	ldr	r0, [pc, #124]	@ (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a50:	f7ff ff1a 	bl	8002888 <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4323      	orrs	r3, r4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e012      	b.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a64:	481a      	ldr	r0, [pc, #104]	@ (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a66:	f7ff ff0f 	bl	8002888 <LL_ADC_IsEnabled>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4819      	ldr	r0, [pc, #100]	@ (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a6e:	f7ff ff0b 	bl	8002888 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	431c      	orrs	r4, r3
 8002a76:	481a      	ldr	r0, [pc, #104]	@ (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a78:	f7ff ff06 	bl	8002888 <LL_ADC_IsEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a96:	f023 030f 	bic.w	r3, r3, #15
 8002a9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a9c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a9e:	e009      	b.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002abe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3784      	adds	r7, #132	@ 0x84
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	50000100 	.word	0x50000100
 8002ad0:	50000400 	.word	0x50000400
 8002ad4:	50000500 	.word	0x50000500
 8002ad8:	50000300 	.word	0x50000300
 8002adc:	50000700 	.word	0x50000700
 8002ae0:	50000600 	.word	0x50000600

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	@ (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	@ (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	@ (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	@ 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff4c 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c62:	f7ff ff63 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002c66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	6978      	ldr	r0, [r7, #20]
 8002c6e:	f7ff ffb3 	bl	8002bd8 <NVIC_EncodePriority>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff82 	bl	8002b84 <__NVIC_SetPriority>
}
 8002c80:	bf00      	nop
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff56 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d005      	beq.n	8002cc8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e037      	b.n	8002d38 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020e 	bic.w	r2, r2, #14
 8002cd6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d14:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d2c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d36:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e047      	b.n	8002e1a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 020e 	bic.w	r2, r2, #14
 8002d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f003 021f 	and.w	r2, r3, #31
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dd6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00c      	beq.n	8002dfa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002df8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
    }
  }
  return status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e32:	e15a      	b.n	80030ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 814c 	beq.w	80030e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d005      	beq.n	8002e64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d130      	bne.n	8002ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 0201 	and.w	r2, r3, #1
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d017      	beq.n	8002f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d123      	bne.n	8002f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	08da      	lsrs	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3208      	adds	r2, #8
 8002f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	220f      	movs	r2, #15
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	08da      	lsrs	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3208      	adds	r2, #8
 8002f50:	6939      	ldr	r1, [r7, #16]
 8002f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0203 	and.w	r2, r3, #3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80a6 	beq.w	80030e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f98:	4b5b      	ldr	r3, [pc, #364]	@ (8003108 <HAL_GPIO_Init+0x2e4>)
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003108 <HAL_GPIO_Init+0x2e4>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fa4:	4b58      	ldr	r3, [pc, #352]	@ (8003108 <HAL_GPIO_Init+0x2e4>)
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb0:	4a56      	ldr	r2, [pc, #344]	@ (800310c <HAL_GPIO_Init+0x2e8>)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002fda:	d01f      	beq.n	800301c <HAL_GPIO_Init+0x1f8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a4c      	ldr	r2, [pc, #304]	@ (8003110 <HAL_GPIO_Init+0x2ec>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d019      	beq.n	8003018 <HAL_GPIO_Init+0x1f4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a4b      	ldr	r2, [pc, #300]	@ (8003114 <HAL_GPIO_Init+0x2f0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_GPIO_Init+0x1f0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a4a      	ldr	r2, [pc, #296]	@ (8003118 <HAL_GPIO_Init+0x2f4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00d      	beq.n	8003010 <HAL_GPIO_Init+0x1ec>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a49      	ldr	r2, [pc, #292]	@ (800311c <HAL_GPIO_Init+0x2f8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d007      	beq.n	800300c <HAL_GPIO_Init+0x1e8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a48      	ldr	r2, [pc, #288]	@ (8003120 <HAL_GPIO_Init+0x2fc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_GPIO_Init+0x1e4>
 8003004:	2305      	movs	r3, #5
 8003006:	e00a      	b.n	800301e <HAL_GPIO_Init+0x1fa>
 8003008:	2306      	movs	r3, #6
 800300a:	e008      	b.n	800301e <HAL_GPIO_Init+0x1fa>
 800300c:	2304      	movs	r3, #4
 800300e:	e006      	b.n	800301e <HAL_GPIO_Init+0x1fa>
 8003010:	2303      	movs	r3, #3
 8003012:	e004      	b.n	800301e <HAL_GPIO_Init+0x1fa>
 8003014:	2302      	movs	r3, #2
 8003016:	e002      	b.n	800301e <HAL_GPIO_Init+0x1fa>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_GPIO_Init+0x1fa>
 800301c:	2300      	movs	r3, #0
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	f002 0203 	and.w	r2, r2, #3
 8003024:	0092      	lsls	r2, r2, #2
 8003026:	4093      	lsls	r3, r2
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800302e:	4937      	ldr	r1, [pc, #220]	@ (800310c <HAL_GPIO_Init+0x2e8>)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	3302      	adds	r3, #2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800303c:	4b39      	ldr	r3, [pc, #228]	@ (8003124 <HAL_GPIO_Init+0x300>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	43db      	mvns	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003060:	4a30      	ldr	r2, [pc, #192]	@ (8003124 <HAL_GPIO_Init+0x300>)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003066:	4b2f      	ldr	r3, [pc, #188]	@ (8003124 <HAL_GPIO_Init+0x300>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800308a:	4a26      	ldr	r2, [pc, #152]	@ (8003124 <HAL_GPIO_Init+0x300>)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003090:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_GPIO_Init+0x300>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <HAL_GPIO_Init+0x300>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <HAL_GPIO_Init+0x300>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030de:	4a11      	ldr	r2, [pc, #68]	@ (8003124 <HAL_GPIO_Init+0x300>)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3301      	adds	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f ae9d 	bne.w	8002e34 <HAL_GPIO_Init+0x10>
  }
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40021000 	.word	0x40021000
 800310c:	40010000 	.word	0x40010000
 8003110:	48000400 	.word	0x48000400
 8003114:	48000800 	.word	0x48000800
 8003118:	48000c00 	.word	0x48000c00
 800311c:	48001000 	.word	0x48001000
 8003120:	48001400 	.word	0x48001400
 8003124:	40010400 	.word	0x40010400

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003144:	e002      	b.n	800314c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003162:	4b08      	ldr	r3, [pc, #32]	@ (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316e:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f806 	bl	8003188 <HAL_GPIO_EXTI_Callback>
  }
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40010400 	.word	0x40010400

08003188 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d141      	bne.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ae:	4b4b      	ldr	r3, [pc, #300]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ba:	d131      	bne.n	8003220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031bc:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031c2:	4a46      	ldr	r2, [pc, #280]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031cc:	4b43      	ldr	r3, [pc, #268]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031d4:	4a41      	ldr	r2, [pc, #260]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031dc:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2232      	movs	r2, #50	@ 0x32
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	4a3f      	ldr	r2, [pc, #252]	@ (80032e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	0c9b      	lsrs	r3, r3, #18
 80031ee:	3301      	adds	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f2:	e002      	b.n	80031fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fa:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d102      	bne.n	800320e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f2      	bne.n	80031f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800320e:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d158      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e057      	b.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003220:	4b2e      	ldr	r3, [pc, #184]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003226:	4a2d      	ldr	r2, [pc, #180]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800322c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003230:	e04d      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d141      	bne.n	80032be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800323a:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003246:	d131      	bne.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003248:	4b24      	ldr	r3, [pc, #144]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800324e:	4a23      	ldr	r2, [pc, #140]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003258:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003260:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2232      	movs	r2, #50	@ 0x32
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a1c      	ldr	r2, [pc, #112]	@ (80032e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	0c9b      	lsrs	r3, r3, #18
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327e:	e002      	b.n	8003286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d102      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f2      	bne.n	8003280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a6:	d112      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e011      	b.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032bc:	e007      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032be:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40007000 	.word	0x40007000
 80032e0:	20000000 	.word	0x20000000
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f6:	6093      	str	r3, [r2, #8]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e2fe      	b.n	8003918 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003326:	4b97      	ldr	r3, [pc, #604]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003330:	4b94      	ldr	r3, [pc, #592]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d102      	bne.n	8003346 <HAL_RCC_OscConfig+0x3e>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d002      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b8d      	ldr	r3, [pc, #564]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e2d9      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b85      	ldr	r3, [pc, #532]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a84      	ldr	r2, [pc, #528]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b7f      	ldr	r3, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7e      	ldr	r2, [pc, #504]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b7c      	ldr	r3, [pc, #496]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7b      	ldr	r2, [pc, #492]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b78      	ldr	r3, [pc, #480]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a77      	ldr	r2, [pc, #476]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b75      	ldr	r3, [pc, #468]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a74      	ldr	r2, [pc, #464]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe fa62 	bl	8001888 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fe fa5e 	bl	8001888 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	@ 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e29e      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033da:	4b6a      	ldr	r3, [pc, #424]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe fa4e 	bl	8001888 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fa4a 	bl	8001888 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	@ 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e28a      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003402:	4b60      	ldr	r3, [pc, #384]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b59      	ldr	r3, [pc, #356]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b56      	ldr	r3, [pc, #344]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d102      	bne.n	800343e <HAL_RCC_OscConfig+0x136>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d002      	beq.n	8003444 <HAL_RCC_OscConfig+0x13c>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d11f      	bne.n	8003484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003444:	4b4f      	ldr	r3, [pc, #316]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_OscConfig+0x154>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e25d      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	4946      	ldr	r1, [pc, #280]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003470:	4b45      	ldr	r3, [pc, #276]	@ (8003588 <HAL_RCC_OscConfig+0x280>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fd09 	bl	8000e8c <HAL_InitTick>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d043      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e249      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d023      	beq.n	80034d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348c:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3c      	ldr	r2, [pc, #240]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe f9f6 	bl	8001888 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a0:	f7fe f9f2 	bl	8001888 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e232      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b2:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	492d      	ldr	r1, [pc, #180]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
 80034d2:	e01a      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe f9d2 	bl	8001888 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fe f9ce 	bl	8001888 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e20e      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fa:	4b22      	ldr	r3, [pc, #136]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x1e0>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d041      	beq.n	800359a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01c      	beq.n	8003558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe f9ab 	bl	8001888 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe f9a7 	bl	8001888 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1e7      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003548:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ef      	beq.n	8003536 <HAL_RCC_OscConfig+0x22e>
 8003556:	e020      	b.n	800359a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355e:	4a09      	ldr	r2, [pc, #36]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe f98e 	bl	8001888 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800356e:	e00d      	b.n	800358c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe f98a 	bl	8001888 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d906      	bls.n	800358c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1ca      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358c:	4b8c      	ldr	r3, [pc, #560]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ea      	bne.n	8003570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a6 	beq.w	80036f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ac:	4b84      	ldr	r3, [pc, #528]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_OscConfig+0x2b4>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x2b6>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b7f      	ldr	r3, [pc, #508]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	4a7e      	ldr	r2, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ce:	4b7c      	ldr	r3, [pc, #496]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035de:	4b79      	ldr	r3, [pc, #484]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ea:	4b76      	ldr	r3, [pc, #472]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a75      	ldr	r2, [pc, #468]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f947 	bl	8001888 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe f943 	bl	8001888 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e183      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003610:	4b6c      	ldr	r3, [pc, #432]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d108      	bne.n	8003636 <HAL_RCC_OscConfig+0x32e>
 8003624:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a65      	ldr	r2, [pc, #404]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003634:	e024      	b.n	8003680 <HAL_RCC_OscConfig+0x378>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d110      	bne.n	8003660 <HAL_RCC_OscConfig+0x358>
 800363e:	4b60      	ldr	r3, [pc, #384]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003644:	4a5e      	ldr	r2, [pc, #376]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800364e:	4b5c      	ldr	r3, [pc, #368]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003654:	4a5a      	ldr	r2, [pc, #360]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800365e:	e00f      	b.n	8003680 <HAL_RCC_OscConfig+0x378>
 8003660:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	4a56      	ldr	r2, [pc, #344]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003670:	4b53      	ldr	r3, [pc, #332]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003676:	4a52      	ldr	r2, [pc, #328]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe f8fe 	bl	8001888 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fe f8fa 	bl	8001888 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e138      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a6:	4b46      	ldr	r3, [pc, #280]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ed      	beq.n	8003690 <HAL_RCC_OscConfig+0x388>
 80036b4:	e015      	b.n	80036e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fe f8e7 	bl	8001888 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe f8e3 	bl	8001888 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e121      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d4:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ed      	bne.n	80036be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	4b35      	ldr	r3, [pc, #212]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	4a34      	ldr	r2, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d03c      	beq.n	800377a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01c      	beq.n	8003742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800370a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800370e:	4a2c      	ldr	r2, [pc, #176]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fe f8b6 	bl	8001888 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003720:	f7fe f8b2 	bl	8001888 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0f2      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003734:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <HAL_RCC_OscConfig+0x418>
 8003740:	e01b      	b.n	800377a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003742:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003748:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fe f899 	bl	8001888 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800375a:	f7fe f895 	bl	8001888 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e0d5      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ef      	bne.n	800375a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80c9 	beq.w	8003916 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b0c      	cmp	r3, #12
 800378e:	f000 8083 	beq.w	8003898 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d15e      	bne.n	8003858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a08      	ldr	r2, [pc, #32]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe f86f 	bl	8001888 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ac:	e00c      	b.n	80037c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe f86b 	bl	8001888 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d905      	bls.n	80037c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0ab      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c8:	4b55      	ldr	r3, [pc, #340]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ec      	bne.n	80037ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d4:	4b52      	ldr	r3, [pc, #328]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	4b52      	ldr	r3, [pc, #328]	@ (8003924 <HAL_RCC_OscConfig+0x61c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6a11      	ldr	r1, [r2, #32]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037e4:	3a01      	subs	r2, #1
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	4311      	orrs	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80037ee:	0212      	lsls	r2, r2, #8
 80037f0:	4311      	orrs	r1, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0552      	lsls	r2, r2, #21
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003802:	0852      	lsrs	r2, r2, #1
 8003804:	3a01      	subs	r2, #1
 8003806:	0652      	lsls	r2, r2, #25
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800380e:	06d2      	lsls	r2, r2, #27
 8003810:	430a      	orrs	r2, r1
 8003812:	4943      	ldr	r1, [pc, #268]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003814:	4313      	orrs	r3, r2
 8003816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a40      	ldr	r2, [pc, #256]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003824:	4b3e      	ldr	r3, [pc, #248]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a3d      	ldr	r2, [pc, #244]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe f82a 	bl	8001888 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe f826 	bl	8001888 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e066      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	4b35      	ldr	r3, [pc, #212]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x530>
 8003856:	e05e      	b.n	8003916 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b31      	ldr	r3, [pc, #196]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a30      	ldr	r2, [pc, #192]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe f810 	bl	8001888 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe f80c 	bl	8001888 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e04c      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387e:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800388a:	4b25      	ldr	r3, [pc, #148]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	4924      	ldr	r1, [pc, #144]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003890:	4b25      	ldr	r3, [pc, #148]	@ (8003928 <HAL_RCC_OscConfig+0x620>)
 8003892:	4013      	ands	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
 8003896:	e03e      	b.n	8003916 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e039      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0203 	and.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d12c      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	3b01      	subs	r3, #1
 80038c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d123      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d11b      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d113      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	019f800c 	.word	0x019f800c
 8003928:	feeefffc 	.word	0xfeeefffc

0800392c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e11e      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b91      	ldr	r3, [pc, #580]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d910      	bls.n	8003974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b8e      	ldr	r3, [pc, #568]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 020f 	bic.w	r2, r3, #15
 800395a:	498c      	ldr	r1, [pc, #560]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b8a      	ldr	r3, [pc, #552]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e106      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d073      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d129      	bne.n	80039dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003988:	4b81      	ldr	r3, [pc, #516]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0f4      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003998:	f000 f9d0 	bl	8003d3c <RCC_GetSysClockFreqFromPLLSource>
 800399c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003b94 <HAL_RCC_ClockConfig+0x268>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d93f      	bls.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d033      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d12f      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039c6:	4b72      	ldr	r3, [pc, #456]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ce:	4a70      	ldr	r2, [pc, #448]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039d6:	2380      	movs	r3, #128	@ 0x80
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e024      	b.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0c6      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0be      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a04:	f000 f8ce 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4a61      	ldr	r2, [pc, #388]	@ (8003b94 <HAL_RCC_ClockConfig+0x268>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d909      	bls.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a12:	4b5f      	ldr	r3, [pc, #380]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a26:	4b5a      	ldr	r3, [pc, #360]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 0203 	bic.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4957      	ldr	r1, [pc, #348]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fd ff26 	bl	8001888 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7fd ff22 	bl	8001888 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e095      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	4b4e      	ldr	r3, [pc, #312]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 020c 	and.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1eb      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d023      	beq.n	8003abc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a80:	4b43      	ldr	r3, [pc, #268]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a42      	ldr	r2, [pc, #264]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a98:	4b3d      	ldr	r3, [pc, #244]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4936      	ldr	r1, [pc, #216]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
 8003aba:	e008      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b80      	cmp	r3, #128	@ 0x80
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ac2:	4b33      	ldr	r3, [pc, #204]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	4a32      	ldr	r2, [pc, #200]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003acc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ace:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d21d      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 020f 	bic.w	r2, r3, #15
 8003ae4:	4929      	ldr	r1, [pc, #164]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aec:	f7fd fecc 	bl	8001888 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fd fec8 	bl	8001888 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e03b      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1ed      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4917      	ldr	r1, [pc, #92]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490f      	ldr	r1, [pc, #60]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b56:	f000 f825 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490c      	ldr	r1, [pc, #48]	@ (8003b98 <HAL_RCC_ClockConfig+0x26c>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x270>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x274>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f986 	bl	8000e8c <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	04c4b400 	.word	0x04c4b400
 8003b98:	08008b40 	.word	0x08008b40
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003baa:	4b2c      	ldr	r3, [pc, #176]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d102      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e047      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bbc:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bc8:	4b26      	ldr	r3, [pc, #152]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	e03e      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bce:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d136      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bda:	4b20      	ldr	r3, [pc, #128]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c02:	68d2      	ldr	r2, [r2, #12]
 8003c04:	0a12      	lsrs	r2, r2, #8
 8003c06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
      break;
 8003c10:	e00c      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c12:	4a13      	ldr	r2, [pc, #76]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	4a10      	ldr	r2, [pc, #64]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	0a12      	lsrs	r2, r2, #8
 8003c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
      break;
 8003c2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0e5b      	lsrs	r3, r3, #25
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e001      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c4c:	693b      	ldr	r3, [r7, #16]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	016e3600 	.word	0x016e3600

08003c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4904      	ldr	r1, [pc, #16]	@ (8003ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08008b50 	.word	0x08008b50

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cb0:	f7ff ffda 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0adb      	lsrs	r3, r3, #11
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4904      	ldr	r1, [pc, #16]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	08008b50 	.word	0x08008b50

08003cd8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ce8:	4b12      	ldr	r3, [pc, #72]	@ (8003d34 <HAL_RCC_GetClockConfig+0x5c>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0203 	and.w	r2, r3, #3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <HAL_RCC_GetClockConfig+0x5c>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <HAL_RCC_GetClockConfig+0x5c>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d0c:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	08db      	lsrs	r3, r3, #3
 8003d12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d1a:	4b07      	ldr	r3, [pc, #28]	@ (8003d38 <HAL_RCC_GetClockConfig+0x60>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 020f 	and.w	r2, r3, #15
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40022000 	.word	0x40022000

08003d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d10c      	bne.n	8003d7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d60:	4a17      	ldr	r2, [pc, #92]	@ (8003dc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d6a:	68d2      	ldr	r2, [r2, #12]
 8003d6c:	0a12      	lsrs	r2, r2, #8
 8003d6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
    break;
 8003d78:	e00c      	b.n	8003d94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d7a:	4a12      	ldr	r2, [pc, #72]	@ (8003dc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4a0e      	ldr	r2, [pc, #56]	@ (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	0a12      	lsrs	r2, r2, #8
 8003d88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    break;
 8003d92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0e5b      	lsrs	r3, r3, #25
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dae:	687b      	ldr	r3, [r7, #4]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	016e3600 	.word	0x016e3600
 8003dc4:	00f42400 	.word	0x00f42400

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8098 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dea:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df6:	4b40      	ldr	r3, [pc, #256]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e02:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e12:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a39      	ldr	r2, [pc, #228]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fd33 	bl	8001888 <HAL_GetTick>
 8003e22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e24:	e009      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fd fd2f 	bl	8001888 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	74fb      	strb	r3, [r7, #19]
        break;
 8003e38:	e005      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3a:	4b30      	ldr	r3, [pc, #192]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ef      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d159      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d019      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e68:	4b23      	ldr	r3, [pc, #140]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e74:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e84:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e94:	4a18      	ldr	r2, [pc, #96]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd fcef 	bl	8001888 <HAL_GetTick>
 8003eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd fceb 	bl	8001888 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ec      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eda:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee8:	4903      	ldr	r1, [pc, #12]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	74bb      	strb	r3, [r7, #18]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f04:	7c7b      	ldrb	r3, [r7, #17]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4ba7      	ldr	r3, [pc, #668]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	4aa6      	ldr	r2, [pc, #664]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f22:	4ba1      	ldr	r3, [pc, #644]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f023 0203 	bic.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	499d      	ldr	r1, [pc, #628]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	4b98      	ldr	r3, [pc, #608]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f023 020c 	bic.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4995      	ldr	r1, [pc, #596]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f66:	4b90      	ldr	r3, [pc, #576]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	498c      	ldr	r1, [pc, #560]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f88:	4b87      	ldr	r3, [pc, #540]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	4984      	ldr	r1, [pc, #528]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003faa:	4b7f      	ldr	r3, [pc, #508]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	497b      	ldr	r1, [pc, #492]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fcc:	4b76      	ldr	r3, [pc, #472]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4973      	ldr	r1, [pc, #460]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	4b6e      	ldr	r3, [pc, #440]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	496a      	ldr	r1, [pc, #424]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004010:	4b65      	ldr	r3, [pc, #404]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4962      	ldr	r1, [pc, #392]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004032:	4b5d      	ldr	r3, [pc, #372]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004038:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	4959      	ldr	r1, [pc, #356]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004054:	4b54      	ldr	r3, [pc, #336]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	4951      	ldr	r1, [pc, #324]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004076:	4b4c      	ldr	r3, [pc, #304]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	4948      	ldr	r1, [pc, #288]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004098:	4b43      	ldr	r3, [pc, #268]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	4940      	ldr	r1, [pc, #256]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	4b3b      	ldr	r3, [pc, #236]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a3a      	ldr	r2, [pc, #232]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040c2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040d0:	4b35      	ldr	r3, [pc, #212]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040de:	4932      	ldr	r1, [pc, #200]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ee:	d105      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004108:	4b27      	ldr	r3, [pc, #156]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	4924      	ldr	r1, [pc, #144]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004128:	4b1f      	ldr	r3, [pc, #124]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004132:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	4916      	ldr	r1, [pc, #88]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a10      	ldr	r2, [pc, #64]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d019      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	4908      	ldr	r1, [pc, #32]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004196:	d109      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a02      	ldr	r2, [pc, #8]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041b8:	4b29      	ldr	r3, [pc, #164]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	4926      	ldr	r1, [pc, #152]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041d8:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fe:	4918      	ldr	r1, [pc, #96]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004210:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004228:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800422e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004236:	490a      	ldr	r1, [pc, #40]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004242:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a04      	ldr	r2, [pc, #16]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004254:	7cbb      	ldrb	r3, [r7, #18]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e049      	b.n	800430a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f841 	bl	8004312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 fb9a 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e054      	b.n	80043ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d022      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436a:	d01d      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a22      	ldr	r2, [pc, #136]	@ (80043fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <HAL_TIM_Base_Start_IT+0xd8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <HAL_TIM_Base_Start_IT+0xdc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <HAL_TIM_Base_Start_IT+0xe0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1c      	ldr	r2, [pc, #112]	@ (800440c <HAL_TIM_Base_Start_IT+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x80>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004410 <HAL_TIM_Base_Start_IT+0xe8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d115      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_TIM_Base_Start_IT+0xec>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d015      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0xbe>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c0:	d011      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e008      	b.n	80043e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e000      	b.n	80043e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40013400 	.word	0x40013400
 800440c:	40014000 	.word	0x40014000
 8004410:	40015000 	.word	0x40015000
 8004414:	00010007 	.word	0x00010007

08004418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e049      	b.n	80044be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc ffac 	bl	800139c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 fac0 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01b      	beq.n	800452a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0202 	mvn.w	r2, #2
 80044fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fa45 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004516:	e005      	b.n	8004524 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa37 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa48 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01b      	beq.n	8004576 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0204 	mvn.w	r2, #4
 8004546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fa1f 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004562:	e005      	b.n	8004570 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa11 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa22 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01b      	beq.n	80045c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f06f 0208 	mvn.w	r2, #8
 8004592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2204      	movs	r2, #4
 8004598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f9f9 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80045ae:	e005      	b.n	80045bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f9eb 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f9fc 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01b      	beq.n	800460e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f06f 0210 	mvn.w	r2, #16
 80045de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2208      	movs	r2, #8
 80045e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f9d3 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80045fa:	e005      	b.n	8004608 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f9c5 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9d6 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00c      	beq.n	8004632 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f06f 0201 	mvn.w	r2, #1
 800462a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fc fbf1 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fff4 	bl	8005648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 ffec 	bl	800565c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f990 	bl	80049c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0220 	mvn.w	r2, #32
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 ffb4 	bl	8005634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 ffc0 	bl	8005670 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800470c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ffb8 	bl	8005684 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 ffb0 	bl	8005698 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 ffa8 	bl	80056ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800477e:	2302      	movs	r3, #2
 8004780:	e0ff      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b14      	cmp	r3, #20
 800478e:	f200 80f0 	bhi.w	8004972 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004792:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047ed 	.word	0x080047ed
 800479c:	08004973 	.word	0x08004973
 80047a0:	08004973 	.word	0x08004973
 80047a4:	08004973 	.word	0x08004973
 80047a8:	0800482d 	.word	0x0800482d
 80047ac:	08004973 	.word	0x08004973
 80047b0:	08004973 	.word	0x08004973
 80047b4:	08004973 	.word	0x08004973
 80047b8:	0800486f 	.word	0x0800486f
 80047bc:	08004973 	.word	0x08004973
 80047c0:	08004973 	.word	0x08004973
 80047c4:	08004973 	.word	0x08004973
 80047c8:	080048af 	.word	0x080048af
 80047cc:	08004973 	.word	0x08004973
 80047d0:	08004973 	.word	0x08004973
 80047d4:	08004973 	.word	0x08004973
 80047d8:	080048f1 	.word	0x080048f1
 80047dc:	08004973 	.word	0x08004973
 80047e0:	08004973 	.word	0x08004973
 80047e4:	08004973 	.word	0x08004973
 80047e8:	08004931 	.word	0x08004931
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f9a6 	bl	8004b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0208 	orr.w	r2, r2, #8
 8004806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6999      	ldr	r1, [r3, #24]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	619a      	str	r2, [r3, #24]
      break;
 800482a:	e0a5      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fa20 	bl	8004c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6999      	ldr	r1, [r3, #24]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	619a      	str	r2, [r3, #24]
      break;
 800486c:	e084      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fa93 	bl	8004da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0208 	orr.w	r2, r2, #8
 8004888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0204 	bic.w	r2, r2, #4
 8004898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	61da      	str	r2, [r3, #28]
      break;
 80048ac:	e064      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fb05 	bl	8004ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69d9      	ldr	r1, [r3, #28]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	021a      	lsls	r2, r3, #8
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	61da      	str	r2, [r3, #28]
      break;
 80048ee:	e043      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fb78 	bl	8004fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0208 	orr.w	r2, r2, #8
 800490a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0204 	bic.w	r2, r2, #4
 800491a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800492e:	e023      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fbc2 	bl	80050c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800495a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004970:	e002      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
      break;
 8004976:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop

0800498c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d017      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a49      	ldr	r2, [pc, #292]	@ (8004b24 <TIM_Base_SetConfig+0x148>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a48      	ldr	r2, [pc, #288]	@ (8004b28 <TIM_Base_SetConfig+0x14c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a47      	ldr	r2, [pc, #284]	@ (8004b2c <TIM_Base_SetConfig+0x150>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a46      	ldr	r2, [pc, #280]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a45      	ldr	r2, [pc, #276]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a39      	ldr	r2, [pc, #228]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d023      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a44:	d01f      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a36      	ldr	r2, [pc, #216]	@ (8004b24 <TIM_Base_SetConfig+0x148>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01b      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a35      	ldr	r2, [pc, #212]	@ (8004b28 <TIM_Base_SetConfig+0x14c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d017      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a34      	ldr	r2, [pc, #208]	@ (8004b2c <TIM_Base_SetConfig+0x150>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a33      	ldr	r2, [pc, #204]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00f      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a33      	ldr	r2, [pc, #204]	@ (8004b38 <TIM_Base_SetConfig+0x15c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a32      	ldr	r2, [pc, #200]	@ (8004b3c <TIM_Base_SetConfig+0x160>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a31      	ldr	r2, [pc, #196]	@ (8004b40 <TIM_Base_SetConfig+0x164>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2c      	ldr	r2, [pc, #176]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d108      	bne.n	8004a98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00f      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1a      	ldr	r2, [pc, #104]	@ (8004b38 <TIM_Base_SetConfig+0x15c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a19      	ldr	r2, [pc, #100]	@ (8004b3c <TIM_Base_SetConfig+0x160>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a18      	ldr	r2, [pc, #96]	@ (8004b40 <TIM_Base_SetConfig+0x164>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]
  }
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40015000 	.word	0x40015000
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40014400 	.word	0x40014400
 8004b40:	40014800 	.word	0x40014800

08004b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f023 0201 	bic.w	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 0302 	bic.w	r3, r3, #2
 8004b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a30      	ldr	r2, [pc, #192]	@ (8004c60 <TIM_OC1_SetConfig+0x11c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <TIM_OC1_SetConfig+0x88>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c64 <TIM_OC1_SetConfig+0x120>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00f      	beq.n	8004bcc <TIM_OC1_SetConfig+0x88>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a2e      	ldr	r2, [pc, #184]	@ (8004c68 <TIM_OC1_SetConfig+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00b      	beq.n	8004bcc <TIM_OC1_SetConfig+0x88>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <TIM_OC1_SetConfig+0x128>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_OC1_SetConfig+0x88>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004c70 <TIM_OC1_SetConfig+0x12c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_OC1_SetConfig+0x88>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c74 <TIM_OC1_SetConfig+0x130>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d10c      	bne.n	8004be6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 0308 	bic.w	r3, r3, #8
 8004bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c60 <TIM_OC1_SetConfig+0x11c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <TIM_OC1_SetConfig+0xd2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <TIM_OC1_SetConfig+0x120>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00f      	beq.n	8004c16 <TIM_OC1_SetConfig+0xd2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <TIM_OC1_SetConfig+0x124>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_OC1_SetConfig+0xd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1a      	ldr	r2, [pc, #104]	@ (8004c6c <TIM_OC1_SetConfig+0x128>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_OC1_SetConfig+0xd2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a19      	ldr	r2, [pc, #100]	@ (8004c70 <TIM_OC1_SetConfig+0x12c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_OC1_SetConfig+0xd2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a18      	ldr	r2, [pc, #96]	@ (8004c74 <TIM_OC1_SetConfig+0x130>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d111      	bne.n	8004c3a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800
 8004c74:	40015000 	.word	0x40015000

08004c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f023 0210 	bic.w	r2, r3, #16
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f023 0320 	bic.w	r3, r3, #32
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d88 <TIM_OC2_SetConfig+0x110>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_OC2_SetConfig+0x74>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2b      	ldr	r2, [pc, #172]	@ (8004d8c <TIM_OC2_SetConfig+0x114>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_OC2_SetConfig+0x74>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d90 <TIM_OC2_SetConfig+0x118>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d10d      	bne.n	8004d08 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <TIM_OC2_SetConfig+0x110>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d013      	beq.n	8004d38 <TIM_OC2_SetConfig+0xc0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a1e      	ldr	r2, [pc, #120]	@ (8004d8c <TIM_OC2_SetConfig+0x114>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00f      	beq.n	8004d38 <TIM_OC2_SetConfig+0xc0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <TIM_OC2_SetConfig+0x11c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_OC2_SetConfig+0xc0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a1d      	ldr	r2, [pc, #116]	@ (8004d98 <TIM_OC2_SetConfig+0x120>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_OC2_SetConfig+0xc0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <TIM_OC2_SetConfig+0x124>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC2_SetConfig+0xc0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a17      	ldr	r2, [pc, #92]	@ (8004d90 <TIM_OC2_SetConfig+0x118>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d113      	bne.n	8004d60 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40013400 	.word	0x40013400
 8004d90:	40015000 	.word	0x40015000
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40014400 	.word	0x40014400
 8004d9c:	40014800 	.word	0x40014800

08004da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004eac <TIM_OC3_SetConfig+0x10c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_OC3_SetConfig+0x72>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <TIM_OC3_SetConfig+0x110>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_OC3_SetConfig+0x72>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a29      	ldr	r2, [pc, #164]	@ (8004eb4 <TIM_OC3_SetConfig+0x114>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10d      	bne.n	8004e2e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1e      	ldr	r2, [pc, #120]	@ (8004eac <TIM_OC3_SetConfig+0x10c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_OC3_SetConfig+0xbe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <TIM_OC3_SetConfig+0x110>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_OC3_SetConfig+0xbe>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <TIM_OC3_SetConfig+0x118>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_OC3_SetConfig+0xbe>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <TIM_OC3_SetConfig+0x11c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_OC3_SetConfig+0xbe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <TIM_OC3_SetConfig+0x120>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_OC3_SetConfig+0xbe>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <TIM_OC3_SetConfig+0x114>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d113      	bne.n	8004e86 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40013400 	.word	0x40013400
 8004eb4:	40015000 	.word	0x40015000
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	031b      	lsls	r3, r3, #12
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd4 <TIM_OC4_SetConfig+0x110>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_OC4_SetConfig+0x74>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd8 <TIM_OC4_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC4_SetConfig+0x74>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2a      	ldr	r2, [pc, #168]	@ (8004fdc <TIM_OC4_SetConfig+0x118>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10d      	bne.n	8004f54 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	031b      	lsls	r3, r3, #12
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd4 <TIM_OC4_SetConfig+0x110>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_OC4_SetConfig+0xc0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd8 <TIM_OC4_SetConfig+0x114>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_OC4_SetConfig+0xc0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe0 <TIM_OC4_SetConfig+0x11c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_OC4_SetConfig+0xc0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe4 <TIM_OC4_SetConfig+0x120>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_OC4_SetConfig+0xc0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe8 <TIM_OC4_SetConfig+0x124>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_OC4_SetConfig+0xc0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <TIM_OC4_SetConfig+0x118>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d113      	bne.n	8004fac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40015000 	.word	0x40015000
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <TIM_OC5_SetConfig+0xbc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_OC5_SetConfig+0x82>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a18      	ldr	r2, [pc, #96]	@ (80050ac <TIM_OC5_SetConfig+0xc0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_OC5_SetConfig+0x82>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <TIM_OC5_SetConfig+0xc4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_OC5_SetConfig+0x82>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a16      	ldr	r2, [pc, #88]	@ (80050b4 <TIM_OC5_SetConfig+0xc8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_OC5_SetConfig+0x82>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a15      	ldr	r2, [pc, #84]	@ (80050b8 <TIM_OC5_SetConfig+0xcc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC5_SetConfig+0x82>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a14      	ldr	r2, [pc, #80]	@ (80050bc <TIM_OC5_SetConfig+0xd0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d109      	bne.n	8005082 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005074:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800
 80050bc:	40015000 	.word	0x40015000

080050c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	051b      	lsls	r3, r3, #20
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1a      	ldr	r2, [pc, #104]	@ (8005180 <TIM_OC6_SetConfig+0xc0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <TIM_OC6_SetConfig+0x84>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a19      	ldr	r2, [pc, #100]	@ (8005184 <TIM_OC6_SetConfig+0xc4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00f      	beq.n	8005144 <TIM_OC6_SetConfig+0x84>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <TIM_OC6_SetConfig+0xc8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00b      	beq.n	8005144 <TIM_OC6_SetConfig+0x84>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a17      	ldr	r2, [pc, #92]	@ (800518c <TIM_OC6_SetConfig+0xcc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_OC6_SetConfig+0x84>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a16      	ldr	r2, [pc, #88]	@ (8005190 <TIM_OC6_SetConfig+0xd0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC6_SetConfig+0x84>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a15      	ldr	r2, [pc, #84]	@ (8005194 <TIM_OC6_SetConfig+0xd4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d109      	bne.n	8005158 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800514a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40013400 	.word	0x40013400
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800
 8005194:	40015000 	.word	0x40015000

08005198 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 0201 	bic.w	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a28      	ldr	r2, [pc, #160]	@ (8005264 <TIM_TI1_SetConfig+0xcc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01b      	beq.n	80051fe <TIM_TI1_SetConfig+0x66>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051cc:	d017      	beq.n	80051fe <TIM_TI1_SetConfig+0x66>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a25      	ldr	r2, [pc, #148]	@ (8005268 <TIM_TI1_SetConfig+0xd0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <TIM_TI1_SetConfig+0x66>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a24      	ldr	r2, [pc, #144]	@ (800526c <TIM_TI1_SetConfig+0xd4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00f      	beq.n	80051fe <TIM_TI1_SetConfig+0x66>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a23      	ldr	r2, [pc, #140]	@ (8005270 <TIM_TI1_SetConfig+0xd8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_TI1_SetConfig+0x66>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <TIM_TI1_SetConfig+0xdc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_TI1_SetConfig+0x66>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <TIM_TI1_SetConfig+0xe0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_TI1_SetConfig+0x66>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a20      	ldr	r2, [pc, #128]	@ (800527c <TIM_TI1_SetConfig+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <TIM_TI1_SetConfig+0x6a>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <TIM_TI1_SetConfig+0x6c>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e003      	b.n	8005222 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	b2db      	uxtb	r3, r3
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f023 030a 	bic.w	r3, r3, #10
 800523c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f003 030a 	and.w	r3, r3, #10
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800
 8005270:	40000c00 	.word	0x40000c00
 8005274:	40013400 	.word	0x40013400
 8005278:	40014000 	.word	0x40014000
 800527c:	40015000 	.word	0x40015000

08005280 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	@ 0x28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0a0      	b.n	80053d6 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fc f897 	bl	80013dc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7ff fb8b 	bl	80049dc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2203      	movs	r2, #3
 80052d4:	f7ff ff60 	bl	8005198 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 020c 	bic.w	r2, r2, #12
 80052e6:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005308:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800532c:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0204 	orr.w	r2, r2, #4
 8005350:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005356:	2300      	movs	r3, #0
 8005358:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800535a:	2370      	movs	r3, #112	@ 0x70
 800535c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f107 020c 	add.w	r2, r7, #12
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fc7c 	bl	8004c78 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800538e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005392:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80053a2:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3728      	adds	r7, #40	@ 0x28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e074      	b.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a34      	ldr	r2, [pc, #208]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a33      	ldr	r2, [pc, #204]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a31      	ldr	r2, [pc, #196]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800543c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800544e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a21      	ldr	r2, [pc, #132]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005478:	d01d      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1f      	ldr	r2, [pc, #124]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1d      	ldr	r2, [pc, #116]	@ (8005500 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1c      	ldr	r2, [pc, #112]	@ (8005504 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a15      	ldr	r2, [pc, #84]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a11      	ldr	r2, [pc, #68]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10c      	bne.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40013400 	.word	0x40013400
 80054f8:	40015000 	.word	0x40015000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40014000 	.word	0x40014000

0800550c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005524:	2302      	movs	r3, #2
 8005526:	e078      	b.n	800561a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005628 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1b      	ldr	r2, [pc, #108]	@ (800562c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a19      	ldr	r2, [pc, #100]	@ (8005630 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d11c      	bne.n	8005608 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	051b      	lsls	r3, r3, #20
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40013400 	.word	0x40013400
 8005630:	40015000 	.word	0x40015000

08005634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e042      	b.n	8005758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fb ffdb 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2224      	movs	r2, #36	@ 0x24
 80056ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 ff60 	bl	80065d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fc61 	bl	8005fd8 <UART_SetConfig>
 8005716:	4603      	mov	r3, r0
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e01b      	b.n	8005758 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800572e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800573e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 ffdf 	bl	8006714 <UART_CheckIdleState>
 8005756:	4603      	mov	r3, r0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	@ 0x28
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005776:	2b20      	cmp	r3, #32
 8005778:	d17b      	bne.n	8005872 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_UART_Transmit+0x26>
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e074      	b.n	8005874 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2221      	movs	r2, #33	@ 0x21
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579a:	f7fc f875 	bl	8001888 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b8:	d108      	bne.n	80057cc <HAL_UART_Transmit+0x6c>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e003      	b.n	80057d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d4:	e030      	b.n	8005838 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f001 f841 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e03d      	b.n	8005874 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3302      	adds	r3, #2
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e007      	b.n	8005826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1c8      	bne.n	80057d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2200      	movs	r2, #0
 800584c:	2140      	movs	r1, #64	@ 0x40
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 f80a 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e006      	b.n	8005874 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005890:	2b20      	cmp	r3, #32
 8005892:	d137      	bne.n	8005904 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_UART_Receive_IT+0x24>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e030      	b.n	8005906 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a18      	ldr	r2, [pc, #96]	@ (8005910 <HAL_UART_Receive_IT+0x94>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d01f      	beq.n	80058f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d018      	beq.n	80058f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	613b      	str	r3, [r7, #16]
   return(result);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	623b      	str	r3, [r7, #32]
 80058e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	69f9      	ldr	r1, [r7, #28]
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e6      	bne.n	80058c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f001 f822 	bl	8006944 <UART_Start_Receive_IT>
 8005900:	4603      	mov	r3, r0
 8005902:	e000      	b.n	8005906 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005904:	2302      	movs	r3, #2
  }
}
 8005906:	4618      	mov	r0, r3
 8005908:	3728      	adds	r7, #40	@ 0x28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40008000 	.word	0x40008000

08005914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b0ba      	sub	sp, #232	@ 0xe8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800593a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800593e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005942:	4013      	ands	r3, r2
 8005944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d11b      	bne.n	8005988 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800596c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8300 	beq.w	8005f7e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
      }
      return;
 8005986:	e2fa      	b.n	8005f7e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8123 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005992:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005996:	4b8d      	ldr	r3, [pc, #564]	@ (8005bcc <HAL_UART_IRQHandler+0x2b8>)
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800599e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059a2:	4b8b      	ldr	r3, [pc, #556]	@ (8005bd0 <HAL_UART_IRQHandler+0x2bc>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8116 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <HAL_UART_IRQHandler+0xc8>
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d011      	beq.n	8005a0c <HAL_UART_IRQHandler+0xf8>
 80059e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2202      	movs	r2, #2
 80059fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a02:	f043 0204 	orr.w	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d011      	beq.n	8005a3c <HAL_UART_IRQHandler+0x128>
 8005a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2204      	movs	r2, #4
 8005a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a32:	f043 0202 	orr.w	r2, r3, #2
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d017      	beq.n	8005a78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a58:	4b5c      	ldr	r3, [pc, #368]	@ (8005bcc <HAL_UART_IRQHandler+0x2b8>)
 8005a5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2208      	movs	r2, #8
 8005a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6e:	f043 0208 	orr.w	r2, r3, #8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d012      	beq.n	8005aaa <HAL_UART_IRQHandler+0x196>
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8266 	beq.w	8005f82 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d105      	bne.n	8005ada <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afe:	2b40      	cmp	r3, #64	@ 0x40
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d054      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 f83a 	bl	8006b88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1e:	2b40      	cmp	r3, #64	@ 0x40
 8005b20:	d146      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1d9      	bne.n	8005b22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d017      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b7e:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <HAL_UART_IRQHandler+0x2c0>)
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd f8e4 	bl	8002d56 <HAL_DMA_Abort_IT>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d019      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba6:	e00f      	b.n	8005bc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f9ff 	bl	8005fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bae:	e00b      	b.n	8005bc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f9fb 	bl	8005fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb6:	e007      	b.n	8005bc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f9f7 	bl	8005fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005bc6:	e1dc      	b.n	8005f82 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	bf00      	nop
    return;
 8005bca:	e1da      	b.n	8005f82 <HAL_UART_IRQHandler+0x66e>
 8005bcc:	10000001 	.word	0x10000001
 8005bd0:	04000120 	.word	0x04000120
 8005bd4:	08006c55 	.word	0x08006c55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	f040 8170 	bne.w	8005ec2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8169 	beq.w	8005ec2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8162 	beq.w	8005ec2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2210      	movs	r2, #16
 8005c04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	f040 80d8 	bne.w	8005dc6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80af 	beq.w	8005d8c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	f080 80a7 	bcs.w	8005d8c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 8087 	bne.w	8005d6a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1da      	bne.n	8005c5c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005cb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e1      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e3      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d38:	f023 0310 	bic.w	r3, r3, #16
 8005d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e4      	bne.n	8005d28 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fc ff9d 	bl	8002ca4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f91b 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d8a:	e0fc      	b.n	8005f86 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d96:	429a      	cmp	r2, r3
 8005d98:	f040 80f5 	bne.w	8005f86 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	f040 80eb 	bne.w	8005f86 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f8fe 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
      return;
 8005dc4:	e0df      	b.n	8005f86 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80d1 	beq.w	8005f8a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80cc 	beq.w	8005f8a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e4      	bne.n	8005df2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	623b      	str	r3, [r7, #32]
   return(result);
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e50:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e1      	bne.n	8005e28 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f023 0310 	bic.w	r3, r3, #16
 8005e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	69b9      	ldr	r1, [r7, #24]
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e4      	bne.n	8005e78 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f880 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec0:	e063      	b.n	8005f8a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <HAL_UART_IRQHandler+0x5d8>
 8005ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ee2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 fc17 	bl	8007718 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eea:	e051      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d014      	beq.n	8005f22 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d03a      	beq.n	8005f8e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
    }
    return;
 8005f20:	e035      	b.n	8005f8e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <HAL_UART_IRQHandler+0x62e>
 8005f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fea0 	bl	8006c80 <UART_EndTransmit_IT>
    return;
 8005f40:	e026      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <HAL_UART_IRQHandler+0x64e>
 8005f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 fbf0 	bl	8007740 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f60:	e016      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d010      	beq.n	8005f90 <HAL_UART_IRQHandler+0x67c>
 8005f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da0c      	bge.n	8005f90 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 fbd8 	bl	800772c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f7c:	e008      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f7e:	bf00      	nop
 8005f80:	e006      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
    return;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_UART_IRQHandler+0x67c>
    return;
 8005f8e:	bf00      	nop
  }
}
 8005f90:	37e8      	adds	r7, #232	@ 0xe8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop

08005f98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fdc:	b08c      	sub	sp, #48	@ 0x30
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4baa      	ldr	r3, [pc, #680]	@ (80062b0 <UART_SetConfig+0x2d8>)
 8006008:	4013      	ands	r3, r2
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006010:	430b      	orrs	r3, r1
 8006012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a9f      	ldr	r2, [pc, #636]	@ (80062b4 <UART_SetConfig+0x2dc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006040:	4313      	orrs	r3, r2
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800604e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006058:	430b      	orrs	r3, r1
 800605a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	f023 010f 	bic.w	r1, r3, #15
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a90      	ldr	r2, [pc, #576]	@ (80062b8 <UART_SetConfig+0x2e0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d125      	bne.n	80060c8 <UART_SetConfig+0xf0>
 800607c:	4b8f      	ldr	r3, [pc, #572]	@ (80062bc <UART_SetConfig+0x2e4>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b03      	cmp	r3, #3
 8006088:	d81a      	bhi.n	80060c0 <UART_SetConfig+0xe8>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0xb8>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060a1 	.word	0x080060a1
 8006094:	080060b1 	.word	0x080060b1
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060b9 	.word	0x080060b9
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e116      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80060a8:	2302      	movs	r3, #2
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	e112      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80060b0:	2304      	movs	r3, #4
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	e10e      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80060b8:	2308      	movs	r3, #8
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060be:	e10a      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80060c0:	2310      	movs	r3, #16
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c6:	e106      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a7c      	ldr	r2, [pc, #496]	@ (80062c0 <UART_SetConfig+0x2e8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d138      	bne.n	8006144 <UART_SetConfig+0x16c>
 80060d2:	4b7a      	ldr	r3, [pc, #488]	@ (80062bc <UART_SetConfig+0x2e4>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f003 030c 	and.w	r3, r3, #12
 80060dc:	2b0c      	cmp	r3, #12
 80060de:	d82d      	bhi.n	800613c <UART_SetConfig+0x164>
 80060e0:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <UART_SetConfig+0x110>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	0800611d 	.word	0x0800611d
 80060ec:	0800613d 	.word	0x0800613d
 80060f0:	0800613d 	.word	0x0800613d
 80060f4:	0800613d 	.word	0x0800613d
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	0800613d 	.word	0x0800613d
 8006100:	0800613d 	.word	0x0800613d
 8006104:	0800613d 	.word	0x0800613d
 8006108:	08006125 	.word	0x08006125
 800610c:	0800613d 	.word	0x0800613d
 8006110:	0800613d 	.word	0x0800613d
 8006114:	0800613d 	.word	0x0800613d
 8006118:	08006135 	.word	0x08006135
 800611c:	2300      	movs	r3, #0
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006122:	e0d8      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006124:	2302      	movs	r3, #2
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612a:	e0d4      	b.n	80062d6 <UART_SetConfig+0x2fe>
 800612c:	2304      	movs	r3, #4
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006132:	e0d0      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006134:	2308      	movs	r3, #8
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613a:	e0cc      	b.n	80062d6 <UART_SetConfig+0x2fe>
 800613c:	2310      	movs	r3, #16
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006142:	e0c8      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5e      	ldr	r2, [pc, #376]	@ (80062c4 <UART_SetConfig+0x2ec>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d125      	bne.n	800619a <UART_SetConfig+0x1c2>
 800614e:	4b5b      	ldr	r3, [pc, #364]	@ (80062bc <UART_SetConfig+0x2e4>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006154:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006158:	2b30      	cmp	r3, #48	@ 0x30
 800615a:	d016      	beq.n	800618a <UART_SetConfig+0x1b2>
 800615c:	2b30      	cmp	r3, #48	@ 0x30
 800615e:	d818      	bhi.n	8006192 <UART_SetConfig+0x1ba>
 8006160:	2b20      	cmp	r3, #32
 8006162:	d00a      	beq.n	800617a <UART_SetConfig+0x1a2>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d814      	bhi.n	8006192 <UART_SetConfig+0x1ba>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <UART_SetConfig+0x19a>
 800616c:	2b10      	cmp	r3, #16
 800616e:	d008      	beq.n	8006182 <UART_SetConfig+0x1aa>
 8006170:	e00f      	b.n	8006192 <UART_SetConfig+0x1ba>
 8006172:	2300      	movs	r3, #0
 8006174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006178:	e0ad      	b.n	80062d6 <UART_SetConfig+0x2fe>
 800617a:	2302      	movs	r3, #2
 800617c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006180:	e0a9      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006182:	2304      	movs	r3, #4
 8006184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006188:	e0a5      	b.n	80062d6 <UART_SetConfig+0x2fe>
 800618a:	2308      	movs	r3, #8
 800618c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006190:	e0a1      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006192:	2310      	movs	r3, #16
 8006194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006198:	e09d      	b.n	80062d6 <UART_SetConfig+0x2fe>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a4a      	ldr	r2, [pc, #296]	@ (80062c8 <UART_SetConfig+0x2f0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d125      	bne.n	80061f0 <UART_SetConfig+0x218>
 80061a4:	4b45      	ldr	r3, [pc, #276]	@ (80062bc <UART_SetConfig+0x2e4>)
 80061a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80061b0:	d016      	beq.n	80061e0 <UART_SetConfig+0x208>
 80061b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061b4:	d818      	bhi.n	80061e8 <UART_SetConfig+0x210>
 80061b6:	2b80      	cmp	r3, #128	@ 0x80
 80061b8:	d00a      	beq.n	80061d0 <UART_SetConfig+0x1f8>
 80061ba:	2b80      	cmp	r3, #128	@ 0x80
 80061bc:	d814      	bhi.n	80061e8 <UART_SetConfig+0x210>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <UART_SetConfig+0x1f0>
 80061c2:	2b40      	cmp	r3, #64	@ 0x40
 80061c4:	d008      	beq.n	80061d8 <UART_SetConfig+0x200>
 80061c6:	e00f      	b.n	80061e8 <UART_SetConfig+0x210>
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ce:	e082      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80061d0:	2302      	movs	r3, #2
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d6:	e07e      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80061d8:	2304      	movs	r3, #4
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061de:	e07a      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80061e0:	2308      	movs	r3, #8
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	e076      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ee:	e072      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a35      	ldr	r2, [pc, #212]	@ (80062cc <UART_SetConfig+0x2f4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d12a      	bne.n	8006250 <UART_SetConfig+0x278>
 80061fa:	4b30      	ldr	r3, [pc, #192]	@ (80062bc <UART_SetConfig+0x2e4>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006208:	d01a      	beq.n	8006240 <UART_SetConfig+0x268>
 800620a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800620e:	d81b      	bhi.n	8006248 <UART_SetConfig+0x270>
 8006210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006214:	d00c      	beq.n	8006230 <UART_SetConfig+0x258>
 8006216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800621a:	d815      	bhi.n	8006248 <UART_SetConfig+0x270>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <UART_SetConfig+0x250>
 8006220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006224:	d008      	beq.n	8006238 <UART_SetConfig+0x260>
 8006226:	e00f      	b.n	8006248 <UART_SetConfig+0x270>
 8006228:	2300      	movs	r3, #0
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622e:	e052      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006230:	2302      	movs	r3, #2
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006236:	e04e      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e04a      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e046      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624e:	e042      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a17      	ldr	r2, [pc, #92]	@ (80062b4 <UART_SetConfig+0x2dc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d13a      	bne.n	80062d0 <UART_SetConfig+0x2f8>
 800625a:	4b18      	ldr	r3, [pc, #96]	@ (80062bc <UART_SetConfig+0x2e4>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006268:	d01a      	beq.n	80062a0 <UART_SetConfig+0x2c8>
 800626a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800626e:	d81b      	bhi.n	80062a8 <UART_SetConfig+0x2d0>
 8006270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006274:	d00c      	beq.n	8006290 <UART_SetConfig+0x2b8>
 8006276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800627a:	d815      	bhi.n	80062a8 <UART_SetConfig+0x2d0>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <UART_SetConfig+0x2b0>
 8006280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006284:	d008      	beq.n	8006298 <UART_SetConfig+0x2c0>
 8006286:	e00f      	b.n	80062a8 <UART_SetConfig+0x2d0>
 8006288:	2300      	movs	r3, #0
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628e:	e022      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006290:	2302      	movs	r3, #2
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006296:	e01e      	b.n	80062d6 <UART_SetConfig+0x2fe>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629e:	e01a      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e016      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e012      	b.n	80062d6 <UART_SetConfig+0x2fe>
 80062b0:	cfff69f3 	.word	0xcfff69f3
 80062b4:	40008000 	.word	0x40008000
 80062b8:	40013800 	.word	0x40013800
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40004400 	.word	0x40004400
 80062c4:	40004800 	.word	0x40004800
 80062c8:	40004c00 	.word	0x40004c00
 80062cc:	40005000 	.word	0x40005000
 80062d0:	2310      	movs	r3, #16
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4aae      	ldr	r2, [pc, #696]	@ (8006594 <UART_SetConfig+0x5bc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	f040 8097 	bne.w	8006410 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d823      	bhi.n	8006332 <UART_SetConfig+0x35a>
 80062ea:	a201      	add	r2, pc, #4	@ (adr r2, 80062f0 <UART_SetConfig+0x318>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006315 	.word	0x08006315
 80062f4:	08006333 	.word	0x08006333
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	08006333 	.word	0x08006333
 8006300:	08006323 	.word	0x08006323
 8006304:	08006333 	.word	0x08006333
 8006308:	08006333 	.word	0x08006333
 800630c:	08006333 	.word	0x08006333
 8006310:	0800632b 	.word	0x0800632b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006314:	f7fd fcb4 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8006318:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800631a:	e010      	b.n	800633e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800631c:	4b9e      	ldr	r3, [pc, #632]	@ (8006598 <UART_SetConfig+0x5c0>)
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006320:	e00d      	b.n	800633e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006322:	f7fd fc3f 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8006326:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006328:	e009      	b.n	800633e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006330:	e005      	b.n	800633e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800633c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8130 	beq.w	80065a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	4a94      	ldr	r2, [pc, #592]	@ (800659c <UART_SetConfig+0x5c4>)
 800634c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006350:	461a      	mov	r2, r3
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	fbb3 f3f2 	udiv	r3, r3, r2
 8006358:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	429a      	cmp	r2, r3
 8006368:	d305      	bcc.n	8006376 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	429a      	cmp	r2, r3
 8006374:	d903      	bls.n	800637e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800637c:	e113      	b.n	80065a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	2200      	movs	r2, #0
 8006382:	60bb      	str	r3, [r7, #8]
 8006384:	60fa      	str	r2, [r7, #12]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638a:	4a84      	ldr	r2, [pc, #528]	@ (800659c <UART_SetConfig+0x5c4>)
 800638c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006390:	b29b      	uxth	r3, r3
 8006392:	2200      	movs	r2, #0
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063a0:	f7f9 ff9e 	bl	80002e0 <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	020b      	lsls	r3, r1, #8
 80063b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063ba:	0202      	lsls	r2, r0, #8
 80063bc:	6979      	ldr	r1, [r7, #20]
 80063be:	6849      	ldr	r1, [r1, #4]
 80063c0:	0849      	lsrs	r1, r1, #1
 80063c2:	2000      	movs	r0, #0
 80063c4:	460c      	mov	r4, r1
 80063c6:	4605      	mov	r5, r0
 80063c8:	eb12 0804 	adds.w	r8, r2, r4
 80063cc:	eb43 0905 	adc.w	r9, r3, r5
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	469a      	mov	sl, r3
 80063d8:	4693      	mov	fp, r2
 80063da:	4652      	mov	r2, sl
 80063dc:	465b      	mov	r3, fp
 80063de:	4640      	mov	r0, r8
 80063e0:	4649      	mov	r1, r9
 80063e2:	f7f9 ff7d 	bl	80002e0 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4613      	mov	r3, r2
 80063ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f4:	d308      	bcc.n	8006408 <UART_SetConfig+0x430>
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063fc:	d204      	bcs.n	8006408 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	60da      	str	r2, [r3, #12]
 8006406:	e0ce      	b.n	80065a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800640e:	e0ca      	b.n	80065a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006418:	d166      	bne.n	80064e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800641a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800641e:	2b08      	cmp	r3, #8
 8006420:	d827      	bhi.n	8006472 <UART_SetConfig+0x49a>
 8006422:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <UART_SetConfig+0x450>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	08006473 	.word	0x08006473
 8006438:	08006463 	.word	0x08006463
 800643c:	08006473 	.word	0x08006473
 8006440:	08006473 	.word	0x08006473
 8006444:	08006473 	.word	0x08006473
 8006448:	0800646b 	.word	0x0800646b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800644c:	f7fd fc18 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8006450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006452:	e014      	b.n	800647e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006454:	f7fd fc2a 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8006458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800645a:	e010      	b.n	800647e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800645c:	4b4e      	ldr	r3, [pc, #312]	@ (8006598 <UART_SetConfig+0x5c0>)
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006460:	e00d      	b.n	800647e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006462:	f7fd fb9f 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8006466:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006468:	e009      	b.n	800647e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006470:	e005      	b.n	800647e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800647c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8090 	beq.w	80065a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	4a44      	ldr	r2, [pc, #272]	@ (800659c <UART_SetConfig+0x5c4>)
 800648c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006490:	461a      	mov	r2, r3
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	fbb3 f3f2 	udiv	r3, r3, r2
 8006498:	005a      	lsls	r2, r3, #1
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	441a      	add	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d916      	bls.n	80064e0 <UART_SetConfig+0x508>
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b8:	d212      	bcs.n	80064e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f023 030f 	bic.w	r3, r3, #15
 80064c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	8bfb      	ldrh	r3, [r7, #30]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	8bfa      	ldrh	r2, [r7, #30]
 80064dc:	60da      	str	r2, [r3, #12]
 80064de:	e062      	b.n	80065a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064e6:	e05e      	b.n	80065a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d828      	bhi.n	8006542 <UART_SetConfig+0x56a>
 80064f0:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <UART_SetConfig+0x520>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	0800651d 	.word	0x0800651d
 80064fc:	08006525 	.word	0x08006525
 8006500:	0800652d 	.word	0x0800652d
 8006504:	08006543 	.word	0x08006543
 8006508:	08006533 	.word	0x08006533
 800650c:	08006543 	.word	0x08006543
 8006510:	08006543 	.word	0x08006543
 8006514:	08006543 	.word	0x08006543
 8006518:	0800653b 	.word	0x0800653b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651c:	f7fd fbb0 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8006520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006522:	e014      	b.n	800654e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006524:	f7fd fbc2 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800652a:	e010      	b.n	800654e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800652c:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <UART_SetConfig+0x5c0>)
 800652e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006530:	e00d      	b.n	800654e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006532:	f7fd fb37 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8006536:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006538:	e009      	b.n	800654e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006540:	e005      	b.n	800654e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800654c:	bf00      	nop
    }

    if (pclk != 0U)
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	d028      	beq.n	80065a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	4a10      	ldr	r2, [pc, #64]	@ (800659c <UART_SetConfig+0x5c4>)
 800655a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800655e:	461a      	mov	r2, r3
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	fbb3 f2f2 	udiv	r2, r3, r2
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	441a      	add	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	fbb2 f3f3 	udiv	r3, r2, r3
 8006576:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	2b0f      	cmp	r3, #15
 800657c:	d910      	bls.n	80065a0 <UART_SetConfig+0x5c8>
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006584:	d20c      	bcs.n	80065a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	b29a      	uxth	r2, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60da      	str	r2, [r3, #12]
 8006590:	e009      	b.n	80065a6 <UART_SetConfig+0x5ce>
 8006592:	bf00      	nop
 8006594:	40008000 	.word	0x40008000
 8006598:	00f42400 	.word	0x00f42400
 800659c:	08008b58 	.word	0x08008b58
      }
      else
      {
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3730      	adds	r7, #48	@ 0x30
 80065ca:	46bd      	mov	sp, r7
 80065cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01a      	beq.n	80066e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ce:	d10a      	bne.n	80066e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  }
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b098      	sub	sp, #96	@ 0x60
 8006718:	af02      	add	r7, sp, #8
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006724:	f7fb f8b0 	bl	8001888 <HAL_GetTick>
 8006728:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b08      	cmp	r3, #8
 8006736:	d12f      	bne.n	8006798 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006738:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006740:	2200      	movs	r2, #0
 8006742:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f88e 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d022      	beq.n	8006798 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006766:	653b      	str	r3, [r7, #80]	@ 0x50
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006770:	647b      	str	r3, [r7, #68]	@ 0x44
 8006772:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800677e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e063      	b.n	8006860 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d149      	bne.n	800683a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067ae:	2200      	movs	r2, #0
 80067b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f857 	bl	8006868 <UART_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d03c      	beq.n	800683a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	623b      	str	r3, [r7, #32]
   return(result);
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067de:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e6      	bne.n	80067c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	60fb      	str	r3, [r7, #12]
   return(result);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006812:	61fa      	str	r2, [r7, #28]
 8006814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	69b9      	ldr	r1, [r7, #24]
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	617b      	str	r3, [r7, #20]
   return(result);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e012      	b.n	8006860 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3758      	adds	r7, #88	@ 0x58
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006878:	e04f      	b.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d04b      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006882:	f7fb f801 	bl	8001888 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	429a      	cmp	r2, r3
 8006890:	d302      	bcc.n	8006898 <UART_WaitOnFlagUntilTimeout+0x30>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e04e      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d037      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b80      	cmp	r3, #128	@ 0x80
 80068ae:	d034      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b40      	cmp	r3, #64	@ 0x40
 80068b4:	d031      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d110      	bne.n	80068e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2208      	movs	r2, #8
 80068ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f95b 	bl	8006b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2208      	movs	r2, #8
 80068d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e029      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f4:	d111      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f941 	bl	8006b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e00f      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	429a      	cmp	r2, r3
 8006936:	d0a0      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006944:	b480      	push	{r7}
 8006946:	b0a3      	sub	sp, #140	@ 0x8c
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	4613      	mov	r3, r2
 8006950:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006976:	d10e      	bne.n	8006996 <UART_Start_Receive_IT+0x52>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d105      	bne.n	800698c <UART_Start_Receive_IT+0x48>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006986:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800698a:	e02d      	b.n	80069e8 <UART_Start_Receive_IT+0xa4>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	22ff      	movs	r2, #255	@ 0xff
 8006990:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006994:	e028      	b.n	80069e8 <UART_Start_Receive_IT+0xa4>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10d      	bne.n	80069ba <UART_Start_Receive_IT+0x76>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d104      	bne.n	80069b0 <UART_Start_Receive_IT+0x6c>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	22ff      	movs	r2, #255	@ 0xff
 80069aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ae:	e01b      	b.n	80069e8 <UART_Start_Receive_IT+0xa4>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	227f      	movs	r2, #127	@ 0x7f
 80069b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069b8:	e016      	b.n	80069e8 <UART_Start_Receive_IT+0xa4>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069c2:	d10d      	bne.n	80069e0 <UART_Start_Receive_IT+0x9c>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <UART_Start_Receive_IT+0x92>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	227f      	movs	r2, #127	@ 0x7f
 80069d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069d4:	e008      	b.n	80069e8 <UART_Start_Receive_IT+0xa4>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	223f      	movs	r2, #63	@ 0x3f
 80069da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069de:	e003      	b.n	80069e8 <UART_Start_Receive_IT+0xa4>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2222      	movs	r2, #34	@ 0x22
 80069f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006a1c:	673a      	str	r2, [r7, #112]	@ 0x70
 8006a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006a22:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e3      	bne.n	80069f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a38:	d14f      	bne.n	8006ada <UART_Start_Receive_IT+0x196>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d349      	bcc.n	8006ada <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4e:	d107      	bne.n	8006a60 <UART_Start_Receive_IT+0x11c>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a47      	ldr	r2, [pc, #284]	@ (8006b78 <UART_Start_Receive_IT+0x234>)
 8006a5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a5e:	e002      	b.n	8006a66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a46      	ldr	r2, [pc, #280]	@ (8006b7c <UART_Start_Receive_IT+0x238>)
 8006a64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01a      	beq.n	8006aa4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a92:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e4      	bne.n	8006a6e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ac4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ac6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <UART_Start_Receive_IT+0x160>
 8006ad8:	e046      	b.n	8006b68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae2:	d107      	bne.n	8006af4 <UART_Start_Receive_IT+0x1b0>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a24      	ldr	r2, [pc, #144]	@ (8006b80 <UART_Start_Receive_IT+0x23c>)
 8006af0:	675a      	str	r2, [r3, #116]	@ 0x74
 8006af2:	e002      	b.n	8006afa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a23      	ldr	r2, [pc, #140]	@ (8006b84 <UART_Start_Receive_IT+0x240>)
 8006af8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d019      	beq.n	8006b36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b16:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <UART_Start_Receive_IT+0x1be>
 8006b34:	e018      	b.n	8006b68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	613b      	str	r3, [r7, #16]
   return(result);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	69f9      	ldr	r1, [r7, #28]
 8006b5a:	6a3a      	ldr	r2, [r7, #32]
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e6      	bne.n	8006b36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	378c      	adds	r7, #140	@ 0x8c
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	080073ad 	.word	0x080073ad
 8006b7c:	08007049 	.word	0x08007049
 8006b80:	08006e91 	.word	0x08006e91
 8006b84:	08006cd9 	.word	0x08006cd9

08006b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b095      	sub	sp, #84	@ 0x54
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e6      	bne.n	8006b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e3      	bne.n	8006bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d118      	bne.n	8006c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6979      	ldr	r1, [r7, #20]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c48:	bf00      	nop
 8006c4a:	3754      	adds	r7, #84	@ 0x54
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff f99a 	bl	8005fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e6      	bne.n	8006c88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff f965 	bl	8005f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cce:	bf00      	nop
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b09c      	sub	sp, #112	@ 0x70
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ce6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf0:	2b22      	cmp	r3, #34	@ 0x22
 8006cf2:	f040 80be 	bne.w	8006e72 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d04:	b2d9      	uxtb	r1, r3
 8006d06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d10:	400a      	ands	r2, r1
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f040 80a1 	bne.w	8006e82 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e6      	bne.n	8006d40 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d84:	f023 0301 	bic.w	r3, r3, #1
 8006d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d92:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a33      	ldr	r2, [pc, #204]	@ (8006e8c <UART_RxISR_8BIT+0x1b4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d01f      	beq.n	8006e04 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d018      	beq.n	8006e04 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	623b      	str	r3, [r7, #32]
   return(result);
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d12e      	bne.n	8006e6a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	69b9      	ldr	r1, [r7, #24]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d103      	bne.n	8006e5a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2210      	movs	r2, #16
 8006e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff f8ac 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e68:	e00b      	b.n	8006e82 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7f9 ffbc 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 8006e70:	e007      	b.n	8006e82 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f042 0208 	orr.w	r2, r2, #8
 8006e80:	619a      	str	r2, [r3, #24]
}
 8006e82:	bf00      	nop
 8006e84:	3770      	adds	r7, #112	@ 0x70
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	40008000 	.word	0x40008000

08006e90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b09c      	sub	sp, #112	@ 0x70
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ea8:	2b22      	cmp	r3, #34	@ 0x22
 8006eaa:	f040 80be 	bne.w	800702a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ebe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006ec2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ecc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	1c9a      	adds	r2, r3, #2
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 80a1 	bne.w	800703a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f16:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f18:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a33      	ldr	r2, [pc, #204]	@ (8007044 <UART_RxISR_16BIT+0x1b4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d01f      	beq.n	8006fbc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d018      	beq.n	8006fbc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006faa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e6      	bne.n	8006f8a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d12e      	bne.n	8007022 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f023 0310 	bic.w	r3, r3, #16
 8006fde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6979      	ldr	r1, [r7, #20]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e6      	bne.n	8006fca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f003 0310 	and.w	r3, r3, #16
 8007006:	2b10      	cmp	r3, #16
 8007008:	d103      	bne.n	8007012 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2210      	movs	r2, #16
 8007010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe ffd0 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007020:	e00b      	b.n	800703a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7f9 fee0 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 8007028:	e007      	b.n	800703a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	699a      	ldr	r2, [r3, #24]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0208 	orr.w	r2, r2, #8
 8007038:	619a      	str	r2, [r3, #24]
}
 800703a:	bf00      	nop
 800703c:	3770      	adds	r7, #112	@ 0x70
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	40008000 	.word	0x40008000

08007048 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b0ac      	sub	sp, #176	@ 0xb0
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007056:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800707e:	2b22      	cmp	r3, #34	@ 0x22
 8007080:	f040 8183 	bne.w	800738a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800708a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800708e:	e126      	b.n	80072de <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800709a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800709e:	b2d9      	uxtb	r1, r3
 80070a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070aa:	400a      	ands	r2, r1
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d053      	beq.n	800718a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d011      	beq.n	8007112 <UART_RxISR_8BIT_FIFOEN+0xca>
 80070ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2201      	movs	r2, #1
 8007100:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007108:	f043 0201 	orr.w	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d011      	beq.n	8007142 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800711e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2202      	movs	r2, #2
 8007130:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007138:	f043 0204 	orr.w	r2, r3, #4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d011      	beq.n	8007172 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800714e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2204      	movs	r2, #4
 8007160:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007168:	f043 0202 	orr.w	r2, r3, #2
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007178:	2b00      	cmp	r3, #0
 800717a:	d006      	beq.n	800718a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fe ff15 	bl	8005fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	f040 80a3 	bne.w	80072de <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80071a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071bc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80071c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80071c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e4      	bne.n	8007198 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80071de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3308      	adds	r3, #8
 80071f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071f6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80071f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80071fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e1      	bne.n	80071ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a60      	ldr	r2, [pc, #384]	@ (80073a4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d021      	beq.n	800726c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01a      	beq.n	800726c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007246:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800724a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007258:	657b      	str	r3, [r7, #84]	@ 0x54
 800725a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800725e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e4      	bne.n	8007236 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d130      	bne.n	80072d6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728a:	f023 0310 	bic.w	r3, r3, #16
 800728e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800729c:	643b      	str	r3, [r7, #64]	@ 0x40
 800729e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e4      	bne.n	800727a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b10      	cmp	r3, #16
 80072bc:	d103      	bne.n	80072c6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2210      	movs	r2, #16
 80072c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fe fe76 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80072d4:	e00e      	b.n	80072f4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7f9 fd86 	bl	8000de8 <HAL_UART_RxCpltCallback>
        break;
 80072dc:	e00a      	b.n	80072f4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072de:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80072e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f47f aece 	bne.w	8007090 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007302:	2b00      	cmp	r3, #0
 8007304:	d049      	beq.n	800739a <UART_RxISR_8BIT_FIFOEN+0x352>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800730c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007310:	429a      	cmp	r2, r3
 8007312:	d242      	bcs.n	800739a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	61fb      	str	r3, [r7, #28]
   return(result);
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800732a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007338:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800733e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e3      	bne.n	8007314 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a16      	ldr	r2, [pc, #88]	@ (80073a8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007350:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f043 0320 	orr.w	r3, r3, #32
 8007366:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6979      	ldr	r1, [r7, #20]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	613b      	str	r3, [r7, #16]
   return(result);
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e4      	bne.n	8007352 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007388:	e007      	b.n	800739a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699a      	ldr	r2, [r3, #24]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0208 	orr.w	r2, r2, #8
 8007398:	619a      	str	r2, [r3, #24]
}
 800739a:	bf00      	nop
 800739c:	37b0      	adds	r7, #176	@ 0xb0
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40008000 	.word	0x40008000
 80073a8:	08006cd9 	.word	0x08006cd9

080073ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b0ae      	sub	sp, #184	@ 0xb8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073e2:	2b22      	cmp	r3, #34	@ 0x22
 80073e4:	f040 8187 	bne.w	80076f6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073f2:	e12a      	b.n	800764a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007406:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800740a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800740e:	4013      	ands	r3, r2
 8007410:	b29a      	uxth	r2, r3
 8007412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007416:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741c:	1c9a      	adds	r2, r3, #2
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800743e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d053      	beq.n	80074f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800744a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800745a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2201      	movs	r2, #1
 8007468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007470:	f043 0201 	orr.w	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800747a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d011      	beq.n	80074aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2202      	movs	r2, #2
 8007498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a0:	f043 0204 	orr.w	r2, r3, #4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00b      	beq.n	80074da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2204      	movs	r2, #4
 80074c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d0:	f043 0202 	orr.w	r2, r3, #2
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fe fd61 	bl	8005fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 80a5 	bne.w	800764a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800750e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007522:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007526:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800752a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e2      	bne.n	8007500 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800754a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800754c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007562:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007564:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007568:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e1      	bne.n	800753a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a60      	ldr	r2, [pc, #384]	@ (8007710 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d021      	beq.n	80075d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01a      	beq.n	80075d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e4      	bne.n	80075a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d130      	bne.n	8007642 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f6:	f023 0310 	bic.w	r3, r3, #16
 80075fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007608:	647b      	str	r3, [r7, #68]	@ 0x44
 800760a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800760e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e4      	bne.n	80075e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b10      	cmp	r3, #16
 8007628:	d103      	bne.n	8007632 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2210      	movs	r2, #16
 8007630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fe fcc0 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007640:	e00e      	b.n	8007660 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7f9 fbd0 	bl	8000de8 <HAL_UART_RxCpltCallback>
        break;
 8007648:	e00a      	b.n	8007660 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800764a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	f47f aeca 	bne.w	80073f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007666:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800766a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800766e:	2b00      	cmp	r3, #0
 8007670:	d049      	beq.n	8007706 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007678:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800767c:	429a      	cmp	r2, r3
 800767e:	d242      	bcs.n	8007706 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3308      	adds	r3, #8
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	623b      	str	r3, [r7, #32]
   return(result);
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007696:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3308      	adds	r3, #8
 80076a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80076a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e3      	bne.n	8007680 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a16      	ldr	r2, [pc, #88]	@ (8007714 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80076bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f043 0320 	orr.w	r3, r3, #32
 80076d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	617b      	str	r3, [r7, #20]
   return(result);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e4      	bne.n	80076be <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f4:	e007      	b.n	8007706 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0208 	orr.w	r2, r2, #8
 8007704:	619a      	str	r2, [r3, #24]
}
 8007706:	bf00      	nop
 8007708:	37b8      	adds	r7, #184	@ 0xb8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40008000 	.word	0x40008000
 8007714:	08006e91 	.word	0x08006e91

08007718 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_UARTEx_DisableFifoMode+0x16>
 8007766:	2302      	movs	r3, #2
 8007768:	e027      	b.n	80077ba <HAL_UARTEx_DisableFifoMode+0x66>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2224      	movs	r2, #36	@ 0x24
 8007776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0201 	bic.w	r2, r2, #1
 8007790:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007798:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077da:	2302      	movs	r3, #2
 80077dc:	e02d      	b.n	800783a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2224      	movs	r2, #36	@ 0x24
 80077ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0201 	bic.w	r2, r2, #1
 8007804:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f850 	bl	80078c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007856:	2302      	movs	r3, #2
 8007858:	e02d      	b.n	80078b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2224      	movs	r2, #36	@ 0x24
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f812 	bl	80078c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d108      	bne.n	80078e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078e0:	e031      	b.n	8007946 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078e2:	2308      	movs	r3, #8
 80078e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078e6:	2308      	movs	r3, #8
 80078e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	0e5b      	lsrs	r3, r3, #25
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	0f5b      	lsrs	r3, r3, #29
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	7b3a      	ldrb	r2, [r7, #12]
 800790e:	4911      	ldr	r1, [pc, #68]	@ (8007954 <UARTEx_SetNbDataToProcess+0x94>)
 8007910:	5c8a      	ldrb	r2, [r1, r2]
 8007912:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007916:	7b3a      	ldrb	r2, [r7, #12]
 8007918:	490f      	ldr	r1, [pc, #60]	@ (8007958 <UARTEx_SetNbDataToProcess+0x98>)
 800791a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800791c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007920:	b29a      	uxth	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	7b7a      	ldrb	r2, [r7, #13]
 800792c:	4909      	ldr	r1, [pc, #36]	@ (8007954 <UARTEx_SetNbDataToProcess+0x94>)
 800792e:	5c8a      	ldrb	r2, [r1, r2]
 8007930:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007934:	7b7a      	ldrb	r2, [r7, #13]
 8007936:	4908      	ldr	r1, [pc, #32]	@ (8007958 <UARTEx_SetNbDataToProcess+0x98>)
 8007938:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800793a:	fb93 f3f2 	sdiv	r3, r3, r2
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	08008b70 	.word	0x08008b70
 8007958:	08008b78 	.word	0x08008b78

0800795c <std>:
 800795c:	2300      	movs	r3, #0
 800795e:	b510      	push	{r4, lr}
 8007960:	4604      	mov	r4, r0
 8007962:	e9c0 3300 	strd	r3, r3, [r0]
 8007966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800796a:	6083      	str	r3, [r0, #8]
 800796c:	8181      	strh	r1, [r0, #12]
 800796e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007970:	81c2      	strh	r2, [r0, #14]
 8007972:	6183      	str	r3, [r0, #24]
 8007974:	4619      	mov	r1, r3
 8007976:	2208      	movs	r2, #8
 8007978:	305c      	adds	r0, #92	@ 0x5c
 800797a:	f000 f8f4 	bl	8007b66 <memset>
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <std+0x58>)
 8007980:	6263      	str	r3, [r4, #36]	@ 0x24
 8007982:	4b0d      	ldr	r3, [pc, #52]	@ (80079b8 <std+0x5c>)
 8007984:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007986:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <std+0x60>)
 8007988:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800798a:	4b0d      	ldr	r3, [pc, #52]	@ (80079c0 <std+0x64>)
 800798c:	6323      	str	r3, [r4, #48]	@ 0x30
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <std+0x68>)
 8007990:	6224      	str	r4, [r4, #32]
 8007992:	429c      	cmp	r4, r3
 8007994:	d006      	beq.n	80079a4 <std+0x48>
 8007996:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800799a:	4294      	cmp	r4, r2
 800799c:	d002      	beq.n	80079a4 <std+0x48>
 800799e:	33d0      	adds	r3, #208	@ 0xd0
 80079a0:	429c      	cmp	r4, r3
 80079a2:	d105      	bne.n	80079b0 <std+0x54>
 80079a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ac:	f000 b9b0 	b.w	8007d10 <__retarget_lock_init_recursive>
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	08007ae1 	.word	0x08007ae1
 80079b8:	08007b03 	.word	0x08007b03
 80079bc:	08007b3b 	.word	0x08007b3b
 80079c0:	08007b5f 	.word	0x08007b5f
 80079c4:	20000400 	.word	0x20000400

080079c8 <stdio_exit_handler>:
 80079c8:	4a02      	ldr	r2, [pc, #8]	@ (80079d4 <stdio_exit_handler+0xc>)
 80079ca:	4903      	ldr	r1, [pc, #12]	@ (80079d8 <stdio_exit_handler+0x10>)
 80079cc:	4803      	ldr	r0, [pc, #12]	@ (80079dc <stdio_exit_handler+0x14>)
 80079ce:	f000 b869 	b.w	8007aa4 <_fwalk_sglue>
 80079d2:	bf00      	nop
 80079d4:	2000000c 	.word	0x2000000c
 80079d8:	0800805d 	.word	0x0800805d
 80079dc:	2000001c 	.word	0x2000001c

080079e0 <cleanup_stdio>:
 80079e0:	6841      	ldr	r1, [r0, #4]
 80079e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <cleanup_stdio+0x34>)
 80079e4:	4299      	cmp	r1, r3
 80079e6:	b510      	push	{r4, lr}
 80079e8:	4604      	mov	r4, r0
 80079ea:	d001      	beq.n	80079f0 <cleanup_stdio+0x10>
 80079ec:	f000 fb36 	bl	800805c <_fflush_r>
 80079f0:	68a1      	ldr	r1, [r4, #8]
 80079f2:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <cleanup_stdio+0x38>)
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d002      	beq.n	80079fe <cleanup_stdio+0x1e>
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fb2f 	bl	800805c <_fflush_r>
 80079fe:	68e1      	ldr	r1, [r4, #12]
 8007a00:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <cleanup_stdio+0x3c>)
 8007a02:	4299      	cmp	r1, r3
 8007a04:	d004      	beq.n	8007a10 <cleanup_stdio+0x30>
 8007a06:	4620      	mov	r0, r4
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	f000 bb26 	b.w	800805c <_fflush_r>
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	bf00      	nop
 8007a14:	20000400 	.word	0x20000400
 8007a18:	20000468 	.word	0x20000468
 8007a1c:	200004d0 	.word	0x200004d0

08007a20 <global_stdio_init.part.0>:
 8007a20:	b510      	push	{r4, lr}
 8007a22:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <global_stdio_init.part.0+0x30>)
 8007a24:	4c0b      	ldr	r4, [pc, #44]	@ (8007a54 <global_stdio_init.part.0+0x34>)
 8007a26:	4a0c      	ldr	r2, [pc, #48]	@ (8007a58 <global_stdio_init.part.0+0x38>)
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2104      	movs	r1, #4
 8007a30:	f7ff ff94 	bl	800795c <std>
 8007a34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a38:	2201      	movs	r2, #1
 8007a3a:	2109      	movs	r1, #9
 8007a3c:	f7ff ff8e 	bl	800795c <std>
 8007a40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a44:	2202      	movs	r2, #2
 8007a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4a:	2112      	movs	r1, #18
 8007a4c:	f7ff bf86 	b.w	800795c <std>
 8007a50:	20000538 	.word	0x20000538
 8007a54:	20000400 	.word	0x20000400
 8007a58:	080079c9 	.word	0x080079c9

08007a5c <__sfp_lock_acquire>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__sfp_lock_acquire+0x8>)
 8007a5e:	f000 b958 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 8007a62:	bf00      	nop
 8007a64:	20000541 	.word	0x20000541

08007a68 <__sfp_lock_release>:
 8007a68:	4801      	ldr	r0, [pc, #4]	@ (8007a70 <__sfp_lock_release+0x8>)
 8007a6a:	f000 b953 	b.w	8007d14 <__retarget_lock_release_recursive>
 8007a6e:	bf00      	nop
 8007a70:	20000541 	.word	0x20000541

08007a74 <__sinit>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	4604      	mov	r4, r0
 8007a78:	f7ff fff0 	bl	8007a5c <__sfp_lock_acquire>
 8007a7c:	6a23      	ldr	r3, [r4, #32]
 8007a7e:	b11b      	cbz	r3, 8007a88 <__sinit+0x14>
 8007a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a84:	f7ff bff0 	b.w	8007a68 <__sfp_lock_release>
 8007a88:	4b04      	ldr	r3, [pc, #16]	@ (8007a9c <__sinit+0x28>)
 8007a8a:	6223      	str	r3, [r4, #32]
 8007a8c:	4b04      	ldr	r3, [pc, #16]	@ (8007aa0 <__sinit+0x2c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f5      	bne.n	8007a80 <__sinit+0xc>
 8007a94:	f7ff ffc4 	bl	8007a20 <global_stdio_init.part.0>
 8007a98:	e7f2      	b.n	8007a80 <__sinit+0xc>
 8007a9a:	bf00      	nop
 8007a9c:	080079e1 	.word	0x080079e1
 8007aa0:	20000538 	.word	0x20000538

08007aa4 <_fwalk_sglue>:
 8007aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	4688      	mov	r8, r1
 8007aac:	4614      	mov	r4, r2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ab8:	d505      	bpl.n	8007ac6 <_fwalk_sglue+0x22>
 8007aba:	6824      	ldr	r4, [r4, #0]
 8007abc:	2c00      	cmp	r4, #0
 8007abe:	d1f7      	bne.n	8007ab0 <_fwalk_sglue+0xc>
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d907      	bls.n	8007adc <_fwalk_sglue+0x38>
 8007acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	d003      	beq.n	8007adc <_fwalk_sglue+0x38>
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	47c0      	blx	r8
 8007ada:	4306      	orrs	r6, r0
 8007adc:	3568      	adds	r5, #104	@ 0x68
 8007ade:	e7e9      	b.n	8007ab4 <_fwalk_sglue+0x10>

08007ae0 <__sread>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae8:	f000 f8c4 	bl	8007c74 <_read_r>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	bfab      	itete	ge
 8007af0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007af2:	89a3      	ldrhlt	r3, [r4, #12]
 8007af4:	181b      	addge	r3, r3, r0
 8007af6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007afa:	bfac      	ite	ge
 8007afc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007afe:	81a3      	strhlt	r3, [r4, #12]
 8007b00:	bd10      	pop	{r4, pc}

08007b02 <__swrite>:
 8007b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b06:	461f      	mov	r7, r3
 8007b08:	898b      	ldrh	r3, [r1, #12]
 8007b0a:	05db      	lsls	r3, r3, #23
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	4616      	mov	r6, r2
 8007b12:	d505      	bpl.n	8007b20 <__swrite+0x1e>
 8007b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b18:	2302      	movs	r3, #2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f000 f898 	bl	8007c50 <_lseek_r>
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	4632      	mov	r2, r6
 8007b2e:	463b      	mov	r3, r7
 8007b30:	4628      	mov	r0, r5
 8007b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b36:	f000 b8af 	b.w	8007c98 <_write_r>

08007b3a <__sseek>:
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b42:	f000 f885 	bl	8007c50 <_lseek_r>
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	bf15      	itete	ne
 8007b4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b56:	81a3      	strheq	r3, [r4, #12]
 8007b58:	bf18      	it	ne
 8007b5a:	81a3      	strhne	r3, [r4, #12]
 8007b5c:	bd10      	pop	{r4, pc}

08007b5e <__sclose>:
 8007b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b62:	f000 b865 	b.w	8007c30 <_close_r>

08007b66 <memset>:
 8007b66:	4402      	add	r2, r0
 8007b68:	4603      	mov	r3, r0
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d100      	bne.n	8007b70 <memset+0xa>
 8007b6e:	4770      	bx	lr
 8007b70:	f803 1b01 	strb.w	r1, [r3], #1
 8007b74:	e7f9      	b.n	8007b6a <memset+0x4>
	...

08007b78 <strtok>:
 8007b78:	4b16      	ldr	r3, [pc, #88]	@ (8007bd4 <strtok+0x5c>)
 8007b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	681f      	ldr	r7, [r3, #0]
 8007b80:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007b82:	4605      	mov	r5, r0
 8007b84:	460e      	mov	r6, r1
 8007b86:	b9ec      	cbnz	r4, 8007bc4 <strtok+0x4c>
 8007b88:	2050      	movs	r0, #80	@ 0x50
 8007b8a:	f000 f92d 	bl	8007de8 <malloc>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6478      	str	r0, [r7, #68]	@ 0x44
 8007b92:	b920      	cbnz	r0, 8007b9e <strtok+0x26>
 8007b94:	4b10      	ldr	r3, [pc, #64]	@ (8007bd8 <strtok+0x60>)
 8007b96:	4811      	ldr	r0, [pc, #68]	@ (8007bdc <strtok+0x64>)
 8007b98:	215b      	movs	r1, #91	@ 0x5b
 8007b9a:	f000 f8bd 	bl	8007d18 <__assert_func>
 8007b9e:	e9c0 4400 	strd	r4, r4, [r0]
 8007ba2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007ba6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007baa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007bae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007bb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007bb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007bba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007bbe:	6184      	str	r4, [r0, #24]
 8007bc0:	7704      	strb	r4, [r0, #28]
 8007bc2:	6244      	str	r4, [r0, #36]	@ 0x24
 8007bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	f000 b806 	b.w	8007be0 <__strtok_r>
 8007bd4:	20000018 	.word	0x20000018
 8007bd8:	08008b80 	.word	0x08008b80
 8007bdc:	08008b97 	.word	0x08008b97

08007be0 <__strtok_r>:
 8007be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be2:	4604      	mov	r4, r0
 8007be4:	b908      	cbnz	r0, 8007bea <__strtok_r+0xa>
 8007be6:	6814      	ldr	r4, [r2, #0]
 8007be8:	b144      	cbz	r4, 8007bfc <__strtok_r+0x1c>
 8007bea:	4620      	mov	r0, r4
 8007bec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007bf0:	460f      	mov	r7, r1
 8007bf2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007bf6:	b91e      	cbnz	r6, 8007c00 <__strtok_r+0x20>
 8007bf8:	b965      	cbnz	r5, 8007c14 <__strtok_r+0x34>
 8007bfa:	6015      	str	r5, [r2, #0]
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	e005      	b.n	8007c0c <__strtok_r+0x2c>
 8007c00:	42b5      	cmp	r5, r6
 8007c02:	d1f6      	bne.n	8007bf2 <__strtok_r+0x12>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f0      	bne.n	8007bea <__strtok_r+0xa>
 8007c08:	6014      	str	r4, [r2, #0]
 8007c0a:	7003      	strb	r3, [r0, #0]
 8007c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c0e:	461c      	mov	r4, r3
 8007c10:	e00c      	b.n	8007c2c <__strtok_r+0x4c>
 8007c12:	b915      	cbnz	r5, 8007c1a <__strtok_r+0x3a>
 8007c14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c18:	460e      	mov	r6, r1
 8007c1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007c1e:	42ab      	cmp	r3, r5
 8007c20:	d1f7      	bne.n	8007c12 <__strtok_r+0x32>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0f3      	beq.n	8007c0e <__strtok_r+0x2e>
 8007c26:	2300      	movs	r3, #0
 8007c28:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007c2c:	6014      	str	r4, [r2, #0]
 8007c2e:	e7ed      	b.n	8007c0c <__strtok_r+0x2c>

08007c30 <_close_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	@ (8007c4c <_close_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7f9 fa3a 	bl	80010b4 <_close>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_close_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_close_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	2000053c 	.word	0x2000053c

08007c50 <_lseek_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	@ (8007c70 <_lseek_r+0x20>)
 8007c54:	4604      	mov	r4, r0
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7f9 fa4f 	bl	8001102 <_lseek>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_lseek_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_lseek_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	2000053c 	.word	0x2000053c

08007c74 <_read_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	@ (8007c94 <_read_r+0x20>)
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	602a      	str	r2, [r5, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7f9 f9dd 	bl	8001042 <_read>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_read_r+0x1e>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_read_r+0x1e>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	2000053c 	.word	0x2000053c

08007c98 <_write_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d07      	ldr	r5, [pc, #28]	@ (8007cb8 <_write_r+0x20>)
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	602a      	str	r2, [r5, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f7f9 f9e8 	bl	800107c <_write>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_write_r+0x1e>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_write_r+0x1e>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	2000053c 	.word	0x2000053c

08007cbc <__errno>:
 8007cbc:	4b01      	ldr	r3, [pc, #4]	@ (8007cc4 <__errno+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000018 	.word	0x20000018

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	@ (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	@ (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f000 fe3a 	bl	8008954 <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	08008c68 	.word	0x08008c68
 8007d04:	08008c68 	.word	0x08008c68
 8007d08:	08008c68 	.word	0x08008c68
 8007d0c:	08008c6c 	.word	0x08008c6c

08007d10 <__retarget_lock_init_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <__retarget_lock_acquire_recursive>:
 8007d12:	4770      	bx	lr

08007d14 <__retarget_lock_release_recursive>:
 8007d14:	4770      	bx	lr
	...

08007d18 <__assert_func>:
 8007d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d1a:	4614      	mov	r4, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b09      	ldr	r3, [pc, #36]	@ (8007d44 <__assert_func+0x2c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4605      	mov	r5, r0
 8007d24:	68d8      	ldr	r0, [r3, #12]
 8007d26:	b954      	cbnz	r4, 8007d3e <__assert_func+0x26>
 8007d28:	4b07      	ldr	r3, [pc, #28]	@ (8007d48 <__assert_func+0x30>)
 8007d2a:	461c      	mov	r4, r3
 8007d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d30:	9100      	str	r1, [sp, #0]
 8007d32:	462b      	mov	r3, r5
 8007d34:	4905      	ldr	r1, [pc, #20]	@ (8007d4c <__assert_func+0x34>)
 8007d36:	f000 f9b9 	bl	80080ac <fiprintf>
 8007d3a:	f000 f9d9 	bl	80080f0 <abort>
 8007d3e:	4b04      	ldr	r3, [pc, #16]	@ (8007d50 <__assert_func+0x38>)
 8007d40:	e7f4      	b.n	8007d2c <__assert_func+0x14>
 8007d42:	bf00      	nop
 8007d44:	20000018 	.word	0x20000018
 8007d48:	08008c2c 	.word	0x08008c2c
 8007d4c:	08008bfe 	.word	0x08008bfe
 8007d50:	08008bf1 	.word	0x08008bf1

08007d54 <_free_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4605      	mov	r5, r0
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	d041      	beq.n	8007de0 <_free_r+0x8c>
 8007d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d60:	1f0c      	subs	r4, r1, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfb8      	it	lt
 8007d66:	18e4      	addlt	r4, r4, r3
 8007d68:	f000 f8e8 	bl	8007f3c <__malloc_lock>
 8007d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007de4 <_free_r+0x90>)
 8007d6e:	6813      	ldr	r3, [r2, #0]
 8007d70:	b933      	cbnz	r3, 8007d80 <_free_r+0x2c>
 8007d72:	6063      	str	r3, [r4, #4]
 8007d74:	6014      	str	r4, [r2, #0]
 8007d76:	4628      	mov	r0, r5
 8007d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d7c:	f000 b8e4 	b.w	8007f48 <__malloc_unlock>
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	d908      	bls.n	8007d96 <_free_r+0x42>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	1821      	adds	r1, r4, r0
 8007d88:	428b      	cmp	r3, r1
 8007d8a:	bf01      	itttt	eq
 8007d8c:	6819      	ldreq	r1, [r3, #0]
 8007d8e:	685b      	ldreq	r3, [r3, #4]
 8007d90:	1809      	addeq	r1, r1, r0
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	e7ed      	b.n	8007d72 <_free_r+0x1e>
 8007d96:	461a      	mov	r2, r3
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	b10b      	cbz	r3, 8007da0 <_free_r+0x4c>
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	d9fa      	bls.n	8007d96 <_free_r+0x42>
 8007da0:	6811      	ldr	r1, [r2, #0]
 8007da2:	1850      	adds	r0, r2, r1
 8007da4:	42a0      	cmp	r0, r4
 8007da6:	d10b      	bne.n	8007dc0 <_free_r+0x6c>
 8007da8:	6820      	ldr	r0, [r4, #0]
 8007daa:	4401      	add	r1, r0
 8007dac:	1850      	adds	r0, r2, r1
 8007dae:	4283      	cmp	r3, r0
 8007db0:	6011      	str	r1, [r2, #0]
 8007db2:	d1e0      	bne.n	8007d76 <_free_r+0x22>
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	6053      	str	r3, [r2, #4]
 8007dba:	4408      	add	r0, r1
 8007dbc:	6010      	str	r0, [r2, #0]
 8007dbe:	e7da      	b.n	8007d76 <_free_r+0x22>
 8007dc0:	d902      	bls.n	8007dc8 <_free_r+0x74>
 8007dc2:	230c      	movs	r3, #12
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	e7d6      	b.n	8007d76 <_free_r+0x22>
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	1821      	adds	r1, r4, r0
 8007dcc:	428b      	cmp	r3, r1
 8007dce:	bf04      	itt	eq
 8007dd0:	6819      	ldreq	r1, [r3, #0]
 8007dd2:	685b      	ldreq	r3, [r3, #4]
 8007dd4:	6063      	str	r3, [r4, #4]
 8007dd6:	bf04      	itt	eq
 8007dd8:	1809      	addeq	r1, r1, r0
 8007dda:	6021      	streq	r1, [r4, #0]
 8007ddc:	6054      	str	r4, [r2, #4]
 8007dde:	e7ca      	b.n	8007d76 <_free_r+0x22>
 8007de0:	bd38      	pop	{r3, r4, r5, pc}
 8007de2:	bf00      	nop
 8007de4:	20000548 	.word	0x20000548

08007de8 <malloc>:
 8007de8:	4b02      	ldr	r3, [pc, #8]	@ (8007df4 <malloc+0xc>)
 8007dea:	4601      	mov	r1, r0
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f000 b825 	b.w	8007e3c <_malloc_r>
 8007df2:	bf00      	nop
 8007df4:	20000018 	.word	0x20000018

08007df8 <sbrk_aligned>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8007e38 <sbrk_aligned+0x40>)
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	6831      	ldr	r1, [r6, #0]
 8007e00:	4605      	mov	r5, r0
 8007e02:	b911      	cbnz	r1, 8007e0a <sbrk_aligned+0x12>
 8007e04:	f000 f964 	bl	80080d0 <_sbrk_r>
 8007e08:	6030      	str	r0, [r6, #0]
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 f95f 	bl	80080d0 <_sbrk_r>
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	d103      	bne.n	8007e1e <sbrk_aligned+0x26>
 8007e16:	f04f 34ff 	mov.w	r4, #4294967295
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
 8007e1e:	1cc4      	adds	r4, r0, #3
 8007e20:	f024 0403 	bic.w	r4, r4, #3
 8007e24:	42a0      	cmp	r0, r4
 8007e26:	d0f8      	beq.n	8007e1a <sbrk_aligned+0x22>
 8007e28:	1a21      	subs	r1, r4, r0
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f000 f950 	bl	80080d0 <_sbrk_r>
 8007e30:	3001      	adds	r0, #1
 8007e32:	d1f2      	bne.n	8007e1a <sbrk_aligned+0x22>
 8007e34:	e7ef      	b.n	8007e16 <sbrk_aligned+0x1e>
 8007e36:	bf00      	nop
 8007e38:	20000544 	.word	0x20000544

08007e3c <_malloc_r>:
 8007e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	1ccd      	adds	r5, r1, #3
 8007e42:	f025 0503 	bic.w	r5, r5, #3
 8007e46:	3508      	adds	r5, #8
 8007e48:	2d0c      	cmp	r5, #12
 8007e4a:	bf38      	it	cc
 8007e4c:	250c      	movcc	r5, #12
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	4606      	mov	r6, r0
 8007e52:	db01      	blt.n	8007e58 <_malloc_r+0x1c>
 8007e54:	42a9      	cmp	r1, r5
 8007e56:	d904      	bls.n	8007e62 <_malloc_r+0x26>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	6033      	str	r3, [r6, #0]
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f38 <_malloc_r+0xfc>
 8007e66:	f000 f869 	bl	8007f3c <__malloc_lock>
 8007e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6e:	461c      	mov	r4, r3
 8007e70:	bb44      	cbnz	r4, 8007ec4 <_malloc_r+0x88>
 8007e72:	4629      	mov	r1, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	f7ff ffbf 	bl	8007df8 <sbrk_aligned>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	d158      	bne.n	8007f32 <_malloc_r+0xf6>
 8007e80:	f8d8 4000 	ldr.w	r4, [r8]
 8007e84:	4627      	mov	r7, r4
 8007e86:	2f00      	cmp	r7, #0
 8007e88:	d143      	bne.n	8007f12 <_malloc_r+0xd6>
 8007e8a:	2c00      	cmp	r4, #0
 8007e8c:	d04b      	beq.n	8007f26 <_malloc_r+0xea>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	4639      	mov	r1, r7
 8007e92:	4630      	mov	r0, r6
 8007e94:	eb04 0903 	add.w	r9, r4, r3
 8007e98:	f000 f91a 	bl	80080d0 <_sbrk_r>
 8007e9c:	4581      	cmp	r9, r0
 8007e9e:	d142      	bne.n	8007f26 <_malloc_r+0xea>
 8007ea0:	6821      	ldr	r1, [r4, #0]
 8007ea2:	1a6d      	subs	r5, r5, r1
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f7ff ffa6 	bl	8007df8 <sbrk_aligned>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d03a      	beq.n	8007f26 <_malloc_r+0xea>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	442b      	add	r3, r5
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	bb62      	cbnz	r2, 8007f18 <_malloc_r+0xdc>
 8007ebe:	f8c8 7000 	str.w	r7, [r8]
 8007ec2:	e00f      	b.n	8007ee4 <_malloc_r+0xa8>
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	1b52      	subs	r2, r2, r5
 8007ec8:	d420      	bmi.n	8007f0c <_malloc_r+0xd0>
 8007eca:	2a0b      	cmp	r2, #11
 8007ecc:	d917      	bls.n	8007efe <_malloc_r+0xc2>
 8007ece:	1961      	adds	r1, r4, r5
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	6025      	str	r5, [r4, #0]
 8007ed4:	bf18      	it	ne
 8007ed6:	6059      	strne	r1, [r3, #4]
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	bf08      	it	eq
 8007edc:	f8c8 1000 	streq.w	r1, [r8]
 8007ee0:	5162      	str	r2, [r4, r5]
 8007ee2:	604b      	str	r3, [r1, #4]
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f82f 	bl	8007f48 <__malloc_unlock>
 8007eea:	f104 000b 	add.w	r0, r4, #11
 8007eee:	1d23      	adds	r3, r4, #4
 8007ef0:	f020 0007 	bic.w	r0, r0, #7
 8007ef4:	1ac2      	subs	r2, r0, r3
 8007ef6:	bf1c      	itt	ne
 8007ef8:	1a1b      	subne	r3, r3, r0
 8007efa:	50a3      	strne	r3, [r4, r2]
 8007efc:	e7af      	b.n	8007e5e <_malloc_r+0x22>
 8007efe:	6862      	ldr	r2, [r4, #4]
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	bf0c      	ite	eq
 8007f04:	f8c8 2000 	streq.w	r2, [r8]
 8007f08:	605a      	strne	r2, [r3, #4]
 8007f0a:	e7eb      	b.n	8007ee4 <_malloc_r+0xa8>
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	6864      	ldr	r4, [r4, #4]
 8007f10:	e7ae      	b.n	8007e70 <_malloc_r+0x34>
 8007f12:	463c      	mov	r4, r7
 8007f14:	687f      	ldr	r7, [r7, #4]
 8007f16:	e7b6      	b.n	8007e86 <_malloc_r+0x4a>
 8007f18:	461a      	mov	r2, r3
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d1fb      	bne.n	8007f18 <_malloc_r+0xdc>
 8007f20:	2300      	movs	r3, #0
 8007f22:	6053      	str	r3, [r2, #4]
 8007f24:	e7de      	b.n	8007ee4 <_malloc_r+0xa8>
 8007f26:	230c      	movs	r3, #12
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f000 f80c 	bl	8007f48 <__malloc_unlock>
 8007f30:	e794      	b.n	8007e5c <_malloc_r+0x20>
 8007f32:	6005      	str	r5, [r0, #0]
 8007f34:	e7d6      	b.n	8007ee4 <_malloc_r+0xa8>
 8007f36:	bf00      	nop
 8007f38:	20000548 	.word	0x20000548

08007f3c <__malloc_lock>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	@ (8007f44 <__malloc_lock+0x8>)
 8007f3e:	f7ff bee8 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	20000540 	.word	0x20000540

08007f48 <__malloc_unlock>:
 8007f48:	4801      	ldr	r0, [pc, #4]	@ (8007f50 <__malloc_unlock+0x8>)
 8007f4a:	f7ff bee3 	b.w	8007d14 <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20000540 	.word	0x20000540

08007f54 <__sflush_r>:
 8007f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5c:	0716      	lsls	r6, r2, #28
 8007f5e:	4605      	mov	r5, r0
 8007f60:	460c      	mov	r4, r1
 8007f62:	d454      	bmi.n	800800e <__sflush_r+0xba>
 8007f64:	684b      	ldr	r3, [r1, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dc02      	bgt.n	8007f70 <__sflush_r+0x1c>
 8007f6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd48      	ble.n	8008002 <__sflush_r+0xae>
 8007f70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d045      	beq.n	8008002 <__sflush_r+0xae>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f7c:	682f      	ldr	r7, [r5, #0]
 8007f7e:	6a21      	ldr	r1, [r4, #32]
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	d030      	beq.n	8007fe6 <__sflush_r+0x92>
 8007f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	0759      	lsls	r1, r3, #29
 8007f8a:	d505      	bpl.n	8007f98 <__sflush_r+0x44>
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f92:	b10b      	cbz	r3, 8007f98 <__sflush_r+0x44>
 8007f94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f9c:	6a21      	ldr	r1, [r4, #32]
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b0      	blx	r6
 8007fa2:	1c43      	adds	r3, r0, #1
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	d106      	bne.n	8007fb6 <__sflush_r+0x62>
 8007fa8:	6829      	ldr	r1, [r5, #0]
 8007faa:	291d      	cmp	r1, #29
 8007fac:	d82b      	bhi.n	8008006 <__sflush_r+0xb2>
 8007fae:	4a2a      	ldr	r2, [pc, #168]	@ (8008058 <__sflush_r+0x104>)
 8007fb0:	410a      	asrs	r2, r1
 8007fb2:	07d6      	lsls	r6, r2, #31
 8007fb4:	d427      	bmi.n	8008006 <__sflush_r+0xb2>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	6062      	str	r2, [r4, #4]
 8007fba:	04d9      	lsls	r1, r3, #19
 8007fbc:	6922      	ldr	r2, [r4, #16]
 8007fbe:	6022      	str	r2, [r4, #0]
 8007fc0:	d504      	bpl.n	8007fcc <__sflush_r+0x78>
 8007fc2:	1c42      	adds	r2, r0, #1
 8007fc4:	d101      	bne.n	8007fca <__sflush_r+0x76>
 8007fc6:	682b      	ldr	r3, [r5, #0]
 8007fc8:	b903      	cbnz	r3, 8007fcc <__sflush_r+0x78>
 8007fca:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fce:	602f      	str	r7, [r5, #0]
 8007fd0:	b1b9      	cbz	r1, 8008002 <__sflush_r+0xae>
 8007fd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fd6:	4299      	cmp	r1, r3
 8007fd8:	d002      	beq.n	8007fe0 <__sflush_r+0x8c>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7ff feba 	bl	8007d54 <_free_r>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fe4:	e00d      	b.n	8008002 <__sflush_r+0xae>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b0      	blx	r6
 8007fec:	4602      	mov	r2, r0
 8007fee:	1c50      	adds	r0, r2, #1
 8007ff0:	d1c9      	bne.n	8007f86 <__sflush_r+0x32>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c6      	beq.n	8007f86 <__sflush_r+0x32>
 8007ff8:	2b1d      	cmp	r3, #29
 8007ffa:	d001      	beq.n	8008000 <__sflush_r+0xac>
 8007ffc:	2b16      	cmp	r3, #22
 8007ffe:	d11e      	bne.n	800803e <__sflush_r+0xea>
 8008000:	602f      	str	r7, [r5, #0]
 8008002:	2000      	movs	r0, #0
 8008004:	e022      	b.n	800804c <__sflush_r+0xf8>
 8008006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800800a:	b21b      	sxth	r3, r3
 800800c:	e01b      	b.n	8008046 <__sflush_r+0xf2>
 800800e:	690f      	ldr	r7, [r1, #16]
 8008010:	2f00      	cmp	r7, #0
 8008012:	d0f6      	beq.n	8008002 <__sflush_r+0xae>
 8008014:	0793      	lsls	r3, r2, #30
 8008016:	680e      	ldr	r6, [r1, #0]
 8008018:	bf08      	it	eq
 800801a:	694b      	ldreq	r3, [r1, #20]
 800801c:	600f      	str	r7, [r1, #0]
 800801e:	bf18      	it	ne
 8008020:	2300      	movne	r3, #0
 8008022:	eba6 0807 	sub.w	r8, r6, r7
 8008026:	608b      	str	r3, [r1, #8]
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	dde9      	ble.n	8008002 <__sflush_r+0xae>
 800802e:	6a21      	ldr	r1, [r4, #32]
 8008030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008032:	4643      	mov	r3, r8
 8008034:	463a      	mov	r2, r7
 8008036:	4628      	mov	r0, r5
 8008038:	47b0      	blx	r6
 800803a:	2800      	cmp	r0, #0
 800803c:	dc08      	bgt.n	8008050 <__sflush_r+0xfc>
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008050:	4407      	add	r7, r0
 8008052:	eba8 0800 	sub.w	r8, r8, r0
 8008056:	e7e7      	b.n	8008028 <__sflush_r+0xd4>
 8008058:	dfbffffe 	.word	0xdfbffffe

0800805c <_fflush_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	690b      	ldr	r3, [r1, #16]
 8008060:	4605      	mov	r5, r0
 8008062:	460c      	mov	r4, r1
 8008064:	b913      	cbnz	r3, 800806c <_fflush_r+0x10>
 8008066:	2500      	movs	r5, #0
 8008068:	4628      	mov	r0, r5
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	b118      	cbz	r0, 8008076 <_fflush_r+0x1a>
 800806e:	6a03      	ldr	r3, [r0, #32]
 8008070:	b90b      	cbnz	r3, 8008076 <_fflush_r+0x1a>
 8008072:	f7ff fcff 	bl	8007a74 <__sinit>
 8008076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0f3      	beq.n	8008066 <_fflush_r+0xa>
 800807e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008080:	07d0      	lsls	r0, r2, #31
 8008082:	d404      	bmi.n	800808e <_fflush_r+0x32>
 8008084:	0599      	lsls	r1, r3, #22
 8008086:	d402      	bmi.n	800808e <_fflush_r+0x32>
 8008088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800808a:	f7ff fe42 	bl	8007d12 <__retarget_lock_acquire_recursive>
 800808e:	4628      	mov	r0, r5
 8008090:	4621      	mov	r1, r4
 8008092:	f7ff ff5f 	bl	8007f54 <__sflush_r>
 8008096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008098:	07da      	lsls	r2, r3, #31
 800809a:	4605      	mov	r5, r0
 800809c:	d4e4      	bmi.n	8008068 <_fflush_r+0xc>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	059b      	lsls	r3, r3, #22
 80080a2:	d4e1      	bmi.n	8008068 <_fflush_r+0xc>
 80080a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080a6:	f7ff fe35 	bl	8007d14 <__retarget_lock_release_recursive>
 80080aa:	e7dd      	b.n	8008068 <_fflush_r+0xc>

080080ac <fiprintf>:
 80080ac:	b40e      	push	{r1, r2, r3}
 80080ae:	b503      	push	{r0, r1, lr}
 80080b0:	4601      	mov	r1, r0
 80080b2:	ab03      	add	r3, sp, #12
 80080b4:	4805      	ldr	r0, [pc, #20]	@ (80080cc <fiprintf+0x20>)
 80080b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	f000 f847 	bl	8008150 <_vfiprintf_r>
 80080c2:	b002      	add	sp, #8
 80080c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c8:	b003      	add	sp, #12
 80080ca:	4770      	bx	lr
 80080cc:	20000018 	.word	0x20000018

080080d0 <_sbrk_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d06      	ldr	r5, [pc, #24]	@ (80080ec <_sbrk_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7f9 f81e 	bl	800111c <_sbrk>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_sbrk_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_sbrk_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	2000053c 	.word	0x2000053c

080080f0 <abort>:
 80080f0:	b508      	push	{r3, lr}
 80080f2:	2006      	movs	r0, #6
 80080f4:	f000 fb8e 	bl	8008814 <raise>
 80080f8:	2001      	movs	r0, #1
 80080fa:	f7f8 ff97 	bl	800102c <_exit>

080080fe <__sfputc_r>:
 80080fe:	6893      	ldr	r3, [r2, #8]
 8008100:	3b01      	subs	r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	b410      	push	{r4}
 8008106:	6093      	str	r3, [r2, #8]
 8008108:	da08      	bge.n	800811c <__sfputc_r+0x1e>
 800810a:	6994      	ldr	r4, [r2, #24]
 800810c:	42a3      	cmp	r3, r4
 800810e:	db01      	blt.n	8008114 <__sfputc_r+0x16>
 8008110:	290a      	cmp	r1, #10
 8008112:	d103      	bne.n	800811c <__sfputc_r+0x1e>
 8008114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008118:	f000 bac0 	b.w	800869c <__swbuf_r>
 800811c:	6813      	ldr	r3, [r2, #0]
 800811e:	1c58      	adds	r0, r3, #1
 8008120:	6010      	str	r0, [r2, #0]
 8008122:	7019      	strb	r1, [r3, #0]
 8008124:	4608      	mov	r0, r1
 8008126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800812a:	4770      	bx	lr

0800812c <__sfputs_r>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	4606      	mov	r6, r0
 8008130:	460f      	mov	r7, r1
 8008132:	4614      	mov	r4, r2
 8008134:	18d5      	adds	r5, r2, r3
 8008136:	42ac      	cmp	r4, r5
 8008138:	d101      	bne.n	800813e <__sfputs_r+0x12>
 800813a:	2000      	movs	r0, #0
 800813c:	e007      	b.n	800814e <__sfputs_r+0x22>
 800813e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008142:	463a      	mov	r2, r7
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff ffda 	bl	80080fe <__sfputc_r>
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	d1f3      	bne.n	8008136 <__sfputs_r+0xa>
 800814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008150 <_vfiprintf_r>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	460d      	mov	r5, r1
 8008156:	b09d      	sub	sp, #116	@ 0x74
 8008158:	4614      	mov	r4, r2
 800815a:	4698      	mov	r8, r3
 800815c:	4606      	mov	r6, r0
 800815e:	b118      	cbz	r0, 8008168 <_vfiprintf_r+0x18>
 8008160:	6a03      	ldr	r3, [r0, #32]
 8008162:	b90b      	cbnz	r3, 8008168 <_vfiprintf_r+0x18>
 8008164:	f7ff fc86 	bl	8007a74 <__sinit>
 8008168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800816a:	07d9      	lsls	r1, r3, #31
 800816c:	d405      	bmi.n	800817a <_vfiprintf_r+0x2a>
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	059a      	lsls	r2, r3, #22
 8008172:	d402      	bmi.n	800817a <_vfiprintf_r+0x2a>
 8008174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008176:	f7ff fdcc 	bl	8007d12 <__retarget_lock_acquire_recursive>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	071b      	lsls	r3, r3, #28
 800817e:	d501      	bpl.n	8008184 <_vfiprintf_r+0x34>
 8008180:	692b      	ldr	r3, [r5, #16]
 8008182:	b99b      	cbnz	r3, 80081ac <_vfiprintf_r+0x5c>
 8008184:	4629      	mov	r1, r5
 8008186:	4630      	mov	r0, r6
 8008188:	f000 fac6 	bl	8008718 <__swsetup_r>
 800818c:	b170      	cbz	r0, 80081ac <_vfiprintf_r+0x5c>
 800818e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008190:	07dc      	lsls	r4, r3, #31
 8008192:	d504      	bpl.n	800819e <_vfiprintf_r+0x4e>
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	b01d      	add	sp, #116	@ 0x74
 800819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	0598      	lsls	r0, r3, #22
 80081a2:	d4f7      	bmi.n	8008194 <_vfiprintf_r+0x44>
 80081a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081a6:	f7ff fdb5 	bl	8007d14 <__retarget_lock_release_recursive>
 80081aa:	e7f3      	b.n	8008194 <_vfiprintf_r+0x44>
 80081ac:	2300      	movs	r3, #0
 80081ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b0:	2320      	movs	r3, #32
 80081b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ba:	2330      	movs	r3, #48	@ 0x30
 80081bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800836c <_vfiprintf_r+0x21c>
 80081c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081c4:	f04f 0901 	mov.w	r9, #1
 80081c8:	4623      	mov	r3, r4
 80081ca:	469a      	mov	sl, r3
 80081cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d0:	b10a      	cbz	r2, 80081d6 <_vfiprintf_r+0x86>
 80081d2:	2a25      	cmp	r2, #37	@ 0x25
 80081d4:	d1f9      	bne.n	80081ca <_vfiprintf_r+0x7a>
 80081d6:	ebba 0b04 	subs.w	fp, sl, r4
 80081da:	d00b      	beq.n	80081f4 <_vfiprintf_r+0xa4>
 80081dc:	465b      	mov	r3, fp
 80081de:	4622      	mov	r2, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ffa2 	bl	800812c <__sfputs_r>
 80081e8:	3001      	adds	r0, #1
 80081ea:	f000 80a7 	beq.w	800833c <_vfiprintf_r+0x1ec>
 80081ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f0:	445a      	add	r2, fp
 80081f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80081f4:	f89a 3000 	ldrb.w	r3, [sl]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 809f 	beq.w	800833c <_vfiprintf_r+0x1ec>
 80081fe:	2300      	movs	r3, #0
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008208:	f10a 0a01 	add.w	sl, sl, #1
 800820c:	9304      	str	r3, [sp, #16]
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008214:	931a      	str	r3, [sp, #104]	@ 0x68
 8008216:	4654      	mov	r4, sl
 8008218:	2205      	movs	r2, #5
 800821a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821e:	4853      	ldr	r0, [pc, #332]	@ (800836c <_vfiprintf_r+0x21c>)
 8008220:	f7f8 f80e 	bl	8000240 <memchr>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	b9d8      	cbnz	r0, 8008260 <_vfiprintf_r+0x110>
 8008228:	06d1      	lsls	r1, r2, #27
 800822a:	bf44      	itt	mi
 800822c:	2320      	movmi	r3, #32
 800822e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008232:	0713      	lsls	r3, r2, #28
 8008234:	bf44      	itt	mi
 8008236:	232b      	movmi	r3, #43	@ 0x2b
 8008238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800823c:	f89a 3000 	ldrb.w	r3, [sl]
 8008240:	2b2a      	cmp	r3, #42	@ 0x2a
 8008242:	d015      	beq.n	8008270 <_vfiprintf_r+0x120>
 8008244:	9a07      	ldr	r2, [sp, #28]
 8008246:	4654      	mov	r4, sl
 8008248:	2000      	movs	r0, #0
 800824a:	f04f 0c0a 	mov.w	ip, #10
 800824e:	4621      	mov	r1, r4
 8008250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008254:	3b30      	subs	r3, #48	@ 0x30
 8008256:	2b09      	cmp	r3, #9
 8008258:	d94b      	bls.n	80082f2 <_vfiprintf_r+0x1a2>
 800825a:	b1b0      	cbz	r0, 800828a <_vfiprintf_r+0x13a>
 800825c:	9207      	str	r2, [sp, #28]
 800825e:	e014      	b.n	800828a <_vfiprintf_r+0x13a>
 8008260:	eba0 0308 	sub.w	r3, r0, r8
 8008264:	fa09 f303 	lsl.w	r3, r9, r3
 8008268:	4313      	orrs	r3, r2
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	46a2      	mov	sl, r4
 800826e:	e7d2      	b.n	8008216 <_vfiprintf_r+0xc6>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	1d19      	adds	r1, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	9103      	str	r1, [sp, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bfbb      	ittet	lt
 800827c:	425b      	neglt	r3, r3
 800827e:	f042 0202 	orrlt.w	r2, r2, #2
 8008282:	9307      	strge	r3, [sp, #28]
 8008284:	9307      	strlt	r3, [sp, #28]
 8008286:	bfb8      	it	lt
 8008288:	9204      	strlt	r2, [sp, #16]
 800828a:	7823      	ldrb	r3, [r4, #0]
 800828c:	2b2e      	cmp	r3, #46	@ 0x2e
 800828e:	d10a      	bne.n	80082a6 <_vfiprintf_r+0x156>
 8008290:	7863      	ldrb	r3, [r4, #1]
 8008292:	2b2a      	cmp	r3, #42	@ 0x2a
 8008294:	d132      	bne.n	80082fc <_vfiprintf_r+0x1ac>
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	1d1a      	adds	r2, r3, #4
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	9203      	str	r2, [sp, #12]
 800829e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082a2:	3402      	adds	r4, #2
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800837c <_vfiprintf_r+0x22c>
 80082aa:	7821      	ldrb	r1, [r4, #0]
 80082ac:	2203      	movs	r2, #3
 80082ae:	4650      	mov	r0, sl
 80082b0:	f7f7 ffc6 	bl	8000240 <memchr>
 80082b4:	b138      	cbz	r0, 80082c6 <_vfiprintf_r+0x176>
 80082b6:	9b04      	ldr	r3, [sp, #16]
 80082b8:	eba0 000a 	sub.w	r0, r0, sl
 80082bc:	2240      	movs	r2, #64	@ 0x40
 80082be:	4082      	lsls	r2, r0
 80082c0:	4313      	orrs	r3, r2
 80082c2:	3401      	adds	r4, #1
 80082c4:	9304      	str	r3, [sp, #16]
 80082c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ca:	4829      	ldr	r0, [pc, #164]	@ (8008370 <_vfiprintf_r+0x220>)
 80082cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082d0:	2206      	movs	r2, #6
 80082d2:	f7f7 ffb5 	bl	8000240 <memchr>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d03f      	beq.n	800835a <_vfiprintf_r+0x20a>
 80082da:	4b26      	ldr	r3, [pc, #152]	@ (8008374 <_vfiprintf_r+0x224>)
 80082dc:	bb1b      	cbnz	r3, 8008326 <_vfiprintf_r+0x1d6>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	3307      	adds	r3, #7
 80082e2:	f023 0307 	bic.w	r3, r3, #7
 80082e6:	3308      	adds	r3, #8
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ec:	443b      	add	r3, r7
 80082ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f0:	e76a      	b.n	80081c8 <_vfiprintf_r+0x78>
 80082f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082f6:	460c      	mov	r4, r1
 80082f8:	2001      	movs	r0, #1
 80082fa:	e7a8      	b.n	800824e <_vfiprintf_r+0xfe>
 80082fc:	2300      	movs	r3, #0
 80082fe:	3401      	adds	r4, #1
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	4619      	mov	r1, r3
 8008304:	f04f 0c0a 	mov.w	ip, #10
 8008308:	4620      	mov	r0, r4
 800830a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800830e:	3a30      	subs	r2, #48	@ 0x30
 8008310:	2a09      	cmp	r2, #9
 8008312:	d903      	bls.n	800831c <_vfiprintf_r+0x1cc>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0c6      	beq.n	80082a6 <_vfiprintf_r+0x156>
 8008318:	9105      	str	r1, [sp, #20]
 800831a:	e7c4      	b.n	80082a6 <_vfiprintf_r+0x156>
 800831c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008320:	4604      	mov	r4, r0
 8008322:	2301      	movs	r3, #1
 8008324:	e7f0      	b.n	8008308 <_vfiprintf_r+0x1b8>
 8008326:	ab03      	add	r3, sp, #12
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	462a      	mov	r2, r5
 800832c:	4b12      	ldr	r3, [pc, #72]	@ (8008378 <_vfiprintf_r+0x228>)
 800832e:	a904      	add	r1, sp, #16
 8008330:	4630      	mov	r0, r6
 8008332:	f3af 8000 	nop.w
 8008336:	4607      	mov	r7, r0
 8008338:	1c78      	adds	r0, r7, #1
 800833a:	d1d6      	bne.n	80082ea <_vfiprintf_r+0x19a>
 800833c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800833e:	07d9      	lsls	r1, r3, #31
 8008340:	d405      	bmi.n	800834e <_vfiprintf_r+0x1fe>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	059a      	lsls	r2, r3, #22
 8008346:	d402      	bmi.n	800834e <_vfiprintf_r+0x1fe>
 8008348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800834a:	f7ff fce3 	bl	8007d14 <__retarget_lock_release_recursive>
 800834e:	89ab      	ldrh	r3, [r5, #12]
 8008350:	065b      	lsls	r3, r3, #25
 8008352:	f53f af1f 	bmi.w	8008194 <_vfiprintf_r+0x44>
 8008356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008358:	e71e      	b.n	8008198 <_vfiprintf_r+0x48>
 800835a:	ab03      	add	r3, sp, #12
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	462a      	mov	r2, r5
 8008360:	4b05      	ldr	r3, [pc, #20]	@ (8008378 <_vfiprintf_r+0x228>)
 8008362:	a904      	add	r1, sp, #16
 8008364:	4630      	mov	r0, r6
 8008366:	f000 f879 	bl	800845c <_printf_i>
 800836a:	e7e4      	b.n	8008336 <_vfiprintf_r+0x1e6>
 800836c:	08008c2d 	.word	0x08008c2d
 8008370:	08008c37 	.word	0x08008c37
 8008374:	00000000 	.word	0x00000000
 8008378:	0800812d 	.word	0x0800812d
 800837c:	08008c33 	.word	0x08008c33

08008380 <_printf_common>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	4616      	mov	r6, r2
 8008386:	4698      	mov	r8, r3
 8008388:	688a      	ldr	r2, [r1, #8]
 800838a:	690b      	ldr	r3, [r1, #16]
 800838c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008390:	4293      	cmp	r3, r2
 8008392:	bfb8      	it	lt
 8008394:	4613      	movlt	r3, r2
 8008396:	6033      	str	r3, [r6, #0]
 8008398:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800839c:	4607      	mov	r7, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b10a      	cbz	r2, 80083a6 <_printf_common+0x26>
 80083a2:	3301      	adds	r3, #1
 80083a4:	6033      	str	r3, [r6, #0]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	0699      	lsls	r1, r3, #26
 80083aa:	bf42      	ittt	mi
 80083ac:	6833      	ldrmi	r3, [r6, #0]
 80083ae:	3302      	addmi	r3, #2
 80083b0:	6033      	strmi	r3, [r6, #0]
 80083b2:	6825      	ldr	r5, [r4, #0]
 80083b4:	f015 0506 	ands.w	r5, r5, #6
 80083b8:	d106      	bne.n	80083c8 <_printf_common+0x48>
 80083ba:	f104 0a19 	add.w	sl, r4, #25
 80083be:	68e3      	ldr	r3, [r4, #12]
 80083c0:	6832      	ldr	r2, [r6, #0]
 80083c2:	1a9b      	subs	r3, r3, r2
 80083c4:	42ab      	cmp	r3, r5
 80083c6:	dc26      	bgt.n	8008416 <_printf_common+0x96>
 80083c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083cc:	6822      	ldr	r2, [r4, #0]
 80083ce:	3b00      	subs	r3, #0
 80083d0:	bf18      	it	ne
 80083d2:	2301      	movne	r3, #1
 80083d4:	0692      	lsls	r2, r2, #26
 80083d6:	d42b      	bmi.n	8008430 <_printf_common+0xb0>
 80083d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083dc:	4641      	mov	r1, r8
 80083de:	4638      	mov	r0, r7
 80083e0:	47c8      	blx	r9
 80083e2:	3001      	adds	r0, #1
 80083e4:	d01e      	beq.n	8008424 <_printf_common+0xa4>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	6922      	ldr	r2, [r4, #16]
 80083ea:	f003 0306 	and.w	r3, r3, #6
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	bf02      	ittt	eq
 80083f2:	68e5      	ldreq	r5, [r4, #12]
 80083f4:	6833      	ldreq	r3, [r6, #0]
 80083f6:	1aed      	subeq	r5, r5, r3
 80083f8:	68a3      	ldr	r3, [r4, #8]
 80083fa:	bf0c      	ite	eq
 80083fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008400:	2500      	movne	r5, #0
 8008402:	4293      	cmp	r3, r2
 8008404:	bfc4      	itt	gt
 8008406:	1a9b      	subgt	r3, r3, r2
 8008408:	18ed      	addgt	r5, r5, r3
 800840a:	2600      	movs	r6, #0
 800840c:	341a      	adds	r4, #26
 800840e:	42b5      	cmp	r5, r6
 8008410:	d11a      	bne.n	8008448 <_printf_common+0xc8>
 8008412:	2000      	movs	r0, #0
 8008414:	e008      	b.n	8008428 <_printf_common+0xa8>
 8008416:	2301      	movs	r3, #1
 8008418:	4652      	mov	r2, sl
 800841a:	4641      	mov	r1, r8
 800841c:	4638      	mov	r0, r7
 800841e:	47c8      	blx	r9
 8008420:	3001      	adds	r0, #1
 8008422:	d103      	bne.n	800842c <_printf_common+0xac>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842c:	3501      	adds	r5, #1
 800842e:	e7c6      	b.n	80083be <_printf_common+0x3e>
 8008430:	18e1      	adds	r1, r4, r3
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	2030      	movs	r0, #48	@ 0x30
 8008436:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800843a:	4422      	add	r2, r4
 800843c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008440:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008444:	3302      	adds	r3, #2
 8008446:	e7c7      	b.n	80083d8 <_printf_common+0x58>
 8008448:	2301      	movs	r3, #1
 800844a:	4622      	mov	r2, r4
 800844c:	4641      	mov	r1, r8
 800844e:	4638      	mov	r0, r7
 8008450:	47c8      	blx	r9
 8008452:	3001      	adds	r0, #1
 8008454:	d0e6      	beq.n	8008424 <_printf_common+0xa4>
 8008456:	3601      	adds	r6, #1
 8008458:	e7d9      	b.n	800840e <_printf_common+0x8e>
	...

0800845c <_printf_i>:
 800845c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	7e0f      	ldrb	r7, [r1, #24]
 8008462:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008464:	2f78      	cmp	r7, #120	@ 0x78
 8008466:	4691      	mov	r9, r2
 8008468:	4680      	mov	r8, r0
 800846a:	460c      	mov	r4, r1
 800846c:	469a      	mov	sl, r3
 800846e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008472:	d807      	bhi.n	8008484 <_printf_i+0x28>
 8008474:	2f62      	cmp	r7, #98	@ 0x62
 8008476:	d80a      	bhi.n	800848e <_printf_i+0x32>
 8008478:	2f00      	cmp	r7, #0
 800847a:	f000 80d2 	beq.w	8008622 <_printf_i+0x1c6>
 800847e:	2f58      	cmp	r7, #88	@ 0x58
 8008480:	f000 80b9 	beq.w	80085f6 <_printf_i+0x19a>
 8008484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008488:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800848c:	e03a      	b.n	8008504 <_printf_i+0xa8>
 800848e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008492:	2b15      	cmp	r3, #21
 8008494:	d8f6      	bhi.n	8008484 <_printf_i+0x28>
 8008496:	a101      	add	r1, pc, #4	@ (adr r1, 800849c <_printf_i+0x40>)
 8008498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800849c:	080084f5 	.word	0x080084f5
 80084a0:	08008509 	.word	0x08008509
 80084a4:	08008485 	.word	0x08008485
 80084a8:	08008485 	.word	0x08008485
 80084ac:	08008485 	.word	0x08008485
 80084b0:	08008485 	.word	0x08008485
 80084b4:	08008509 	.word	0x08008509
 80084b8:	08008485 	.word	0x08008485
 80084bc:	08008485 	.word	0x08008485
 80084c0:	08008485 	.word	0x08008485
 80084c4:	08008485 	.word	0x08008485
 80084c8:	08008609 	.word	0x08008609
 80084cc:	08008533 	.word	0x08008533
 80084d0:	080085c3 	.word	0x080085c3
 80084d4:	08008485 	.word	0x08008485
 80084d8:	08008485 	.word	0x08008485
 80084dc:	0800862b 	.word	0x0800862b
 80084e0:	08008485 	.word	0x08008485
 80084e4:	08008533 	.word	0x08008533
 80084e8:	08008485 	.word	0x08008485
 80084ec:	08008485 	.word	0x08008485
 80084f0:	080085cb 	.word	0x080085cb
 80084f4:	6833      	ldr	r3, [r6, #0]
 80084f6:	1d1a      	adds	r2, r3, #4
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6032      	str	r2, [r6, #0]
 80084fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008500:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008504:	2301      	movs	r3, #1
 8008506:	e09d      	b.n	8008644 <_printf_i+0x1e8>
 8008508:	6833      	ldr	r3, [r6, #0]
 800850a:	6820      	ldr	r0, [r4, #0]
 800850c:	1d19      	adds	r1, r3, #4
 800850e:	6031      	str	r1, [r6, #0]
 8008510:	0606      	lsls	r6, r0, #24
 8008512:	d501      	bpl.n	8008518 <_printf_i+0xbc>
 8008514:	681d      	ldr	r5, [r3, #0]
 8008516:	e003      	b.n	8008520 <_printf_i+0xc4>
 8008518:	0645      	lsls	r5, r0, #25
 800851a:	d5fb      	bpl.n	8008514 <_printf_i+0xb8>
 800851c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008520:	2d00      	cmp	r5, #0
 8008522:	da03      	bge.n	800852c <_printf_i+0xd0>
 8008524:	232d      	movs	r3, #45	@ 0x2d
 8008526:	426d      	negs	r5, r5
 8008528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800852c:	4859      	ldr	r0, [pc, #356]	@ (8008694 <_printf_i+0x238>)
 800852e:	230a      	movs	r3, #10
 8008530:	e011      	b.n	8008556 <_printf_i+0xfa>
 8008532:	6821      	ldr	r1, [r4, #0]
 8008534:	6833      	ldr	r3, [r6, #0]
 8008536:	0608      	lsls	r0, r1, #24
 8008538:	f853 5b04 	ldr.w	r5, [r3], #4
 800853c:	d402      	bmi.n	8008544 <_printf_i+0xe8>
 800853e:	0649      	lsls	r1, r1, #25
 8008540:	bf48      	it	mi
 8008542:	b2ad      	uxthmi	r5, r5
 8008544:	2f6f      	cmp	r7, #111	@ 0x6f
 8008546:	4853      	ldr	r0, [pc, #332]	@ (8008694 <_printf_i+0x238>)
 8008548:	6033      	str	r3, [r6, #0]
 800854a:	bf14      	ite	ne
 800854c:	230a      	movne	r3, #10
 800854e:	2308      	moveq	r3, #8
 8008550:	2100      	movs	r1, #0
 8008552:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008556:	6866      	ldr	r6, [r4, #4]
 8008558:	60a6      	str	r6, [r4, #8]
 800855a:	2e00      	cmp	r6, #0
 800855c:	bfa2      	ittt	ge
 800855e:	6821      	ldrge	r1, [r4, #0]
 8008560:	f021 0104 	bicge.w	r1, r1, #4
 8008564:	6021      	strge	r1, [r4, #0]
 8008566:	b90d      	cbnz	r5, 800856c <_printf_i+0x110>
 8008568:	2e00      	cmp	r6, #0
 800856a:	d04b      	beq.n	8008604 <_printf_i+0x1a8>
 800856c:	4616      	mov	r6, r2
 800856e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008572:	fb03 5711 	mls	r7, r3, r1, r5
 8008576:	5dc7      	ldrb	r7, [r0, r7]
 8008578:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800857c:	462f      	mov	r7, r5
 800857e:	42bb      	cmp	r3, r7
 8008580:	460d      	mov	r5, r1
 8008582:	d9f4      	bls.n	800856e <_printf_i+0x112>
 8008584:	2b08      	cmp	r3, #8
 8008586:	d10b      	bne.n	80085a0 <_printf_i+0x144>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	07df      	lsls	r7, r3, #31
 800858c:	d508      	bpl.n	80085a0 <_printf_i+0x144>
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	6861      	ldr	r1, [r4, #4]
 8008592:	4299      	cmp	r1, r3
 8008594:	bfde      	ittt	le
 8008596:	2330      	movle	r3, #48	@ 0x30
 8008598:	f806 3c01 	strble.w	r3, [r6, #-1]
 800859c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085a0:	1b92      	subs	r2, r2, r6
 80085a2:	6122      	str	r2, [r4, #16]
 80085a4:	f8cd a000 	str.w	sl, [sp]
 80085a8:	464b      	mov	r3, r9
 80085aa:	aa03      	add	r2, sp, #12
 80085ac:	4621      	mov	r1, r4
 80085ae:	4640      	mov	r0, r8
 80085b0:	f7ff fee6 	bl	8008380 <_printf_common>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d14a      	bne.n	800864e <_printf_i+0x1f2>
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	b004      	add	sp, #16
 80085be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f043 0320 	orr.w	r3, r3, #32
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	4833      	ldr	r0, [pc, #204]	@ (8008698 <_printf_i+0x23c>)
 80085cc:	2778      	movs	r7, #120	@ 0x78
 80085ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	6831      	ldr	r1, [r6, #0]
 80085d6:	061f      	lsls	r7, r3, #24
 80085d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80085dc:	d402      	bmi.n	80085e4 <_printf_i+0x188>
 80085de:	065f      	lsls	r7, r3, #25
 80085e0:	bf48      	it	mi
 80085e2:	b2ad      	uxthmi	r5, r5
 80085e4:	6031      	str	r1, [r6, #0]
 80085e6:	07d9      	lsls	r1, r3, #31
 80085e8:	bf44      	itt	mi
 80085ea:	f043 0320 	orrmi.w	r3, r3, #32
 80085ee:	6023      	strmi	r3, [r4, #0]
 80085f0:	b11d      	cbz	r5, 80085fa <_printf_i+0x19e>
 80085f2:	2310      	movs	r3, #16
 80085f4:	e7ac      	b.n	8008550 <_printf_i+0xf4>
 80085f6:	4827      	ldr	r0, [pc, #156]	@ (8008694 <_printf_i+0x238>)
 80085f8:	e7e9      	b.n	80085ce <_printf_i+0x172>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	f023 0320 	bic.w	r3, r3, #32
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	e7f6      	b.n	80085f2 <_printf_i+0x196>
 8008604:	4616      	mov	r6, r2
 8008606:	e7bd      	b.n	8008584 <_printf_i+0x128>
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	6825      	ldr	r5, [r4, #0]
 800860c:	6961      	ldr	r1, [r4, #20]
 800860e:	1d18      	adds	r0, r3, #4
 8008610:	6030      	str	r0, [r6, #0]
 8008612:	062e      	lsls	r6, r5, #24
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	d501      	bpl.n	800861c <_printf_i+0x1c0>
 8008618:	6019      	str	r1, [r3, #0]
 800861a:	e002      	b.n	8008622 <_printf_i+0x1c6>
 800861c:	0668      	lsls	r0, r5, #25
 800861e:	d5fb      	bpl.n	8008618 <_printf_i+0x1bc>
 8008620:	8019      	strh	r1, [r3, #0]
 8008622:	2300      	movs	r3, #0
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	4616      	mov	r6, r2
 8008628:	e7bc      	b.n	80085a4 <_printf_i+0x148>
 800862a:	6833      	ldr	r3, [r6, #0]
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	6032      	str	r2, [r6, #0]
 8008630:	681e      	ldr	r6, [r3, #0]
 8008632:	6862      	ldr	r2, [r4, #4]
 8008634:	2100      	movs	r1, #0
 8008636:	4630      	mov	r0, r6
 8008638:	f7f7 fe02 	bl	8000240 <memchr>
 800863c:	b108      	cbz	r0, 8008642 <_printf_i+0x1e6>
 800863e:	1b80      	subs	r0, r0, r6
 8008640:	6060      	str	r0, [r4, #4]
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	2300      	movs	r3, #0
 8008648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800864c:	e7aa      	b.n	80085a4 <_printf_i+0x148>
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	4632      	mov	r2, r6
 8008652:	4649      	mov	r1, r9
 8008654:	4640      	mov	r0, r8
 8008656:	47d0      	blx	sl
 8008658:	3001      	adds	r0, #1
 800865a:	d0ad      	beq.n	80085b8 <_printf_i+0x15c>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	079b      	lsls	r3, r3, #30
 8008660:	d413      	bmi.n	800868a <_printf_i+0x22e>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	4298      	cmp	r0, r3
 8008668:	bfb8      	it	lt
 800866a:	4618      	movlt	r0, r3
 800866c:	e7a6      	b.n	80085bc <_printf_i+0x160>
 800866e:	2301      	movs	r3, #1
 8008670:	4632      	mov	r2, r6
 8008672:	4649      	mov	r1, r9
 8008674:	4640      	mov	r0, r8
 8008676:	47d0      	blx	sl
 8008678:	3001      	adds	r0, #1
 800867a:	d09d      	beq.n	80085b8 <_printf_i+0x15c>
 800867c:	3501      	adds	r5, #1
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	9903      	ldr	r1, [sp, #12]
 8008682:	1a5b      	subs	r3, r3, r1
 8008684:	42ab      	cmp	r3, r5
 8008686:	dcf2      	bgt.n	800866e <_printf_i+0x212>
 8008688:	e7eb      	b.n	8008662 <_printf_i+0x206>
 800868a:	2500      	movs	r5, #0
 800868c:	f104 0619 	add.w	r6, r4, #25
 8008690:	e7f5      	b.n	800867e <_printf_i+0x222>
 8008692:	bf00      	nop
 8008694:	08008c3e 	.word	0x08008c3e
 8008698:	08008c4f 	.word	0x08008c4f

0800869c <__swbuf_r>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	460e      	mov	r6, r1
 80086a0:	4614      	mov	r4, r2
 80086a2:	4605      	mov	r5, r0
 80086a4:	b118      	cbz	r0, 80086ae <__swbuf_r+0x12>
 80086a6:	6a03      	ldr	r3, [r0, #32]
 80086a8:	b90b      	cbnz	r3, 80086ae <__swbuf_r+0x12>
 80086aa:	f7ff f9e3 	bl	8007a74 <__sinit>
 80086ae:	69a3      	ldr	r3, [r4, #24]
 80086b0:	60a3      	str	r3, [r4, #8]
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	071a      	lsls	r2, r3, #28
 80086b6:	d501      	bpl.n	80086bc <__swbuf_r+0x20>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	b943      	cbnz	r3, 80086ce <__swbuf_r+0x32>
 80086bc:	4621      	mov	r1, r4
 80086be:	4628      	mov	r0, r5
 80086c0:	f000 f82a 	bl	8008718 <__swsetup_r>
 80086c4:	b118      	cbz	r0, 80086ce <__swbuf_r+0x32>
 80086c6:	f04f 37ff 	mov.w	r7, #4294967295
 80086ca:	4638      	mov	r0, r7
 80086cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	1a98      	subs	r0, r3, r2
 80086d4:	6963      	ldr	r3, [r4, #20]
 80086d6:	b2f6      	uxtb	r6, r6
 80086d8:	4283      	cmp	r3, r0
 80086da:	4637      	mov	r7, r6
 80086dc:	dc05      	bgt.n	80086ea <__swbuf_r+0x4e>
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f7ff fcbb 	bl	800805c <_fflush_r>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d1ed      	bne.n	80086c6 <__swbuf_r+0x2a>
 80086ea:	68a3      	ldr	r3, [r4, #8]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	60a3      	str	r3, [r4, #8]
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	6022      	str	r2, [r4, #0]
 80086f6:	701e      	strb	r6, [r3, #0]
 80086f8:	6962      	ldr	r2, [r4, #20]
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d004      	beq.n	800870a <__swbuf_r+0x6e>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	07db      	lsls	r3, r3, #31
 8008704:	d5e1      	bpl.n	80086ca <__swbuf_r+0x2e>
 8008706:	2e0a      	cmp	r6, #10
 8008708:	d1df      	bne.n	80086ca <__swbuf_r+0x2e>
 800870a:	4621      	mov	r1, r4
 800870c:	4628      	mov	r0, r5
 800870e:	f7ff fca5 	bl	800805c <_fflush_r>
 8008712:	2800      	cmp	r0, #0
 8008714:	d0d9      	beq.n	80086ca <__swbuf_r+0x2e>
 8008716:	e7d6      	b.n	80086c6 <__swbuf_r+0x2a>

08008718 <__swsetup_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4b29      	ldr	r3, [pc, #164]	@ (80087c0 <__swsetup_r+0xa8>)
 800871c:	4605      	mov	r5, r0
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	460c      	mov	r4, r1
 8008722:	b118      	cbz	r0, 800872c <__swsetup_r+0x14>
 8008724:	6a03      	ldr	r3, [r0, #32]
 8008726:	b90b      	cbnz	r3, 800872c <__swsetup_r+0x14>
 8008728:	f7ff f9a4 	bl	8007a74 <__sinit>
 800872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008730:	0719      	lsls	r1, r3, #28
 8008732:	d422      	bmi.n	800877a <__swsetup_r+0x62>
 8008734:	06da      	lsls	r2, r3, #27
 8008736:	d407      	bmi.n	8008748 <__swsetup_r+0x30>
 8008738:	2209      	movs	r2, #9
 800873a:	602a      	str	r2, [r5, #0]
 800873c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	f04f 30ff 	mov.w	r0, #4294967295
 8008746:	e033      	b.n	80087b0 <__swsetup_r+0x98>
 8008748:	0758      	lsls	r0, r3, #29
 800874a:	d512      	bpl.n	8008772 <__swsetup_r+0x5a>
 800874c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800874e:	b141      	cbz	r1, 8008762 <__swsetup_r+0x4a>
 8008750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008754:	4299      	cmp	r1, r3
 8008756:	d002      	beq.n	800875e <__swsetup_r+0x46>
 8008758:	4628      	mov	r0, r5
 800875a:	f7ff fafb 	bl	8007d54 <_free_r>
 800875e:	2300      	movs	r3, #0
 8008760:	6363      	str	r3, [r4, #52]	@ 0x34
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	2300      	movs	r3, #0
 800876c:	6063      	str	r3, [r4, #4]
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f043 0308 	orr.w	r3, r3, #8
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	b94b      	cbnz	r3, 8008792 <__swsetup_r+0x7a>
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008788:	d003      	beq.n	8008792 <__swsetup_r+0x7a>
 800878a:	4621      	mov	r1, r4
 800878c:	4628      	mov	r0, r5
 800878e:	f000 f883 	bl	8008898 <__smakebuf_r>
 8008792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008796:	f013 0201 	ands.w	r2, r3, #1
 800879a:	d00a      	beq.n	80087b2 <__swsetup_r+0x9a>
 800879c:	2200      	movs	r2, #0
 800879e:	60a2      	str	r2, [r4, #8]
 80087a0:	6962      	ldr	r2, [r4, #20]
 80087a2:	4252      	negs	r2, r2
 80087a4:	61a2      	str	r2, [r4, #24]
 80087a6:	6922      	ldr	r2, [r4, #16]
 80087a8:	b942      	cbnz	r2, 80087bc <__swsetup_r+0xa4>
 80087aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087ae:	d1c5      	bne.n	800873c <__swsetup_r+0x24>
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	0799      	lsls	r1, r3, #30
 80087b4:	bf58      	it	pl
 80087b6:	6962      	ldrpl	r2, [r4, #20]
 80087b8:	60a2      	str	r2, [r4, #8]
 80087ba:	e7f4      	b.n	80087a6 <__swsetup_r+0x8e>
 80087bc:	2000      	movs	r0, #0
 80087be:	e7f7      	b.n	80087b0 <__swsetup_r+0x98>
 80087c0:	20000018 	.word	0x20000018

080087c4 <_raise_r>:
 80087c4:	291f      	cmp	r1, #31
 80087c6:	b538      	push	{r3, r4, r5, lr}
 80087c8:	4605      	mov	r5, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	d904      	bls.n	80087d8 <_raise_r+0x14>
 80087ce:	2316      	movs	r3, #22
 80087d0:	6003      	str	r3, [r0, #0]
 80087d2:	f04f 30ff 	mov.w	r0, #4294967295
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087da:	b112      	cbz	r2, 80087e2 <_raise_r+0x1e>
 80087dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087e0:	b94b      	cbnz	r3, 80087f6 <_raise_r+0x32>
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f830 	bl	8008848 <_getpid_r>
 80087e8:	4622      	mov	r2, r4
 80087ea:	4601      	mov	r1, r0
 80087ec:	4628      	mov	r0, r5
 80087ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f2:	f000 b817 	b.w	8008824 <_kill_r>
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d00a      	beq.n	8008810 <_raise_r+0x4c>
 80087fa:	1c59      	adds	r1, r3, #1
 80087fc:	d103      	bne.n	8008806 <_raise_r+0x42>
 80087fe:	2316      	movs	r3, #22
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	2001      	movs	r0, #1
 8008804:	e7e7      	b.n	80087d6 <_raise_r+0x12>
 8008806:	2100      	movs	r1, #0
 8008808:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800880c:	4620      	mov	r0, r4
 800880e:	4798      	blx	r3
 8008810:	2000      	movs	r0, #0
 8008812:	e7e0      	b.n	80087d6 <_raise_r+0x12>

08008814 <raise>:
 8008814:	4b02      	ldr	r3, [pc, #8]	@ (8008820 <raise+0xc>)
 8008816:	4601      	mov	r1, r0
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	f7ff bfd3 	b.w	80087c4 <_raise_r>
 800881e:	bf00      	nop
 8008820:	20000018 	.word	0x20000018

08008824 <_kill_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d07      	ldr	r5, [pc, #28]	@ (8008844 <_kill_r+0x20>)
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	4611      	mov	r1, r2
 8008830:	602b      	str	r3, [r5, #0]
 8008832:	f7f8 fbeb 	bl	800100c <_kill>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d102      	bne.n	8008840 <_kill_r+0x1c>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	b103      	cbz	r3, 8008840 <_kill_r+0x1c>
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	bf00      	nop
 8008844:	2000053c 	.word	0x2000053c

08008848 <_getpid_r>:
 8008848:	f7f8 bbd8 	b.w	8000ffc <_getpid>

0800884c <__swhatbuf_r>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	460c      	mov	r4, r1
 8008850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008854:	2900      	cmp	r1, #0
 8008856:	b096      	sub	sp, #88	@ 0x58
 8008858:	4615      	mov	r5, r2
 800885a:	461e      	mov	r6, r3
 800885c:	da0d      	bge.n	800887a <__swhatbuf_r+0x2e>
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008864:	f04f 0100 	mov.w	r1, #0
 8008868:	bf14      	ite	ne
 800886a:	2340      	movne	r3, #64	@ 0x40
 800886c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008870:	2000      	movs	r0, #0
 8008872:	6031      	str	r1, [r6, #0]
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	b016      	add	sp, #88	@ 0x58
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	466a      	mov	r2, sp
 800887c:	f000 f848 	bl	8008910 <_fstat_r>
 8008880:	2800      	cmp	r0, #0
 8008882:	dbec      	blt.n	800885e <__swhatbuf_r+0x12>
 8008884:	9901      	ldr	r1, [sp, #4]
 8008886:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800888a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800888e:	4259      	negs	r1, r3
 8008890:	4159      	adcs	r1, r3
 8008892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008896:	e7eb      	b.n	8008870 <__swhatbuf_r+0x24>

08008898 <__smakebuf_r>:
 8008898:	898b      	ldrh	r3, [r1, #12]
 800889a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800889c:	079d      	lsls	r5, r3, #30
 800889e:	4606      	mov	r6, r0
 80088a0:	460c      	mov	r4, r1
 80088a2:	d507      	bpl.n	80088b4 <__smakebuf_r+0x1c>
 80088a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	2301      	movs	r3, #1
 80088ae:	6163      	str	r3, [r4, #20]
 80088b0:	b003      	add	sp, #12
 80088b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b4:	ab01      	add	r3, sp, #4
 80088b6:	466a      	mov	r2, sp
 80088b8:	f7ff ffc8 	bl	800884c <__swhatbuf_r>
 80088bc:	9f00      	ldr	r7, [sp, #0]
 80088be:	4605      	mov	r5, r0
 80088c0:	4639      	mov	r1, r7
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7ff faba 	bl	8007e3c <_malloc_r>
 80088c8:	b948      	cbnz	r0, 80088de <__smakebuf_r+0x46>
 80088ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ce:	059a      	lsls	r2, r3, #22
 80088d0:	d4ee      	bmi.n	80088b0 <__smakebuf_r+0x18>
 80088d2:	f023 0303 	bic.w	r3, r3, #3
 80088d6:	f043 0302 	orr.w	r3, r3, #2
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	e7e2      	b.n	80088a4 <__smakebuf_r+0xc>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	6020      	str	r0, [r4, #0]
 80088e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	9b01      	ldr	r3, [sp, #4]
 80088ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088ee:	b15b      	cbz	r3, 8008908 <__smakebuf_r+0x70>
 80088f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f4:	4630      	mov	r0, r6
 80088f6:	f000 f81d 	bl	8008934 <_isatty_r>
 80088fa:	b128      	cbz	r0, 8008908 <__smakebuf_r+0x70>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	431d      	orrs	r5, r3
 800890c:	81a5      	strh	r5, [r4, #12]
 800890e:	e7cf      	b.n	80088b0 <__smakebuf_r+0x18>

08008910 <_fstat_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	@ (8008930 <_fstat_r+0x20>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	4611      	mov	r1, r2
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	f7f8 fbd5 	bl	80010cc <_fstat>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d102      	bne.n	800892c <_fstat_r+0x1c>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	b103      	cbz	r3, 800892c <_fstat_r+0x1c>
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	bd38      	pop	{r3, r4, r5, pc}
 800892e:	bf00      	nop
 8008930:	2000053c 	.word	0x2000053c

08008934 <_isatty_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d06      	ldr	r5, [pc, #24]	@ (8008950 <_isatty_r+0x1c>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f8 fbd4 	bl	80010ec <_isatty>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_isatty_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_isatty_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	2000053c 	.word	0x2000053c

08008954 <_init>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr

08008960 <_fini>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr
