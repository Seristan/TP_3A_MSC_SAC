
TP_SaC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08009324  08009324  0000a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009758  08009758  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009760  08009760  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009760  08009760  0000a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009764  08009764  0000a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009768  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000068  080097d0  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080097d0  0000b54c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a13a  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034db  00000000  00000000  000251d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  000286b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001108  00000000  00000000  00029cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fe7  00000000  00000000  0002adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aeb9  00000000  00000000  00054d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114721  00000000  00000000  0006fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c4  00000000  00000000  001843bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0018ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800930c 	.word	0x0800930c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800930c 	.word	0x0800930c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2220      	movs	r2, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f007 ff98 	bl	800851e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ee:	4b32      	ldr	r3, [pc, #200]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f6:	4b30      	ldr	r3, [pc, #192]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000618:	2204      	movs	r2, #4
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000622:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800062a:	2201      	movs	r2, #1
 800062c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800065a:	f001 fb9b 	bl	8001d94 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 fc42 	bl	8000eec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000674:	f002 f9b0 	bl	80029d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 fc35 	bl	8000eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_ADC1_Init+0xec>)
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	@ 0x7f
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80006a0:	f001 fd34 	bl	800210c <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 fc1f 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	@ 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000084 	.word	0x20000084
 80006bc:	21800100 	.word	0x21800100

080006c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f007 ff26 	bl	800851e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000784 <MX_ADC2_Init+0xc4>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800073c:	f001 fb2a 	bl	8001d94 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 fbd1 	bl	8000eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_ADC2_Init+0xc8>)
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2306      	movs	r3, #6
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000756:	237f      	movs	r3, #127	@ 0x7f
 8000758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000768:	f001 fcd0 	bl	800210c <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000772:	f000 fbbb 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000f0 	.word	0x200000f0
 8000784:	50000100 	.word	0x50000100
 8000788:	19200040 	.word	0x19200040

0800078c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	@ 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a8:	2254      	movs	r2, #84	@ 0x54
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f007 feb6 	bl	800851e <memset>
  if(adcHandle->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ba:	d174      	bne.n	80008a6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fb7d 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007d8:	f000 fb88 	bl	8000eec <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007dc:	4b63      	ldr	r3, [pc, #396]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a62      	ldr	r2, [pc, #392]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007e6:	4b61      	ldr	r3, [pc, #388]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10b      	bne.n	8000806 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007ee:	4b60      	ldr	r3, [pc, #384]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a5f      	ldr	r2, [pc, #380]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
 8000804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b5a      	ldr	r3, [pc, #360]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a59      	ldr	r2, [pc, #356]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b57      	ldr	r3, [pc, #348]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b54      	ldr	r3, [pc, #336]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a53      	ldr	r2, [pc, #332]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b51      	ldr	r3, [pc, #324]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b4e      	ldr	r3, [pc, #312]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a4d      	ldr	r2, [pc, #308]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b4b      	ldr	r3, [pc, #300]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800084e:	2304      	movs	r3, #4
 8000850:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000862:	4619      	mov	r1, r3
 8000864:	4843      	ldr	r0, [pc, #268]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000866:	f002 fb5f 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800086a:	2302      	movs	r3, #2
 800086c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f002 fb50 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000888:	2303      	movs	r3, #3
 800088a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800089c:	4619      	mov	r1, r3
 800089e:	4836      	ldr	r0, [pc, #216]	@ (8000978 <HAL_ADC_MspInit+0x1ec>)
 80008a0:	f002 fb42 	bl	8002f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008a4:	e05e      	b.n	8000964 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a34      	ldr	r2, [pc, #208]	@ (800097c <HAL_ADC_MspInit+0x1f0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d159      	bne.n	8000964 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 fb03 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008cc:	f000 fb0e 	bl	8000eec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d10b      	bne.n	80008fa <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800092a:	230b      	movs	r3, #11
 800092c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000942:	f002 faf1 	bl	8002f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f002 fae2 	bl	8002f28 <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3790      	adds	r7, #144	@ 0x90
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000015c 	.word	0x2000015c
 8000970:	40021000 	.word	0x40021000
 8000974:	48000800 	.word	0x48000800
 8000978:	48000400 	.word	0x48000400
 800097c:	50000100 	.word	0x50000100

08000980 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a94 <MX_GPIO_Init+0x114>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a38      	ldr	r2, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f002 fc09 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a20:	f002 fc04 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <MX_GPIO_Init+0x11c>)
 8000a3c:	f002 fa74 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f002 fa65 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a76:	f002 fa57 	bl	8002f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f002 f96a 	bl	8002d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	@ 0x28
 8000a86:	f002 f981 	bl	8002d8c <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000c00 	.word	0x48000c00
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /** @brief Tableau des arguments extraits de la commande */
  char* argv[MAX_ARGS];

  /** @brief Nombre d'arguments */
  int argc = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	@ 0x34

  /** @brief Token pour l'analyse de la chaîne */
  char* token;

  /** @brief Flag indiquant qu'une nouvelle commande est prête */
  int newCmdReady = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 ff42 	bl	8001936 <HAL_Init>

  /* USER CODE BEGIN Init */
  idxCmd = 0;
 8000ab2:	4bae      	ldr	r3, [pc, #696]	@ (8000d6c <main+0x2cc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
  memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000ab8:	2240      	movs	r2, #64	@ 0x40
 8000aba:	2100      	movs	r1, #0
 8000abc:	48ac      	ldr	r0, [pc, #688]	@ (8000d70 <main+0x2d0>)
 8000abe:	f007 fd2e 	bl	800851e <memset>
  memset(argv, 0, MAX_ARGS * sizeof(char*));
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2224      	movs	r2, #36	@ 0x24
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fd27 	bl	800851e <memset>
  memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000ad0:	4ba8      	ldr	r3, [pc, #672]	@ (8000d74 <main+0x2d4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 8000ad6:	2240      	movs	r2, #64	@ 0x40
 8000ad8:	2100      	movs	r1, #0
 8000ada:	48a7      	ldr	r0, [pc, #668]	@ (8000d78 <main+0x2d8>)
 8000adc:	f007 fd1f 	bl	800851e <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f974 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f7ff ff4c 	bl	8000980 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ae8:	f7ff fdea 	bl	80006c0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000aec:	f7ff fd70 	bl	80005d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000af0:	f000 fbb6 	bl	8001260 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000af4:	f000 fc88 	bl	8001408 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 fdbc 	bl	8001674 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000afc:	f000 fe06 	bl	800170c <MX_USART3_UART_Init>
  /** @brief Initialisation du timer pour PWM + complémentaires
   * tous les channels sont aussi initialisés
   * config actuel : Rapport cyclique de 50%
   * fréquence de 20 kHz (voir ioc) */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b00:	2100      	movs	r1, #0
 8000b02:	489e      	ldr	r0, [pc, #632]	@ (8000d7c <main+0x2dc>)
 8000b04:	f003 fd62 	bl	80045cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b08:	2104      	movs	r1, #4
 8000b0a:	489c      	ldr	r0, [pc, #624]	@ (8000d7c <main+0x2dc>)
 8000b0c:	f003 fd5e 	bl	80045cc <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000b10:	2100      	movs	r1, #0
 8000b12:	489a      	ldr	r0, [pc, #616]	@ (8000d7c <main+0x2dc>)
 8000b14:	f004 ffd0 	bl	8005ab8 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4898      	ldr	r0, [pc, #608]	@ (8000d7c <main+0x2dc>)
 8000b1c:	f004 ffcc 	bl	8005ab8 <HAL_TIMEx_PWMN_Start>




  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b20:	2201      	movs	r2, #1
 8000b22:	4994      	ldr	r1, [pc, #592]	@ (8000d74 <main+0x2d4>)
 8000b24:	4896      	ldr	r0, [pc, #600]	@ (8000d80 <main+0x2e0>)
 8000b26:	f005 fafd 	bl	8006124 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f000 ff3a 	bl	80019a4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, strlen((char*)started), HAL_MAX_DELAY);
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2265      	movs	r2, #101	@ 0x65
 8000b36:	4993      	ldr	r1, [pc, #588]	@ (8000d84 <main+0x2e4>)
 8000b38:	4891      	ldr	r0, [pc, #580]	@ (8000d80 <main+0x2e0>)
 8000b3a:	f005 fa64 	bl	8006006 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	2217      	movs	r2, #23
 8000b44:	4990      	ldr	r1, [pc, #576]	@ (8000d88 <main+0x2e8>)
 8000b46:	488e      	ldr	r0, [pc, #568]	@ (8000d80 <main+0x2e0>)
 8000b48:	f005 fa5d 	bl	8006006 <HAL_UART_Transmit>
  while (1)
  {
	/**
	   * @brief Vérifie si un caractère a été reçu sur l'UART.
	   */
    if (uartRxReceived)
 8000b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8000d8c <main+0x2ec>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 8086 	beq.w	8000c62 <main+0x1c2>
    {
      uint8_t receivedChar = uartRxBuffer[0];
 8000b56:	4b87      	ldr	r3, [pc, #540]	@ (8000d74 <main+0x2d4>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
      /**
        * @brief Écho du caractère reçu sur l'UART.
        */
      HAL_UART_Transmit(&huart2, &receivedChar, 1, HAL_MAX_DELAY);
 8000b5c:	1df9      	adds	r1, r7, #7
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	2201      	movs	r2, #1
 8000b64:	4886      	ldr	r0, [pc, #536]	@ (8000d80 <main+0x2e0>)
 8000b66:	f005 fa4e 	bl	8006006 <HAL_UART_Transmit>

      /**
        * @brief Traitement du caractère reçu.
        */
      switch (receivedChar)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b6e:	d033      	beq.n	8000bd8 <main+0x138>
 8000b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b72:	dc49      	bgt.n	8000c08 <main+0x168>
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d001      	beq.n	8000b7c <main+0xdc>
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	d145      	bne.n	8000c08 <main+0x168>
      /**
         * @brief Cas du retour chariot ou du saut de ligne : traite la commande entrée.
         */
        case ASCII_CR:
        case ASCII_LF:
          HAL_UART_Transmit(&huart2, newLine, strlen((char*)newLine), HAL_MAX_DELAY);
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2202      	movs	r2, #2
 8000b82:	4983      	ldr	r1, [pc, #524]	@ (8000d90 <main+0x2f0>)
 8000b84:	487e      	ldr	r0, [pc, #504]	@ (8000d80 <main+0x2e0>)
 8000b86:	f005 fa3e 	bl	8006006 <HAL_UART_Transmit>
          cmd[idxCmd] = '\0';
 8000b8a:	4b78      	ldr	r3, [pc, #480]	@ (8000d6c <main+0x2cc>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a78      	ldr	r2, [pc, #480]	@ (8000d70 <main+0x2d0>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	54d1      	strb	r1, [r2, r3]
          argc = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
          token = strtok(cmd, " ");
 8000b98:	497e      	ldr	r1, [pc, #504]	@ (8000d94 <main+0x2f4>)
 8000b9a:	4875      	ldr	r0, [pc, #468]	@ (8000d70 <main+0x2d0>)
 8000b9c:	f007 fcc8 	bl	8008530 <strtok>
 8000ba0:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000ba2:	e00d      	b.n	8000bc0 <main+0x120>
          {
            argv[argc++] = token;
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	637a      	str	r2, [r7, #52]	@ 0x34
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	3338      	adds	r3, #56	@ 0x38
 8000bae:	443b      	add	r3, r7
 8000bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bb2:	f843 2c30 	str.w	r2, [r3, #-48]
            token = strtok(NULL, " ");
 8000bb6:	4977      	ldr	r1, [pc, #476]	@ (8000d94 <main+0x2f4>)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f007 fcb9 	bl	8008530 <strtok>
 8000bbe:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <main+0x12c>
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	ddeb      	ble.n	8000ba4 <main+0x104>
          }

          idxCmd = 0;
 8000bcc:	4b67      	ldr	r3, [pc, #412]	@ (8000d6c <main+0x2cc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
          newCmdReady = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8000bd6:	e03c      	b.n	8000c52 <main+0x1b2>
          /**
              * @brief Cas de la suppression : efface le dernier caractère saisi.
              */
        case ASCII_DEL:
          if (idxCmd > 0)
 8000bd8:	4b64      	ldr	r3, [pc, #400]	@ (8000d6c <main+0x2cc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd37      	ble.n	8000c50 <main+0x1b0>
          {
            idxCmd--;
 8000be0:	4b62      	ldr	r3, [pc, #392]	@ (8000d6c <main+0x2cc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	4a61      	ldr	r2, [pc, #388]	@ (8000d6c <main+0x2cc>)
 8000be8:	6013      	str	r3, [r2, #0]
            cmd[idxCmd] = '\0';
 8000bea:	4b60      	ldr	r3, [pc, #384]	@ (8000d6c <main+0x2cc>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a60      	ldr	r2, [pc, #384]	@ (8000d70 <main+0x2d0>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	54d1      	strb	r1, [r2, r3]
            // Envoyer un retour en arrière pour effacer dans le terminal
            uint8_t backspace = '\b';
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	71bb      	strb	r3, [r7, #6]
            HAL_UART_Transmit(&huart2, &backspace, 1, HAL_MAX_DELAY);
 8000bf8:	1db9      	adds	r1, r7, #6
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	2201      	movs	r2, #1
 8000c00:	485f      	ldr	r0, [pc, #380]	@ (8000d80 <main+0x2e0>)
 8000c02:	f005 fa00 	bl	8006006 <HAL_UART_Transmit>
          }
          break;
 8000c06:	e023      	b.n	8000c50 <main+0x1b0>

        /**
           * @brief Cas par défaut : ajoute le caractère au buffer de commande.
           */
        default:
          if (idxCmd < CMD_BUFFER_SIZE - 1)
 8000c08:	4b58      	ldr	r3, [pc, #352]	@ (8000d6c <main+0x2cc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c0e:	dc08      	bgt.n	8000c22 <main+0x182>
          {
            cmd[idxCmd++] = receivedChar;
 8000c10:	4b56      	ldr	r3, [pc, #344]	@ (8000d6c <main+0x2cc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <main+0x2cc>)
 8000c18:	600a      	str	r2, [r1, #0]
 8000c1a:	79f9      	ldrb	r1, [r7, #7]
 8000c1c:	4a54      	ldr	r2, [pc, #336]	@ (8000d70 <main+0x2d0>)
 8000c1e:	54d1      	strb	r1, [r2, r3]
            idxCmd = 0;
            memset(cmd, '\0', CMD_BUFFER_SIZE);
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
          }
          break;
 8000c20:	e017      	b.n	8000c52 <main+0x1b2>
            idxCmd = 0;
 8000c22:	4b52      	ldr	r3, [pc, #328]	@ (8000d6c <main+0x2cc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
            memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000c28:	2240      	movs	r2, #64	@ 0x40
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4850      	ldr	r0, [pc, #320]	@ (8000d70 <main+0x2d0>)
 8000c2e:	f007 fc76 	bl	800851e <memset>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	2212      	movs	r2, #18
 8000c38:	4957      	ldr	r1, [pc, #348]	@ (8000d98 <main+0x2f8>)
 8000c3a:	4851      	ldr	r0, [pc, #324]	@ (8000d80 <main+0x2e0>)
 8000c3c:	f005 f9e3 	bl	8006006 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2217      	movs	r2, #23
 8000c46:	4950      	ldr	r1, [pc, #320]	@ (8000d88 <main+0x2e8>)
 8000c48:	484d      	ldr	r0, [pc, #308]	@ (8000d80 <main+0x2e0>)
 8000c4a:	f005 f9dc 	bl	8006006 <HAL_UART_Transmit>
          break;
 8000c4e:	e000      	b.n	8000c52 <main+0x1b2>
          break;
 8000c50:	bf00      	nop
      }
      uartRxReceived = 0;
 8000c52:	4b4e      	ldr	r3, [pc, #312]	@ (8000d8c <main+0x2ec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
      /**
        * @brief Relance la réception UART en interruption.
        */
      HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4946      	ldr	r1, [pc, #280]	@ (8000d74 <main+0x2d4>)
 8000c5c:	4848      	ldr	r0, [pc, #288]	@ (8000d80 <main+0x2e0>)
 8000c5e:	f005 fa61 	bl	8006124 <HAL_UART_Receive_IT>
    }
    /**
      * @brief Vérifie si une nouvelle commande est prête à être traitée.
      */
    if (newCmdReady)
 8000c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f43f af71 	beq.w	8000b4c <main+0xac>
    {
      newCmdReady = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (argc > 0)
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dd6a      	ble.n	8000d4a <main+0x2aa>
      {
    	/**
    	  * @brief (Sera remplacé par une fonction) Traite les commandes reconnues : help, pinout, start, stop.
    	  */
        if (strcmp(argv[0], "help") == 0)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4949      	ldr	r1, [pc, #292]	@ (8000d9c <main+0x2fc>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fad1 	bl	8000220 <strcmp>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d107      	bne.n	8000c94 <main+0x1f4>
        {
          HAL_UART_Transmit(&huart2, helpMsg, strlen((char*)helpMsg), HAL_MAX_DELAY);
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	22ac      	movs	r2, #172	@ 0xac
 8000c8a:	4945      	ldr	r1, [pc, #276]	@ (8000da0 <main+0x300>)
 8000c8c:	483c      	ldr	r0, [pc, #240]	@ (8000d80 <main+0x2e0>)
 8000c8e:	f005 f9ba 	bl	8006006 <HAL_UART_Transmit>
 8000c92:	e05a      	b.n	8000d4a <main+0x2aa>
        }
        else if (strcmp(argv[0], "pinout") == 0)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4943      	ldr	r1, [pc, #268]	@ (8000da4 <main+0x304>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fac1 	bl	8000220 <strcmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d107      	bne.n	8000cb4 <main+0x214>
        {
          HAL_UART_Transmit(&huart2, pinout, strlen((char*)pinout), HAL_MAX_DELAY);
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	2239      	movs	r2, #57	@ 0x39
 8000caa:	493f      	ldr	r1, [pc, #252]	@ (8000da8 <main+0x308>)
 8000cac:	4834      	ldr	r0, [pc, #208]	@ (8000d80 <main+0x2e0>)
 8000cae:	f005 f9aa 	bl	8006006 <HAL_UART_Transmit>
 8000cb2:	e04a      	b.n	8000d4a <main+0x2aa>
        }
        else if (strcmp(argv[0], "start") == 0)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	493d      	ldr	r1, [pc, #244]	@ (8000dac <main+0x30c>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fab1 	bl	8000220 <strcmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <main+0x234>
        {
          HAL_UART_Transmit(&huart2, powerOn, strlen((char*)powerOn), HAL_MAX_DELAY);
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	220a      	movs	r2, #10
 8000cca:	4939      	ldr	r1, [pc, #228]	@ (8000db0 <main+0x310>)
 8000ccc:	482c      	ldr	r0, [pc, #176]	@ (8000d80 <main+0x2e0>)
 8000cce:	f005 f99a 	bl	8006006 <HAL_UART_Transmit>
 8000cd2:	e03a      	b.n	8000d4a <main+0x2aa>
        }
        else if (strcmp(argv[0], "stop") == 0)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4937      	ldr	r1, [pc, #220]	@ (8000db4 <main+0x314>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff faa1 	bl	8000220 <strcmp>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d107      	bne.n	8000cf4 <main+0x254>
        {
          HAL_UART_Transmit(&huart2, powerOff, strlen((char*)powerOff), HAL_MAX_DELAY);
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	220b      	movs	r2, #11
 8000cea:	4933      	ldr	r1, [pc, #204]	@ (8000db8 <main+0x318>)
 8000cec:	4824      	ldr	r0, [pc, #144]	@ (8000d80 <main+0x2e0>)
 8000cee:	f005 f98a 	bl	8006006 <HAL_UART_Transmit>
 8000cf2:	e02a      	b.n	8000d4a <main+0x2aa>
        }
        else if (strcmp(argv[0], "speed") == 0) {
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4931      	ldr	r1, [pc, #196]	@ (8000dbc <main+0x31c>)
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa91 	bl	8000220 <strcmp>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d11b      	bne.n	8000d3c <main+0x29c>
            if (argc > 1) {
 8000d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	dd10      	ble.n	8000d2c <main+0x28c>
            	changeSpeed(atoi(argv[1]));
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f007 fa79 	bl	8008204 <atoi>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f8b8 	bl	8000e8c <changeSpeed>
                HAL_UART_Transmit(&huart2, speedMsg, strlen((char*)speedMsg), HAL_MAX_DELAY);
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2218      	movs	r2, #24
 8000d22:	4927      	ldr	r1, [pc, #156]	@ (8000dc0 <main+0x320>)
 8000d24:	4816      	ldr	r0, [pc, #88]	@ (8000d80 <main+0x2e0>)
 8000d26:	f005 f96e 	bl	8006006 <HAL_UART_Transmit>
 8000d2a:	e00e      	b.n	8000d4a <main+0x2aa>
            } else {
                HAL_UART_Transmit(&huart2, (uint8_t*)"Speed value missing\r\n", 21, HAL_MAX_DELAY);
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	2215      	movs	r2, #21
 8000d32:	4924      	ldr	r1, [pc, #144]	@ (8000dc4 <main+0x324>)
 8000d34:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <main+0x2e0>)
 8000d36:	f005 f966 	bl	8006006 <HAL_UART_Transmit>
 8000d3a:	e006      	b.n	8000d4a <main+0x2aa>
            }
        }
        else
        {
          HAL_UART_Transmit(&huart2, cmdNotFound, strlen((char*)cmdNotFound), HAL_MAX_DELAY);
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	2213      	movs	r2, #19
 8000d42:	4921      	ldr	r1, [pc, #132]	@ (8000dc8 <main+0x328>)
 8000d44:	480e      	ldr	r0, [pc, #56]	@ (8000d80 <main+0x2e0>)
 8000d46:	f005 f95e 	bl	8006006 <HAL_UART_Transmit>
        }
      }
      // Affiche le prompt
      HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	2217      	movs	r2, #23
 8000d50:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <main+0x2e8>)
 8000d52:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <main+0x2e0>)
 8000d54:	f005 f957 	bl	8006006 <HAL_UART_Transmit>

      // Réinitialise le buffer de commande et l'index
      idxCmd = 0;
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <main+0x2cc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
      memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000d5e:	2240      	movs	r2, #64	@ 0x40
 8000d60:	2100      	movs	r1, #0
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <main+0x2d0>)
 8000d64:	f007 fbdb 	bl	800851e <memset>
    if (uartRxReceived)
 8000d68:	e6f0      	b.n	8000b4c <main+0xac>
 8000d6a:	bf00      	nop
 8000d6c:	200001e8 	.word	0x200001e8
 8000d70:	200001a8 	.word	0x200001a8
 8000d74:	20000164 	.word	0x20000164
 8000d78:	20000168 	.word	0x20000168
 8000d7c:	2000023c 	.word	0x2000023c
 8000d80:	200002d4 	.word	0x200002d4
 8000d84:	08009394 	.word	0x08009394
 8000d88:	0800937c 	.word	0x0800937c
 8000d8c:	20000160 	.word	0x20000160
 8000d90:	080093fc 	.word	0x080093fc
 8000d94:	08009324 	.word	0x08009324
 8000d98:	08009328 	.word	0x08009328
 8000d9c:	0800933c 	.word	0x0800933c
 8000da0:	0800941c 	.word	0x0800941c
 8000da4:	08009344 	.word	0x08009344
 8000da8:	080094cc 	.word	0x080094cc
 8000dac:	0800934c 	.word	0x0800934c
 8000db0:	08009508 	.word	0x08009508
 8000db4:	08009354 	.word	0x08009354
 8000db8:	08009514 	.word	0x08009514
 8000dbc:	0800935c 	.word	0x0800935c
 8000dc0:	08009400 	.word	0x08009400
 8000dc4:	08009364 	.word	0x08009364
 8000dc8:	08009520 	.word	0x08009520

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b094      	sub	sp, #80	@ 0x50
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2238      	movs	r2, #56	@ 0x38
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f007 fb9f 	bl	800851e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f002 fa58 	bl	80032a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dfc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	2303      	movs	r3, #3
 8000e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000e06:	2306      	movs	r3, #6
 8000e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e0a:	2355      	movs	r3, #85	@ 0x55
 8000e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	f107 0318 	add.w	r3, r7, #24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 faf4 	bl	800340c <HAL_RCC_OscConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e2a:	f000 f85f 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	230f      	movs	r3, #15
 8000e30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2303      	movs	r3, #3
 8000e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2104      	movs	r1, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fdf2 	bl	8003a30 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e52:	f000 f84b 	bl	8000eec <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	@ 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_UART_RxCpltCallback>:
  * @brief Callback appelé à la fin de la réception UART.
  * @param huart Handle de l'UART.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <HAL_UART_RxCpltCallback+0x24>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d102      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxReceived = 1;
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_UART_RxCpltCallback+0x28>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
    // La relance de la réception UART est effectuée dans la boucle principale
  }
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40004400 	.word	0x40004400
 8000e88:	20000160 	.word	0x20000160

08000e8c <changeSpeed>:

void changeSpeed(uint16_t speed) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
    // Limite la vitesse à la plage valide
    if (speed > htim1.Init.Period) {
 8000e96:	88fa      	ldrh	r2, [r7, #6]
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <changeSpeed+0x38>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d902      	bls.n	8000ea6 <changeSpeed+0x1a>
        speed = htim1.Init.Period;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <changeSpeed+0x38>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	80fb      	strh	r3, [r7, #6]
    }

    // Met à jour le rappport cyclique
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <changeSpeed+0x38>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8000eae:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <changeSpeed+0x38>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	88fa      	ldrh	r2, [r7, #6]
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2000023c 	.word	0x2000023c

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fd45 	bl	8001968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40001000 	.word	0x40001000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_MspInit+0x44>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f2e:	f002 fa5d 	bl	80033ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	@ 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <HAL_InitTick+0xc4>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f54:	4a2b      	ldr	r2, [pc, #172]	@ (8001004 <HAL_InitTick+0xc4>)
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <HAL_InitTick+0xc4>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 ff32 	bl	8003ddc <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f78:	f002 ff04 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8000f7c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f80:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <HAL_InitTick+0xc8>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	0c9b      	lsrs	r3, r3, #18
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_InitTick+0xcc>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	@ (8001010 <HAL_InitTick+0xd0>)
 8000f90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <HAL_InitTick+0xcc>)
 8000f94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800100c <HAL_InitTick+0xcc>)
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_InitTick+0xcc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_InitTick+0xcc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000fac:	4817      	ldr	r0, [pc, #92]	@ (800100c <HAL_InitTick+0xcc>)
 8000fae:	f003 f9db 	bl	8004368 <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11b      	bne.n	8000ff8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fc0:	4812      	ldr	r0, [pc, #72]	@ (800100c <HAL_InitTick+0xcc>)
 8000fc2:	f003 fa29 	bl	8004418 <HAL_TIM_Base_Start_IT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d111      	bne.n	8000ff8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fd4:	2036      	movs	r0, #54	@ 0x36
 8000fd6:	f001 fed9 	bl	8002d8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d808      	bhi.n	8000ff2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	2036      	movs	r0, #54	@ 0x36
 8000fe6:	f001 feb7 	bl	8002d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_InitTick+0xd4>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e002      	b.n	8000ff8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3730      	adds	r7, #48	@ 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	431bde83 	.word	0x431bde83
 800100c:	200001ec 	.word	0x200001ec
 8001010:	40001000 	.word	0x40001000
 8001014:	20000004 	.word	0x20000004

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <USART2_IRQHandler+0x10>)
 800107e:	f005 f89d 	bl	80061bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002d4 	.word	0x200002d4

0800108c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001090:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001094:	f002 f8e2 	bl	800325c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <TIM6_DAC_IRQHandler+0x10>)
 80010a2:	f003 fba5 	bl	80047f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001ec 	.word	0x200001ec

080010b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_kill>:

int _kill(int pid, int sig)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ca:	f007 fad3 	bl	8008674 <__errno>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2216      	movs	r2, #22
 80010d2:	601a      	str	r2, [r3, #0]
  return -1;
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_exit>:

void _exit (int status)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffe7 	bl	80010c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f2:	bf00      	nop
 80010f4:	e7fd      	b.n	80010f2 <_exit+0x12>

080010f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e00a      	b.n	800111e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001108:	f3af 8000 	nop.w
 800110c:	4601      	mov	r1, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	60ba      	str	r2, [r7, #8]
 8001114:	b2ca      	uxtb	r2, r1
 8001116:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	dbf0      	blt.n	8001108 <_read+0x12>
  }

  return len;
 8001126:	687b      	ldr	r3, [r7, #4]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e009      	b.n	8001156 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	60ba      	str	r2, [r7, #8]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3301      	adds	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	429a      	cmp	r2, r3
 800115c:	dbf1      	blt.n	8001142 <_write+0x12>
  }
  return len;
 800115e:	687b      	ldr	r3, [r7, #4]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_close>:

int _close(int file)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001190:	605a      	str	r2, [r3, #4]
  return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_isatty>:

int _isatty(int file)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	@ (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f007 fa38 	bl	8008674 <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20020000 	.word	0x20020000
 8001230:	00000400 	.word	0x00000400
 8001234:	20000238 	.word	0x20000238
 8001238:	20000550 	.word	0x20000550

0800123c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <SystemInit+0x20>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <SystemInit+0x20>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b09c      	sub	sp, #112	@ 0x70
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2234      	movs	r2, #52	@ 0x34
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f007 f93f 	bl	800851e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a0:	4b57      	ldr	r3, [pc, #348]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012a2:	4a58      	ldr	r2, [pc, #352]	@ (8001404 <MX_TIM1_Init+0x1a4>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a6:	4b56      	ldr	r3, [pc, #344]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80012b2:	4b53      	ldr	r3, [pc, #332]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012b4:	f242 1233 	movw	r2, #8499	@ 0x2133
 80012b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b51      	ldr	r3, [pc, #324]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012cc:	484c      	ldr	r0, [pc, #304]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012ce:	f003 f84b 	bl	8004368 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f7ff fe08 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012e6:	4619      	mov	r1, r3
 80012e8:	4845      	ldr	r0, [pc, #276]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012ea:	f003 fce5 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012f4:	f7ff fdfa 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f8:	4841      	ldr	r0, [pc, #260]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80012fa:	f003 f905 	bl	8004508 <HAL_TIM_PWM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001304:	f7ff fdf2 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001314:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001318:	4619      	mov	r1, r3
 800131a:	4839      	ldr	r0, [pc, #228]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 800131c:	f004 fc8e 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001326:	f7ff fde1 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	@ 0x60
 800132c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4250;
 800132e:	f241 039a 	movw	r3, #4250	@ 0x109a
 8001332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001348:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	482b      	ldr	r0, [pc, #172]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 8001352:	f003 fb9d 	bl	8004a90 <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800135c:	f7ff fdc6 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001360:	2302      	movs	r3, #2
 8001362:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001364:	2308      	movs	r3, #8
 8001366:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001368:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800136c:	2204      	movs	r2, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4823      	ldr	r0, [pc, #140]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 8001372:	f003 fb8d 	bl	8004a90 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800137c:	f7ff fdb6 	bl	8000eec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001388:	2300      	movs	r3, #0
 800138a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800138c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001390:	2208      	movs	r2, #8
 8001392:	4619      	mov	r1, r3
 8001394:	481a      	ldr	r0, [pc, #104]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 8001396:	f003 fb7b 	bl	8004a90 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80013a0:	f7ff fda4 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 80013b0:	2322      	movs	r3, #34	@ 0x22
 80013b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4807      	ldr	r0, [pc, #28]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80013e2:	f004 fcc1 	bl	8005d68 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80013ec:	f7ff fd7e 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <MX_TIM1_Init+0x1a0>)
 80013f2:	f000 f8d7 	bl	80015a4 <HAL_TIM_MspPostInit>

}
 80013f6:	bf00      	nop
 80013f8:	3770      	adds	r7, #112	@ 0x70
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000023c 	.word	0x2000023c
 8001404:	40012c00 	.word	0x40012c00

08001408 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_TIM3_Init+0x90>)
 8001428:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <MX_TIM3_Init+0x94>)
 800142a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_TIM3_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <MX_TIM3_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_TIM3_Init+0x90>)
 800143a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <MX_TIM3_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_TIM3_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	@ (8001498 <MX_TIM3_Init+0x90>)
 8001464:	f004 fa79 	bl	800595a <HAL_TIMEx_HallSensor_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800146e:	f7ff fd3d 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001472:	2350      	movs	r3, #80	@ 0x50
 8001474:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <MX_TIM3_Init+0x90>)
 8001480:	f004 fbdc 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800148a:	f7ff fd2f 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000288 	.word	0x20000288
 800149c:	40000400 	.word	0x40000400

080014a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <HAL_TIM_Base_MspInit+0x38>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10b      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_TIM_Base_MspInit+0x3c>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <HAL_TIM_Base_MspInit+0x3c>)
 80014b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <HAL_TIM_Base_MspInit+0x3c>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40012c00 	.word	0x40012c00
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a26      	ldr	r2, [pc, #152]	@ (8001598 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d145      	bne.n	800158e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	4a25      	ldr	r2, [pc, #148]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6593      	str	r3, [r2, #88]	@ 0x58
 800150e:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a1f      	ldr	r2, [pc, #124]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a19      	ldr	r2, [pc, #100]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800154a:	2350      	movs	r3, #80	@ 0x50
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800155a:	2302      	movs	r3, #2
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001568:	f001 fcde 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800156c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800157e:	2302      	movs	r3, #2
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800158a:	f001 fccd 	bl	8002f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40000400 	.word	0x40000400
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000800 	.word	0x48000800

080015a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a29      	ldr	r2, [pc, #164]	@ (8001668 <HAL_TIM_MspPostInit+0xc4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d14b      	bne.n	800165e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b29      	ldr	r3, [pc, #164]	@ (800166c <HAL_TIM_MspPostInit+0xc8>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a28      	ldr	r2, [pc, #160]	@ (800166c <HAL_TIM_MspPostInit+0xc8>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_TIM_MspPostInit+0xc8>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_TIM_MspPostInit+0xc8>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a22      	ldr	r2, [pc, #136]	@ (800166c <HAL_TIM_MspPostInit+0xc8>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_TIM_MspPostInit+0xc8>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80015f6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001608:	2306      	movs	r3, #6
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4817      	ldr	r0, [pc, #92]	@ (8001670 <HAL_TIM_MspPostInit+0xcc>)
 8001614:	f001 fc88 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800162a:	2304      	movs	r3, #4
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	480e      	ldr	r0, [pc, #56]	@ (8001670 <HAL_TIM_MspPostInit+0xcc>)
 8001636:	f001 fc77 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800163a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800164c:	2306      	movs	r3, #6
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165a:	f001 fc65 	bl	8002f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400

08001674 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 800167a:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <MX_USART2_UART_Init+0x94>)
 800167c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016bc:	4811      	ldr	r0, [pc, #68]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016be:	f004 fc52 	bl	8005f66 <HAL_UART_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016c8:	f7ff fc10 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016cc:	2100      	movs	r1, #0
 80016ce:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016d0:	f006 fccd 	bl	800806e <HAL_UARTEx_SetTxFifoThreshold>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016da:	f7ff fc07 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016de:	2100      	movs	r1, #0
 80016e0:	4808      	ldr	r0, [pc, #32]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016e2:	f006 fd02 	bl	80080ea <HAL_UARTEx_SetRxFifoThreshold>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f7ff fbfe 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <MX_USART2_UART_Init+0x90>)
 80016f2:	f006 fc83 	bl	8007ffc <HAL_UARTEx_DisableFifoMode>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f7ff fbf6 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002d4 	.word	0x200002d4
 8001708:	40004400 	.word	0x40004400

0800170c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <MX_USART3_UART_Init+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_USART3_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_USART3_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_USART3_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001754:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001756:	f004 fc06 	bl	8005f66 <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001760:	f7ff fbc4 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_USART3_UART_Init+0x90>)
 8001768:	f006 fc81 	bl	800806e <HAL_UARTEx_SetTxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001772:	f7ff fbbb 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <MX_USART3_UART_Init+0x90>)
 800177a:	f006 fcb6 	bl	80080ea <HAL_UARTEx_SetRxFifoThreshold>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001784:	f7ff fbb2 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_USART3_UART_Init+0x90>)
 800178a:	f006 fc37 	bl	8007ffc <HAL_UARTEx_DisableFifoMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001794:	f7ff fbaa 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000368 	.word	0x20000368
 80017a0:	40004800 	.word	0x40004800

080017a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0a0      	sub	sp, #128	@ 0x80
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	2254      	movs	r2, #84	@ 0x54
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 feaa 	bl	800851e <memset>
  if(uartHandle->Instance==USART2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a41      	ldr	r2, [pc, #260]	@ (80018d4 <HAL_UART_MspInit+0x130>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d13f      	bne.n	8001854 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fb73 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017ec:	f7ff fb7e 	bl	8000eec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f0:	4b39      	ldr	r3, [pc, #228]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	4a38      	ldr	r2, [pc, #224]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80017fc:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180c:	4a32      	ldr	r2, [pc, #200]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001820:	230c      	movs	r3, #12
 8001822:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001830:	2307      	movs	r3, #7
 8001832:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183e:	f001 fb73 	bl	8002f28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2026      	movs	r0, #38	@ 0x26
 8001848:	f001 fa86 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800184c:	2026      	movs	r0, #38	@ 0x26
 800184e:	f001 fa9d 	bl	8002d8c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001852:	e03b      	b.n	80018cc <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a20      	ldr	r2, [pc, #128]	@ (80018dc <HAL_UART_MspInit+0x138>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d136      	bne.n	80018cc <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800185e:	2304      	movs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fb2e 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001876:	f7ff fb39 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a16      	ldr	r2, [pc, #88]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_UART_MspInit+0x134>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018bc:	2307      	movs	r3, #7
 80018be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <HAL_UART_MspInit+0x13c>)
 80018c8:	f001 fb2e 	bl	8002f28 <HAL_GPIO_Init>
}
 80018cc:	bf00      	nop
 80018ce:	3780      	adds	r7, #128	@ 0x80
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40004800 	.word	0x40004800
 80018e0:	48000800 	.word	0x48000800

080018e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e4:	480d      	ldr	r0, [pc, #52]	@ (800191c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018e8:	f7ff fca8 	bl	800123c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopForever+0xe>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopForever+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f006 feb5 	bl	8008680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001916:	f7ff f8c3 	bl	8000aa0 <main>

0800191a <LoopForever>:

LoopForever:
    b LoopForever
 800191a:	e7fe      	b.n	800191a <LoopForever>
  ldr   r0, =_estack
 800191c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001928:	08009768 	.word	0x08009768
  ldr r2, =_sbss
 800192c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001930:	2000054c 	.word	0x2000054c

08001934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC1_2_IRQHandler>

08001936 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f001 f9fe 	bl	8002d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001946:	200f      	movs	r0, #15
 8001948:	f7ff fafa 	bl	8000f40 <HAL_InitTick>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	e001      	b.n	800195c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001958:	f7ff face 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800195c:	79fb      	ldrb	r3, [r7, #7]

}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_IncTick+0x1c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_IncTick+0x20>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4413      	add	r3, r2
 8001976:	4a03      	ldr	r2, [pc, #12]	@ (8001984 <HAL_IncTick+0x1c>)
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	200003fc 	.word	0x200003fc
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200003fc 	.word	0x200003fc

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d004      	beq.n	80019c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_Delay+0x40>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c8:	bf00      	nop
 80019ca:	f7ff ffdf 	bl	800198c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d8f7      	bhi.n	80019ca <HAL_Delay+0x26>
  {
  }
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000008 	.word	0x20000008

080019e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	609a      	str	r2, [r3, #8]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3360      	adds	r3, #96	@ 0x60
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <LL_ADC_SetOffset+0x44>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a88:	bf00      	nop
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	03fff000 	.word	0x03fff000

08001a98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3360      	adds	r3, #96	@ 0x60
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3360      	adds	r3, #96	@ 0x60
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b087      	sub	sp, #28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3360      	adds	r3, #96	@ 0x60
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3360      	adds	r3, #96	@ 0x60
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3330      	adds	r3, #48	@ 0x30
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	211f      	movs	r1, #31
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	f003 011f 	and.w	r1, r3, #31
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bd8:	bf00      	nop
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0e5b      	lsrs	r3, r3, #25
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	0d1b      	lsrs	r3, r3, #20
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2107      	movs	r1, #7
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0318 	and.w	r3, r3, #24
 8001c5e:	4908      	ldr	r1, [pc, #32]	@ (8001c80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c60:	40d9      	lsrs	r1, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	400b      	ands	r3, r1
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	0007ffff 	.word	0x0007ffff

08001c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6093      	str	r3, [r2, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cbc:	d101      	bne.n	8001cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ce0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <LL_ADC_IsEnabled+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_ADC_IsEnabled+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d101      	bne.n	8001d5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d101      	bne.n	8001d84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1a9      	b.n	8002102 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe fce5 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff67 	bl	8001ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff4d 	bl	8001c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff82 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff66 	bl	8001cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e04:	4b9c      	ldr	r3, [pc, #624]	@ (8002078 <HAL_ADC_Init+0x2e4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	4a9c      	ldr	r2, [pc, #624]	@ (800207c <HAL_ADC_Init+0x2e8>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff64 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff75 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 8142 	bne.w	80020f0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 813e 	bne.w	80020f0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff49 	bl	8001d20 <LL_ADC_IsEnabled>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d141      	bne.n	8001f18 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Init+0x114>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a77      	ldr	r2, [pc, #476]	@ (8002080 <HAL_ADC_Init+0x2ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_ADC_Init+0x134>
 8001ea8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001eac:	f7ff ff38 	bl	8001d20 <LL_ADC_IsEnabled>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	4873      	ldr	r0, [pc, #460]	@ (8002080 <HAL_ADC_Init+0x2ec>)
 8001eb4:	f7ff ff34 	bl	8001d20 <LL_ADC_IsEnabled>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_ADC_Init+0x15a>
 8001ec8:	486e      	ldr	r0, [pc, #440]	@ (8002084 <HAL_ADC_Init+0x2f0>)
 8001eca:	f7ff ff29 	bl	8001d20 <LL_ADC_IsEnabled>
 8001ece:	4604      	mov	r4, r0
 8001ed0:	486d      	ldr	r0, [pc, #436]	@ (8002088 <HAL_ADC_Init+0x2f4>)
 8001ed2:	f7ff ff25 	bl	8001d20 <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	431c      	orrs	r4, r3
 8001eda:	486c      	ldr	r0, [pc, #432]	@ (800208c <HAL_ADC_Init+0x2f8>)
 8001edc:	f7ff ff20 	bl	8001d20 <LL_ADC_IsEnabled>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d012      	beq.n	8001f18 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001efa:	d004      	beq.n	8001f06 <HAL_ADC_Init+0x172>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5f      	ldr	r2, [pc, #380]	@ (8002080 <HAL_ADC_Init+0x2ec>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Init+0x176>
 8001f06:	4a62      	ldr	r2, [pc, #392]	@ (8002090 <HAL_ADC_Init+0x2fc>)
 8001f08:	e000      	b.n	8001f0c <HAL_ADC_Init+0x178>
 8001f0a:	4a62      	ldr	r2, [pc, #392]	@ (8002094 <HAL_ADC_Init+0x300>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f7ff fd68 	bl	80019e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7f5b      	ldrb	r3, [r3, #29]
 8001f1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	045b      	lsls	r3, r3, #17
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b48      	ldr	r3, [pc, #288]	@ (8002098 <HAL_ADC_Init+0x304>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fee4 	bl	8001d6c <LL_ADC_INJ_IsConversionOngoing>
 8001fa4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d17f      	bne.n	80020ac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d17c      	bne.n	80020ac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fb6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fbe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fce:	f023 0302 	bic.w	r3, r3, #2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	69b9      	ldr	r1, [r7, #24]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d017      	beq.n	8002014 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ff2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ffc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6911      	ldr	r1, [r2, #16]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002012:	e013      	b.n	800203c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002022:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002038:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002042:	2b01      	cmp	r3, #1
 8002044:	d12a      	bne.n	800209c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002068:	430a      	orrs	r2, r1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	e019      	b.n	80020ac <HAL_ADC_Init+0x318>
 8002078:	20000000 	.word	0x20000000
 800207c:	053e2d63 	.word	0x053e2d63
 8002080:	50000100 	.word	0x50000100
 8002084:	50000400 	.word	0x50000400
 8002088:	50000500 	.word	0x50000500
 800208c:	50000600 	.word	0x50000600
 8002090:	50000300 	.word	0x50000300
 8002094:	50000700 	.word	0x50000700
 8002098:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10c      	bne.n	80020ce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f023 010f 	bic.w	r1, r3, #15
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80020cc:	e007      	b.n	80020de <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 020f 	bic.w	r2, r2, #15
 80020dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ee:	e007      	b.n	8002100 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002100:	7ffb      	ldrb	r3, [r7, #31]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop

0800210c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0b6      	sub	sp, #216	@ 0xd8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x24>
 800212a:	2302      	movs	r3, #2
 800212c:	f000 bc13 	b.w	8002956 <HAL_ADC_ConfigChannel+0x84a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fe02 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 83f3 	bne.w	8002930 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff fd18 	bl	8001b8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fdf0 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8002166:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fdfc 	bl	8001d6c <LL_ADC_INJ_IsConversionOngoing>
 8002174:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002178:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 81d9 	bne.w	8002534 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 81d4 	bne.w	8002534 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002194:	d10f      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7ff fd1f 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fcd9 	bl	8001b66 <LL_ADC_SetSamplingTimeCommonConfig>
 80021b4:	e00e      	b.n	80021d4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f7ff fd0e 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fcc9 	bl	8001b66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	08db      	lsrs	r3, r3, #3
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d022      	beq.n	800223c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002206:	f7ff fc23 	bl	8001a50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	461a      	mov	r2, r3
 8002218:	f7ff fc6f 	bl	8001afa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002228:	2b01      	cmp	r3, #1
 800222a:	d102      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x126>
 800222c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002230:	e000      	b.n	8002234 <HAL_ADC_ConfigChannel+0x128>
 8002232:	2300      	movs	r3, #0
 8002234:	461a      	mov	r2, r3
 8002236:	f7ff fc7b 	bl	8001b30 <LL_ADC_SetOffsetSaturation>
 800223a:	e17b      	b.n	8002534 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fc28 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x15c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fc1d 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 021f 	and.w	r2, r3, #31
 8002266:	e01e      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x19a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fc12 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800228a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800228e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e004      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800229a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_ConfigChannel+0x1b2>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	e018      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x1e4>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80022d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80022da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e004      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fbe1 	bl	8001ac4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fbc5 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <HAL_ADC_ConfigChannel+0x222>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fbba 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	e01e      	b.n	800236c <HAL_ADC_ConfigChannel+0x260>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fbaf 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800234c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e004      	b.n	800236a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x278>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	e018      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x2aa>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002398:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800239c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e004      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fb7e 	bl	8001ac4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2102      	movs	r1, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fb62 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x2e8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fb57 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	e01e      	b.n	8002432 <HAL_ADC_ConfigChannel+0x326>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fb4c 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002412:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800241a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e004      	b.n	8002430 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002426:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_ConfigChannel+0x33e>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	e016      	b.n	8002478 <HAL_ADC_ConfigChannel+0x36c>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800245c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800245e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e004      	b.n	8002478 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800246e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb1d 	bl	8001ac4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2103      	movs	r1, #3
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fb01 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x3aa>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2103      	movs	r1, #3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff faf6 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	e017      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x3da>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2103      	movs	r1, #3
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff faeb 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80024d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x3f2>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	e011      	b.n	8002522 <HAL_ADC_ConfigChannel+0x416>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800250c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800250e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e003      	b.n	8002522 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800251a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002522:	429a      	cmp	r2, r3
 8002524:	d106      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	2103      	movs	r1, #3
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fac8 	bl	8001ac4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fbf1 	bl	8001d20 <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 813d 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f7ff fb72 	bl	8001c3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4aa2      	ldr	r2, [pc, #648]	@ (80027e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	f040 812e 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_ADC_ConfigChannel+0x480>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2b09      	cmp	r3, #9
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e019      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x4b4>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800259a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800259c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800259e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2b09      	cmp	r3, #9
 80025b8:	bf94      	ite	ls
 80025ba:	2301      	movls	r3, #1
 80025bc:	2300      	movhi	r3, #0
 80025be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d079      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x4d4>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025de:	e015      	b.n	800260c <HAL_ADC_ConfigChannel+0x500>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80025f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80025fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_ConfigChannel+0x520>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x550>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800263e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x576>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	051b      	lsls	r3, r3, #20
 8002680:	e018      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x5a8>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800269e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b4:	430b      	orrs	r3, r1
 80026b6:	e07e      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x5c8>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	069b      	lsls	r3, r3, #26
 80026ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026d2:	e015      	b.n	8002700 <HAL_ADC_ConfigChannel+0x5f4>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	069b      	lsls	r3, r3, #26
 80026fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x614>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	e017      	b.n	8002750 <HAL_ADC_ConfigChannel+0x644>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	61fb      	str	r3, [r7, #28]
  return result;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	ea42 0103 	orr.w	r1, r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_ADC_ConfigChannel+0x670>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	3301      	adds	r3, #1
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	3b1e      	subs	r3, #30
 8002774:	051b      	lsls	r3, r3, #20
 8002776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800277a:	e01b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x6a8>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	613b      	str	r3, [r7, #16]
  return result;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	051b      	lsls	r3, r3, #20
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7ff fa12 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_ADC_ConfigChannel+0x6e0>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80be 	beq.w	800294a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027d6:	d004      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x6d6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10a      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x6ec>
 80027e2:	4b04      	ldr	r3, [pc, #16]	@ (80027f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80027e4:	e009      	b.n	80027fa <HAL_ADC_ConfigChannel+0x6ee>
 80027e6:	bf00      	nop
 80027e8:	407f0000 	.word	0x407f0000
 80027ec:	80080000 	.word	0x80080000
 80027f0:	50000100 	.word	0x50000100
 80027f4:	50000300 	.word	0x50000300
 80027f8:	4b59      	ldr	r3, [pc, #356]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f91a 	bl	8001a34 <LL_ADC_GetCommonPathInternalCh>
 8002800:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a56      	ldr	r2, [pc, #344]	@ (8002964 <HAL_ADC_ConfigChannel+0x858>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x70c>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a55      	ldr	r2, [pc, #340]	@ (8002968 <HAL_ADC_ConfigChannel+0x85c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d13a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800281c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d134      	bne.n	800288e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800282c:	d005      	beq.n	800283a <HAL_ADC_ConfigChannel+0x72e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a4e      	ldr	r2, [pc, #312]	@ (800296c <HAL_ADC_ConfigChannel+0x860>)
 8002834:	4293      	cmp	r3, r2
 8002836:	f040 8085 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002842:	d004      	beq.n	800284e <HAL_ADC_ConfigChannel+0x742>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a49      	ldr	r2, [pc, #292]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x746>
 800284e:	4a49      	ldr	r2, [pc, #292]	@ (8002974 <HAL_ADC_ConfigChannel+0x868>)
 8002850:	e000      	b.n	8002854 <HAL_ADC_ConfigChannel+0x748>
 8002852:	4a43      	ldr	r2, [pc, #268]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 8002854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002858:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f7ff f8d5 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002864:	4b44      	ldr	r3, [pc, #272]	@ (8002978 <HAL_ADC_ConfigChannel+0x86c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	4a44      	ldr	r2, [pc, #272]	@ (800297c <HAL_ADC_ConfigChannel+0x870>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800287e:	e002      	b.n	8002886 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3b01      	subs	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288c:	e05a      	b.n	8002944 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3b      	ldr	r2, [pc, #236]	@ (8002980 <HAL_ADC_ConfigChannel+0x874>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d125      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800289c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11f      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a31      	ldr	r2, [pc, #196]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d104      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x7ac>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a34      	ldr	r2, [pc, #208]	@ (8002984 <HAL_ADC_ConfigChannel+0x878>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d047      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028c0:	d004      	beq.n	80028cc <HAL_ADC_ConfigChannel+0x7c0>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x7c4>
 80028cc:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_ADC_ConfigChannel+0x868>)
 80028ce:	e000      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x7c6>
 80028d0:	4a23      	ldr	r2, [pc, #140]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 80028d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7ff f896 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e2:	e031      	b.n	8002948 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <HAL_ADC_ConfigChannel+0x87c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d12d      	bne.n	800294a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d127      	bne.n	800294a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800290c:	d004      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x80c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x810>
 8002918:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <HAL_ADC_ConfigChannel+0x868>)
 800291a:	e000      	b.n	800291e <HAL_ADC_ConfigChannel+0x812>
 800291c:	4a10      	ldr	r2, [pc, #64]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 800291e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002922:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f7ff f870 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 800292e:	e00c      	b.n	800294a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002942:	e002      	b.n	800294a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002944:	bf00      	nop
 8002946:	e000      	b.n	800294a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002948:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002952:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002956:	4618      	mov	r0, r3
 8002958:	37d8      	adds	r7, #216	@ 0xd8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	50000700 	.word	0x50000700
 8002964:	c3210000 	.word	0xc3210000
 8002968:	90c00010 	.word	0x90c00010
 800296c:	50000600 	.word	0x50000600
 8002970:	50000100 	.word	0x50000100
 8002974:	50000300 	.word	0x50000300
 8002978:	20000000 	.word	0x20000000
 800297c:	053e2d63 	.word	0x053e2d63
 8002980:	c7520000 	.word	0xc7520000
 8002984:	50000500 	.word	0x50000500
 8002988:	cb840000 	.word	0xcb840000

0800298c <LL_ADC_IsEnabled>:
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <LL_ADC_IsEnabled+0x18>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_ADC_IsEnabled+0x1a>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d101      	bne.n	80029ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b0a1      	sub	sp, #132	@ 0x84
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0e7      	b.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029fe:	2300      	movs	r3, #0
 8002a00:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a02:	2300      	movs	r3, #0
 8002a04:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a0e:	d102      	bne.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	e009      	b.n	8002a2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d102      	bne.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002a20:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	e001      	b.n	8002a2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0be      	b.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ffb1 	bl	80029b2 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffab 	bl	80029b2 <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 80a0 	bne.w	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 809c 	bne.w	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a74:	d004      	beq.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a55      	ldr	r2, [pc, #340]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a80:	4b56      	ldr	r3, [pc, #344]	@ (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a82:	e000      	b.n	8002a86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a84:	4b56      	ldr	r3, [pc, #344]	@ (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a86:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d04b      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002aa2:	035b      	lsls	r3, r3, #13
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aaa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ab4:	d004      	beq.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a45      	ldr	r2, [pc, #276]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10f      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002ac0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ac4:	f7ff ff62 	bl	800298c <LL_ADC_IsEnabled>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	4841      	ldr	r0, [pc, #260]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002acc:	f7ff ff5e 	bl	800298c <LL_ADC_IsEnabled>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4323      	orrs	r3, r4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e012      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002ae0:	483c      	ldr	r0, [pc, #240]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ae2:	f7ff ff53 	bl	800298c <LL_ADC_IsEnabled>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	483b      	ldr	r0, [pc, #236]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002aea:	f7ff ff4f 	bl	800298c <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	431c      	orrs	r4, r3
 8002af2:	483c      	ldr	r0, [pc, #240]	@ (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002af4:	f7ff ff4a 	bl	800298c <LL_ADC_IsEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4323      	orrs	r3, r4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d056      	beq.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b12:	f023 030f 	bic.w	r3, r3, #15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	6892      	ldr	r2, [r2, #8]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b24:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b26:	e047      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a23      	ldr	r2, [pc, #140]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10f      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002b48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b4c:	f7ff ff1e 	bl	800298c <LL_ADC_IsEnabled>
 8002b50:	4604      	mov	r4, r0
 8002b52:	481f      	ldr	r0, [pc, #124]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b54:	f7ff ff1a 	bl	800298c <LL_ADC_IsEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4323      	orrs	r3, r4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e012      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002b68:	481a      	ldr	r0, [pc, #104]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b6a:	f7ff ff0f 	bl	800298c <LL_ADC_IsEnabled>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4819      	ldr	r0, [pc, #100]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b72:	f7ff ff0b 	bl	800298c <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	431c      	orrs	r4, r3
 8002b7a:	481a      	ldr	r0, [pc, #104]	@ (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b7c:	f7ff ff06 	bl	800298c <LL_ADC_IsEnabled>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4323      	orrs	r3, r4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b9a:	f023 030f 	bic.w	r3, r3, #15
 8002b9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ba0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba2:	e009      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bb6:	e000      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3784      	adds	r7, #132	@ 0x84
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd90      	pop	{r4, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	50000100 	.word	0x50000100
 8002bd4:	50000400 	.word	0x50000400
 8002bd8:	50000500 	.word	0x50000500
 8002bdc:	50000300 	.word	0x50000300
 8002be0:	50000700 	.word	0x50000700
 8002be4:	50000600 	.word	0x50000600

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	@ (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff4c 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d66:	f7ff ff63 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002d6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	6978      	ldr	r0, [r7, #20]
 8002d72:	f7ff ffb3 	bl	8002cdc <NVIC_EncodePriority>
 8002d76:	4602      	mov	r2, r0
 8002d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff82 	bl	8002c88 <__NVIC_SetPriority>
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff56 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d005      	beq.n	8002dcc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e037      	b.n	8002e3c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dea:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e18:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e30:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e3a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d00d      	beq.n	8002e8e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e047      	b.n	8002f1e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 020e 	bic.w	r2, r2, #14
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ebc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eda:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002efc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
    }
  }
  return status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f36:	e15a      	b.n	80031ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 814c 	beq.w	80031e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d005      	beq.n	8002f68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d130      	bne.n	8002fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 0201 	and.w	r2, r3, #1
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d017      	beq.n	8003006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d123      	bne.n	800305a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	6939      	ldr	r1, [r7, #16]
 8003056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0203 	and.w	r2, r3, #3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80a6 	beq.w	80031e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309c:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <HAL_GPIO_Init+0x2e4>)
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	4a5a      	ldr	r2, [pc, #360]	@ (800320c <HAL_GPIO_Init+0x2e4>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80030a8:	4b58      	ldr	r3, [pc, #352]	@ (800320c <HAL_GPIO_Init+0x2e4>)
 80030aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b4:	4a56      	ldr	r2, [pc, #344]	@ (8003210 <HAL_GPIO_Init+0x2e8>)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030de:	d01f      	beq.n	8003120 <HAL_GPIO_Init+0x1f8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003214 <HAL_GPIO_Init+0x2ec>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d019      	beq.n	800311c <HAL_GPIO_Init+0x1f4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a4b      	ldr	r2, [pc, #300]	@ (8003218 <HAL_GPIO_Init+0x2f0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_GPIO_Init+0x1f0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a4a      	ldr	r2, [pc, #296]	@ (800321c <HAL_GPIO_Init+0x2f4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00d      	beq.n	8003114 <HAL_GPIO_Init+0x1ec>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a49      	ldr	r2, [pc, #292]	@ (8003220 <HAL_GPIO_Init+0x2f8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <HAL_GPIO_Init+0x1e8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a48      	ldr	r2, [pc, #288]	@ (8003224 <HAL_GPIO_Init+0x2fc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_GPIO_Init+0x1e4>
 8003108:	2305      	movs	r3, #5
 800310a:	e00a      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 800310c:	2306      	movs	r3, #6
 800310e:	e008      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003110:	2304      	movs	r3, #4
 8003112:	e006      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003114:	2303      	movs	r3, #3
 8003116:	e004      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003118:	2302      	movs	r3, #2
 800311a:	e002      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_GPIO_Init+0x1fa>
 8003120:	2300      	movs	r3, #0
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	f002 0203 	and.w	r2, r2, #3
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	4093      	lsls	r3, r2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003132:	4937      	ldr	r1, [pc, #220]	@ (8003210 <HAL_GPIO_Init+0x2e8>)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003140:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003164:	4a30      	ldr	r2, [pc, #192]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800316a:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_GPIO_Init+0x300>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800318e:	4a26      	ldr	r2, [pc, #152]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003194:	4b24      	ldr	r3, [pc, #144]	@ (8003228 <HAL_GPIO_Init+0x300>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031be:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031e2:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f ae9d 	bne.w	8002f38 <HAL_GPIO_Init+0x10>
  }
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40021000 	.word	0x40021000
 8003210:	40010000 	.word	0x40010000
 8003214:	48000400 	.word	0x48000400
 8003218:	48000800 	.word	0x48000800
 800321c:	48000c00 	.word	0x48000c00
 8003220:	48001000 	.word	0x48001000
 8003224:	48001400 	.word	0x48001400
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003248:	e002      	b.n	8003250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003266:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003272:	4a05      	ldr	r2, [pc, #20]	@ (8003288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f806 	bl	800328c <HAL_GPIO_EXTI_Callback>
  }
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40010400 	.word	0x40010400

0800328c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d141      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b2:	4b4b      	ldr	r3, [pc, #300]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032be:	d131      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c6:	4a46      	ldr	r2, [pc, #280]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d0:	4b43      	ldr	r3, [pc, #268]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d8:	4a41      	ldr	r2, [pc, #260]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e0:	4b40      	ldr	r3, [pc, #256]	@ (80033e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2232      	movs	r2, #50	@ 0x32
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	4a3f      	ldr	r2, [pc, #252]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f6:	e002      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	4b38      	ldr	r3, [pc, #224]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d102      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f2      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003312:	4b33      	ldr	r3, [pc, #204]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331e:	d158      	bne.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e057      	b.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003324:	4b2e      	ldr	r3, [pc, #184]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332a:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003334:	e04d      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800333c:	d141      	bne.n	80033c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800333e:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334a:	d131      	bne.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800334c:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003352:	4a23      	ldr	r2, [pc, #140]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800335c:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800336c:	4b1d      	ldr	r3, [pc, #116]	@ (80033e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2232      	movs	r2, #50	@ 0x32
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	0c9b      	lsrs	r3, r3, #18
 800337e:	3301      	adds	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003382:	e002      	b.n	800338a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3b01      	subs	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003396:	d102      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f2      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800339e:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033aa:	d112      	bne.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e011      	b.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b6:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033c0:	e007      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033c2:	4b07      	ldr	r3, [pc, #28]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033ca:	4a05      	ldr	r2, [pc, #20]	@ (80033e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40007000 	.word	0x40007000
 80033e4:	20000000 	.word	0x20000000
 80033e8:	431bde83 	.word	0x431bde83

080033ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033f0:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a04      	ldr	r2, [pc, #16]	@ (8003408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033fa:	6093      	str	r3, [r2, #8]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40007000 	.word	0x40007000

0800340c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e2fe      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d075      	beq.n	8003516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342a:	4b97      	ldr	r3, [pc, #604]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003434:	4b94      	ldr	r3, [pc, #592]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0x3e>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d002      	beq.n	8003450 <HAL_RCC_OscConfig+0x44>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d10b      	bne.n	8003468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	4b8d      	ldr	r3, [pc, #564]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d05b      	beq.n	8003514 <HAL_RCC_OscConfig+0x108>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d157      	bne.n	8003514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e2d9      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003470:	d106      	bne.n	8003480 <HAL_RCC_OscConfig+0x74>
 8003472:	4b85      	ldr	r3, [pc, #532]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a84      	ldr	r2, [pc, #528]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e01d      	b.n	80034bc <HAL_RCC_OscConfig+0xb0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x98>
 800348a:	4b7f      	ldr	r3, [pc, #508]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7e      	ldr	r2, [pc, #504]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b7c      	ldr	r3, [pc, #496]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7b      	ldr	r2, [pc, #492]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0xb0>
 80034a4:	4b78      	ldr	r3, [pc, #480]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a77      	ldr	r2, [pc, #476]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a74      	ldr	r2, [pc, #464]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe fa62 	bl	800198c <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe fa5e 	bl	800198c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	@ 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e29e      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034de:	4b6a      	ldr	r3, [pc, #424]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0xc0>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe fa4e 	bl	800198c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fe fa4a 	bl	800198c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	@ 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e28a      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003506:	4b60      	ldr	r3, [pc, #384]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0xe8>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d075      	beq.n	800360e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	4b59      	ldr	r3, [pc, #356]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352c:	4b56      	ldr	r3, [pc, #344]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b0c      	cmp	r3, #12
 800353a:	d102      	bne.n	8003542 <HAL_RCC_OscConfig+0x136>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d002      	beq.n	8003548 <HAL_RCC_OscConfig+0x13c>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d11f      	bne.n	8003588 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	4b4f      	ldr	r3, [pc, #316]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x154>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e25d      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b49      	ldr	r3, [pc, #292]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	4946      	ldr	r1, [pc, #280]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003574:	4b45      	ldr	r3, [pc, #276]	@ (800368c <HAL_RCC_OscConfig+0x280>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fce1 	bl	8000f40 <HAL_InitTick>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d043      	beq.n	800360c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e249      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003590:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3c      	ldr	r2, [pc, #240]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe f9f6 	bl	800198c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fe f9f2 	bl	800198c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e232      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b6:	4b34      	ldr	r3, [pc, #208]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	492d      	ldr	r1, [pc, #180]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
 80035d6:	e01a      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 80035de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f9d2 	bl	800198c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fe f9ce 	bl	800198c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e20e      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035fe:	4b22      	ldr	r3, [pc, #136]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1e0>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d041      	beq.n	800369e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01c      	beq.n	800365c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003628:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe f9ab 	bl	800198c <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363a:	f7fe f9a7 	bl	800198c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e1e7      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800364c:	4b0e      	ldr	r3, [pc, #56]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ef      	beq.n	800363a <HAL_RCC_OscConfig+0x22e>
 800365a:	e020      	b.n	800369e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800365c:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003662:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_RCC_OscConfig+0x27c>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe f98e 	bl	800198c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003672:	e00d      	b.n	8003690 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fe f98a 	bl	800198c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d906      	bls.n	8003690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1ca      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003690:	4b8c      	ldr	r3, [pc, #560]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ea      	bne.n	8003674 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036b0:	4b84      	ldr	r3, [pc, #528]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2b4>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x2b6>
 80036c0:	2300      	movs	r3, #0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b7f      	ldr	r3, [pc, #508]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	4a7e      	ldr	r2, [pc, #504]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d2:	4b7c      	ldr	r3, [pc, #496]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036de:	2301      	movs	r3, #1
 80036e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e2:	4b79      	ldr	r3, [pc, #484]	@ (80038c8 <HAL_RCC_OscConfig+0x4bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d118      	bne.n	8003720 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ee:	4b76      	ldr	r3, [pc, #472]	@ (80038c8 <HAL_RCC_OscConfig+0x4bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a75      	ldr	r2, [pc, #468]	@ (80038c8 <HAL_RCC_OscConfig+0x4bc>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fa:	f7fe f947 	bl	800198c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7fe f943 	bl	800198c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e183      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003714:	4b6c      	ldr	r3, [pc, #432]	@ (80038c8 <HAL_RCC_OscConfig+0x4bc>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d108      	bne.n	800373a <HAL_RCC_OscConfig+0x32e>
 8003728:	4b66      	ldr	r3, [pc, #408]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372e:	4a65      	ldr	r2, [pc, #404]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003738:	e024      	b.n	8003784 <HAL_RCC_OscConfig+0x378>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d110      	bne.n	8003764 <HAL_RCC_OscConfig+0x358>
 8003742:	4b60      	ldr	r3, [pc, #384]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003748:	4a5e      	ldr	r2, [pc, #376]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003752:	4b5c      	ldr	r3, [pc, #368]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003758:	4a5a      	ldr	r2, [pc, #360]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003762:	e00f      	b.n	8003784 <HAL_RCC_OscConfig+0x378>
 8003764:	4b57      	ldr	r3, [pc, #348]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376a:	4a56      	ldr	r2, [pc, #344]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003774:	4b53      	ldr	r3, [pc, #332]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377a:	4a52      	ldr	r2, [pc, #328]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fe f8fe 	bl	800198c <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fe f8fa 	bl	800198c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e138      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037aa:	4b46      	ldr	r3, [pc, #280]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ed      	beq.n	8003794 <HAL_RCC_OscConfig+0x388>
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fe f8e7 	bl	800198c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fe f8e3 	bl	800198c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e121      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d8:	4b3a      	ldr	r3, [pc, #232]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ed      	bne.n	80037c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d105      	bne.n	80037f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ec:	4b35      	ldr	r3, [pc, #212]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	4a34      	ldr	r2, [pc, #208]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d03c      	beq.n	800387e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01c      	beq.n	8003846 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800380c:	4b2d      	ldr	r3, [pc, #180]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800380e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003812:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe f8b6 	bl	800198c <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003824:	f7fe f8b2 	bl	800198c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0f2      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003836:	4b23      	ldr	r3, [pc, #140]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <HAL_RCC_OscConfig+0x418>
 8003844:	e01b      	b.n	800387e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003846:	4b1f      	ldr	r3, [pc, #124]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003848:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800384c:	4a1d      	ldr	r2, [pc, #116]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f023 0301 	bic.w	r3, r3, #1
 8003852:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fe f899 	bl	800198c <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800385e:	f7fe f895 	bl	800198c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0d5      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003870:	4b14      	ldr	r3, [pc, #80]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 8003872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ef      	bne.n	800385e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80c9 	beq.w	8003a1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003888:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b0c      	cmp	r3, #12
 8003892:	f000 8083 	beq.w	800399c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d15e      	bne.n	800395c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a08      	ldr	r2, [pc, #32]	@ (80038c4 <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe f86f 	bl	800198c <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b0:	e00c      	b.n	80038cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fe f86b 	bl	800198c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d905      	bls.n	80038cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0ab      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	4b55      	ldr	r3, [pc, #340]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ec      	bne.n	80038b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d8:	4b52      	ldr	r3, [pc, #328]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	4b52      	ldr	r3, [pc, #328]	@ (8003a28 <HAL_RCC_OscConfig+0x61c>)
 80038de:	4013      	ands	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6a11      	ldr	r1, [r2, #32]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80038f2:	0212      	lsls	r2, r2, #8
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038fa:	0852      	lsrs	r2, r2, #1
 80038fc:	3a01      	subs	r2, #1
 80038fe:	0552      	lsls	r2, r2, #21
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003906:	0852      	lsrs	r2, r2, #1
 8003908:	3a01      	subs	r2, #1
 800390a:	0652      	lsls	r2, r2, #25
 800390c:	4311      	orrs	r1, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003912:	06d2      	lsls	r2, r2, #27
 8003914:	430a      	orrs	r2, r1
 8003916:	4943      	ldr	r1, [pc, #268]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 8003918:	4313      	orrs	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391c:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a40      	ldr	r2, [pc, #256]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 8003922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003928:	4b3e      	ldr	r3, [pc, #248]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe f82a 	bl	800198c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fe f826 	bl	800198c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e066      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	4b35      	ldr	r3, [pc, #212]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x530>
 800395a:	e05e      	b.n	8003a1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395c:	4b31      	ldr	r3, [pc, #196]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a30      	ldr	r2, [pc, #192]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 8003962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe f810 	bl	800198c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe f80c 	bl	800198c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e04c      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003982:	4b28      	ldr	r3, [pc, #160]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800398e:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	4924      	ldr	r1, [pc, #144]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 8003994:	4b25      	ldr	r3, [pc, #148]	@ (8003a2c <HAL_RCC_OscConfig+0x620>)
 8003996:	4013      	ands	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
 800399a:	e03e      	b.n	8003a1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e039      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a24 <HAL_RCC_OscConfig+0x618>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d12c      	bne.n	8003a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	3b01      	subs	r3, #1
 80039c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d123      	bne.n	8003a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d11b      	bne.n	8003a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d113      	bne.n	8003a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d109      	bne.n	8003a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	019f800c 	.word	0x019f800c
 8003a2c:	feeefffc 	.word	0xfeeefffc

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e11e      	b.n	8003c86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b91      	ldr	r3, [pc, #580]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b8e      	ldr	r3, [pc, #568]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	498c      	ldr	r1, [pc, #560]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b8a      	ldr	r3, [pc, #552]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e106      	b.n	8003c86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d073      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d129      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8c:	4b81      	ldr	r3, [pc, #516]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0f4      	b.n	8003c86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a9c:	f000 f9d0 	bl	8003e40 <RCC_GetSysClockFreqFromPLLSource>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4a7c      	ldr	r2, [pc, #496]	@ (8003c98 <HAL_RCC_ClockConfig+0x268>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d93f      	bls.n	8003b2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d033      	beq.n	8003b2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d12f      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aca:	4b72      	ldr	r3, [pc, #456]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ad2:	4a70      	ldr	r2, [pc, #448]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ada:	2380      	movs	r3, #128	@ 0x80
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e024      	b.n	8003b2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0c6      	b.n	8003c86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af8:	4b66      	ldr	r3, [pc, #408]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0be      	b.n	8003c86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b08:	f000 f8ce 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4a61      	ldr	r2, [pc, #388]	@ (8003c98 <HAL_RCC_ClockConfig+0x268>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d909      	bls.n	8003b2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b16:	4b5f      	ldr	r3, [pc, #380]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b1e:	4a5d      	ldr	r2, [pc, #372]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b26:	2380      	movs	r3, #128	@ 0x80
 8003b28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4957      	ldr	r1, [pc, #348]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3c:	f7fd ff26 	bl	800198c <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fd ff22 	bl	800198c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e095      	b.n	8003c86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d023      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b84:	4b43      	ldr	r3, [pc, #268]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a42      	ldr	r2, [pc, #264]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003baa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b39      	ldr	r3, [pc, #228]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4936      	ldr	r1, [pc, #216]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b80      	cmp	r3, #128	@ 0x80
 8003bc4:	d105      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bc6:	4b33      	ldr	r3, [pc, #204]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	4a32      	ldr	r2, [pc, #200]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003bcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d21d      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 020f 	bic.w	r2, r3, #15
 8003be8:	4929      	ldr	r1, [pc, #164]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fecc 	bl	800198c <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7fd fec8 	bl	800198c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e03b      	b.n	8003c86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1ed      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c28:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4917      	ldr	r1, [pc, #92]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c46:	4b13      	ldr	r3, [pc, #76]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	490f      	ldr	r1, [pc, #60]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c5a:	f000 f825 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	490c      	ldr	r1, [pc, #48]	@ (8003c9c <HAL_RCC_ClockConfig+0x26c>)
 8003c6c:	5ccb      	ldrb	r3, [r1, r3]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	fa22 f303 	lsr.w	r3, r2, r3
 8003c76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <HAL_RCC_ClockConfig+0x270>)
 8003c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <HAL_RCC_ClockConfig+0x274>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd f95e 	bl	8000f40 <HAL_InitTick>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40022000 	.word	0x40022000
 8003c94:	40021000 	.word	0x40021000
 8003c98:	04c4b400 	.word	0x04c4b400
 8003c9c:	08009534 	.word	0x08009534
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	20000004 	.word	0x20000004

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cae:	4b2c      	ldr	r3, [pc, #176]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d102      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cba:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e047      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cc0:	4b27      	ldr	r3, [pc, #156]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d102      	bne.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ccc:	4b26      	ldr	r3, [pc, #152]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e03e      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cd2:	4b23      	ldr	r3, [pc, #140]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b0c      	cmp	r3, #12
 8003cdc:	d136      	bne.n	8003d4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d10c      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	4a16      	ldr	r2, [pc, #88]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d06:	68d2      	ldr	r2, [r2, #12]
 8003d08:	0a12      	lsrs	r2, r2, #8
 8003d0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	617b      	str	r3, [r7, #20]
      break;
 8003d14:	e00c      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d16:	4a13      	ldr	r2, [pc, #76]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	4a10      	ldr	r2, [pc, #64]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	0a12      	lsrs	r2, r2, #8
 8003d24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
      break;
 8003d2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0e5b      	lsrs	r3, r3, #25
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e001      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d50:	693b      	ldr	r3, [r7, #16]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	016e3600 	.word	0x016e3600

08003d6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b03      	ldr	r3, [pc, #12]	@ (8003d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000000 	.word	0x20000000

08003d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d88:	f7ff fff0 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4904      	ldr	r1, [pc, #16]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	08009544 	.word	0x08009544

08003db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003db4:	f7ff ffda 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0adb      	lsrs	r3, r3, #11
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4904      	ldr	r1, [pc, #16]	@ (8003dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	08009544 	.word	0x08009544

08003ddc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	220f      	movs	r2, #15
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003dec:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <HAL_RCC_GetClockConfig+0x5c>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0203 	and.w	r2, r3, #3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003df8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e38 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e04:	4b0c      	ldr	r3, [pc, #48]	@ (8003e38 <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e10:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_RCC_GetClockConfig+0x5c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	08db      	lsrs	r3, r3, #3
 8003e16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <HAL_RCC_GetClockConfig+0x60>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 020f 	and.w	r2, r3, #15
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40022000 	.word	0x40022000

08003e40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d10c      	bne.n	8003e7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e64:	4a17      	ldr	r2, [pc, #92]	@ (8003ec4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e6e:	68d2      	ldr	r2, [r2, #12]
 8003e70:	0a12      	lsrs	r2, r2, #8
 8003e72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	617b      	str	r3, [r7, #20]
    break;
 8003e7c:	e00c      	b.n	8003e98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e88:	68d2      	ldr	r2, [r2, #12]
 8003e8a:	0a12      	lsrs	r2, r2, #8
 8003e8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
    break;
 8003e96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e98:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	0e5b      	lsrs	r3, r3, #25
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003eb2:	687b      	ldr	r3, [r7, #4]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	016e3600 	.word	0x016e3600
 8003ec8:	00f42400 	.word	0x00f42400

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8098 	beq.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b43      	ldr	r3, [pc, #268]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	4b40      	ldr	r3, [pc, #256]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	4a3f      	ldr	r2, [pc, #252]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f06:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f12:	2301      	movs	r3, #1
 8003f14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f16:	4b3a      	ldr	r3, [pc, #232]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a39      	ldr	r2, [pc, #228]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f22:	f7fd fd33 	bl	800198c <HAL_GetTick>
 8003f26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f28:	e009      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2a:	f7fd fd2f 	bl	800198c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d902      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f3c:	e005      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f3e:	4b30      	ldr	r3, [pc, #192]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ef      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d159      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f50:	4b2a      	ldr	r3, [pc, #168]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01e      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d019      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f6c:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f78:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f88:	4b1c      	ldr	r3, [pc, #112]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f98:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fcef 	bl	800198c <HAL_GetTick>
 8003fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb0:	e00b      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd fceb 	bl	800198c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d902      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fc8:	e006      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fca:	4b0c      	ldr	r3, [pc, #48]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ec      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fde:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	4903      	ldr	r1, [pc, #12]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ff4:	e008      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	74bb      	strb	r3, [r7, #18]
 8003ffa:	e005      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004008:	7c7b      	ldrb	r3, [r7, #17]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400e:	4ba7      	ldr	r3, [pc, #668]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	4aa6      	ldr	r2, [pc, #664]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004018:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004026:	4ba1      	ldr	r3, [pc, #644]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	f023 0203 	bic.w	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	499d      	ldr	r1, [pc, #628]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004048:	4b98      	ldr	r3, [pc, #608]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f023 020c 	bic.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4995      	ldr	r1, [pc, #596]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800406a:	4b90      	ldr	r3, [pc, #576]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004070:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	498c      	ldr	r1, [pc, #560]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800408c:	4b87      	ldr	r3, [pc, #540]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004092:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	4984      	ldr	r1, [pc, #528]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ae:	4b7f      	ldr	r3, [pc, #508]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	497b      	ldr	r1, [pc, #492]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040d0:	4b76      	ldr	r3, [pc, #472]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	4973      	ldr	r1, [pc, #460]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f2:	4b6e      	ldr	r3, [pc, #440]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	496a      	ldr	r1, [pc, #424]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004114:	4b65      	ldr	r3, [pc, #404]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4962      	ldr	r1, [pc, #392]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004136:	4b5d      	ldr	r3, [pc, #372]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	4959      	ldr	r1, [pc, #356]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004158:	4b54      	ldr	r3, [pc, #336]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800415e:	f023 0203 	bic.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	4951      	ldr	r1, [pc, #324]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417a:	4b4c      	ldr	r3, [pc, #304]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004180:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	4948      	ldr	r1, [pc, #288]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800419c:	4b43      	ldr	r3, [pc, #268]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	4940      	ldr	r1, [pc, #256]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ba:	d105      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041bc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4a3a      	ldr	r2, [pc, #232]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d015      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041d4:	4b35      	ldr	r3, [pc, #212]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e2:	4932      	ldr	r1, [pc, #200]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041f2:	d105      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f4:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a2c      	ldr	r2, [pc, #176]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800420c:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	4924      	ldr	r1, [pc, #144]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800422a:	d105      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800422c:	4b1f      	ldr	r3, [pc, #124]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a1e      	ldr	r2, [pc, #120]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004236:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004244:	4b19      	ldr	r3, [pc, #100]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004252:	4916      	ldr	r1, [pc, #88]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004262:	d105      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a10      	ldr	r2, [pc, #64]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800426e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d019      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800427c:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	4908      	ldr	r1, [pc, #32]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800429a:	d109      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429c:	4b03      	ldr	r3, [pc, #12]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a02      	ldr	r2, [pc, #8]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042a6:	60d3      	str	r3, [r2, #12]
 80042a8:	e002      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042bc:	4b29      	ldr	r3, [pc, #164]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	4926      	ldr	r1, [pc, #152]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042da:	d105      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042dc:	4b21      	ldr	r3, [pc, #132]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a20      	ldr	r2, [pc, #128]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004302:	4918      	ldr	r1, [pc, #96]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004312:	d105      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004314:	4b13      	ldr	r3, [pc, #76]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800431a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800432c:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800432e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004332:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	490a      	ldr	r1, [pc, #40]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800434a:	d105      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004356:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004358:	7cbb      	ldrb	r3, [r7, #18]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e049      	b.n	800440e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd f886 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fdc4 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e054      	b.n	80044da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a26      	ldr	r2, [pc, #152]	@ (80044e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d022      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800445a:	d01d      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a22      	ldr	r2, [pc, #136]	@ (80044ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d018      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a21      	ldr	r2, [pc, #132]	@ (80044f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00e      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1e      	ldr	r2, [pc, #120]	@ (80044f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <HAL_TIM_Base_Start_IT+0xe4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1b      	ldr	r2, [pc, #108]	@ (8004500 <HAL_TIM_Base_Start_IT+0xe8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d115      	bne.n	80044c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	4b19      	ldr	r3, [pc, #100]	@ (8004504 <HAL_TIM_Base_Start_IT+0xec>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d015      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0xbe>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b0:	d011      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c2:	e008      	b.n	80044d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e000      	b.n	80044d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40015000 	.word	0x40015000
 8004504:	00010007 	.word	0x00010007

08004508 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e049      	b.n	80045ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f841 	bl	80045b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f000 fcf4 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_TIM_PWM_Start+0x24>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e03c      	b.n	800466a <HAL_TIM_PWM_Start+0x9e>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d109      	bne.n	800460a <HAL_TIM_PWM_Start+0x3e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e02f      	b.n	800466a <HAL_TIM_PWM_Start+0x9e>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d109      	bne.n	8004624 <HAL_TIM_PWM_Start+0x58>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e022      	b.n	800466a <HAL_TIM_PWM_Start+0x9e>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d109      	bne.n	800463e <HAL_TIM_PWM_Start+0x72>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	e015      	b.n	800466a <HAL_TIM_PWM_Start+0x9e>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b10      	cmp	r3, #16
 8004642:	d109      	bne.n	8004658 <HAL_TIM_PWM_Start+0x8c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e008      	b.n	800466a <HAL_TIM_PWM_Start+0x9e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0a6      	b.n	80047c0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0xb6>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004680:	e023      	b.n	80046ca <HAL_TIM_PWM_Start+0xfe>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Start+0xc6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004690:	e01b      	b.n	80046ca <HAL_TIM_PWM_Start+0xfe>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Start+0xd6>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046a0:	e013      	b.n	80046ca <HAL_TIM_PWM_Start+0xfe>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_PWM_Start+0xe6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_PWM_Start+0xfe>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_PWM_Start+0xf6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046c0:	e003      	b.n	80046ca <HAL_TIM_PWM_Start+0xfe>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 f91c 	bl	8005910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3a      	ldr	r2, [pc, #232]	@ (80047c8 <HAL_TIM_PWM_Start+0x1fc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_TIM_PWM_Start+0x148>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a39      	ldr	r2, [pc, #228]	@ (80047cc <HAL_TIM_PWM_Start+0x200>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_TIM_PWM_Start+0x148>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a37      	ldr	r2, [pc, #220]	@ (80047d0 <HAL_TIM_PWM_Start+0x204>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIM_PWM_Start+0x148>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a36      	ldr	r2, [pc, #216]	@ (80047d4 <HAL_TIM_PWM_Start+0x208>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIM_PWM_Start+0x148>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a34      	ldr	r2, [pc, #208]	@ (80047d8 <HAL_TIM_PWM_Start+0x20c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_PWM_Start+0x148>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a33      	ldr	r2, [pc, #204]	@ (80047dc <HAL_TIM_PWM_Start+0x210>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_TIM_PWM_Start+0x14c>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_TIM_PWM_Start+0x14e>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a25      	ldr	r2, [pc, #148]	@ (80047c8 <HAL_TIM_PWM_Start+0x1fc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_TIM_PWM_Start+0x1b2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004740:	d01d      	beq.n	800477e <HAL_TIM_PWM_Start+0x1b2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <HAL_TIM_PWM_Start+0x214>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_TIM_PWM_Start+0x1b2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a24      	ldr	r2, [pc, #144]	@ (80047e4 <HAL_TIM_PWM_Start+0x218>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_TIM_PWM_Start+0x1b2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a23      	ldr	r2, [pc, #140]	@ (80047e8 <HAL_TIM_PWM_Start+0x21c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIM_PWM_Start+0x1b2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <HAL_TIM_PWM_Start+0x200>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_TIM_PWM_Start+0x1b2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <HAL_TIM_PWM_Start+0x204>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIM_PWM_Start+0x1b2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <HAL_TIM_PWM_Start+0x210>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d115      	bne.n	80047aa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b19      	ldr	r3, [pc, #100]	@ (80047ec <HAL_TIM_PWM_Start+0x220>)
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b06      	cmp	r3, #6
 800478e:	d015      	beq.n	80047bc <HAL_TIM_PWM_Start+0x1f0>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004796:	d011      	beq.n	80047bc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	e008      	b.n	80047bc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e000      	b.n	80047be <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800
 80047dc:	40015000 	.word	0x40015000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	00010007 	.word	0x00010007

080047f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d020      	beq.n	8004854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0202 	mvn.w	r2, #2
 8004824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fb5c 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fb4e 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fb5f 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d020      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0204 	mvn.w	r2, #4
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fb36 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fb28 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fb39 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d020      	beq.n	80048ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01b      	beq.n	80048ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0208 	mvn.w	r2, #8
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2204      	movs	r2, #4
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fb10 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fb02 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fb13 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d020      	beq.n	8004938 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01b      	beq.n	8004938 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0210 	mvn.w	r2, #16
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2208      	movs	r2, #8
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 faea 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fadc 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 faed 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0201 	mvn.w	r2, #1
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fc fab6 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00c      	beq.n	800498a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f001 fa8d 	bl	8005ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00c      	beq.n	80049ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 fa85 	bl	8005eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 faa7 	bl	8004f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0220 	mvn.w	r2, #32
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 fa4d 	bl	8005e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fa59 	bl	8005ecc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f001 fa51 	bl	8005ee0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 fa49 	bl	8005ef4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00c      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f001 fa41 	bl	8005f08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0ff      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b14      	cmp	r3, #20
 8004aba:	f200 80f0 	bhi.w	8004c9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004abe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004c9f 	.word	0x08004c9f
 8004acc:	08004c9f 	.word	0x08004c9f
 8004ad0:	08004c9f 	.word	0x08004c9f
 8004ad4:	08004b59 	.word	0x08004b59
 8004ad8:	08004c9f 	.word	0x08004c9f
 8004adc:	08004c9f 	.word	0x08004c9f
 8004ae0:	08004c9f 	.word	0x08004c9f
 8004ae4:	08004b9b 	.word	0x08004b9b
 8004ae8:	08004c9f 	.word	0x08004c9f
 8004aec:	08004c9f 	.word	0x08004c9f
 8004af0:	08004c9f 	.word	0x08004c9f
 8004af4:	08004bdb 	.word	0x08004bdb
 8004af8:	08004c9f 	.word	0x08004c9f
 8004afc:	08004c9f 	.word	0x08004c9f
 8004b00:	08004c9f 	.word	0x08004c9f
 8004b04:	08004c1d 	.word	0x08004c1d
 8004b08:	08004c9f 	.word	0x08004c9f
 8004b0c:	08004c9f 	.word	0x08004c9f
 8004b10:	08004c9f 	.word	0x08004c9f
 8004b14:	08004c5d 	.word	0x08004c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fabc 	bl	800509c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
      break;
 8004b56:	e0a5      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fb36 	bl	80051d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6999      	ldr	r1, [r3, #24]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
      break;
 8004b98:	e084      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fba9 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0208 	orr.w	r2, r2, #8
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0204 	bic.w	r2, r2, #4
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      break;
 8004bd8:	e064      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fc1b 	bl	800541c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	61da      	str	r2, [r3, #28]
      break;
 8004c1a:	e043      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fc8e 	bl	8005544 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0204 	bic.w	r2, r2, #4
 8004c46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c5a:	e023      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fcd8 	bl	8005618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	021a      	lsls	r2, r3, #8
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop

08004cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0f6      	b.n	8004ec2 <HAL_TIM_ConfigClockSource+0x20a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004cf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6f      	ldr	r2, [pc, #444]	@ (8004ecc <HAL_TIM_ConfigClockSource+0x214>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	f000 80c1 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d14:	4a6d      	ldr	r2, [pc, #436]	@ (8004ecc <HAL_TIM_ConfigClockSource+0x214>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	f200 80c6 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d1c:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x218>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	f000 80b9 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d24:	4a6a      	ldr	r2, [pc, #424]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x218>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	f200 80be 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d2c:	4a69      	ldr	r2, [pc, #420]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	f000 80b1 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d34:	4a67      	ldr	r2, [pc, #412]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	f200 80b6 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d3c:	4a66      	ldr	r2, [pc, #408]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x220>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	f000 80a9 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d44:	4a64      	ldr	r2, [pc, #400]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x220>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	f200 80ae 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d4c:	4a63      	ldr	r2, [pc, #396]	@ (8004edc <HAL_TIM_ConfigClockSource+0x224>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	f000 80a1 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d54:	4a61      	ldr	r2, [pc, #388]	@ (8004edc <HAL_TIM_ConfigClockSource+0x224>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	f200 80a6 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d5c:	4a60      	ldr	r2, [pc, #384]	@ (8004ee0 <HAL_TIM_ConfigClockSource+0x228>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	f000 8099 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d64:	4a5e      	ldr	r2, [pc, #376]	@ (8004ee0 <HAL_TIM_ConfigClockSource+0x228>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	f200 809e 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d70:	f000 8091 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d78:	f200 8096 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d80:	f000 8089 	beq.w	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004d84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d88:	f200 808e 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d90:	d03e      	beq.n	8004e10 <HAL_TIM_ConfigClockSource+0x158>
 8004d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d96:	f200 8087 	bhi.w	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9e:	f000 8086 	beq.w	8004eae <HAL_TIM_ConfigClockSource+0x1f6>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	d87f      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004da8:	2b70      	cmp	r3, #112	@ 0x70
 8004daa:	d01a      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x12a>
 8004dac:	2b70      	cmp	r3, #112	@ 0x70
 8004dae:	d87b      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004db0:	2b60      	cmp	r3, #96	@ 0x60
 8004db2:	d050      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x19e>
 8004db4:	2b60      	cmp	r3, #96	@ 0x60
 8004db6:	d877      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004db8:	2b50      	cmp	r3, #80	@ 0x50
 8004dba:	d03c      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x17e>
 8004dbc:	2b50      	cmp	r3, #80	@ 0x50
 8004dbe:	d873      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d058      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x1be>
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d86f      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dc8:	2b30      	cmp	r3, #48	@ 0x30
 8004dca:	d064      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004dcc:	2b30      	cmp	r3, #48	@ 0x30
 8004dce:	d86b      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d060      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d867      	bhi.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d05c      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d05a      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x1de>
 8004de0:	e062      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004df2:	f000 fd6d 	bl	80058d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	609a      	str	r2, [r3, #8]
      break;
 8004e0e:	e04f      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e20:	f000 fd56 	bl	80058d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e32:	609a      	str	r2, [r3, #8]
      break;
 8004e34:	e03c      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	461a      	mov	r2, r3
 8004e44:	f000 fcc8 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2150      	movs	r1, #80	@ 0x50
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fd21 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8004e54:	e02c      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e62:	461a      	mov	r2, r3
 8004e64:	f000 fce7 	bl	8005836 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2160      	movs	r1, #96	@ 0x60
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fd11 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8004e74:	e01c      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 fca8 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2140      	movs	r1, #64	@ 0x40
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fd01 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8004e94:	e00c      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fcf8 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8004ea6:	e003      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004eac:	e000      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004eae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	00100070 	.word	0x00100070
 8004ed0:	00100060 	.word	0x00100060
 8004ed4:	00100050 	.word	0x00100050
 8004ed8:	00100040 	.word	0x00100040
 8004edc:	00100030 	.word	0x00100030
 8004ee0:	00100020 	.word	0x00100020

08004ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a4c      	ldr	r2, [pc, #304]	@ (8005078 <TIM_Base_SetConfig+0x144>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d017      	beq.n	8004f7c <TIM_Base_SetConfig+0x48>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f52:	d013      	beq.n	8004f7c <TIM_Base_SetConfig+0x48>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a49      	ldr	r2, [pc, #292]	@ (800507c <TIM_Base_SetConfig+0x148>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00f      	beq.n	8004f7c <TIM_Base_SetConfig+0x48>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a48      	ldr	r2, [pc, #288]	@ (8005080 <TIM_Base_SetConfig+0x14c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_Base_SetConfig+0x48>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a47      	ldr	r2, [pc, #284]	@ (8005084 <TIM_Base_SetConfig+0x150>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_Base_SetConfig+0x48>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a46      	ldr	r2, [pc, #280]	@ (8005088 <TIM_Base_SetConfig+0x154>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x48>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a45      	ldr	r2, [pc, #276]	@ (800508c <TIM_Base_SetConfig+0x158>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a39      	ldr	r2, [pc, #228]	@ (8005078 <TIM_Base_SetConfig+0x144>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d023      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9c:	d01f      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a36      	ldr	r2, [pc, #216]	@ (800507c <TIM_Base_SetConfig+0x148>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a35      	ldr	r2, [pc, #212]	@ (8005080 <TIM_Base_SetConfig+0x14c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a34      	ldr	r2, [pc, #208]	@ (8005084 <TIM_Base_SetConfig+0x150>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a33      	ldr	r2, [pc, #204]	@ (8005088 <TIM_Base_SetConfig+0x154>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a33      	ldr	r2, [pc, #204]	@ (8005090 <TIM_Base_SetConfig+0x15c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	@ (8005094 <TIM_Base_SetConfig+0x160>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a31      	ldr	r2, [pc, #196]	@ (8005098 <TIM_Base_SetConfig+0x164>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0xaa>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800508c <TIM_Base_SetConfig+0x158>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <TIM_Base_SetConfig+0x144>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <TIM_Base_SetConfig+0x110>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1a      	ldr	r2, [pc, #104]	@ (8005088 <TIM_Base_SetConfig+0x154>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00f      	beq.n	8005044 <TIM_Base_SetConfig+0x110>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1a      	ldr	r2, [pc, #104]	@ (8005090 <TIM_Base_SetConfig+0x15c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00b      	beq.n	8005044 <TIM_Base_SetConfig+0x110>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a19      	ldr	r2, [pc, #100]	@ (8005094 <TIM_Base_SetConfig+0x160>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_Base_SetConfig+0x110>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <TIM_Base_SetConfig+0x164>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0x110>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a13      	ldr	r2, [pc, #76]	@ (800508c <TIM_Base_SetConfig+0x158>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d103      	bne.n	800504c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d105      	bne.n	800506a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	611a      	str	r2, [r3, #16]
  }
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40000c00 	.word	0x40000c00
 8005088:	40013400 	.word	0x40013400
 800508c:	40015000 	.word	0x40015000
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800

0800509c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f023 0201 	bic.w	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 0302 	bic.w	r3, r3, #2
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a30      	ldr	r2, [pc, #192]	@ (80051b8 <TIM_OC1_SetConfig+0x11c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <TIM_OC1_SetConfig+0x88>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	@ (80051bc <TIM_OC1_SetConfig+0x120>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00f      	beq.n	8005124 <TIM_OC1_SetConfig+0x88>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2e      	ldr	r2, [pc, #184]	@ (80051c0 <TIM_OC1_SetConfig+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_OC1_SetConfig+0x88>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a2d      	ldr	r2, [pc, #180]	@ (80051c4 <TIM_OC1_SetConfig+0x128>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_OC1_SetConfig+0x88>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a2c      	ldr	r2, [pc, #176]	@ (80051c8 <TIM_OC1_SetConfig+0x12c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC1_SetConfig+0x88>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a2b      	ldr	r2, [pc, #172]	@ (80051cc <TIM_OC1_SetConfig+0x130>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10c      	bne.n	800513e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0308 	bic.w	r3, r3, #8
 800512a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1d      	ldr	r2, [pc, #116]	@ (80051b8 <TIM_OC1_SetConfig+0x11c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <TIM_OC1_SetConfig+0xd2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1c      	ldr	r2, [pc, #112]	@ (80051bc <TIM_OC1_SetConfig+0x120>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00f      	beq.n	800516e <TIM_OC1_SetConfig+0xd2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1b      	ldr	r2, [pc, #108]	@ (80051c0 <TIM_OC1_SetConfig+0x124>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00b      	beq.n	800516e <TIM_OC1_SetConfig+0xd2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1a      	ldr	r2, [pc, #104]	@ (80051c4 <TIM_OC1_SetConfig+0x128>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <TIM_OC1_SetConfig+0xd2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a19      	ldr	r2, [pc, #100]	@ (80051c8 <TIM_OC1_SetConfig+0x12c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC1_SetConfig+0xd2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a18      	ldr	r2, [pc, #96]	@ (80051cc <TIM_OC1_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d111      	bne.n	8005192 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40013400 	.word	0x40013400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800
 80051cc:	40015000 	.word	0x40015000

080051d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f023 0210 	bic.w	r2, r3, #16
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800520a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0320 	bic.w	r3, r3, #32
 800521e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a2c      	ldr	r2, [pc, #176]	@ (80052e0 <TIM_OC2_SetConfig+0x110>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_OC2_SetConfig+0x74>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a2b      	ldr	r2, [pc, #172]	@ (80052e4 <TIM_OC2_SetConfig+0x114>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC2_SetConfig+0x74>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2a      	ldr	r2, [pc, #168]	@ (80052e8 <TIM_OC2_SetConfig+0x118>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10d      	bne.n	8005260 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800524a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800525e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <TIM_OC2_SetConfig+0x110>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <TIM_OC2_SetConfig+0xc0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <TIM_OC2_SetConfig+0x114>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00f      	beq.n	8005290 <TIM_OC2_SetConfig+0xc0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1e      	ldr	r2, [pc, #120]	@ (80052ec <TIM_OC2_SetConfig+0x11c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_OC2_SetConfig+0xc0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <TIM_OC2_SetConfig+0x120>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_OC2_SetConfig+0xc0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <TIM_OC2_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC2_SetConfig+0xc0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a17      	ldr	r2, [pc, #92]	@ (80052e8 <TIM_OC2_SetConfig+0x118>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d113      	bne.n	80052b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40015000 	.word	0x40015000
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2b      	ldr	r2, [pc, #172]	@ (8005404 <TIM_OC3_SetConfig+0x10c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_OC3_SetConfig+0x72>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <TIM_OC3_SetConfig+0x110>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_OC3_SetConfig+0x72>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a29      	ldr	r2, [pc, #164]	@ (800540c <TIM_OC3_SetConfig+0x114>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10d      	bne.n	8005386 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1e      	ldr	r2, [pc, #120]	@ (8005404 <TIM_OC3_SetConfig+0x10c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <TIM_OC3_SetConfig+0xbe>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1d      	ldr	r2, [pc, #116]	@ (8005408 <TIM_OC3_SetConfig+0x110>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00f      	beq.n	80053b6 <TIM_OC3_SetConfig+0xbe>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1d      	ldr	r2, [pc, #116]	@ (8005410 <TIM_OC3_SetConfig+0x118>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00b      	beq.n	80053b6 <TIM_OC3_SetConfig+0xbe>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <TIM_OC3_SetConfig+0x11c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <TIM_OC3_SetConfig+0xbe>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <TIM_OC3_SetConfig+0x120>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC3_SetConfig+0xbe>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a16      	ldr	r2, [pc, #88]	@ (800540c <TIM_OC3_SetConfig+0x114>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d113      	bne.n	80053de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40015000 	.word	0x40015000
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800

0800541c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800544a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800546a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	031b      	lsls	r3, r3, #12
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a2c      	ldr	r2, [pc, #176]	@ (800552c <TIM_OC4_SetConfig+0x110>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d007      	beq.n	8005490 <TIM_OC4_SetConfig+0x74>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a2b      	ldr	r2, [pc, #172]	@ (8005530 <TIM_OC4_SetConfig+0x114>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC4_SetConfig+0x74>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a2a      	ldr	r2, [pc, #168]	@ (8005534 <TIM_OC4_SetConfig+0x118>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10d      	bne.n	80054ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1f      	ldr	r2, [pc, #124]	@ (800552c <TIM_OC4_SetConfig+0x110>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_OC4_SetConfig+0xc0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005530 <TIM_OC4_SetConfig+0x114>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00f      	beq.n	80054dc <TIM_OC4_SetConfig+0xc0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a1e      	ldr	r2, [pc, #120]	@ (8005538 <TIM_OC4_SetConfig+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_OC4_SetConfig+0xc0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a1d      	ldr	r2, [pc, #116]	@ (800553c <TIM_OC4_SetConfig+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC4_SetConfig+0xc0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005540 <TIM_OC4_SetConfig+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC4_SetConfig+0xc0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a17      	ldr	r2, [pc, #92]	@ (8005534 <TIM_OC4_SetConfig+0x118>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d113      	bne.n	8005504 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40013400 	.word	0x40013400
 8005534:	40015000 	.word	0x40015000
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800

08005544 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005588:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a19      	ldr	r2, [pc, #100]	@ (8005600 <TIM_OC5_SetConfig+0xbc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_OC5_SetConfig+0x82>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a18      	ldr	r2, [pc, #96]	@ (8005604 <TIM_OC5_SetConfig+0xc0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_OC5_SetConfig+0x82>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a17      	ldr	r2, [pc, #92]	@ (8005608 <TIM_OC5_SetConfig+0xc4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC5_SetConfig+0x82>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a16      	ldr	r2, [pc, #88]	@ (800560c <TIM_OC5_SetConfig+0xc8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC5_SetConfig+0x82>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <TIM_OC5_SetConfig+0xcc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC5_SetConfig+0x82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a14      	ldr	r2, [pc, #80]	@ (8005614 <TIM_OC5_SetConfig+0xd0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d109      	bne.n	80055da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40013400 	.word	0x40013400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800
 8005614:	40015000 	.word	0x40015000

08005618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800565e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	051b      	lsls	r3, r3, #20
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a1a      	ldr	r2, [pc, #104]	@ (80056d8 <TIM_OC6_SetConfig+0xc0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_OC6_SetConfig+0x84>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <TIM_OC6_SetConfig+0xc4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_OC6_SetConfig+0x84>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a18      	ldr	r2, [pc, #96]	@ (80056e0 <TIM_OC6_SetConfig+0xc8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_OC6_SetConfig+0x84>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <TIM_OC6_SetConfig+0xcc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_OC6_SetConfig+0x84>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a16      	ldr	r2, [pc, #88]	@ (80056e8 <TIM_OC6_SetConfig+0xd0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC6_SetConfig+0x84>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a15      	ldr	r2, [pc, #84]	@ (80056ec <TIM_OC6_SetConfig+0xd4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d109      	bne.n	80056b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	029b      	lsls	r3, r3, #10
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40013400 	.word	0x40013400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800
 80056ec:	40015000 	.word	0x40015000

080056f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a28      	ldr	r2, [pc, #160]	@ (80057bc <TIM_TI1_SetConfig+0xcc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01b      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005724:	d017      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a25      	ldr	r2, [pc, #148]	@ (80057c0 <TIM_TI1_SetConfig+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a24      	ldr	r2, [pc, #144]	@ (80057c4 <TIM_TI1_SetConfig+0xd4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00f      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a23      	ldr	r2, [pc, #140]	@ (80057c8 <TIM_TI1_SetConfig+0xd8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a22      	ldr	r2, [pc, #136]	@ (80057cc <TIM_TI1_SetConfig+0xdc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <TIM_TI1_SetConfig+0xe0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a20      	ldr	r2, [pc, #128]	@ (80057d4 <TIM_TI1_SetConfig+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <TIM_TI1_SetConfig+0x6a>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <TIM_TI1_SetConfig+0x6c>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e003      	b.n	800577a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	b2db      	uxtb	r3, r3
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f023 030a 	bic.w	r3, r3, #10
 8005794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f003 030a 	and.w	r3, r3, #10
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40015000 	.word	0x40015000

080057d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 030a 	bic.w	r3, r3, #10
 8005814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005836:	b480      	push	{r7}
 8005838:	b087      	sub	sp, #28
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f023 0210 	bic.w	r2, r3, #16
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	031b      	lsls	r3, r3, #12
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005872:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80058ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f043 0307 	orr.w	r3, r3, #7
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	2201      	movs	r2, #1
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	431a      	orrs	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08a      	sub	sp, #40	@ 0x28
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0a0      	b.n	8005ab0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb fdac 	bl	80014e0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f7ff faca 	bl	8004f34 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6819      	ldr	r1, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2203      	movs	r2, #3
 80059ae:	f7ff fe9f 	bl	80056f0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 020c 	bic.w	r2, r2, #12
 80059c0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6999      	ldr	r1, [r3, #24]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059e2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a06:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a16:	f023 0307 	bic.w	r3, r3, #7
 8005a1a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0204 	orr.w	r2, r2, #4
 8005a2a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a30:	2300      	movs	r3, #0
 8005a32:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005a34:	2370      	movs	r3, #112	@ 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f107 020c 	add.w	r2, r7, #12
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fbbb 	bl	80051d0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3728      	adds	r7, #40	@ 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <HAL_TIMEx_PWMN_Start+0x24>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e022      	b.n	8005b22 <HAL_TIMEx_PWMN_Start+0x6a>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d109      	bne.n	8005af6 <HAL_TIMEx_PWMN_Start+0x3e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	bf14      	ite	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	2300      	moveq	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e015      	b.n	8005b22 <HAL_TIMEx_PWMN_Start+0x6a>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d109      	bne.n	8005b10 <HAL_TIMEx_PWMN_Start+0x58>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	bf14      	ite	ne
 8005b08:	2301      	movne	r3, #1
 8005b0a:	2300      	moveq	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	e008      	b.n	8005b22 <HAL_TIMEx_PWMN_Start+0x6a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e073      	b.n	8005c12 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIMEx_PWMN_Start+0x82>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b38:	e013      	b.n	8005b62 <HAL_TIMEx_PWMN_Start+0xaa>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIMEx_PWMN_Start+0x92>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b48:	e00b      	b.n	8005b62 <HAL_TIMEx_PWMN_Start+0xaa>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIMEx_PWMN_Start+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b58:	e003      	b.n	8005b62 <HAL_TIMEx_PWMN_Start+0xaa>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2204      	movs	r2, #4
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f9d6 	bl	8005f1c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a25      	ldr	r2, [pc, #148]	@ (8005c1c <HAL_TIMEx_PWMN_Start+0x164>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d022      	beq.n	8005bd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b92:	d01d      	beq.n	8005bd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a21      	ldr	r2, [pc, #132]	@ (8005c20 <HAL_TIMEx_PWMN_Start+0x168>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a20      	ldr	r2, [pc, #128]	@ (8005c24 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <HAL_TIMEx_PWMN_Start+0x170>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c2c <HAL_TIMEx_PWMN_Start+0x174>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <HAL_TIMEx_PWMN_Start+0x178>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_TIMEx_PWMN_Start+0x118>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	@ (8005c34 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d115      	bne.n	8005bfc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	4b18      	ldr	r3, [pc, #96]	@ (8005c38 <HAL_TIMEx_PWMN_Start+0x180>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d015      	beq.n	8005c0e <HAL_TIMEx_PWMN_Start+0x156>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be8:	d011      	beq.n	8005c0e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfa:	e008      	b.n	8005c0e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e000      	b.n	8005c10 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40013400 	.word	0x40013400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40015000 	.word	0x40015000
 8005c38:	00010007 	.word	0x00010007

08005c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e074      	b.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a34      	ldr	r2, [pc, #208]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a33      	ldr	r2, [pc, #204]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a31      	ldr	r2, [pc, #196]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d108      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a21      	ldr	r2, [pc, #132]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d022      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd4:	d01d      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1f      	ldr	r2, [pc, #124]	@ (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d018      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1c      	ldr	r2, [pc, #112]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00e      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d009      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a18      	ldr	r2, [pc, #96]	@ (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d004      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a11      	ldr	r2, [pc, #68]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d10c      	bne.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40013400 	.word	0x40013400
 8005d54:	40015000 	.word	0x40015000
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40014000 	.word	0x40014000

08005d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e078      	b.n	8005e76 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	041b      	lsls	r3, r3, #16
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	@ (8005e84 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d11c      	bne.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	051b      	lsls	r3, r3, #20
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40015000 	.word	0x40015000

08005e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	2204      	movs	r2, #4
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	401a      	ands	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1a      	ldr	r2, [r3, #32]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e042      	b.n	8005ffe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fb fc0a 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	@ 0x24
 8005f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 ff61 	bl	8006e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fc62 	bl	8006880 <UART_SetConfig>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e01b      	b.n	8005ffe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fe4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0201 	orr.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 ffe0 	bl	8006fbc <UART_CheckIdleState>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b08a      	sub	sp, #40	@ 0x28
 800600a:	af02      	add	r7, sp, #8
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601c:	2b20      	cmp	r3, #32
 800601e:	d17b      	bne.n	8006118 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_UART_Transmit+0x26>
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e074      	b.n	800611a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2221      	movs	r2, #33	@ 0x21
 800603c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006040:	f7fb fca4 	bl	800198c <HAL_GetTick>
 8006044:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	88fa      	ldrh	r2, [r7, #6]
 8006052:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605e:	d108      	bne.n	8006072 <HAL_UART_Transmit+0x6c>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e003      	b.n	800607a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800607a:	e030      	b.n	80060de <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2200      	movs	r2, #0
 8006084:	2180      	movs	r1, #128	@ 0x80
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f001 f842 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e03d      	b.n	800611a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10b      	bne.n	80060bc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	3302      	adds	r3, #2
 80060b8:	61bb      	str	r3, [r7, #24]
 80060ba:	e007      	b.n	80060cc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3301      	adds	r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1c8      	bne.n	800607c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2140      	movs	r1, #64	@ 0x40
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f001 f80b 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e006      	b.n	800611a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	@ 0x28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006138:	2b20      	cmp	r3, #32
 800613a:	d137      	bne.n	80061ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_UART_Receive_IT+0x24>
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e030      	b.n	80061ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <HAL_UART_Receive_IT+0x94>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d01f      	beq.n	800619c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d018      	beq.n	800619c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	613b      	str	r3, [r7, #16]
   return(result);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800617e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	69f9      	ldr	r1, [r7, #28]
 800618e:	6a3a      	ldr	r2, [r7, #32]
 8006190:	e841 2300 	strex	r3, r2, [r1]
 8006194:	61bb      	str	r3, [r7, #24]
   return(result);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e6      	bne.n	800616a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	461a      	mov	r2, r3
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f001 f822 	bl	80071ec <UART_Start_Receive_IT>
 80061a8:	4603      	mov	r3, r0
 80061aa:	e000      	b.n	80061ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3728      	adds	r7, #40	@ 0x28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40008000 	.word	0x40008000

080061bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b0ba      	sub	sp, #232	@ 0xe8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061ea:	4013      	ands	r3, r2
 80061ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11b      	bne.n	8006230 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d015      	beq.n	8006230 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d105      	bne.n	800621c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8300 	beq.w	8006826 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
      }
      return;
 800622e:	e2fa      	b.n	8006826 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8123 	beq.w	8006480 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800623a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800623e:	4b8d      	ldr	r3, [pc, #564]	@ (8006474 <HAL_UART_IRQHandler+0x2b8>)
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800624a:	4b8b      	ldr	r3, [pc, #556]	@ (8006478 <HAL_UART_IRQHandler+0x2bc>)
 800624c:	4013      	ands	r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8116 	beq.w	8006480 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d011      	beq.n	8006284 <HAL_UART_IRQHandler+0xc8>
 8006260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2201      	movs	r2, #1
 8006272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627a:	f043 0201 	orr.w	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d011      	beq.n	80062b4 <HAL_UART_IRQHandler+0xf8>
 8006290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2202      	movs	r2, #2
 80062a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062aa:	f043 0204 	orr.w	r2, r3, #4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d011      	beq.n	80062e4 <HAL_UART_IRQHandler+0x128>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2204      	movs	r2, #4
 80062d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	f043 0202 	orr.w	r2, r3, #2
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d017      	beq.n	8006320 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006300:	4b5c      	ldr	r3, [pc, #368]	@ (8006474 <HAL_UART_IRQHandler+0x2b8>)
 8006302:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2208      	movs	r2, #8
 800630e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006316:	f043 0208 	orr.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006328:	2b00      	cmp	r3, #0
 800632a:	d012      	beq.n	8006352 <HAL_UART_IRQHandler+0x196>
 800632c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006330:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00c      	beq.n	8006352 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8266 	beq.w	800682a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d013      	beq.n	8006392 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800636a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d105      	bne.n	8006382 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800637a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006398:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a6:	2b40      	cmp	r3, #64	@ 0x40
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d054      	beq.n	8006460 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f83a 	bl	8007430 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d146      	bne.n	8006458 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800640e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1d9      	bne.n	80063ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800641c:	2b00      	cmp	r3, #0
 800641e:	d017      	beq.n	8006450 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006426:	4a15      	ldr	r2, [pc, #84]	@ (800647c <HAL_UART_IRQHandler+0x2c0>)
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006430:	4618      	mov	r0, r3
 8006432:	f7fc fd12 	bl	8002e5a <HAL_DMA_Abort_IT>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d019      	beq.n	8006470 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800644a:	4610      	mov	r0, r2
 800644c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644e:	e00f      	b.n	8006470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f9ff 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006456:	e00b      	b.n	8006470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f9fb 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645e:	e007      	b.n	8006470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f9f7 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800646e:	e1dc      	b.n	800682a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	bf00      	nop
    return;
 8006472:	e1da      	b.n	800682a <HAL_UART_IRQHandler+0x66e>
 8006474:	10000001 	.word	0x10000001
 8006478:	04000120 	.word	0x04000120
 800647c:	080074fd 	.word	0x080074fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006484:	2b01      	cmp	r3, #1
 8006486:	f040 8170 	bne.w	800676a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8169 	beq.w	800676a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8162 	beq.w	800676a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2210      	movs	r2, #16
 80064ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b8:	2b40      	cmp	r3, #64	@ 0x40
 80064ba:	f040 80d8 	bne.w	800666e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80af 	beq.w	8006634 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f080 80a7 	bcs.w	8006634 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 8087 	bne.w	8006612 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800651c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800652e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006532:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800653a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1da      	bne.n	8006504 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3308      	adds	r3, #8
 8006554:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800655e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006572:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006576:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800657a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e1      	bne.n	800654e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800659a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800659c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e3      	bne.n	800658a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e0:	f023 0310 	bic.w	r3, r3, #16
 80065e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e4      	bne.n	80065d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800660c:	4618      	mov	r0, r3
 800660e:	f7fc fbcb 	bl	8002da8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006624:	b29b      	uxth	r3, r3
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f91b 	bl	8006868 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006632:	e0fc      	b.n	800682e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800663a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800663e:	429a      	cmp	r2, r3
 8006640:	f040 80f5 	bne.w	800682e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b20      	cmp	r3, #32
 8006654:	f040 80eb 	bne.w	800682e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f8fe 	bl	8006868 <HAL_UARTEx_RxEventCallback>
      return;
 800666c:	e0df      	b.n	800682e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800667a:	b29b      	uxth	r3, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80d1 	beq.w	8006832 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80cc 	beq.w	8006832 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e4      	bne.n	800669a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	623b      	str	r3, [r7, #32]
   return(result);
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80066fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e1      	bne.n	80066d0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	60fb      	str	r3, [r7, #12]
   return(result);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f023 0310 	bic.w	r3, r3, #16
 8006734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	69b9      	ldr	r1, [r7, #24]
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	617b      	str	r3, [r7, #20]
   return(result);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e4      	bne.n	8006720 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800675c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f880 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006768:	e063      	b.n	8006832 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <HAL_UART_IRQHandler+0x5d8>
 8006776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800677a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d008      	beq.n	8006794 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800678a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fc17 	bl	8007fc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006792:	e051      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d014      	beq.n	80067ca <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d105      	bne.n	80067b8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d03a      	beq.n	8006836 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
    }
    return;
 80067c8:	e035      	b.n	8006836 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <HAL_UART_IRQHandler+0x62e>
 80067d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fea0 	bl	8007528 <UART_EndTransmit_IT>
    return;
 80067e8:	e026      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <HAL_UART_IRQHandler+0x64e>
 80067f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fbf0 	bl	8007fe8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006808:	e016      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d010      	beq.n	8006838 <HAL_UART_IRQHandler+0x67c>
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800681a:	2b00      	cmp	r3, #0
 800681c:	da0c      	bge.n	8006838 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fbd8 	bl	8007fd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006824:	e008      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
      return;
 8006826:	bf00      	nop
 8006828:	e006      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
    return;
 800682a:	bf00      	nop
 800682c:	e004      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
      return;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
      return;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_UART_IRQHandler+0x67c>
    return;
 8006836:	bf00      	nop
  }
}
 8006838:	37e8      	adds	r7, #232	@ 0xe8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop

08006840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006884:	b08c      	sub	sp, #48	@ 0x30
 8006886:	af00      	add	r7, sp, #0
 8006888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	431a      	orrs	r2, r3
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	431a      	orrs	r2, r3
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4baa      	ldr	r3, [pc, #680]	@ (8006b58 <UART_SetConfig+0x2d8>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a9f      	ldr	r2, [pc, #636]	@ (8006b5c <UART_SetConfig+0x2dc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068e8:	4313      	orrs	r3, r2
 80068ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80068f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006900:	430b      	orrs	r3, r1
 8006902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690a:	f023 010f 	bic.w	r1, r3, #15
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a90      	ldr	r2, [pc, #576]	@ (8006b60 <UART_SetConfig+0x2e0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d125      	bne.n	8006970 <UART_SetConfig+0xf0>
 8006924:	4b8f      	ldr	r3, [pc, #572]	@ (8006b64 <UART_SetConfig+0x2e4>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b03      	cmp	r3, #3
 8006930:	d81a      	bhi.n	8006968 <UART_SetConfig+0xe8>
 8006932:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <UART_SetConfig+0xb8>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	08006949 	.word	0x08006949
 800693c:	08006959 	.word	0x08006959
 8006940:	08006951 	.word	0x08006951
 8006944:	08006961 	.word	0x08006961
 8006948:	2301      	movs	r3, #1
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694e:	e116      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006950:	2302      	movs	r3, #2
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006956:	e112      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006958:	2304      	movs	r3, #4
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695e:	e10e      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006960:	2308      	movs	r3, #8
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006966:	e10a      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006968:	2310      	movs	r3, #16
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696e:	e106      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a7c      	ldr	r2, [pc, #496]	@ (8006b68 <UART_SetConfig+0x2e8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d138      	bne.n	80069ec <UART_SetConfig+0x16c>
 800697a:	4b7a      	ldr	r3, [pc, #488]	@ (8006b64 <UART_SetConfig+0x2e4>)
 800697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006980:	f003 030c 	and.w	r3, r3, #12
 8006984:	2b0c      	cmp	r3, #12
 8006986:	d82d      	bhi.n	80069e4 <UART_SetConfig+0x164>
 8006988:	a201      	add	r2, pc, #4	@ (adr r2, 8006990 <UART_SetConfig+0x110>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069c5 	.word	0x080069c5
 8006994:	080069e5 	.word	0x080069e5
 8006998:	080069e5 	.word	0x080069e5
 800699c:	080069e5 	.word	0x080069e5
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	080069e5 	.word	0x080069e5
 80069a8:	080069e5 	.word	0x080069e5
 80069ac:	080069e5 	.word	0x080069e5
 80069b0:	080069cd 	.word	0x080069cd
 80069b4:	080069e5 	.word	0x080069e5
 80069b8:	080069e5 	.word	0x080069e5
 80069bc:	080069e5 	.word	0x080069e5
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	2300      	movs	r3, #0
 80069c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ca:	e0d8      	b.n	8006b7e <UART_SetConfig+0x2fe>
 80069cc:	2302      	movs	r3, #2
 80069ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d2:	e0d4      	b.n	8006b7e <UART_SetConfig+0x2fe>
 80069d4:	2304      	movs	r3, #4
 80069d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069da:	e0d0      	b.n	8006b7e <UART_SetConfig+0x2fe>
 80069dc:	2308      	movs	r3, #8
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e2:	e0cc      	b.n	8006b7e <UART_SetConfig+0x2fe>
 80069e4:	2310      	movs	r3, #16
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ea:	e0c8      	b.n	8006b7e <UART_SetConfig+0x2fe>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a5e      	ldr	r2, [pc, #376]	@ (8006b6c <UART_SetConfig+0x2ec>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d125      	bne.n	8006a42 <UART_SetConfig+0x1c2>
 80069f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006b64 <UART_SetConfig+0x2e4>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a00:	2b30      	cmp	r3, #48	@ 0x30
 8006a02:	d016      	beq.n	8006a32 <UART_SetConfig+0x1b2>
 8006a04:	2b30      	cmp	r3, #48	@ 0x30
 8006a06:	d818      	bhi.n	8006a3a <UART_SetConfig+0x1ba>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d00a      	beq.n	8006a22 <UART_SetConfig+0x1a2>
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d814      	bhi.n	8006a3a <UART_SetConfig+0x1ba>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <UART_SetConfig+0x19a>
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d008      	beq.n	8006a2a <UART_SetConfig+0x1aa>
 8006a18:	e00f      	b.n	8006a3a <UART_SetConfig+0x1ba>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a20:	e0ad      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a22:	2302      	movs	r3, #2
 8006a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a28:	e0a9      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a2a:	2304      	movs	r3, #4
 8006a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a30:	e0a5      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a32:	2308      	movs	r3, #8
 8006a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a38:	e0a1      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a40:	e09d      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a4a      	ldr	r2, [pc, #296]	@ (8006b70 <UART_SetConfig+0x2f0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d125      	bne.n	8006a98 <UART_SetConfig+0x218>
 8006a4c:	4b45      	ldr	r3, [pc, #276]	@ (8006b64 <UART_SetConfig+0x2e4>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a58:	d016      	beq.n	8006a88 <UART_SetConfig+0x208>
 8006a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a5c:	d818      	bhi.n	8006a90 <UART_SetConfig+0x210>
 8006a5e:	2b80      	cmp	r3, #128	@ 0x80
 8006a60:	d00a      	beq.n	8006a78 <UART_SetConfig+0x1f8>
 8006a62:	2b80      	cmp	r3, #128	@ 0x80
 8006a64:	d814      	bhi.n	8006a90 <UART_SetConfig+0x210>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <UART_SetConfig+0x1f0>
 8006a6a:	2b40      	cmp	r3, #64	@ 0x40
 8006a6c:	d008      	beq.n	8006a80 <UART_SetConfig+0x200>
 8006a6e:	e00f      	b.n	8006a90 <UART_SetConfig+0x210>
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	e082      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	e07e      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	e07a      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e076      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e072      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a35      	ldr	r2, [pc, #212]	@ (8006b74 <UART_SetConfig+0x2f4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d12a      	bne.n	8006af8 <UART_SetConfig+0x278>
 8006aa2:	4b30      	ldr	r3, [pc, #192]	@ (8006b64 <UART_SetConfig+0x2e4>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab0:	d01a      	beq.n	8006ae8 <UART_SetConfig+0x268>
 8006ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab6:	d81b      	bhi.n	8006af0 <UART_SetConfig+0x270>
 8006ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006abc:	d00c      	beq.n	8006ad8 <UART_SetConfig+0x258>
 8006abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac2:	d815      	bhi.n	8006af0 <UART_SetConfig+0x270>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <UART_SetConfig+0x250>
 8006ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006acc:	d008      	beq.n	8006ae0 <UART_SetConfig+0x260>
 8006ace:	e00f      	b.n	8006af0 <UART_SetConfig+0x270>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad6:	e052      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ade:	e04e      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae6:	e04a      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aee:	e046      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af6:	e042      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <UART_SetConfig+0x2dc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d13a      	bne.n	8006b78 <UART_SetConfig+0x2f8>
 8006b02:	4b18      	ldr	r3, [pc, #96]	@ (8006b64 <UART_SetConfig+0x2e4>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b10:	d01a      	beq.n	8006b48 <UART_SetConfig+0x2c8>
 8006b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b16:	d81b      	bhi.n	8006b50 <UART_SetConfig+0x2d0>
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1c:	d00c      	beq.n	8006b38 <UART_SetConfig+0x2b8>
 8006b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b22:	d815      	bhi.n	8006b50 <UART_SetConfig+0x2d0>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <UART_SetConfig+0x2b0>
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2c:	d008      	beq.n	8006b40 <UART_SetConfig+0x2c0>
 8006b2e:	e00f      	b.n	8006b50 <UART_SetConfig+0x2d0>
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e022      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e01e      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006b40:	2304      	movs	r3, #4
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e01a      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006b48:	2308      	movs	r3, #8
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e016      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006b50:	2310      	movs	r3, #16
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e012      	b.n	8006b7e <UART_SetConfig+0x2fe>
 8006b58:	cfff69f3 	.word	0xcfff69f3
 8006b5c:	40008000 	.word	0x40008000
 8006b60:	40013800 	.word	0x40013800
 8006b64:	40021000 	.word	0x40021000
 8006b68:	40004400 	.word	0x40004400
 8006b6c:	40004800 	.word	0x40004800
 8006b70:	40004c00 	.word	0x40004c00
 8006b74:	40005000 	.word	0x40005000
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4aae      	ldr	r2, [pc, #696]	@ (8006e3c <UART_SetConfig+0x5bc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	f040 8097 	bne.w	8006cb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d823      	bhi.n	8006bda <UART_SetConfig+0x35a>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <UART_SetConfig+0x318>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bbd 	.word	0x08006bbd
 8006b9c:	08006bdb 	.word	0x08006bdb
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bdb 	.word	0x08006bdb
 8006ba8:	08006bcb 	.word	0x08006bcb
 8006bac:	08006bdb 	.word	0x08006bdb
 8006bb0:	08006bdb 	.word	0x08006bdb
 8006bb4:	08006bdb 	.word	0x08006bdb
 8006bb8:	08006bd3 	.word	0x08006bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bbc:	f7fd f8e2 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8006bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bc2:	e010      	b.n	8006be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e40 <UART_SetConfig+0x5c0>)
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bc8:	e00d      	b.n	8006be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bca:	f7fd f86d 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8006bce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bd0:	e009      	b.n	8006be6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bd8:	e005      	b.n	8006be6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8130 	beq.w	8006e4e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf2:	4a94      	ldr	r2, [pc, #592]	@ (8006e44 <UART_SetConfig+0x5c4>)
 8006bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d305      	bcc.n	8006c1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d903      	bls.n	8006c26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c24:	e113      	b.n	8006e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	2200      	movs	r2, #0
 8006c2a:	60bb      	str	r3, [r7, #8]
 8006c2c:	60fa      	str	r2, [r7, #12]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	4a84      	ldr	r2, [pc, #528]	@ (8006e44 <UART_SetConfig+0x5c4>)
 8006c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	603b      	str	r3, [r7, #0]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c48:	f7f9 fb4a 	bl	80002e0 <__aeabi_uldivmod>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	020b      	lsls	r3, r1, #8
 8006c5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c62:	0202      	lsls	r2, r0, #8
 8006c64:	6979      	ldr	r1, [r7, #20]
 8006c66:	6849      	ldr	r1, [r1, #4]
 8006c68:	0849      	lsrs	r1, r1, #1
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	4605      	mov	r5, r0
 8006c70:	eb12 0804 	adds.w	r8, r2, r4
 8006c74:	eb43 0905 	adc.w	r9, r3, r5
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	469a      	mov	sl, r3
 8006c80:	4693      	mov	fp, r2
 8006c82:	4652      	mov	r2, sl
 8006c84:	465b      	mov	r3, fp
 8006c86:	4640      	mov	r0, r8
 8006c88:	4649      	mov	r1, r9
 8006c8a:	f7f9 fb29 	bl	80002e0 <__aeabi_uldivmod>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4613      	mov	r3, r2
 8006c94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c9c:	d308      	bcc.n	8006cb0 <UART_SetConfig+0x430>
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca4:	d204      	bcs.n	8006cb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a3a      	ldr	r2, [r7, #32]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e0ce      	b.n	8006e4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cb6:	e0ca      	b.n	8006e4e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc0:	d166      	bne.n	8006d90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d827      	bhi.n	8006d1a <UART_SetConfig+0x49a>
 8006cca:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0x450>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	08006d1b 	.word	0x08006d1b
 8006ce0:	08006d0b 	.word	0x08006d0b
 8006ce4:	08006d1b 	.word	0x08006d1b
 8006ce8:	08006d1b 	.word	0x08006d1b
 8006cec:	08006d1b 	.word	0x08006d1b
 8006cf0:	08006d13 	.word	0x08006d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf4:	f7fd f846 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8006cf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cfa:	e014      	b.n	8006d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cfc:	f7fd f858 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d02:	e010      	b.n	8006d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d04:	4b4e      	ldr	r3, [pc, #312]	@ (8006e40 <UART_SetConfig+0x5c0>)
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d08:	e00d      	b.n	8006d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d0a:	f7fc ffcd 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8006d0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d10:	e009      	b.n	8006d26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d18:	e005      	b.n	8006d26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8090 	beq.w	8006e4e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	4a44      	ldr	r2, [pc, #272]	@ (8006e44 <UART_SetConfig+0x5c4>)
 8006d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d40:	005a      	lsls	r2, r3, #1
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	441a      	add	r2, r3
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d916      	bls.n	8006d88 <UART_SetConfig+0x508>
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d60:	d212      	bcs.n	8006d88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f023 030f 	bic.w	r3, r3, #15
 8006d6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	8bfb      	ldrh	r3, [r7, #30]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	8bfa      	ldrh	r2, [r7, #30]
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	e062      	b.n	8006e4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d8e:	e05e      	b.n	8006e4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d828      	bhi.n	8006dea <UART_SetConfig+0x56a>
 8006d98:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <UART_SetConfig+0x520>)
 8006d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9e:	bf00      	nop
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	08006deb 	.word	0x08006deb
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006deb 	.word	0x08006deb
 8006dbc:	08006deb 	.word	0x08006deb
 8006dc0:	08006de3 	.word	0x08006de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f7fc ffde 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8006dc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dca:	e014      	b.n	8006df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dcc:	f7fc fff0 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8006dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd2:	e010      	b.n	8006df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006e40 <UART_SetConfig+0x5c0>)
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dd8:	e00d      	b.n	8006df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dda:	f7fc ff65 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8006dde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006de0:	e009      	b.n	8006df6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006de8:	e005      	b.n	8006df6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006df4:	bf00      	nop
    }

    if (pclk != 0U)
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d028      	beq.n	8006e4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	4a10      	ldr	r2, [pc, #64]	@ (8006e44 <UART_SetConfig+0x5c4>)
 8006e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	085b      	lsrs	r3, r3, #1
 8006e14:	441a      	add	r2, r3
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	d910      	bls.n	8006e48 <UART_SetConfig+0x5c8>
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2c:	d20c      	bcs.n	8006e48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	e009      	b.n	8006e4e <UART_SetConfig+0x5ce>
 8006e3a:	bf00      	nop
 8006e3c:	40008000 	.word	0x40008000
 8006e40:	00f42400 	.word	0x00f42400
 8006e44:	0800954c 	.word	0x0800954c
      }
      else
      {
        ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2200      	movs	r2, #0
 8006e62:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2200      	movs	r2, #0
 8006e68:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3730      	adds	r7, #48	@ 0x30
 8006e72:	46bd      	mov	sp, r7
 8006e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f76:	d10a      	bne.n	8006f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b098      	sub	sp, #96	@ 0x60
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fcc:	f7fa fcde 	bl	800198c <HAL_GetTick>
 8006fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d12f      	bne.n	8007040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f88e 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d022      	beq.n	8007040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800700e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007018:	647b      	str	r3, [r7, #68]	@ 0x44
 800701a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800701e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e6      	bne.n	8006ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e063      	b.n	8007108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b04      	cmp	r3, #4
 800704c:	d149      	bne.n	80070e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007056:	2200      	movs	r2, #0
 8007058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f857 	bl	8007110 <UART_WaitOnFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d03c      	beq.n	80070e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	623b      	str	r3, [r7, #32]
   return(result);
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800707c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007086:	633b      	str	r3, [r7, #48]	@ 0x30
 8007088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800708c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e6      	bne.n	8007068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3308      	adds	r3, #8
 80070a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3308      	adds	r3, #8
 80070b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ba:	61fa      	str	r2, [r7, #28]
 80070bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	69b9      	ldr	r1, [r7, #24]
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	617b      	str	r3, [r7, #20]
   return(result);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e5      	bne.n	800709a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e012      	b.n	8007108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3758      	adds	r7, #88	@ 0x58
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007120:	e04f      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d04b      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712a:	f7fa fc2f 	bl	800198c <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <UART_WaitOnFlagUntilTimeout+0x30>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e04e      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d037      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b80      	cmp	r3, #128	@ 0x80
 8007156:	d034      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b40      	cmp	r3, #64	@ 0x40
 800715c:	d031      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b08      	cmp	r3, #8
 800716a:	d110      	bne.n	800718e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2208      	movs	r2, #8
 8007172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f95b 	bl	8007430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2208      	movs	r2, #8
 800717e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e029      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800719c:	d111      	bne.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f941 	bl	8007430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e00f      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4013      	ands	r3, r2
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d0a0      	beq.n	8007122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b0a3      	sub	sp, #140	@ 0x8c
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	88fa      	ldrh	r2, [r7, #6]
 8007204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	88fa      	ldrh	r2, [r7, #6]
 800720c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800721e:	d10e      	bne.n	800723e <UART_Start_Receive_IT+0x52>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <UART_Start_Receive_IT+0x48>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800722e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007232:	e02d      	b.n	8007290 <UART_Start_Receive_IT+0xa4>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	22ff      	movs	r2, #255	@ 0xff
 8007238:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800723c:	e028      	b.n	8007290 <UART_Start_Receive_IT+0xa4>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10d      	bne.n	8007262 <UART_Start_Receive_IT+0x76>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <UART_Start_Receive_IT+0x6c>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	22ff      	movs	r2, #255	@ 0xff
 8007252:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007256:	e01b      	b.n	8007290 <UART_Start_Receive_IT+0xa4>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	227f      	movs	r2, #127	@ 0x7f
 800725c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007260:	e016      	b.n	8007290 <UART_Start_Receive_IT+0xa4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800726a:	d10d      	bne.n	8007288 <UART_Start_Receive_IT+0x9c>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <UART_Start_Receive_IT+0x92>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	227f      	movs	r2, #127	@ 0x7f
 8007278:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800727c:	e008      	b.n	8007290 <UART_Start_Receive_IT+0xa4>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	223f      	movs	r2, #63	@ 0x3f
 8007282:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007286:	e003      	b.n	8007290 <UART_Start_Receive_IT+0xa4>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2222      	movs	r2, #34	@ 0x22
 800729c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80072b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3308      	adds	r3, #8
 80072c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80072c4:	673a      	str	r2, [r7, #112]	@ 0x70
 80072c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80072ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80072d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e3      	bne.n	80072a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e0:	d14f      	bne.n	8007382 <UART_Start_Receive_IT+0x196>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d349      	bcc.n	8007382 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f6:	d107      	bne.n	8007308 <UART_Start_Receive_IT+0x11c>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a47      	ldr	r2, [pc, #284]	@ (8007420 <UART_Start_Receive_IT+0x234>)
 8007304:	675a      	str	r2, [r3, #116]	@ 0x74
 8007306:	e002      	b.n	800730e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a46      	ldr	r2, [pc, #280]	@ (8007424 <UART_Start_Receive_IT+0x238>)
 800730c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01a      	beq.n	800734c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800732a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800733a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800733e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e4      	bne.n	8007316 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800736c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800736e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800737a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e5      	bne.n	800734c <UART_Start_Receive_IT+0x160>
 8007380:	e046      	b.n	8007410 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800738a:	d107      	bne.n	800739c <UART_Start_Receive_IT+0x1b0>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4a24      	ldr	r2, [pc, #144]	@ (8007428 <UART_Start_Receive_IT+0x23c>)
 8007398:	675a      	str	r2, [r3, #116]	@ 0x74
 800739a:	e002      	b.n	80073a2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a23      	ldr	r2, [pc, #140]	@ (800742c <UART_Start_Receive_IT+0x240>)
 80073a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d019      	beq.n	80073de <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80073be:	677b      	str	r3, [r7, #116]	@ 0x74
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ca:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_Start_Receive_IT+0x1be>
 80073dc:	e018      	b.n	8007410 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	613b      	str	r3, [r7, #16]
   return(result);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f043 0320 	orr.w	r3, r3, #32
 80073f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	69f9      	ldr	r1, [r7, #28]
 8007402:	6a3a      	ldr	r2, [r7, #32]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	61bb      	str	r3, [r7, #24]
   return(result);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e6      	bne.n	80073de <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	378c      	adds	r7, #140	@ 0x8c
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	08007c55 	.word	0x08007c55
 8007424:	080078f1 	.word	0x080078f1
 8007428:	08007739 	.word	0x08007739
 800742c:	08007581 	.word	0x08007581

08007430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b095      	sub	sp, #84	@ 0x54
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800744c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007456:	643b      	str	r3, [r7, #64]	@ 0x40
 8007458:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800745c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e6      	bne.n	8007438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3308      	adds	r3, #8
 8007470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	61fb      	str	r3, [r7, #28]
   return(result);
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800748e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e3      	bne.n	800746a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d118      	bne.n	80074dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f023 0310 	bic.w	r3, r3, #16
 80074be:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6979      	ldr	r1, [r7, #20]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	613b      	str	r3, [r7, #16]
   return(result);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e6      	bne.n	80074aa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074f0:	bf00      	nop
 80074f2:	3754      	adds	r7, #84	@ 0x54
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff f99a 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	60bb      	str	r3, [r7, #8]
   return(result);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6979      	ldr	r1, [r7, #20]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	613b      	str	r3, [r7, #16]
   return(result);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e6      	bne.n	8007530 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff f965 	bl	8006840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007576:	bf00      	nop
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b09c      	sub	sp, #112	@ 0x70
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800758e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007598:	2b22      	cmp	r3, #34	@ 0x22
 800759a:	f040 80be 	bne.w	800771a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80075ac:	b2d9      	uxtb	r1, r3
 80075ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b8:	400a      	ands	r2, r1
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 80a1 	bne.w	800772a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007606:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007608:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800760c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e6      	bne.n	80075e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800762a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762c:	f023 0301 	bic.w	r3, r3, #1
 8007630:	667b      	str	r3, [r7, #100]	@ 0x64
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3308      	adds	r3, #8
 8007638:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800763a:	647a      	str	r2, [r7, #68]	@ 0x44
 800763c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e5      	bne.n	800761a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a33      	ldr	r2, [pc, #204]	@ (8007734 <UART_RxISR_8BIT+0x1b4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d01f      	beq.n	80076ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d018      	beq.n	80076ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	623b      	str	r3, [r7, #32]
   return(result);
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800768e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007698:	633b      	str	r3, [r7, #48]	@ 0x30
 800769a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800769e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d12e      	bne.n	8007712 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	69b9      	ldr	r1, [r7, #24]
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	617b      	str	r3, [r7, #20]
   return(result);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e6      	bne.n	80076ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b10      	cmp	r3, #16
 80076f8:	d103      	bne.n	8007702 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2210      	movs	r2, #16
 8007700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff f8ac 	bl	8006868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007710:	e00b      	b.n	800772a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7f9 fba4 	bl	8000e60 <HAL_UART_RxCpltCallback>
}
 8007718:	e007      	b.n	800772a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0208 	orr.w	r2, r2, #8
 8007728:	619a      	str	r2, [r3, #24]
}
 800772a:	bf00      	nop
 800772c:	3770      	adds	r7, #112	@ 0x70
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	40008000 	.word	0x40008000

08007738 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b09c      	sub	sp, #112	@ 0x70
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007746:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007750:	2b22      	cmp	r3, #34	@ 0x22
 8007752:	f040 80be 	bne.w	80078d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007764:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007766:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800776a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800776e:	4013      	ands	r3, r2
 8007770:	b29a      	uxth	r2, r3
 8007772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007774:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 80a1 	bne.w	80078e2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80077ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077be:	657b      	str	r3, [r7, #84]	@ 0x54
 80077c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80077cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e6      	bne.n	80077a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a33      	ldr	r2, [pc, #204]	@ (80078ec <UART_RxISR_16BIT+0x1b4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01f      	beq.n	8007864 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007846:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007852:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d12e      	bne.n	80078ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6979      	ldr	r1, [r7, #20]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	613b      	str	r3, [r7, #16]
   return(result);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d103      	bne.n	80078ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2210      	movs	r2, #16
 80078b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fe ffd0 	bl	8006868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078c8:	e00b      	b.n	80078e2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7f9 fac8 	bl	8000e60 <HAL_UART_RxCpltCallback>
}
 80078d0:	e007      	b.n	80078e2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0208 	orr.w	r2, r2, #8
 80078e0:	619a      	str	r2, [r3, #24]
}
 80078e2:	bf00      	nop
 80078e4:	3770      	adds	r7, #112	@ 0x70
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40008000 	.word	0x40008000

080078f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b0ac      	sub	sp, #176	@ 0xb0
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007926:	2b22      	cmp	r3, #34	@ 0x22
 8007928:	f040 8183 	bne.w	8007c32 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007932:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007936:	e126      	b.n	8007b86 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007942:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007946:	b2d9      	uxtb	r1, r3
 8007948:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800794c:	b2da      	uxtb	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007952:	400a      	ands	r2, r1
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800797e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b00      	cmp	r3, #0
 8007988:	d053      	beq.n	8007a32 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800798a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d011      	beq.n	80079ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8007996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800799a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b0:	f043 0201 	orr.w	r2, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d011      	beq.n	80079ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80079c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2202      	movs	r2, #2
 80079d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e0:	f043 0204 	orr.w	r2, r3, #4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d011      	beq.n	8007a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80079f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2204      	movs	r2, #4
 8007a08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a10:	f043 0202 	orr.w	r2, r3, #2
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d006      	beq.n	8007a32 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe ff15 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 80a3 	bne.w	8007b86 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a64:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007a68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007a70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e4      	bne.n	8007a40 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007a86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a9e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007aa0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007aa4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e1      	bne.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a60      	ldr	r2, [pc, #384]	@ (8007c4c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d021      	beq.n	8007b14 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d01a      	beq.n	8007b14 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b02:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e4      	bne.n	8007ade <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d130      	bne.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e4      	bne.n	8007b22 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b10      	cmp	r3, #16
 8007b64:	d103      	bne.n	8007b6e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fe fe76 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007b7c:	e00e      	b.n	8007b9c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7f9 f96e 	bl	8000e60 <HAL_UART_RxCpltCallback>
        break;
 8007b84:	e00a      	b.n	8007b9c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b86:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d006      	beq.n	8007b9c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f47f aece 	bne.w	8007938 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ba2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ba6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d049      	beq.n	8007c42 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007bb4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d242      	bcs.n	8007c42 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e3      	bne.n	8007bbc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a16      	ldr	r2, [pc, #88]	@ (8007c50 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007bf8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f043 0320 	orr.w	r3, r3, #32
 8007c0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6979      	ldr	r1, [r7, #20]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e4      	bne.n	8007bfa <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c30:	e007      	b.n	8007c42 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699a      	ldr	r2, [r3, #24]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0208 	orr.w	r2, r2, #8
 8007c40:	619a      	str	r2, [r3, #24]
}
 8007c42:	bf00      	nop
 8007c44:	37b0      	adds	r7, #176	@ 0xb0
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	40008000 	.word	0x40008000
 8007c50:	08007581 	.word	0x08007581

08007c54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b0ae      	sub	sp, #184	@ 0xb8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c62:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c8a:	2b22      	cmp	r3, #34	@ 0x22
 8007c8c:	f040 8187 	bne.w	8007f9e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c96:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c9a:	e12a      	b.n	8007ef2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007cae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007cb2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc4:	1c9a      	adds	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d053      	beq.n	8007d9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d011      	beq.n	8007d22 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d18:	f043 0201 	orr.w	r2, r3, #1
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d011      	beq.n	8007d52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d48:	f043 0204 	orr.w	r2, r3, #4
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d011      	beq.n	8007d82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2204      	movs	r2, #4
 8007d70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d78:	f043 0202 	orr.w	r2, r3, #2
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d006      	beq.n	8007d9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fe fd61 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f040 80a5 	bne.w	8007ef2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007db6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e2      	bne.n	8007da8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3308      	adds	r3, #8
 8007e06:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e1      	bne.n	8007de2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a60      	ldr	r2, [pc, #384]	@ (8007fb8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d021      	beq.n	8007e80 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d01a      	beq.n	8007e80 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e6e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e4      	bne.n	8007e4a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d130      	bne.n	8007eea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e9e:	f023 0310 	bic.w	r3, r3, #16
 8007ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e4      	bne.n	8007e8e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2b10      	cmp	r3, #16
 8007ed0:	d103      	bne.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fe fcc0 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007ee8:	e00e      	b.n	8007f08 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7f8 ffb8 	bl	8000e60 <HAL_UART_RxCpltCallback>
        break;
 8007ef0:	e00a      	b.n	8007f08 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ef2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007efa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f47f aeca 	bne.w	8007c9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f0e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d049      	beq.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f20:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d242      	bcs.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	623b      	str	r3, [r7, #32]
   return(result);
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3308      	adds	r3, #8
 8007f48:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e3      	bne.n	8007f28 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a16      	ldr	r2, [pc, #88]	@ (8007fbc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007f64:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f043 0320 	orr.w	r3, r3, #32
 8007f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	69b9      	ldr	r1, [r7, #24]
 8007f8e:	69fa      	ldr	r2, [r7, #28]
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	617b      	str	r3, [r7, #20]
   return(result);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e4      	bne.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f9c:	e007      	b.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0208 	orr.w	r2, r2, #8
 8007fac:	619a      	str	r2, [r3, #24]
}
 8007fae:	bf00      	nop
 8007fb0:	37b8      	adds	r7, #184	@ 0xb8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40008000 	.word	0x40008000
 8007fbc:	08007739 	.word	0x08007739

08007fc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_UARTEx_DisableFifoMode+0x16>
 800800e:	2302      	movs	r3, #2
 8008010:	e027      	b.n	8008062 <HAL_UARTEx_DisableFifoMode+0x66>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2224      	movs	r2, #36	@ 0x24
 800801e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0201 	bic.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008082:	2302      	movs	r3, #2
 8008084:	e02d      	b.n	80080e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2224      	movs	r2, #36	@ 0x24
 8008092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0201 	bic.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f850 	bl	8008168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080fe:	2302      	movs	r3, #2
 8008100:	e02d      	b.n	800815e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2224      	movs	r2, #36	@ 0x24
 800810e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0201 	bic.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f812 	bl	8008168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008174:	2b00      	cmp	r3, #0
 8008176:	d108      	bne.n	800818a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008188:	e031      	b.n	80081ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800818a:	2308      	movs	r3, #8
 800818c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800818e:	2308      	movs	r3, #8
 8008190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	0e5b      	lsrs	r3, r3, #25
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	0f5b      	lsrs	r3, r3, #29
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	7b3a      	ldrb	r2, [r7, #12]
 80081b6:	4911      	ldr	r1, [pc, #68]	@ (80081fc <UARTEx_SetNbDataToProcess+0x94>)
 80081b8:	5c8a      	ldrb	r2, [r1, r2]
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081be:	7b3a      	ldrb	r2, [r7, #12]
 80081c0:	490f      	ldr	r1, [pc, #60]	@ (8008200 <UARTEx_SetNbDataToProcess+0x98>)
 80081c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	7b7a      	ldrb	r2, [r7, #13]
 80081d4:	4909      	ldr	r1, [pc, #36]	@ (80081fc <UARTEx_SetNbDataToProcess+0x94>)
 80081d6:	5c8a      	ldrb	r2, [r1, r2]
 80081d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081dc:	7b7a      	ldrb	r2, [r7, #13]
 80081de:	4908      	ldr	r1, [pc, #32]	@ (8008200 <UARTEx_SetNbDataToProcess+0x98>)
 80081e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	08009564 	.word	0x08009564
 8008200:	0800956c 	.word	0x0800956c

08008204 <atoi>:
 8008204:	220a      	movs	r2, #10
 8008206:	2100      	movs	r1, #0
 8008208:	f000 b87a 	b.w	8008300 <strtol>

0800820c <_strtol_l.constprop.0>:
 800820c:	2b24      	cmp	r3, #36	@ 0x24
 800820e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008212:	4686      	mov	lr, r0
 8008214:	4690      	mov	r8, r2
 8008216:	d801      	bhi.n	800821c <_strtol_l.constprop.0+0x10>
 8008218:	2b01      	cmp	r3, #1
 800821a:	d106      	bne.n	800822a <_strtol_l.constprop.0+0x1e>
 800821c:	f000 fa2a 	bl	8008674 <__errno>
 8008220:	2316      	movs	r3, #22
 8008222:	6003      	str	r3, [r0, #0]
 8008224:	2000      	movs	r0, #0
 8008226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822a:	4834      	ldr	r0, [pc, #208]	@ (80082fc <_strtol_l.constprop.0+0xf0>)
 800822c:	460d      	mov	r5, r1
 800822e:	462a      	mov	r2, r5
 8008230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008234:	5d06      	ldrb	r6, [r0, r4]
 8008236:	f016 0608 	ands.w	r6, r6, #8
 800823a:	d1f8      	bne.n	800822e <_strtol_l.constprop.0+0x22>
 800823c:	2c2d      	cmp	r4, #45	@ 0x2d
 800823e:	d12d      	bne.n	800829c <_strtol_l.constprop.0+0x90>
 8008240:	782c      	ldrb	r4, [r5, #0]
 8008242:	2601      	movs	r6, #1
 8008244:	1c95      	adds	r5, r2, #2
 8008246:	f033 0210 	bics.w	r2, r3, #16
 800824a:	d109      	bne.n	8008260 <_strtol_l.constprop.0+0x54>
 800824c:	2c30      	cmp	r4, #48	@ 0x30
 800824e:	d12a      	bne.n	80082a6 <_strtol_l.constprop.0+0x9a>
 8008250:	782a      	ldrb	r2, [r5, #0]
 8008252:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008256:	2a58      	cmp	r2, #88	@ 0x58
 8008258:	d125      	bne.n	80082a6 <_strtol_l.constprop.0+0x9a>
 800825a:	786c      	ldrb	r4, [r5, #1]
 800825c:	2310      	movs	r3, #16
 800825e:	3502      	adds	r5, #2
 8008260:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008264:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008268:	2200      	movs	r2, #0
 800826a:	fbbc f9f3 	udiv	r9, ip, r3
 800826e:	4610      	mov	r0, r2
 8008270:	fb03 ca19 	mls	sl, r3, r9, ip
 8008274:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008278:	2f09      	cmp	r7, #9
 800827a:	d81b      	bhi.n	80082b4 <_strtol_l.constprop.0+0xa8>
 800827c:	463c      	mov	r4, r7
 800827e:	42a3      	cmp	r3, r4
 8008280:	dd27      	ble.n	80082d2 <_strtol_l.constprop.0+0xc6>
 8008282:	1c57      	adds	r7, r2, #1
 8008284:	d007      	beq.n	8008296 <_strtol_l.constprop.0+0x8a>
 8008286:	4581      	cmp	r9, r0
 8008288:	d320      	bcc.n	80082cc <_strtol_l.constprop.0+0xc0>
 800828a:	d101      	bne.n	8008290 <_strtol_l.constprop.0+0x84>
 800828c:	45a2      	cmp	sl, r4
 800828e:	db1d      	blt.n	80082cc <_strtol_l.constprop.0+0xc0>
 8008290:	fb00 4003 	mla	r0, r0, r3, r4
 8008294:	2201      	movs	r2, #1
 8008296:	f815 4b01 	ldrb.w	r4, [r5], #1
 800829a:	e7eb      	b.n	8008274 <_strtol_l.constprop.0+0x68>
 800829c:	2c2b      	cmp	r4, #43	@ 0x2b
 800829e:	bf04      	itt	eq
 80082a0:	782c      	ldrbeq	r4, [r5, #0]
 80082a2:	1c95      	addeq	r5, r2, #2
 80082a4:	e7cf      	b.n	8008246 <_strtol_l.constprop.0+0x3a>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1da      	bne.n	8008260 <_strtol_l.constprop.0+0x54>
 80082aa:	2c30      	cmp	r4, #48	@ 0x30
 80082ac:	bf0c      	ite	eq
 80082ae:	2308      	moveq	r3, #8
 80082b0:	230a      	movne	r3, #10
 80082b2:	e7d5      	b.n	8008260 <_strtol_l.constprop.0+0x54>
 80082b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80082b8:	2f19      	cmp	r7, #25
 80082ba:	d801      	bhi.n	80082c0 <_strtol_l.constprop.0+0xb4>
 80082bc:	3c37      	subs	r4, #55	@ 0x37
 80082be:	e7de      	b.n	800827e <_strtol_l.constprop.0+0x72>
 80082c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80082c4:	2f19      	cmp	r7, #25
 80082c6:	d804      	bhi.n	80082d2 <_strtol_l.constprop.0+0xc6>
 80082c8:	3c57      	subs	r4, #87	@ 0x57
 80082ca:	e7d8      	b.n	800827e <_strtol_l.constprop.0+0x72>
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295
 80082d0:	e7e1      	b.n	8008296 <_strtol_l.constprop.0+0x8a>
 80082d2:	1c53      	adds	r3, r2, #1
 80082d4:	d108      	bne.n	80082e8 <_strtol_l.constprop.0+0xdc>
 80082d6:	2322      	movs	r3, #34	@ 0x22
 80082d8:	f8ce 3000 	str.w	r3, [lr]
 80082dc:	4660      	mov	r0, ip
 80082de:	f1b8 0f00 	cmp.w	r8, #0
 80082e2:	d0a0      	beq.n	8008226 <_strtol_l.constprop.0+0x1a>
 80082e4:	1e69      	subs	r1, r5, #1
 80082e6:	e006      	b.n	80082f6 <_strtol_l.constprop.0+0xea>
 80082e8:	b106      	cbz	r6, 80082ec <_strtol_l.constprop.0+0xe0>
 80082ea:	4240      	negs	r0, r0
 80082ec:	f1b8 0f00 	cmp.w	r8, #0
 80082f0:	d099      	beq.n	8008226 <_strtol_l.constprop.0+0x1a>
 80082f2:	2a00      	cmp	r2, #0
 80082f4:	d1f6      	bne.n	80082e4 <_strtol_l.constprop.0+0xd8>
 80082f6:	f8c8 1000 	str.w	r1, [r8]
 80082fa:	e794      	b.n	8008226 <_strtol_l.constprop.0+0x1a>
 80082fc:	08009575 	.word	0x08009575

08008300 <strtol>:
 8008300:	4613      	mov	r3, r2
 8008302:	460a      	mov	r2, r1
 8008304:	4601      	mov	r1, r0
 8008306:	4802      	ldr	r0, [pc, #8]	@ (8008310 <strtol+0x10>)
 8008308:	6800      	ldr	r0, [r0, #0]
 800830a:	f7ff bf7f 	b.w	800820c <_strtol_l.constprop.0>
 800830e:	bf00      	nop
 8008310:	20000018 	.word	0x20000018

08008314 <std>:
 8008314:	2300      	movs	r3, #0
 8008316:	b510      	push	{r4, lr}
 8008318:	4604      	mov	r4, r0
 800831a:	e9c0 3300 	strd	r3, r3, [r0]
 800831e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008322:	6083      	str	r3, [r0, #8]
 8008324:	8181      	strh	r1, [r0, #12]
 8008326:	6643      	str	r3, [r0, #100]	@ 0x64
 8008328:	81c2      	strh	r2, [r0, #14]
 800832a:	6183      	str	r3, [r0, #24]
 800832c:	4619      	mov	r1, r3
 800832e:	2208      	movs	r2, #8
 8008330:	305c      	adds	r0, #92	@ 0x5c
 8008332:	f000 f8f4 	bl	800851e <memset>
 8008336:	4b0d      	ldr	r3, [pc, #52]	@ (800836c <std+0x58>)
 8008338:	6263      	str	r3, [r4, #36]	@ 0x24
 800833a:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <std+0x5c>)
 800833c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800833e:	4b0d      	ldr	r3, [pc, #52]	@ (8008374 <std+0x60>)
 8008340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008342:	4b0d      	ldr	r3, [pc, #52]	@ (8008378 <std+0x64>)
 8008344:	6323      	str	r3, [r4, #48]	@ 0x30
 8008346:	4b0d      	ldr	r3, [pc, #52]	@ (800837c <std+0x68>)
 8008348:	6224      	str	r4, [r4, #32]
 800834a:	429c      	cmp	r4, r3
 800834c:	d006      	beq.n	800835c <std+0x48>
 800834e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008352:	4294      	cmp	r4, r2
 8008354:	d002      	beq.n	800835c <std+0x48>
 8008356:	33d0      	adds	r3, #208	@ 0xd0
 8008358:	429c      	cmp	r4, r3
 800835a:	d105      	bne.n	8008368 <std+0x54>
 800835c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008364:	f000 b9b0 	b.w	80086c8 <__retarget_lock_init_recursive>
 8008368:	bd10      	pop	{r4, pc}
 800836a:	bf00      	nop
 800836c:	08008499 	.word	0x08008499
 8008370:	080084bb 	.word	0x080084bb
 8008374:	080084f3 	.word	0x080084f3
 8008378:	08008517 	.word	0x08008517
 800837c:	20000400 	.word	0x20000400

08008380 <stdio_exit_handler>:
 8008380:	4a02      	ldr	r2, [pc, #8]	@ (800838c <stdio_exit_handler+0xc>)
 8008382:	4903      	ldr	r1, [pc, #12]	@ (8008390 <stdio_exit_handler+0x10>)
 8008384:	4803      	ldr	r0, [pc, #12]	@ (8008394 <stdio_exit_handler+0x14>)
 8008386:	f000 b869 	b.w	800845c <_fwalk_sglue>
 800838a:	bf00      	nop
 800838c:	2000000c 	.word	0x2000000c
 8008390:	08008a15 	.word	0x08008a15
 8008394:	2000001c 	.word	0x2000001c

08008398 <cleanup_stdio>:
 8008398:	6841      	ldr	r1, [r0, #4]
 800839a:	4b0c      	ldr	r3, [pc, #48]	@ (80083cc <cleanup_stdio+0x34>)
 800839c:	4299      	cmp	r1, r3
 800839e:	b510      	push	{r4, lr}
 80083a0:	4604      	mov	r4, r0
 80083a2:	d001      	beq.n	80083a8 <cleanup_stdio+0x10>
 80083a4:	f000 fb36 	bl	8008a14 <_fflush_r>
 80083a8:	68a1      	ldr	r1, [r4, #8]
 80083aa:	4b09      	ldr	r3, [pc, #36]	@ (80083d0 <cleanup_stdio+0x38>)
 80083ac:	4299      	cmp	r1, r3
 80083ae:	d002      	beq.n	80083b6 <cleanup_stdio+0x1e>
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fb2f 	bl	8008a14 <_fflush_r>
 80083b6:	68e1      	ldr	r1, [r4, #12]
 80083b8:	4b06      	ldr	r3, [pc, #24]	@ (80083d4 <cleanup_stdio+0x3c>)
 80083ba:	4299      	cmp	r1, r3
 80083bc:	d004      	beq.n	80083c8 <cleanup_stdio+0x30>
 80083be:	4620      	mov	r0, r4
 80083c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c4:	f000 bb26 	b.w	8008a14 <_fflush_r>
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	bf00      	nop
 80083cc:	20000400 	.word	0x20000400
 80083d0:	20000468 	.word	0x20000468
 80083d4:	200004d0 	.word	0x200004d0

080083d8 <global_stdio_init.part.0>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <global_stdio_init.part.0+0x30>)
 80083dc:	4c0b      	ldr	r4, [pc, #44]	@ (800840c <global_stdio_init.part.0+0x34>)
 80083de:	4a0c      	ldr	r2, [pc, #48]	@ (8008410 <global_stdio_init.part.0+0x38>)
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	4620      	mov	r0, r4
 80083e4:	2200      	movs	r2, #0
 80083e6:	2104      	movs	r1, #4
 80083e8:	f7ff ff94 	bl	8008314 <std>
 80083ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083f0:	2201      	movs	r2, #1
 80083f2:	2109      	movs	r1, #9
 80083f4:	f7ff ff8e 	bl	8008314 <std>
 80083f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083fc:	2202      	movs	r2, #2
 80083fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008402:	2112      	movs	r1, #18
 8008404:	f7ff bf86 	b.w	8008314 <std>
 8008408:	20000538 	.word	0x20000538
 800840c:	20000400 	.word	0x20000400
 8008410:	08008381 	.word	0x08008381

08008414 <__sfp_lock_acquire>:
 8008414:	4801      	ldr	r0, [pc, #4]	@ (800841c <__sfp_lock_acquire+0x8>)
 8008416:	f000 b958 	b.w	80086ca <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	20000541 	.word	0x20000541

08008420 <__sfp_lock_release>:
 8008420:	4801      	ldr	r0, [pc, #4]	@ (8008428 <__sfp_lock_release+0x8>)
 8008422:	f000 b953 	b.w	80086cc <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	20000541 	.word	0x20000541

0800842c <__sinit>:
 800842c:	b510      	push	{r4, lr}
 800842e:	4604      	mov	r4, r0
 8008430:	f7ff fff0 	bl	8008414 <__sfp_lock_acquire>
 8008434:	6a23      	ldr	r3, [r4, #32]
 8008436:	b11b      	cbz	r3, 8008440 <__sinit+0x14>
 8008438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800843c:	f7ff bff0 	b.w	8008420 <__sfp_lock_release>
 8008440:	4b04      	ldr	r3, [pc, #16]	@ (8008454 <__sinit+0x28>)
 8008442:	6223      	str	r3, [r4, #32]
 8008444:	4b04      	ldr	r3, [pc, #16]	@ (8008458 <__sinit+0x2c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f5      	bne.n	8008438 <__sinit+0xc>
 800844c:	f7ff ffc4 	bl	80083d8 <global_stdio_init.part.0>
 8008450:	e7f2      	b.n	8008438 <__sinit+0xc>
 8008452:	bf00      	nop
 8008454:	08008399 	.word	0x08008399
 8008458:	20000538 	.word	0x20000538

0800845c <_fwalk_sglue>:
 800845c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008460:	4607      	mov	r7, r0
 8008462:	4688      	mov	r8, r1
 8008464:	4614      	mov	r4, r2
 8008466:	2600      	movs	r6, #0
 8008468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800846c:	f1b9 0901 	subs.w	r9, r9, #1
 8008470:	d505      	bpl.n	800847e <_fwalk_sglue+0x22>
 8008472:	6824      	ldr	r4, [r4, #0]
 8008474:	2c00      	cmp	r4, #0
 8008476:	d1f7      	bne.n	8008468 <_fwalk_sglue+0xc>
 8008478:	4630      	mov	r0, r6
 800847a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d907      	bls.n	8008494 <_fwalk_sglue+0x38>
 8008484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008488:	3301      	adds	r3, #1
 800848a:	d003      	beq.n	8008494 <_fwalk_sglue+0x38>
 800848c:	4629      	mov	r1, r5
 800848e:	4638      	mov	r0, r7
 8008490:	47c0      	blx	r8
 8008492:	4306      	orrs	r6, r0
 8008494:	3568      	adds	r5, #104	@ 0x68
 8008496:	e7e9      	b.n	800846c <_fwalk_sglue+0x10>

08008498 <__sread>:
 8008498:	b510      	push	{r4, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	f000 f8c4 	bl	800862c <_read_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	bfab      	itete	ge
 80084a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084aa:	89a3      	ldrhlt	r3, [r4, #12]
 80084ac:	181b      	addge	r3, r3, r0
 80084ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084b2:	bfac      	ite	ge
 80084b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084b6:	81a3      	strhlt	r3, [r4, #12]
 80084b8:	bd10      	pop	{r4, pc}

080084ba <__swrite>:
 80084ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084be:	461f      	mov	r7, r3
 80084c0:	898b      	ldrh	r3, [r1, #12]
 80084c2:	05db      	lsls	r3, r3, #23
 80084c4:	4605      	mov	r5, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	4616      	mov	r6, r2
 80084ca:	d505      	bpl.n	80084d8 <__swrite+0x1e>
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	2302      	movs	r3, #2
 80084d2:	2200      	movs	r2, #0
 80084d4:	f000 f898 	bl	8008608 <_lseek_r>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	4632      	mov	r2, r6
 80084e6:	463b      	mov	r3, r7
 80084e8:	4628      	mov	r0, r5
 80084ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ee:	f000 b8af 	b.w	8008650 <_write_r>

080084f2 <__sseek>:
 80084f2:	b510      	push	{r4, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fa:	f000 f885 	bl	8008608 <_lseek_r>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	bf15      	itete	ne
 8008504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800850a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800850e:	81a3      	strheq	r3, [r4, #12]
 8008510:	bf18      	it	ne
 8008512:	81a3      	strhne	r3, [r4, #12]
 8008514:	bd10      	pop	{r4, pc}

08008516 <__sclose>:
 8008516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851a:	f000 b865 	b.w	80085e8 <_close_r>

0800851e <memset>:
 800851e:	4402      	add	r2, r0
 8008520:	4603      	mov	r3, r0
 8008522:	4293      	cmp	r3, r2
 8008524:	d100      	bne.n	8008528 <memset+0xa>
 8008526:	4770      	bx	lr
 8008528:	f803 1b01 	strb.w	r1, [r3], #1
 800852c:	e7f9      	b.n	8008522 <memset+0x4>
	...

08008530 <strtok>:
 8008530:	4b16      	ldr	r3, [pc, #88]	@ (800858c <strtok+0x5c>)
 8008532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	681f      	ldr	r7, [r3, #0]
 8008538:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800853a:	4605      	mov	r5, r0
 800853c:	460e      	mov	r6, r1
 800853e:	b9ec      	cbnz	r4, 800857c <strtok+0x4c>
 8008540:	2050      	movs	r0, #80	@ 0x50
 8008542:	f000 f92d 	bl	80087a0 <malloc>
 8008546:	4602      	mov	r2, r0
 8008548:	6478      	str	r0, [r7, #68]	@ 0x44
 800854a:	b920      	cbnz	r0, 8008556 <strtok+0x26>
 800854c:	4b10      	ldr	r3, [pc, #64]	@ (8008590 <strtok+0x60>)
 800854e:	4811      	ldr	r0, [pc, #68]	@ (8008594 <strtok+0x64>)
 8008550:	215b      	movs	r1, #91	@ 0x5b
 8008552:	f000 f8bd 	bl	80086d0 <__assert_func>
 8008556:	e9c0 4400 	strd	r4, r4, [r0]
 800855a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800855e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008562:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008566:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800856a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800856e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008572:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008576:	6184      	str	r4, [r0, #24]
 8008578:	7704      	strb	r4, [r0, #28]
 800857a:	6244      	str	r4, [r0, #36]	@ 0x24
 800857c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800857e:	4631      	mov	r1, r6
 8008580:	4628      	mov	r0, r5
 8008582:	2301      	movs	r3, #1
 8008584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008588:	f000 b806 	b.w	8008598 <__strtok_r>
 800858c:	20000018 	.word	0x20000018
 8008590:	08009675 	.word	0x08009675
 8008594:	0800968c 	.word	0x0800968c

08008598 <__strtok_r>:
 8008598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859a:	4604      	mov	r4, r0
 800859c:	b908      	cbnz	r0, 80085a2 <__strtok_r+0xa>
 800859e:	6814      	ldr	r4, [r2, #0]
 80085a0:	b144      	cbz	r4, 80085b4 <__strtok_r+0x1c>
 80085a2:	4620      	mov	r0, r4
 80085a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80085a8:	460f      	mov	r7, r1
 80085aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80085ae:	b91e      	cbnz	r6, 80085b8 <__strtok_r+0x20>
 80085b0:	b965      	cbnz	r5, 80085cc <__strtok_r+0x34>
 80085b2:	6015      	str	r5, [r2, #0]
 80085b4:	2000      	movs	r0, #0
 80085b6:	e005      	b.n	80085c4 <__strtok_r+0x2c>
 80085b8:	42b5      	cmp	r5, r6
 80085ba:	d1f6      	bne.n	80085aa <__strtok_r+0x12>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1f0      	bne.n	80085a2 <__strtok_r+0xa>
 80085c0:	6014      	str	r4, [r2, #0]
 80085c2:	7003      	strb	r3, [r0, #0]
 80085c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c6:	461c      	mov	r4, r3
 80085c8:	e00c      	b.n	80085e4 <__strtok_r+0x4c>
 80085ca:	b915      	cbnz	r5, 80085d2 <__strtok_r+0x3a>
 80085cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085d0:	460e      	mov	r6, r1
 80085d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80085d6:	42ab      	cmp	r3, r5
 80085d8:	d1f7      	bne.n	80085ca <__strtok_r+0x32>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f3      	beq.n	80085c6 <__strtok_r+0x2e>
 80085de:	2300      	movs	r3, #0
 80085e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80085e4:	6014      	str	r4, [r2, #0]
 80085e6:	e7ed      	b.n	80085c4 <__strtok_r+0x2c>

080085e8 <_close_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4d06      	ldr	r5, [pc, #24]	@ (8008604 <_close_r+0x1c>)
 80085ec:	2300      	movs	r3, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	f7f8 fdb8 	bl	8001168 <_close>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_close_r+0x1a>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_close_r+0x1a>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	2000053c 	.word	0x2000053c

08008608 <_lseek_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d07      	ldr	r5, [pc, #28]	@ (8008628 <_lseek_r+0x20>)
 800860c:	4604      	mov	r4, r0
 800860e:	4608      	mov	r0, r1
 8008610:	4611      	mov	r1, r2
 8008612:	2200      	movs	r2, #0
 8008614:	602a      	str	r2, [r5, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	f7f8 fdcd 	bl	80011b6 <_lseek>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_lseek_r+0x1e>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	b103      	cbz	r3, 8008626 <_lseek_r+0x1e>
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	2000053c 	.word	0x2000053c

0800862c <_read_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4d07      	ldr	r5, [pc, #28]	@ (800864c <_read_r+0x20>)
 8008630:	4604      	mov	r4, r0
 8008632:	4608      	mov	r0, r1
 8008634:	4611      	mov	r1, r2
 8008636:	2200      	movs	r2, #0
 8008638:	602a      	str	r2, [r5, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f7f8 fd5b 	bl	80010f6 <_read>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_read_r+0x1e>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_read_r+0x1e>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	2000053c 	.word	0x2000053c

08008650 <_write_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	@ (8008670 <_write_r+0x20>)
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7f8 fd66 	bl	8001130 <_write>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_write_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_write_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	2000053c 	.word	0x2000053c

08008674 <__errno>:
 8008674:	4b01      	ldr	r3, [pc, #4]	@ (800867c <__errno+0x8>)
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20000018 	.word	0x20000018

08008680 <__libc_init_array>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	4d0d      	ldr	r5, [pc, #52]	@ (80086b8 <__libc_init_array+0x38>)
 8008684:	4c0d      	ldr	r4, [pc, #52]	@ (80086bc <__libc_init_array+0x3c>)
 8008686:	1b64      	subs	r4, r4, r5
 8008688:	10a4      	asrs	r4, r4, #2
 800868a:	2600      	movs	r6, #0
 800868c:	42a6      	cmp	r6, r4
 800868e:	d109      	bne.n	80086a4 <__libc_init_array+0x24>
 8008690:	4d0b      	ldr	r5, [pc, #44]	@ (80086c0 <__libc_init_array+0x40>)
 8008692:	4c0c      	ldr	r4, [pc, #48]	@ (80086c4 <__libc_init_array+0x44>)
 8008694:	f000 fe3a 	bl	800930c <_init>
 8008698:	1b64      	subs	r4, r4, r5
 800869a:	10a4      	asrs	r4, r4, #2
 800869c:	2600      	movs	r6, #0
 800869e:	42a6      	cmp	r6, r4
 80086a0:	d105      	bne.n	80086ae <__libc_init_array+0x2e>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a8:	4798      	blx	r3
 80086aa:	3601      	adds	r6, #1
 80086ac:	e7ee      	b.n	800868c <__libc_init_array+0xc>
 80086ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b2:	4798      	blx	r3
 80086b4:	3601      	adds	r6, #1
 80086b6:	e7f2      	b.n	800869e <__libc_init_array+0x1e>
 80086b8:	08009760 	.word	0x08009760
 80086bc:	08009760 	.word	0x08009760
 80086c0:	08009760 	.word	0x08009760
 80086c4:	08009764 	.word	0x08009764

080086c8 <__retarget_lock_init_recursive>:
 80086c8:	4770      	bx	lr

080086ca <__retarget_lock_acquire_recursive>:
 80086ca:	4770      	bx	lr

080086cc <__retarget_lock_release_recursive>:
 80086cc:	4770      	bx	lr
	...

080086d0 <__assert_func>:
 80086d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d2:	4614      	mov	r4, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	4b09      	ldr	r3, [pc, #36]	@ (80086fc <__assert_func+0x2c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4605      	mov	r5, r0
 80086dc:	68d8      	ldr	r0, [r3, #12]
 80086de:	b954      	cbnz	r4, 80086f6 <__assert_func+0x26>
 80086e0:	4b07      	ldr	r3, [pc, #28]	@ (8008700 <__assert_func+0x30>)
 80086e2:	461c      	mov	r4, r3
 80086e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086e8:	9100      	str	r1, [sp, #0]
 80086ea:	462b      	mov	r3, r5
 80086ec:	4905      	ldr	r1, [pc, #20]	@ (8008704 <__assert_func+0x34>)
 80086ee:	f000 f9b9 	bl	8008a64 <fiprintf>
 80086f2:	f000 f9d9 	bl	8008aa8 <abort>
 80086f6:	4b04      	ldr	r3, [pc, #16]	@ (8008708 <__assert_func+0x38>)
 80086f8:	e7f4      	b.n	80086e4 <__assert_func+0x14>
 80086fa:	bf00      	nop
 80086fc:	20000018 	.word	0x20000018
 8008700:	08009721 	.word	0x08009721
 8008704:	080096f3 	.word	0x080096f3
 8008708:	080096e6 	.word	0x080096e6

0800870c <_free_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4605      	mov	r5, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	d041      	beq.n	8008798 <_free_r+0x8c>
 8008714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008718:	1f0c      	subs	r4, r1, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	bfb8      	it	lt
 800871e:	18e4      	addlt	r4, r4, r3
 8008720:	f000 f8e8 	bl	80088f4 <__malloc_lock>
 8008724:	4a1d      	ldr	r2, [pc, #116]	@ (800879c <_free_r+0x90>)
 8008726:	6813      	ldr	r3, [r2, #0]
 8008728:	b933      	cbnz	r3, 8008738 <_free_r+0x2c>
 800872a:	6063      	str	r3, [r4, #4]
 800872c:	6014      	str	r4, [r2, #0]
 800872e:	4628      	mov	r0, r5
 8008730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008734:	f000 b8e4 	b.w	8008900 <__malloc_unlock>
 8008738:	42a3      	cmp	r3, r4
 800873a:	d908      	bls.n	800874e <_free_r+0x42>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	1821      	adds	r1, r4, r0
 8008740:	428b      	cmp	r3, r1
 8008742:	bf01      	itttt	eq
 8008744:	6819      	ldreq	r1, [r3, #0]
 8008746:	685b      	ldreq	r3, [r3, #4]
 8008748:	1809      	addeq	r1, r1, r0
 800874a:	6021      	streq	r1, [r4, #0]
 800874c:	e7ed      	b.n	800872a <_free_r+0x1e>
 800874e:	461a      	mov	r2, r3
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	b10b      	cbz	r3, 8008758 <_free_r+0x4c>
 8008754:	42a3      	cmp	r3, r4
 8008756:	d9fa      	bls.n	800874e <_free_r+0x42>
 8008758:	6811      	ldr	r1, [r2, #0]
 800875a:	1850      	adds	r0, r2, r1
 800875c:	42a0      	cmp	r0, r4
 800875e:	d10b      	bne.n	8008778 <_free_r+0x6c>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	4401      	add	r1, r0
 8008764:	1850      	adds	r0, r2, r1
 8008766:	4283      	cmp	r3, r0
 8008768:	6011      	str	r1, [r2, #0]
 800876a:	d1e0      	bne.n	800872e <_free_r+0x22>
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	6053      	str	r3, [r2, #4]
 8008772:	4408      	add	r0, r1
 8008774:	6010      	str	r0, [r2, #0]
 8008776:	e7da      	b.n	800872e <_free_r+0x22>
 8008778:	d902      	bls.n	8008780 <_free_r+0x74>
 800877a:	230c      	movs	r3, #12
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	e7d6      	b.n	800872e <_free_r+0x22>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	1821      	adds	r1, r4, r0
 8008784:	428b      	cmp	r3, r1
 8008786:	bf04      	itt	eq
 8008788:	6819      	ldreq	r1, [r3, #0]
 800878a:	685b      	ldreq	r3, [r3, #4]
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	bf04      	itt	eq
 8008790:	1809      	addeq	r1, r1, r0
 8008792:	6021      	streq	r1, [r4, #0]
 8008794:	6054      	str	r4, [r2, #4]
 8008796:	e7ca      	b.n	800872e <_free_r+0x22>
 8008798:	bd38      	pop	{r3, r4, r5, pc}
 800879a:	bf00      	nop
 800879c:	20000548 	.word	0x20000548

080087a0 <malloc>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	@ (80087ac <malloc+0xc>)
 80087a2:	4601      	mov	r1, r0
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	f000 b825 	b.w	80087f4 <_malloc_r>
 80087aa:	bf00      	nop
 80087ac:	20000018 	.word	0x20000018

080087b0 <sbrk_aligned>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4e0f      	ldr	r6, [pc, #60]	@ (80087f0 <sbrk_aligned+0x40>)
 80087b4:	460c      	mov	r4, r1
 80087b6:	6831      	ldr	r1, [r6, #0]
 80087b8:	4605      	mov	r5, r0
 80087ba:	b911      	cbnz	r1, 80087c2 <sbrk_aligned+0x12>
 80087bc:	f000 f964 	bl	8008a88 <_sbrk_r>
 80087c0:	6030      	str	r0, [r6, #0]
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 f95f 	bl	8008a88 <_sbrk_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d103      	bne.n	80087d6 <sbrk_aligned+0x26>
 80087ce:	f04f 34ff 	mov.w	r4, #4294967295
 80087d2:	4620      	mov	r0, r4
 80087d4:	bd70      	pop	{r4, r5, r6, pc}
 80087d6:	1cc4      	adds	r4, r0, #3
 80087d8:	f024 0403 	bic.w	r4, r4, #3
 80087dc:	42a0      	cmp	r0, r4
 80087de:	d0f8      	beq.n	80087d2 <sbrk_aligned+0x22>
 80087e0:	1a21      	subs	r1, r4, r0
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f950 	bl	8008a88 <_sbrk_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d1f2      	bne.n	80087d2 <sbrk_aligned+0x22>
 80087ec:	e7ef      	b.n	80087ce <sbrk_aligned+0x1e>
 80087ee:	bf00      	nop
 80087f0:	20000544 	.word	0x20000544

080087f4 <_malloc_r>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	1ccd      	adds	r5, r1, #3
 80087fa:	f025 0503 	bic.w	r5, r5, #3
 80087fe:	3508      	adds	r5, #8
 8008800:	2d0c      	cmp	r5, #12
 8008802:	bf38      	it	cc
 8008804:	250c      	movcc	r5, #12
 8008806:	2d00      	cmp	r5, #0
 8008808:	4606      	mov	r6, r0
 800880a:	db01      	blt.n	8008810 <_malloc_r+0x1c>
 800880c:	42a9      	cmp	r1, r5
 800880e:	d904      	bls.n	800881a <_malloc_r+0x26>
 8008810:	230c      	movs	r3, #12
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	2000      	movs	r0, #0
 8008816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088f0 <_malloc_r+0xfc>
 800881e:	f000 f869 	bl	80088f4 <__malloc_lock>
 8008822:	f8d8 3000 	ldr.w	r3, [r8]
 8008826:	461c      	mov	r4, r3
 8008828:	bb44      	cbnz	r4, 800887c <_malloc_r+0x88>
 800882a:	4629      	mov	r1, r5
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ffbf 	bl	80087b0 <sbrk_aligned>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	4604      	mov	r4, r0
 8008836:	d158      	bne.n	80088ea <_malloc_r+0xf6>
 8008838:	f8d8 4000 	ldr.w	r4, [r8]
 800883c:	4627      	mov	r7, r4
 800883e:	2f00      	cmp	r7, #0
 8008840:	d143      	bne.n	80088ca <_malloc_r+0xd6>
 8008842:	2c00      	cmp	r4, #0
 8008844:	d04b      	beq.n	80088de <_malloc_r+0xea>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4639      	mov	r1, r7
 800884a:	4630      	mov	r0, r6
 800884c:	eb04 0903 	add.w	r9, r4, r3
 8008850:	f000 f91a 	bl	8008a88 <_sbrk_r>
 8008854:	4581      	cmp	r9, r0
 8008856:	d142      	bne.n	80088de <_malloc_r+0xea>
 8008858:	6821      	ldr	r1, [r4, #0]
 800885a:	1a6d      	subs	r5, r5, r1
 800885c:	4629      	mov	r1, r5
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff ffa6 	bl	80087b0 <sbrk_aligned>
 8008864:	3001      	adds	r0, #1
 8008866:	d03a      	beq.n	80088de <_malloc_r+0xea>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	442b      	add	r3, r5
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	f8d8 3000 	ldr.w	r3, [r8]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	bb62      	cbnz	r2, 80088d0 <_malloc_r+0xdc>
 8008876:	f8c8 7000 	str.w	r7, [r8]
 800887a:	e00f      	b.n	800889c <_malloc_r+0xa8>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	1b52      	subs	r2, r2, r5
 8008880:	d420      	bmi.n	80088c4 <_malloc_r+0xd0>
 8008882:	2a0b      	cmp	r2, #11
 8008884:	d917      	bls.n	80088b6 <_malloc_r+0xc2>
 8008886:	1961      	adds	r1, r4, r5
 8008888:	42a3      	cmp	r3, r4
 800888a:	6025      	str	r5, [r4, #0]
 800888c:	bf18      	it	ne
 800888e:	6059      	strne	r1, [r3, #4]
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	bf08      	it	eq
 8008894:	f8c8 1000 	streq.w	r1, [r8]
 8008898:	5162      	str	r2, [r4, r5]
 800889a:	604b      	str	r3, [r1, #4]
 800889c:	4630      	mov	r0, r6
 800889e:	f000 f82f 	bl	8008900 <__malloc_unlock>
 80088a2:	f104 000b 	add.w	r0, r4, #11
 80088a6:	1d23      	adds	r3, r4, #4
 80088a8:	f020 0007 	bic.w	r0, r0, #7
 80088ac:	1ac2      	subs	r2, r0, r3
 80088ae:	bf1c      	itt	ne
 80088b0:	1a1b      	subne	r3, r3, r0
 80088b2:	50a3      	strne	r3, [r4, r2]
 80088b4:	e7af      	b.n	8008816 <_malloc_r+0x22>
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	bf0c      	ite	eq
 80088bc:	f8c8 2000 	streq.w	r2, [r8]
 80088c0:	605a      	strne	r2, [r3, #4]
 80088c2:	e7eb      	b.n	800889c <_malloc_r+0xa8>
 80088c4:	4623      	mov	r3, r4
 80088c6:	6864      	ldr	r4, [r4, #4]
 80088c8:	e7ae      	b.n	8008828 <_malloc_r+0x34>
 80088ca:	463c      	mov	r4, r7
 80088cc:	687f      	ldr	r7, [r7, #4]
 80088ce:	e7b6      	b.n	800883e <_malloc_r+0x4a>
 80088d0:	461a      	mov	r2, r3
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d1fb      	bne.n	80088d0 <_malloc_r+0xdc>
 80088d8:	2300      	movs	r3, #0
 80088da:	6053      	str	r3, [r2, #4]
 80088dc:	e7de      	b.n	800889c <_malloc_r+0xa8>
 80088de:	230c      	movs	r3, #12
 80088e0:	6033      	str	r3, [r6, #0]
 80088e2:	4630      	mov	r0, r6
 80088e4:	f000 f80c 	bl	8008900 <__malloc_unlock>
 80088e8:	e794      	b.n	8008814 <_malloc_r+0x20>
 80088ea:	6005      	str	r5, [r0, #0]
 80088ec:	e7d6      	b.n	800889c <_malloc_r+0xa8>
 80088ee:	bf00      	nop
 80088f0:	20000548 	.word	0x20000548

080088f4 <__malloc_lock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	@ (80088fc <__malloc_lock+0x8>)
 80088f6:	f7ff bee8 	b.w	80086ca <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	20000540 	.word	0x20000540

08008900 <__malloc_unlock>:
 8008900:	4801      	ldr	r0, [pc, #4]	@ (8008908 <__malloc_unlock+0x8>)
 8008902:	f7ff bee3 	b.w	80086cc <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	20000540 	.word	0x20000540

0800890c <__sflush_r>:
 800890c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	0716      	lsls	r6, r2, #28
 8008916:	4605      	mov	r5, r0
 8008918:	460c      	mov	r4, r1
 800891a:	d454      	bmi.n	80089c6 <__sflush_r+0xba>
 800891c:	684b      	ldr	r3, [r1, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	dc02      	bgt.n	8008928 <__sflush_r+0x1c>
 8008922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd48      	ble.n	80089ba <__sflush_r+0xae>
 8008928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800892a:	2e00      	cmp	r6, #0
 800892c:	d045      	beq.n	80089ba <__sflush_r+0xae>
 800892e:	2300      	movs	r3, #0
 8008930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008934:	682f      	ldr	r7, [r5, #0]
 8008936:	6a21      	ldr	r1, [r4, #32]
 8008938:	602b      	str	r3, [r5, #0]
 800893a:	d030      	beq.n	800899e <__sflush_r+0x92>
 800893c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	0759      	lsls	r1, r3, #29
 8008942:	d505      	bpl.n	8008950 <__sflush_r+0x44>
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	1ad2      	subs	r2, r2, r3
 8008948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800894a:	b10b      	cbz	r3, 8008950 <__sflush_r+0x44>
 800894c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	2300      	movs	r3, #0
 8008952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008954:	6a21      	ldr	r1, [r4, #32]
 8008956:	4628      	mov	r0, r5
 8008958:	47b0      	blx	r6
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	d106      	bne.n	800896e <__sflush_r+0x62>
 8008960:	6829      	ldr	r1, [r5, #0]
 8008962:	291d      	cmp	r1, #29
 8008964:	d82b      	bhi.n	80089be <__sflush_r+0xb2>
 8008966:	4a2a      	ldr	r2, [pc, #168]	@ (8008a10 <__sflush_r+0x104>)
 8008968:	410a      	asrs	r2, r1
 800896a:	07d6      	lsls	r6, r2, #31
 800896c:	d427      	bmi.n	80089be <__sflush_r+0xb2>
 800896e:	2200      	movs	r2, #0
 8008970:	6062      	str	r2, [r4, #4]
 8008972:	04d9      	lsls	r1, r3, #19
 8008974:	6922      	ldr	r2, [r4, #16]
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	d504      	bpl.n	8008984 <__sflush_r+0x78>
 800897a:	1c42      	adds	r2, r0, #1
 800897c:	d101      	bne.n	8008982 <__sflush_r+0x76>
 800897e:	682b      	ldr	r3, [r5, #0]
 8008980:	b903      	cbnz	r3, 8008984 <__sflush_r+0x78>
 8008982:	6560      	str	r0, [r4, #84]	@ 0x54
 8008984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008986:	602f      	str	r7, [r5, #0]
 8008988:	b1b9      	cbz	r1, 80089ba <__sflush_r+0xae>
 800898a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800898e:	4299      	cmp	r1, r3
 8008990:	d002      	beq.n	8008998 <__sflush_r+0x8c>
 8008992:	4628      	mov	r0, r5
 8008994:	f7ff feba 	bl	800870c <_free_r>
 8008998:	2300      	movs	r3, #0
 800899a:	6363      	str	r3, [r4, #52]	@ 0x34
 800899c:	e00d      	b.n	80089ba <__sflush_r+0xae>
 800899e:	2301      	movs	r3, #1
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b0      	blx	r6
 80089a4:	4602      	mov	r2, r0
 80089a6:	1c50      	adds	r0, r2, #1
 80089a8:	d1c9      	bne.n	800893e <__sflush_r+0x32>
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0c6      	beq.n	800893e <__sflush_r+0x32>
 80089b0:	2b1d      	cmp	r3, #29
 80089b2:	d001      	beq.n	80089b8 <__sflush_r+0xac>
 80089b4:	2b16      	cmp	r3, #22
 80089b6:	d11e      	bne.n	80089f6 <__sflush_r+0xea>
 80089b8:	602f      	str	r7, [r5, #0]
 80089ba:	2000      	movs	r0, #0
 80089bc:	e022      	b.n	8008a04 <__sflush_r+0xf8>
 80089be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089c2:	b21b      	sxth	r3, r3
 80089c4:	e01b      	b.n	80089fe <__sflush_r+0xf2>
 80089c6:	690f      	ldr	r7, [r1, #16]
 80089c8:	2f00      	cmp	r7, #0
 80089ca:	d0f6      	beq.n	80089ba <__sflush_r+0xae>
 80089cc:	0793      	lsls	r3, r2, #30
 80089ce:	680e      	ldr	r6, [r1, #0]
 80089d0:	bf08      	it	eq
 80089d2:	694b      	ldreq	r3, [r1, #20]
 80089d4:	600f      	str	r7, [r1, #0]
 80089d6:	bf18      	it	ne
 80089d8:	2300      	movne	r3, #0
 80089da:	eba6 0807 	sub.w	r8, r6, r7
 80089de:	608b      	str	r3, [r1, #8]
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	dde9      	ble.n	80089ba <__sflush_r+0xae>
 80089e6:	6a21      	ldr	r1, [r4, #32]
 80089e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089ea:	4643      	mov	r3, r8
 80089ec:	463a      	mov	r2, r7
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b0      	blx	r6
 80089f2:	2800      	cmp	r0, #0
 80089f4:	dc08      	bgt.n	8008a08 <__sflush_r+0xfc>
 80089f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a08:	4407      	add	r7, r0
 8008a0a:	eba8 0800 	sub.w	r8, r8, r0
 8008a0e:	e7e7      	b.n	80089e0 <__sflush_r+0xd4>
 8008a10:	dfbffffe 	.word	0xdfbffffe

08008a14 <_fflush_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	690b      	ldr	r3, [r1, #16]
 8008a18:	4605      	mov	r5, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	b913      	cbnz	r3, 8008a24 <_fflush_r+0x10>
 8008a1e:	2500      	movs	r5, #0
 8008a20:	4628      	mov	r0, r5
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	b118      	cbz	r0, 8008a2e <_fflush_r+0x1a>
 8008a26:	6a03      	ldr	r3, [r0, #32]
 8008a28:	b90b      	cbnz	r3, 8008a2e <_fflush_r+0x1a>
 8008a2a:	f7ff fcff 	bl	800842c <__sinit>
 8008a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f3      	beq.n	8008a1e <_fflush_r+0xa>
 8008a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a38:	07d0      	lsls	r0, r2, #31
 8008a3a:	d404      	bmi.n	8008a46 <_fflush_r+0x32>
 8008a3c:	0599      	lsls	r1, r3, #22
 8008a3e:	d402      	bmi.n	8008a46 <_fflush_r+0x32>
 8008a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a42:	f7ff fe42 	bl	80086ca <__retarget_lock_acquire_recursive>
 8008a46:	4628      	mov	r0, r5
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f7ff ff5f 	bl	800890c <__sflush_r>
 8008a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a50:	07da      	lsls	r2, r3, #31
 8008a52:	4605      	mov	r5, r0
 8008a54:	d4e4      	bmi.n	8008a20 <_fflush_r+0xc>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	059b      	lsls	r3, r3, #22
 8008a5a:	d4e1      	bmi.n	8008a20 <_fflush_r+0xc>
 8008a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a5e:	f7ff fe35 	bl	80086cc <__retarget_lock_release_recursive>
 8008a62:	e7dd      	b.n	8008a20 <_fflush_r+0xc>

08008a64 <fiprintf>:
 8008a64:	b40e      	push	{r1, r2, r3}
 8008a66:	b503      	push	{r0, r1, lr}
 8008a68:	4601      	mov	r1, r0
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	4805      	ldr	r0, [pc, #20]	@ (8008a84 <fiprintf+0x20>)
 8008a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a72:	6800      	ldr	r0, [r0, #0]
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	f000 f847 	bl	8008b08 <_vfiprintf_r>
 8008a7a:	b002      	add	sp, #8
 8008a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a80:	b003      	add	sp, #12
 8008a82:	4770      	bx	lr
 8008a84:	20000018 	.word	0x20000018

08008a88 <_sbrk_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_sbrk_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f8 fb9c 	bl	80011d0 <_sbrk>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_sbrk_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_sbrk_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	2000053c 	.word	0x2000053c

08008aa8 <abort>:
 8008aa8:	b508      	push	{r3, lr}
 8008aaa:	2006      	movs	r0, #6
 8008aac:	f000 fb8e 	bl	80091cc <raise>
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f7f8 fb15 	bl	80010e0 <_exit>

08008ab6 <__sfputc_r>:
 8008ab6:	6893      	ldr	r3, [r2, #8]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	b410      	push	{r4}
 8008abe:	6093      	str	r3, [r2, #8]
 8008ac0:	da08      	bge.n	8008ad4 <__sfputc_r+0x1e>
 8008ac2:	6994      	ldr	r4, [r2, #24]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	db01      	blt.n	8008acc <__sfputc_r+0x16>
 8008ac8:	290a      	cmp	r1, #10
 8008aca:	d103      	bne.n	8008ad4 <__sfputc_r+0x1e>
 8008acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad0:	f000 bac0 	b.w	8009054 <__swbuf_r>
 8008ad4:	6813      	ldr	r3, [r2, #0]
 8008ad6:	1c58      	adds	r0, r3, #1
 8008ad8:	6010      	str	r0, [r2, #0]
 8008ada:	7019      	strb	r1, [r3, #0]
 8008adc:	4608      	mov	r0, r1
 8008ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <__sfputs_r>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	460f      	mov	r7, r1
 8008aea:	4614      	mov	r4, r2
 8008aec:	18d5      	adds	r5, r2, r3
 8008aee:	42ac      	cmp	r4, r5
 8008af0:	d101      	bne.n	8008af6 <__sfputs_r+0x12>
 8008af2:	2000      	movs	r0, #0
 8008af4:	e007      	b.n	8008b06 <__sfputs_r+0x22>
 8008af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afa:	463a      	mov	r2, r7
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff ffda 	bl	8008ab6 <__sfputc_r>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d1f3      	bne.n	8008aee <__sfputs_r+0xa>
 8008b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b08 <_vfiprintf_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	b09d      	sub	sp, #116	@ 0x74
 8008b10:	4614      	mov	r4, r2
 8008b12:	4698      	mov	r8, r3
 8008b14:	4606      	mov	r6, r0
 8008b16:	b118      	cbz	r0, 8008b20 <_vfiprintf_r+0x18>
 8008b18:	6a03      	ldr	r3, [r0, #32]
 8008b1a:	b90b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x18>
 8008b1c:	f7ff fc86 	bl	800842c <__sinit>
 8008b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b22:	07d9      	lsls	r1, r3, #31
 8008b24:	d405      	bmi.n	8008b32 <_vfiprintf_r+0x2a>
 8008b26:	89ab      	ldrh	r3, [r5, #12]
 8008b28:	059a      	lsls	r2, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_vfiprintf_r+0x2a>
 8008b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b2e:	f7ff fdcc 	bl	80086ca <__retarget_lock_acquire_recursive>
 8008b32:	89ab      	ldrh	r3, [r5, #12]
 8008b34:	071b      	lsls	r3, r3, #28
 8008b36:	d501      	bpl.n	8008b3c <_vfiprintf_r+0x34>
 8008b38:	692b      	ldr	r3, [r5, #16]
 8008b3a:	b99b      	cbnz	r3, 8008b64 <_vfiprintf_r+0x5c>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f000 fac6 	bl	80090d0 <__swsetup_r>
 8008b44:	b170      	cbz	r0, 8008b64 <_vfiprintf_r+0x5c>
 8008b46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b48:	07dc      	lsls	r4, r3, #31
 8008b4a:	d504      	bpl.n	8008b56 <_vfiprintf_r+0x4e>
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	b01d      	add	sp, #116	@ 0x74
 8008b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b56:	89ab      	ldrh	r3, [r5, #12]
 8008b58:	0598      	lsls	r0, r3, #22
 8008b5a:	d4f7      	bmi.n	8008b4c <_vfiprintf_r+0x44>
 8008b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b5e:	f7ff fdb5 	bl	80086cc <__retarget_lock_release_recursive>
 8008b62:	e7f3      	b.n	8008b4c <_vfiprintf_r+0x44>
 8008b64:	2300      	movs	r3, #0
 8008b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b68:	2320      	movs	r3, #32
 8008b6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b72:	2330      	movs	r3, #48	@ 0x30
 8008b74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d24 <_vfiprintf_r+0x21c>
 8008b78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b7c:	f04f 0901 	mov.w	r9, #1
 8008b80:	4623      	mov	r3, r4
 8008b82:	469a      	mov	sl, r3
 8008b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b88:	b10a      	cbz	r2, 8008b8e <_vfiprintf_r+0x86>
 8008b8a:	2a25      	cmp	r2, #37	@ 0x25
 8008b8c:	d1f9      	bne.n	8008b82 <_vfiprintf_r+0x7a>
 8008b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b92:	d00b      	beq.n	8008bac <_vfiprintf_r+0xa4>
 8008b94:	465b      	mov	r3, fp
 8008b96:	4622      	mov	r2, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ffa2 	bl	8008ae4 <__sfputs_r>
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f000 80a7 	beq.w	8008cf4 <_vfiprintf_r+0x1ec>
 8008ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ba8:	445a      	add	r2, fp
 8008baa:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bac:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 809f 	beq.w	8008cf4 <_vfiprintf_r+0x1ec>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc0:	f10a 0a01 	add.w	sl, sl, #1
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bce:	4654      	mov	r4, sl
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	4853      	ldr	r0, [pc, #332]	@ (8008d24 <_vfiprintf_r+0x21c>)
 8008bd8:	f7f7 fb32 	bl	8000240 <memchr>
 8008bdc:	9a04      	ldr	r2, [sp, #16]
 8008bde:	b9d8      	cbnz	r0, 8008c18 <_vfiprintf_r+0x110>
 8008be0:	06d1      	lsls	r1, r2, #27
 8008be2:	bf44      	itt	mi
 8008be4:	2320      	movmi	r3, #32
 8008be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bea:	0713      	lsls	r3, r2, #28
 8008bec:	bf44      	itt	mi
 8008bee:	232b      	movmi	r3, #43	@ 0x2b
 8008bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bfa:	d015      	beq.n	8008c28 <_vfiprintf_r+0x120>
 8008bfc:	9a07      	ldr	r2, [sp, #28]
 8008bfe:	4654      	mov	r4, sl
 8008c00:	2000      	movs	r0, #0
 8008c02:	f04f 0c0a 	mov.w	ip, #10
 8008c06:	4621      	mov	r1, r4
 8008c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c0c:	3b30      	subs	r3, #48	@ 0x30
 8008c0e:	2b09      	cmp	r3, #9
 8008c10:	d94b      	bls.n	8008caa <_vfiprintf_r+0x1a2>
 8008c12:	b1b0      	cbz	r0, 8008c42 <_vfiprintf_r+0x13a>
 8008c14:	9207      	str	r2, [sp, #28]
 8008c16:	e014      	b.n	8008c42 <_vfiprintf_r+0x13a>
 8008c18:	eba0 0308 	sub.w	r3, r0, r8
 8008c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c20:	4313      	orrs	r3, r2
 8008c22:	9304      	str	r3, [sp, #16]
 8008c24:	46a2      	mov	sl, r4
 8008c26:	e7d2      	b.n	8008bce <_vfiprintf_r+0xc6>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	1d19      	adds	r1, r3, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	9103      	str	r1, [sp, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bfbb      	ittet	lt
 8008c34:	425b      	neglt	r3, r3
 8008c36:	f042 0202 	orrlt.w	r2, r2, #2
 8008c3a:	9307      	strge	r3, [sp, #28]
 8008c3c:	9307      	strlt	r3, [sp, #28]
 8008c3e:	bfb8      	it	lt
 8008c40:	9204      	strlt	r2, [sp, #16]
 8008c42:	7823      	ldrb	r3, [r4, #0]
 8008c44:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c46:	d10a      	bne.n	8008c5e <_vfiprintf_r+0x156>
 8008c48:	7863      	ldrb	r3, [r4, #1]
 8008c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c4c:	d132      	bne.n	8008cb4 <_vfiprintf_r+0x1ac>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	9203      	str	r2, [sp, #12]
 8008c56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c5a:	3402      	adds	r4, #2
 8008c5c:	9305      	str	r3, [sp, #20]
 8008c5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d34 <_vfiprintf_r+0x22c>
 8008c62:	7821      	ldrb	r1, [r4, #0]
 8008c64:	2203      	movs	r2, #3
 8008c66:	4650      	mov	r0, sl
 8008c68:	f7f7 faea 	bl	8000240 <memchr>
 8008c6c:	b138      	cbz	r0, 8008c7e <_vfiprintf_r+0x176>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	eba0 000a 	sub.w	r0, r0, sl
 8008c74:	2240      	movs	r2, #64	@ 0x40
 8008c76:	4082      	lsls	r2, r0
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	4829      	ldr	r0, [pc, #164]	@ (8008d28 <_vfiprintf_r+0x220>)
 8008c84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c88:	2206      	movs	r2, #6
 8008c8a:	f7f7 fad9 	bl	8000240 <memchr>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d03f      	beq.n	8008d12 <_vfiprintf_r+0x20a>
 8008c92:	4b26      	ldr	r3, [pc, #152]	@ (8008d2c <_vfiprintf_r+0x224>)
 8008c94:	bb1b      	cbnz	r3, 8008cde <_vfiprintf_r+0x1d6>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	3307      	adds	r3, #7
 8008c9a:	f023 0307 	bic.w	r3, r3, #7
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca4:	443b      	add	r3, r7
 8008ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca8:	e76a      	b.n	8008b80 <_vfiprintf_r+0x78>
 8008caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cae:	460c      	mov	r4, r1
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	e7a8      	b.n	8008c06 <_vfiprintf_r+0xfe>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	3401      	adds	r4, #1
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f04f 0c0a 	mov.w	ip, #10
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cc6:	3a30      	subs	r2, #48	@ 0x30
 8008cc8:	2a09      	cmp	r2, #9
 8008cca:	d903      	bls.n	8008cd4 <_vfiprintf_r+0x1cc>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0c6      	beq.n	8008c5e <_vfiprintf_r+0x156>
 8008cd0:	9105      	str	r1, [sp, #20]
 8008cd2:	e7c4      	b.n	8008c5e <_vfiprintf_r+0x156>
 8008cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd8:	4604      	mov	r4, r0
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e7f0      	b.n	8008cc0 <_vfiprintf_r+0x1b8>
 8008cde:	ab03      	add	r3, sp, #12
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4b12      	ldr	r3, [pc, #72]	@ (8008d30 <_vfiprintf_r+0x228>)
 8008ce6:	a904      	add	r1, sp, #16
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f3af 8000 	nop.w
 8008cee:	4607      	mov	r7, r0
 8008cf0:	1c78      	adds	r0, r7, #1
 8008cf2:	d1d6      	bne.n	8008ca2 <_vfiprintf_r+0x19a>
 8008cf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cf6:	07d9      	lsls	r1, r3, #31
 8008cf8:	d405      	bmi.n	8008d06 <_vfiprintf_r+0x1fe>
 8008cfa:	89ab      	ldrh	r3, [r5, #12]
 8008cfc:	059a      	lsls	r2, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <_vfiprintf_r+0x1fe>
 8008d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d02:	f7ff fce3 	bl	80086cc <__retarget_lock_release_recursive>
 8008d06:	89ab      	ldrh	r3, [r5, #12]
 8008d08:	065b      	lsls	r3, r3, #25
 8008d0a:	f53f af1f 	bmi.w	8008b4c <_vfiprintf_r+0x44>
 8008d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d10:	e71e      	b.n	8008b50 <_vfiprintf_r+0x48>
 8008d12:	ab03      	add	r3, sp, #12
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	462a      	mov	r2, r5
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <_vfiprintf_r+0x228>)
 8008d1a:	a904      	add	r1, sp, #16
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f000 f879 	bl	8008e14 <_printf_i>
 8008d22:	e7e4      	b.n	8008cee <_vfiprintf_r+0x1e6>
 8008d24:	08009722 	.word	0x08009722
 8008d28:	0800972c 	.word	0x0800972c
 8008d2c:	00000000 	.word	0x00000000
 8008d30:	08008ae5 	.word	0x08008ae5
 8008d34:	08009728 	.word	0x08009728

08008d38 <_printf_common>:
 8008d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	4698      	mov	r8, r3
 8008d40:	688a      	ldr	r2, [r1, #8]
 8008d42:	690b      	ldr	r3, [r1, #16]
 8008d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	bfb8      	it	lt
 8008d4c:	4613      	movlt	r3, r2
 8008d4e:	6033      	str	r3, [r6, #0]
 8008d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d54:	4607      	mov	r7, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b10a      	cbz	r2, 8008d5e <_printf_common+0x26>
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	6033      	str	r3, [r6, #0]
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	0699      	lsls	r1, r3, #26
 8008d62:	bf42      	ittt	mi
 8008d64:	6833      	ldrmi	r3, [r6, #0]
 8008d66:	3302      	addmi	r3, #2
 8008d68:	6033      	strmi	r3, [r6, #0]
 8008d6a:	6825      	ldr	r5, [r4, #0]
 8008d6c:	f015 0506 	ands.w	r5, r5, #6
 8008d70:	d106      	bne.n	8008d80 <_printf_common+0x48>
 8008d72:	f104 0a19 	add.w	sl, r4, #25
 8008d76:	68e3      	ldr	r3, [r4, #12]
 8008d78:	6832      	ldr	r2, [r6, #0]
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	42ab      	cmp	r3, r5
 8008d7e:	dc26      	bgt.n	8008dce <_printf_common+0x96>
 8008d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	3b00      	subs	r3, #0
 8008d88:	bf18      	it	ne
 8008d8a:	2301      	movne	r3, #1
 8008d8c:	0692      	lsls	r2, r2, #26
 8008d8e:	d42b      	bmi.n	8008de8 <_printf_common+0xb0>
 8008d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d94:	4641      	mov	r1, r8
 8008d96:	4638      	mov	r0, r7
 8008d98:	47c8      	blx	r9
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d01e      	beq.n	8008ddc <_printf_common+0xa4>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	6922      	ldr	r2, [r4, #16]
 8008da2:	f003 0306 	and.w	r3, r3, #6
 8008da6:	2b04      	cmp	r3, #4
 8008da8:	bf02      	ittt	eq
 8008daa:	68e5      	ldreq	r5, [r4, #12]
 8008dac:	6833      	ldreq	r3, [r6, #0]
 8008dae:	1aed      	subeq	r5, r5, r3
 8008db0:	68a3      	ldr	r3, [r4, #8]
 8008db2:	bf0c      	ite	eq
 8008db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db8:	2500      	movne	r5, #0
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	bfc4      	itt	gt
 8008dbe:	1a9b      	subgt	r3, r3, r2
 8008dc0:	18ed      	addgt	r5, r5, r3
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	341a      	adds	r4, #26
 8008dc6:	42b5      	cmp	r5, r6
 8008dc8:	d11a      	bne.n	8008e00 <_printf_common+0xc8>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	e008      	b.n	8008de0 <_printf_common+0xa8>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	4641      	mov	r1, r8
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	47c8      	blx	r9
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d103      	bne.n	8008de4 <_printf_common+0xac>
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de4:	3501      	adds	r5, #1
 8008de6:	e7c6      	b.n	8008d76 <_printf_common+0x3e>
 8008de8:	18e1      	adds	r1, r4, r3
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	2030      	movs	r0, #48	@ 0x30
 8008dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008df2:	4422      	add	r2, r4
 8008df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dfc:	3302      	adds	r3, #2
 8008dfe:	e7c7      	b.n	8008d90 <_printf_common+0x58>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4622      	mov	r2, r4
 8008e04:	4641      	mov	r1, r8
 8008e06:	4638      	mov	r0, r7
 8008e08:	47c8      	blx	r9
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d0e6      	beq.n	8008ddc <_printf_common+0xa4>
 8008e0e:	3601      	adds	r6, #1
 8008e10:	e7d9      	b.n	8008dc6 <_printf_common+0x8e>
	...

08008e14 <_printf_i>:
 8008e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e18:	7e0f      	ldrb	r7, [r1, #24]
 8008e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e1c:	2f78      	cmp	r7, #120	@ 0x78
 8008e1e:	4691      	mov	r9, r2
 8008e20:	4680      	mov	r8, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	469a      	mov	sl, r3
 8008e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e2a:	d807      	bhi.n	8008e3c <_printf_i+0x28>
 8008e2c:	2f62      	cmp	r7, #98	@ 0x62
 8008e2e:	d80a      	bhi.n	8008e46 <_printf_i+0x32>
 8008e30:	2f00      	cmp	r7, #0
 8008e32:	f000 80d2 	beq.w	8008fda <_printf_i+0x1c6>
 8008e36:	2f58      	cmp	r7, #88	@ 0x58
 8008e38:	f000 80b9 	beq.w	8008fae <_printf_i+0x19a>
 8008e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e44:	e03a      	b.n	8008ebc <_printf_i+0xa8>
 8008e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e4a:	2b15      	cmp	r3, #21
 8008e4c:	d8f6      	bhi.n	8008e3c <_printf_i+0x28>
 8008e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e54 <_printf_i+0x40>)
 8008e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e54:	08008ead 	.word	0x08008ead
 8008e58:	08008ec1 	.word	0x08008ec1
 8008e5c:	08008e3d 	.word	0x08008e3d
 8008e60:	08008e3d 	.word	0x08008e3d
 8008e64:	08008e3d 	.word	0x08008e3d
 8008e68:	08008e3d 	.word	0x08008e3d
 8008e6c:	08008ec1 	.word	0x08008ec1
 8008e70:	08008e3d 	.word	0x08008e3d
 8008e74:	08008e3d 	.word	0x08008e3d
 8008e78:	08008e3d 	.word	0x08008e3d
 8008e7c:	08008e3d 	.word	0x08008e3d
 8008e80:	08008fc1 	.word	0x08008fc1
 8008e84:	08008eeb 	.word	0x08008eeb
 8008e88:	08008f7b 	.word	0x08008f7b
 8008e8c:	08008e3d 	.word	0x08008e3d
 8008e90:	08008e3d 	.word	0x08008e3d
 8008e94:	08008fe3 	.word	0x08008fe3
 8008e98:	08008e3d 	.word	0x08008e3d
 8008e9c:	08008eeb 	.word	0x08008eeb
 8008ea0:	08008e3d 	.word	0x08008e3d
 8008ea4:	08008e3d 	.word	0x08008e3d
 8008ea8:	08008f83 	.word	0x08008f83
 8008eac:	6833      	ldr	r3, [r6, #0]
 8008eae:	1d1a      	adds	r2, r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6032      	str	r2, [r6, #0]
 8008eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e09d      	b.n	8008ffc <_printf_i+0x1e8>
 8008ec0:	6833      	ldr	r3, [r6, #0]
 8008ec2:	6820      	ldr	r0, [r4, #0]
 8008ec4:	1d19      	adds	r1, r3, #4
 8008ec6:	6031      	str	r1, [r6, #0]
 8008ec8:	0606      	lsls	r6, r0, #24
 8008eca:	d501      	bpl.n	8008ed0 <_printf_i+0xbc>
 8008ecc:	681d      	ldr	r5, [r3, #0]
 8008ece:	e003      	b.n	8008ed8 <_printf_i+0xc4>
 8008ed0:	0645      	lsls	r5, r0, #25
 8008ed2:	d5fb      	bpl.n	8008ecc <_printf_i+0xb8>
 8008ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	da03      	bge.n	8008ee4 <_printf_i+0xd0>
 8008edc:	232d      	movs	r3, #45	@ 0x2d
 8008ede:	426d      	negs	r5, r5
 8008ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee4:	4859      	ldr	r0, [pc, #356]	@ (800904c <_printf_i+0x238>)
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	e011      	b.n	8008f0e <_printf_i+0xfa>
 8008eea:	6821      	ldr	r1, [r4, #0]
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	0608      	lsls	r0, r1, #24
 8008ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ef4:	d402      	bmi.n	8008efc <_printf_i+0xe8>
 8008ef6:	0649      	lsls	r1, r1, #25
 8008ef8:	bf48      	it	mi
 8008efa:	b2ad      	uxthmi	r5, r5
 8008efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008efe:	4853      	ldr	r0, [pc, #332]	@ (800904c <_printf_i+0x238>)
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	bf14      	ite	ne
 8008f04:	230a      	movne	r3, #10
 8008f06:	2308      	moveq	r3, #8
 8008f08:	2100      	movs	r1, #0
 8008f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f0e:	6866      	ldr	r6, [r4, #4]
 8008f10:	60a6      	str	r6, [r4, #8]
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	bfa2      	ittt	ge
 8008f16:	6821      	ldrge	r1, [r4, #0]
 8008f18:	f021 0104 	bicge.w	r1, r1, #4
 8008f1c:	6021      	strge	r1, [r4, #0]
 8008f1e:	b90d      	cbnz	r5, 8008f24 <_printf_i+0x110>
 8008f20:	2e00      	cmp	r6, #0
 8008f22:	d04b      	beq.n	8008fbc <_printf_i+0x1a8>
 8008f24:	4616      	mov	r6, r2
 8008f26:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f2a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f2e:	5dc7      	ldrb	r7, [r0, r7]
 8008f30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f34:	462f      	mov	r7, r5
 8008f36:	42bb      	cmp	r3, r7
 8008f38:	460d      	mov	r5, r1
 8008f3a:	d9f4      	bls.n	8008f26 <_printf_i+0x112>
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d10b      	bne.n	8008f58 <_printf_i+0x144>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	07df      	lsls	r7, r3, #31
 8008f44:	d508      	bpl.n	8008f58 <_printf_i+0x144>
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	6861      	ldr	r1, [r4, #4]
 8008f4a:	4299      	cmp	r1, r3
 8008f4c:	bfde      	ittt	le
 8008f4e:	2330      	movle	r3, #48	@ 0x30
 8008f50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f58:	1b92      	subs	r2, r2, r6
 8008f5a:	6122      	str	r2, [r4, #16]
 8008f5c:	f8cd a000 	str.w	sl, [sp]
 8008f60:	464b      	mov	r3, r9
 8008f62:	aa03      	add	r2, sp, #12
 8008f64:	4621      	mov	r1, r4
 8008f66:	4640      	mov	r0, r8
 8008f68:	f7ff fee6 	bl	8008d38 <_printf_common>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d14a      	bne.n	8009006 <_printf_i+0x1f2>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b004      	add	sp, #16
 8008f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	f043 0320 	orr.w	r3, r3, #32
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	4833      	ldr	r0, [pc, #204]	@ (8009050 <_printf_i+0x23c>)
 8008f84:	2778      	movs	r7, #120	@ 0x78
 8008f86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	6831      	ldr	r1, [r6, #0]
 8008f8e:	061f      	lsls	r7, r3, #24
 8008f90:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f94:	d402      	bmi.n	8008f9c <_printf_i+0x188>
 8008f96:	065f      	lsls	r7, r3, #25
 8008f98:	bf48      	it	mi
 8008f9a:	b2ad      	uxthmi	r5, r5
 8008f9c:	6031      	str	r1, [r6, #0]
 8008f9e:	07d9      	lsls	r1, r3, #31
 8008fa0:	bf44      	itt	mi
 8008fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fa6:	6023      	strmi	r3, [r4, #0]
 8008fa8:	b11d      	cbz	r5, 8008fb2 <_printf_i+0x19e>
 8008faa:	2310      	movs	r3, #16
 8008fac:	e7ac      	b.n	8008f08 <_printf_i+0xf4>
 8008fae:	4827      	ldr	r0, [pc, #156]	@ (800904c <_printf_i+0x238>)
 8008fb0:	e7e9      	b.n	8008f86 <_printf_i+0x172>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f023 0320 	bic.w	r3, r3, #32
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	e7f6      	b.n	8008faa <_printf_i+0x196>
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	e7bd      	b.n	8008f3c <_printf_i+0x128>
 8008fc0:	6833      	ldr	r3, [r6, #0]
 8008fc2:	6825      	ldr	r5, [r4, #0]
 8008fc4:	6961      	ldr	r1, [r4, #20]
 8008fc6:	1d18      	adds	r0, r3, #4
 8008fc8:	6030      	str	r0, [r6, #0]
 8008fca:	062e      	lsls	r6, r5, #24
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	d501      	bpl.n	8008fd4 <_printf_i+0x1c0>
 8008fd0:	6019      	str	r1, [r3, #0]
 8008fd2:	e002      	b.n	8008fda <_printf_i+0x1c6>
 8008fd4:	0668      	lsls	r0, r5, #25
 8008fd6:	d5fb      	bpl.n	8008fd0 <_printf_i+0x1bc>
 8008fd8:	8019      	strh	r1, [r3, #0]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	4616      	mov	r6, r2
 8008fe0:	e7bc      	b.n	8008f5c <_printf_i+0x148>
 8008fe2:	6833      	ldr	r3, [r6, #0]
 8008fe4:	1d1a      	adds	r2, r3, #4
 8008fe6:	6032      	str	r2, [r6, #0]
 8008fe8:	681e      	ldr	r6, [r3, #0]
 8008fea:	6862      	ldr	r2, [r4, #4]
 8008fec:	2100      	movs	r1, #0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f7f7 f926 	bl	8000240 <memchr>
 8008ff4:	b108      	cbz	r0, 8008ffa <_printf_i+0x1e6>
 8008ff6:	1b80      	subs	r0, r0, r6
 8008ff8:	6060      	str	r0, [r4, #4]
 8008ffa:	6863      	ldr	r3, [r4, #4]
 8008ffc:	6123      	str	r3, [r4, #16]
 8008ffe:	2300      	movs	r3, #0
 8009000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009004:	e7aa      	b.n	8008f5c <_printf_i+0x148>
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	4632      	mov	r2, r6
 800900a:	4649      	mov	r1, r9
 800900c:	4640      	mov	r0, r8
 800900e:	47d0      	blx	sl
 8009010:	3001      	adds	r0, #1
 8009012:	d0ad      	beq.n	8008f70 <_printf_i+0x15c>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	079b      	lsls	r3, r3, #30
 8009018:	d413      	bmi.n	8009042 <_printf_i+0x22e>
 800901a:	68e0      	ldr	r0, [r4, #12]
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	4298      	cmp	r0, r3
 8009020:	bfb8      	it	lt
 8009022:	4618      	movlt	r0, r3
 8009024:	e7a6      	b.n	8008f74 <_printf_i+0x160>
 8009026:	2301      	movs	r3, #1
 8009028:	4632      	mov	r2, r6
 800902a:	4649      	mov	r1, r9
 800902c:	4640      	mov	r0, r8
 800902e:	47d0      	blx	sl
 8009030:	3001      	adds	r0, #1
 8009032:	d09d      	beq.n	8008f70 <_printf_i+0x15c>
 8009034:	3501      	adds	r5, #1
 8009036:	68e3      	ldr	r3, [r4, #12]
 8009038:	9903      	ldr	r1, [sp, #12]
 800903a:	1a5b      	subs	r3, r3, r1
 800903c:	42ab      	cmp	r3, r5
 800903e:	dcf2      	bgt.n	8009026 <_printf_i+0x212>
 8009040:	e7eb      	b.n	800901a <_printf_i+0x206>
 8009042:	2500      	movs	r5, #0
 8009044:	f104 0619 	add.w	r6, r4, #25
 8009048:	e7f5      	b.n	8009036 <_printf_i+0x222>
 800904a:	bf00      	nop
 800904c:	08009733 	.word	0x08009733
 8009050:	08009744 	.word	0x08009744

08009054 <__swbuf_r>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	460e      	mov	r6, r1
 8009058:	4614      	mov	r4, r2
 800905a:	4605      	mov	r5, r0
 800905c:	b118      	cbz	r0, 8009066 <__swbuf_r+0x12>
 800905e:	6a03      	ldr	r3, [r0, #32]
 8009060:	b90b      	cbnz	r3, 8009066 <__swbuf_r+0x12>
 8009062:	f7ff f9e3 	bl	800842c <__sinit>
 8009066:	69a3      	ldr	r3, [r4, #24]
 8009068:	60a3      	str	r3, [r4, #8]
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	071a      	lsls	r2, r3, #28
 800906e:	d501      	bpl.n	8009074 <__swbuf_r+0x20>
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	b943      	cbnz	r3, 8009086 <__swbuf_r+0x32>
 8009074:	4621      	mov	r1, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f82a 	bl	80090d0 <__swsetup_r>
 800907c:	b118      	cbz	r0, 8009086 <__swbuf_r+0x32>
 800907e:	f04f 37ff 	mov.w	r7, #4294967295
 8009082:	4638      	mov	r0, r7
 8009084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	1a98      	subs	r0, r3, r2
 800908c:	6963      	ldr	r3, [r4, #20]
 800908e:	b2f6      	uxtb	r6, r6
 8009090:	4283      	cmp	r3, r0
 8009092:	4637      	mov	r7, r6
 8009094:	dc05      	bgt.n	80090a2 <__swbuf_r+0x4e>
 8009096:	4621      	mov	r1, r4
 8009098:	4628      	mov	r0, r5
 800909a:	f7ff fcbb 	bl	8008a14 <_fflush_r>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d1ed      	bne.n	800907e <__swbuf_r+0x2a>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	701e      	strb	r6, [r3, #0]
 80090b0:	6962      	ldr	r2, [r4, #20]
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d004      	beq.n	80090c2 <__swbuf_r+0x6e>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	07db      	lsls	r3, r3, #31
 80090bc:	d5e1      	bpl.n	8009082 <__swbuf_r+0x2e>
 80090be:	2e0a      	cmp	r6, #10
 80090c0:	d1df      	bne.n	8009082 <__swbuf_r+0x2e>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f7ff fca5 	bl	8008a14 <_fflush_r>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d0d9      	beq.n	8009082 <__swbuf_r+0x2e>
 80090ce:	e7d6      	b.n	800907e <__swbuf_r+0x2a>

080090d0 <__swsetup_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4b29      	ldr	r3, [pc, #164]	@ (8009178 <__swsetup_r+0xa8>)
 80090d4:	4605      	mov	r5, r0
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	460c      	mov	r4, r1
 80090da:	b118      	cbz	r0, 80090e4 <__swsetup_r+0x14>
 80090dc:	6a03      	ldr	r3, [r0, #32]
 80090de:	b90b      	cbnz	r3, 80090e4 <__swsetup_r+0x14>
 80090e0:	f7ff f9a4 	bl	800842c <__sinit>
 80090e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e8:	0719      	lsls	r1, r3, #28
 80090ea:	d422      	bmi.n	8009132 <__swsetup_r+0x62>
 80090ec:	06da      	lsls	r2, r3, #27
 80090ee:	d407      	bmi.n	8009100 <__swsetup_r+0x30>
 80090f0:	2209      	movs	r2, #9
 80090f2:	602a      	str	r2, [r5, #0]
 80090f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	e033      	b.n	8009168 <__swsetup_r+0x98>
 8009100:	0758      	lsls	r0, r3, #29
 8009102:	d512      	bpl.n	800912a <__swsetup_r+0x5a>
 8009104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009106:	b141      	cbz	r1, 800911a <__swsetup_r+0x4a>
 8009108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800910c:	4299      	cmp	r1, r3
 800910e:	d002      	beq.n	8009116 <__swsetup_r+0x46>
 8009110:	4628      	mov	r0, r5
 8009112:	f7ff fafb 	bl	800870c <_free_r>
 8009116:	2300      	movs	r3, #0
 8009118:	6363      	str	r3, [r4, #52]	@ 0x34
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	2300      	movs	r3, #0
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f043 0308 	orr.w	r3, r3, #8
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	b94b      	cbnz	r3, 800914a <__swsetup_r+0x7a>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800913c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009140:	d003      	beq.n	800914a <__swsetup_r+0x7a>
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f000 f883 	bl	8009250 <__smakebuf_r>
 800914a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914e:	f013 0201 	ands.w	r2, r3, #1
 8009152:	d00a      	beq.n	800916a <__swsetup_r+0x9a>
 8009154:	2200      	movs	r2, #0
 8009156:	60a2      	str	r2, [r4, #8]
 8009158:	6962      	ldr	r2, [r4, #20]
 800915a:	4252      	negs	r2, r2
 800915c:	61a2      	str	r2, [r4, #24]
 800915e:	6922      	ldr	r2, [r4, #16]
 8009160:	b942      	cbnz	r2, 8009174 <__swsetup_r+0xa4>
 8009162:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009166:	d1c5      	bne.n	80090f4 <__swsetup_r+0x24>
 8009168:	bd38      	pop	{r3, r4, r5, pc}
 800916a:	0799      	lsls	r1, r3, #30
 800916c:	bf58      	it	pl
 800916e:	6962      	ldrpl	r2, [r4, #20]
 8009170:	60a2      	str	r2, [r4, #8]
 8009172:	e7f4      	b.n	800915e <__swsetup_r+0x8e>
 8009174:	2000      	movs	r0, #0
 8009176:	e7f7      	b.n	8009168 <__swsetup_r+0x98>
 8009178:	20000018 	.word	0x20000018

0800917c <_raise_r>:
 800917c:	291f      	cmp	r1, #31
 800917e:	b538      	push	{r3, r4, r5, lr}
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	d904      	bls.n	8009190 <_raise_r+0x14>
 8009186:	2316      	movs	r3, #22
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009192:	b112      	cbz	r2, 800919a <_raise_r+0x1e>
 8009194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009198:	b94b      	cbnz	r3, 80091ae <_raise_r+0x32>
 800919a:	4628      	mov	r0, r5
 800919c:	f000 f830 	bl	8009200 <_getpid_r>
 80091a0:	4622      	mov	r2, r4
 80091a2:	4601      	mov	r1, r0
 80091a4:	4628      	mov	r0, r5
 80091a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091aa:	f000 b817 	b.w	80091dc <_kill_r>
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d00a      	beq.n	80091c8 <_raise_r+0x4c>
 80091b2:	1c59      	adds	r1, r3, #1
 80091b4:	d103      	bne.n	80091be <_raise_r+0x42>
 80091b6:	2316      	movs	r3, #22
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	2001      	movs	r0, #1
 80091bc:	e7e7      	b.n	800918e <_raise_r+0x12>
 80091be:	2100      	movs	r1, #0
 80091c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091c4:	4620      	mov	r0, r4
 80091c6:	4798      	blx	r3
 80091c8:	2000      	movs	r0, #0
 80091ca:	e7e0      	b.n	800918e <_raise_r+0x12>

080091cc <raise>:
 80091cc:	4b02      	ldr	r3, [pc, #8]	@ (80091d8 <raise+0xc>)
 80091ce:	4601      	mov	r1, r0
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f7ff bfd3 	b.w	800917c <_raise_r>
 80091d6:	bf00      	nop
 80091d8:	20000018 	.word	0x20000018

080091dc <_kill_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	@ (80091fc <_kill_r+0x20>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	f7f7 ff69 	bl	80010c0 <_kill>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d102      	bne.n	80091f8 <_kill_r+0x1c>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	b103      	cbz	r3, 80091f8 <_kill_r+0x1c>
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	bd38      	pop	{r3, r4, r5, pc}
 80091fa:	bf00      	nop
 80091fc:	2000053c 	.word	0x2000053c

08009200 <_getpid_r>:
 8009200:	f7f7 bf56 	b.w	80010b0 <_getpid>

08009204 <__swhatbuf_r>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	460c      	mov	r4, r1
 8009208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920c:	2900      	cmp	r1, #0
 800920e:	b096      	sub	sp, #88	@ 0x58
 8009210:	4615      	mov	r5, r2
 8009212:	461e      	mov	r6, r3
 8009214:	da0d      	bge.n	8009232 <__swhatbuf_r+0x2e>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800921c:	f04f 0100 	mov.w	r1, #0
 8009220:	bf14      	ite	ne
 8009222:	2340      	movne	r3, #64	@ 0x40
 8009224:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009228:	2000      	movs	r0, #0
 800922a:	6031      	str	r1, [r6, #0]
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	b016      	add	sp, #88	@ 0x58
 8009230:	bd70      	pop	{r4, r5, r6, pc}
 8009232:	466a      	mov	r2, sp
 8009234:	f000 f848 	bl	80092c8 <_fstat_r>
 8009238:	2800      	cmp	r0, #0
 800923a:	dbec      	blt.n	8009216 <__swhatbuf_r+0x12>
 800923c:	9901      	ldr	r1, [sp, #4]
 800923e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009242:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009246:	4259      	negs	r1, r3
 8009248:	4159      	adcs	r1, r3
 800924a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800924e:	e7eb      	b.n	8009228 <__swhatbuf_r+0x24>

08009250 <__smakebuf_r>:
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009254:	079d      	lsls	r5, r3, #30
 8009256:	4606      	mov	r6, r0
 8009258:	460c      	mov	r4, r1
 800925a:	d507      	bpl.n	800926c <__smakebuf_r+0x1c>
 800925c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	2301      	movs	r3, #1
 8009266:	6163      	str	r3, [r4, #20]
 8009268:	b003      	add	sp, #12
 800926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926c:	ab01      	add	r3, sp, #4
 800926e:	466a      	mov	r2, sp
 8009270:	f7ff ffc8 	bl	8009204 <__swhatbuf_r>
 8009274:	9f00      	ldr	r7, [sp, #0]
 8009276:	4605      	mov	r5, r0
 8009278:	4639      	mov	r1, r7
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff faba 	bl	80087f4 <_malloc_r>
 8009280:	b948      	cbnz	r0, 8009296 <__smakebuf_r+0x46>
 8009282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009286:	059a      	lsls	r2, r3, #22
 8009288:	d4ee      	bmi.n	8009268 <__smakebuf_r+0x18>
 800928a:	f023 0303 	bic.w	r3, r3, #3
 800928e:	f043 0302 	orr.w	r3, r3, #2
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	e7e2      	b.n	800925c <__smakebuf_r+0xc>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	6020      	str	r0, [r4, #0]
 800929a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	9b01      	ldr	r3, [sp, #4]
 80092a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092a6:	b15b      	cbz	r3, 80092c0 <__smakebuf_r+0x70>
 80092a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f81d 	bl	80092ec <_isatty_r>
 80092b2:	b128      	cbz	r0, 80092c0 <__smakebuf_r+0x70>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	f043 0301 	orr.w	r3, r3, #1
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	431d      	orrs	r5, r3
 80092c4:	81a5      	strh	r5, [r4, #12]
 80092c6:	e7cf      	b.n	8009268 <__smakebuf_r+0x18>

080092c8 <_fstat_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d07      	ldr	r5, [pc, #28]	@ (80092e8 <_fstat_r+0x20>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	f7f7 ff53 	bl	8001180 <_fstat>
 80092da:	1c43      	adds	r3, r0, #1
 80092dc:	d102      	bne.n	80092e4 <_fstat_r+0x1c>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	b103      	cbz	r3, 80092e4 <_fstat_r+0x1c>
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	bd38      	pop	{r3, r4, r5, pc}
 80092e6:	bf00      	nop
 80092e8:	2000053c 	.word	0x2000053c

080092ec <_isatty_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	@ (8009308 <_isatty_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f7 ff52 	bl	80011a0 <_isatty>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_isatty_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_isatty_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	2000053c 	.word	0x2000053c

0800930c <_init>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr

08009318 <_fini>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr
