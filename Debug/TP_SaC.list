
TP_SaC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080094a4  080094a4  0000a4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d8  080098d8  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  080098d8  080098d8  0000a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e0  080098e0  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e0  080098e0  0000a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080098e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000068  08009950  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08009950  0000b598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a25d  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ee  00000000  00000000  000252f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  000287e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001122  00000000  00000000  00029e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fe7  00000000  00000000  0002af2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af96  00000000  00000000  00054f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114766  00000000  00000000  0006fea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018460d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  00184650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0018aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800948c 	.word	0x0800948c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800948c 	.word	0x0800948c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2220      	movs	r2, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f008 f858 	bl	800869e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ee:	4b32      	ldr	r3, [pc, #200]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f6:	4b30      	ldr	r3, [pc, #192]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000618:	2204      	movs	r2, #4
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000622:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800062a:	2201      	movs	r2, #1
 800062c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 800065a:	f001 fc65 	bl	8001f28 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 fc56 	bl	8000f14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 8000674:	f002 fa7a 	bl	8002b6c <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 fc49 	bl	8000f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_ADC1_Init+0xec>)
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	@ 0x7f
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80006a0:	f001 fdfe 	bl	80022a0 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 fc33 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	@ 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000084 	.word	0x20000084
 80006bc:	21800100 	.word	0x21800100

080006c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f007 ffe6 	bl	800869e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000784 <MX_ADC2_Init+0xc4>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_ADC2_Init+0xc0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <MX_ADC2_Init+0xc0>)
 800073c:	f001 fbf4 	bl	8001f28 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 fbe5 	bl	8000f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_ADC2_Init+0xc8>)
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2306      	movs	r3, #6
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000756:	237f      	movs	r3, #127	@ 0x7f
 8000758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <MX_ADC2_Init+0xc0>)
 8000768:	f001 fd9a 	bl	80022a0 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000772:	f000 fbcf 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000f0 	.word	0x200000f0
 8000784:	50000100 	.word	0x50000100
 8000788:	19200040 	.word	0x19200040

0800078c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	@ 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a8:	2254      	movs	r2, #84	@ 0x54
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f007 ff76 	bl	800869e <memset>
  if(adcHandle->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ba:	d174      	bne.n	80008a6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fc47 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007d8:	f000 fb9c 	bl	8000f14 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007dc:	4b63      	ldr	r3, [pc, #396]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a62      	ldr	r2, [pc, #392]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007e6:	4b61      	ldr	r3, [pc, #388]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10b      	bne.n	8000806 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007ee:	4b60      	ldr	r3, [pc, #384]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a5f      	ldr	r2, [pc, #380]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
 8000804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b5a      	ldr	r3, [pc, #360]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a59      	ldr	r2, [pc, #356]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b57      	ldr	r3, [pc, #348]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b54      	ldr	r3, [pc, #336]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a53      	ldr	r2, [pc, #332]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b51      	ldr	r3, [pc, #324]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b4e      	ldr	r3, [pc, #312]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a4d      	ldr	r2, [pc, #308]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b4b      	ldr	r3, [pc, #300]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800084e:	2304      	movs	r3, #4
 8000850:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000862:	4619      	mov	r1, r3
 8000864:	4843      	ldr	r0, [pc, #268]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000866:	f002 fc29 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800086a:	2302      	movs	r3, #2
 800086c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f002 fc1a 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000888:	2303      	movs	r3, #3
 800088a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800089c:	4619      	mov	r1, r3
 800089e:	4836      	ldr	r0, [pc, #216]	@ (8000978 <HAL_ADC_MspInit+0x1ec>)
 80008a0:	f002 fc0c 	bl	80030bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008a4:	e05e      	b.n	8000964 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a34      	ldr	r2, [pc, #208]	@ (800097c <HAL_ADC_MspInit+0x1f0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d159      	bne.n	8000964 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 fbcd 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008cc:	f000 fb22 	bl	8000f14 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <HAL_ADC_MspInit+0x1e0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d10b      	bne.n	80008fa <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_ADC_MspInit+0x1e4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800092a:	230b      	movs	r3, #11
 800092c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x1e8>)
 8000942:	f002 fbbb 	bl	80030bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f002 fbac 	bl	80030bc <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3790      	adds	r7, #144	@ 0x90
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000015c 	.word	0x2000015c
 8000970:	40021000 	.word	0x40021000
 8000974:	48000800 	.word	0x48000800
 8000978:	48000400 	.word	0x48000400
 800097c:	50000100 	.word	0x50000100

08000980 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a94 <MX_GPIO_Init+0x114>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a38      	ldr	r2, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <MX_GPIO_Init+0x114>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f002 fcd3 	bl	80033c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a20:	f002 fcce 	bl	80033c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <MX_GPIO_Init+0x11c>)
 8000a3c:	f002 fb3e 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f002 fb2f 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <MX_GPIO_Init+0x118>)
 8000a76:	f002 fb21 	bl	80030bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f002 fa34 	bl	8002eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	@ 0x28
 8000a86:	f002 fa4b 	bl	8002f20 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000c00 	.word	0x48000c00
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /** @brief Tableau des arguments extraits de la commande */
  char* argv[MAX_ARGS];

  /** @brief Nombre d'arguments */
  int argc = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	@ 0x34

  /** @brief Token pour l'analyse de la chaîne */
  char* token;

  /** @brief Flag indiquant qu'une nouvelle commande est prête */
  int newCmdReady = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f001 f80c 	bl	8001aca <HAL_Init>

  /* USER CODE BEGIN Init */
  idxCmd = 0;
 8000ab2:	4ba8      	ldr	r3, [pc, #672]	@ (8000d54 <main+0x2b4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
  memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000ab8:	2240      	movs	r2, #64	@ 0x40
 8000aba:	2100      	movs	r1, #0
 8000abc:	48a6      	ldr	r0, [pc, #664]	@ (8000d58 <main+0x2b8>)
 8000abe:	f007 fdee 	bl	800869e <memset>
  memset(argv, 0, MAX_ARGS * sizeof(char*));
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2224      	movs	r2, #36	@ 0x24
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fde7 	bl	800869e <memset>
  memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000ad0:	4ba2      	ldr	r3, [pc, #648]	@ (8000d5c <main+0x2bc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 8000ad6:	2240      	movs	r2, #64	@ 0x40
 8000ad8:	2100      	movs	r1, #0
 8000ada:	48a1      	ldr	r0, [pc, #644]	@ (8000d60 <main+0x2c0>)
 8000adc:	f007 fddf 	bl	800869e <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f988 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f7ff ff4c 	bl	8000980 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ae8:	f7ff fdea 	bl	80006c0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000aec:	f7ff fd70 	bl	80005d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000af0:	f000 fbca 	bl	8001288 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000af4:	f000 fcec 	bl	80014d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 fe86 	bl	8001808 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000afc:	f000 fed0 	bl	80018a0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000b00:	f000 fc82 	bl	8001408 <MX_TIM2_Init>
  /** @brief Initialisation du timer pour PWM + complémentaires
   * tous les channels sont aussi initialisés
   * config actuel : Rapport cyclique de 50%
   * fréquence de 20 kHz (voir ioc) */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b04:	2100      	movs	r1, #0
 8000b06:	4897      	ldr	r0, [pc, #604]	@ (8000d64 <main+0x2c4>)
 8000b08:	f003 fe20 	bl	800474c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4895      	ldr	r0, [pc, #596]	@ (8000d64 <main+0x2c4>)
 8000b10:	f003 fe1c 	bl	800474c <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000b14:	2100      	movs	r1, #0
 8000b16:	4893      	ldr	r0, [pc, #588]	@ (8000d64 <main+0x2c4>)
 8000b18:	f005 f88e 	bl	8005c38 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4891      	ldr	r0, [pc, #580]	@ (8000d64 <main+0x2c4>)
 8000b20:	f005 f88a 	bl	8005c38 <HAL_TIMEx_PWMN_Start>



__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 103);
 8000b24:	4b8f      	ldr	r3, [pc, #572]	@ (8000d64 <main+0x2c4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2267      	movs	r2, #103	@ 0x67
 8000b2a:	639a      	str	r2, [r3, #56]	@ 0x38
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 922);
 8000b2c:	4b8d      	ldr	r3, [pc, #564]	@ (8000d64 <main+0x2c4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f240 329a 	movw	r2, #922	@ 0x39a
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34





  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4988      	ldr	r1, [pc, #544]	@ (8000d5c <main+0x2bc>)
 8000b3a:	488b      	ldr	r0, [pc, #556]	@ (8000d68 <main+0x2c8>)
 8000b3c:	f005 fbb2 	bl	80062a4 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f000 fff9 	bl	8001b38 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, strlen((char*)started), HAL_MAX_DELAY);
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	2265      	movs	r2, #101	@ 0x65
 8000b4c:	4987      	ldr	r1, [pc, #540]	@ (8000d6c <main+0x2cc>)
 8000b4e:	4886      	ldr	r0, [pc, #536]	@ (8000d68 <main+0x2c8>)
 8000b50:	f005 fb19 	bl	8006186 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	2217      	movs	r2, #23
 8000b5a:	4985      	ldr	r1, [pc, #532]	@ (8000d70 <main+0x2d0>)
 8000b5c:	4882      	ldr	r0, [pc, #520]	@ (8000d68 <main+0x2c8>)
 8000b5e:	f005 fb12 	bl	8006186 <HAL_UART_Transmit>
  while (1)
  {
	/**
	   * @brief Vérifie si un caractère a été reçu sur l'UART.
	   */
    if (uartRxReceived)
 8000b62:	4b84      	ldr	r3, [pc, #528]	@ (8000d74 <main+0x2d4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8086 	beq.w	8000c78 <main+0x1d8>
    {
      uint8_t receivedChar = uartRxBuffer[0];
 8000b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8000d5c <main+0x2bc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]
      /**
        * @brief Écho du caractère reçu sur l'UART.
        */
      HAL_UART_Transmit(&huart2, &receivedChar, 1, HAL_MAX_DELAY);
 8000b72:	1df9      	adds	r1, r7, #7
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	2201      	movs	r2, #1
 8000b7a:	487b      	ldr	r0, [pc, #492]	@ (8000d68 <main+0x2c8>)
 8000b7c:	f005 fb03 	bl	8006186 <HAL_UART_Transmit>

      /**
        * @brief Traitement du caractère reçu.
        */
      switch (receivedChar)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b84:	d033      	beq.n	8000bee <main+0x14e>
 8000b86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b88:	dc49      	bgt.n	8000c1e <main+0x17e>
 8000b8a:	2b0a      	cmp	r3, #10
 8000b8c:	d001      	beq.n	8000b92 <main+0xf2>
 8000b8e:	2b0d      	cmp	r3, #13
 8000b90:	d145      	bne.n	8000c1e <main+0x17e>
      /**
         * @brief Cas du retour chariot ou du saut de ligne : traite la commande entrée.
         */
        case ASCII_CR:
        case ASCII_LF:
          HAL_UART_Transmit(&huart2, newLine, strlen((char*)newLine), HAL_MAX_DELAY);
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	2202      	movs	r2, #2
 8000b98:	4977      	ldr	r1, [pc, #476]	@ (8000d78 <main+0x2d8>)
 8000b9a:	4873      	ldr	r0, [pc, #460]	@ (8000d68 <main+0x2c8>)
 8000b9c:	f005 faf3 	bl	8006186 <HAL_UART_Transmit>
          cmd[idxCmd] = '\0';
 8000ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8000d54 <main+0x2b4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a6c      	ldr	r2, [pc, #432]	@ (8000d58 <main+0x2b8>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	54d1      	strb	r1, [r2, r3]
          argc = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
          token = strtok(cmd, " ");
 8000bae:	4973      	ldr	r1, [pc, #460]	@ (8000d7c <main+0x2dc>)
 8000bb0:	4869      	ldr	r0, [pc, #420]	@ (8000d58 <main+0x2b8>)
 8000bb2:	f007 fd7d 	bl	80086b0 <strtok>
 8000bb6:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000bb8:	e00d      	b.n	8000bd6 <main+0x136>
          {
            argv[argc++] = token;
 8000bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	637a      	str	r2, [r7, #52]	@ 0x34
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	3338      	adds	r3, #56	@ 0x38
 8000bc4:	443b      	add	r3, r7
 8000bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bc8:	f843 2c30 	str.w	r2, [r3, #-48]
            token = strtok(NULL, " ");
 8000bcc:	496b      	ldr	r1, [pc, #428]	@ (8000d7c <main+0x2dc>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f007 fd6e 	bl	80086b0 <strtok>
 8000bd4:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <main+0x142>
 8000bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	ddeb      	ble.n	8000bba <main+0x11a>
          }

          idxCmd = 0;
 8000be2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d54 <main+0x2b4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
          newCmdReady = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8000bec:	e03c      	b.n	8000c68 <main+0x1c8>
          /**
              * @brief Cas de la suppression : efface le dernier caractère saisi.
              */
        case ASCII_DEL:
          if (idxCmd > 0)
 8000bee:	4b59      	ldr	r3, [pc, #356]	@ (8000d54 <main+0x2b4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	dd37      	ble.n	8000c66 <main+0x1c6>
          {
            idxCmd--;
 8000bf6:	4b57      	ldr	r3, [pc, #348]	@ (8000d54 <main+0x2b4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	4a55      	ldr	r2, [pc, #340]	@ (8000d54 <main+0x2b4>)
 8000bfe:	6013      	str	r3, [r2, #0]
            cmd[idxCmd] = '\0';
 8000c00:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <main+0x2b4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a54      	ldr	r2, [pc, #336]	@ (8000d58 <main+0x2b8>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	54d1      	strb	r1, [r2, r3]
            // Envoyer un retour en arrière pour effacer dans le terminal
            uint8_t backspace = '\b';
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	71bb      	strb	r3, [r7, #6]
            HAL_UART_Transmit(&huart2, &backspace, 1, HAL_MAX_DELAY);
 8000c0e:	1db9      	adds	r1, r7, #6
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	2201      	movs	r2, #1
 8000c16:	4854      	ldr	r0, [pc, #336]	@ (8000d68 <main+0x2c8>)
 8000c18:	f005 fab5 	bl	8006186 <HAL_UART_Transmit>
          }
          break;
 8000c1c:	e023      	b.n	8000c66 <main+0x1c6>

        /**
           * @brief Cas par défaut : ajoute le caractère au buffer de commande.
           */
        default:
          if (idxCmd < CMD_BUFFER_SIZE - 1)
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d54 <main+0x2b4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c24:	dc08      	bgt.n	8000c38 <main+0x198>
          {
            cmd[idxCmd++] = receivedChar;
 8000c26:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <main+0x2b4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	4949      	ldr	r1, [pc, #292]	@ (8000d54 <main+0x2b4>)
 8000c2e:	600a      	str	r2, [r1, #0]
 8000c30:	79f9      	ldrb	r1, [r7, #7]
 8000c32:	4a49      	ldr	r2, [pc, #292]	@ (8000d58 <main+0x2b8>)
 8000c34:	54d1      	strb	r1, [r2, r3]
            idxCmd = 0;
            memset(cmd, '\0', CMD_BUFFER_SIZE);
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
          }
          break;
 8000c36:	e017      	b.n	8000c68 <main+0x1c8>
            idxCmd = 0;
 8000c38:	4b46      	ldr	r3, [pc, #280]	@ (8000d54 <main+0x2b4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
            memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000c3e:	2240      	movs	r2, #64	@ 0x40
 8000c40:	2100      	movs	r1, #0
 8000c42:	4845      	ldr	r0, [pc, #276]	@ (8000d58 <main+0x2b8>)
 8000c44:	f007 fd2b 	bl	800869e <memset>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2212      	movs	r2, #18
 8000c4e:	494c      	ldr	r1, [pc, #304]	@ (8000d80 <main+0x2e0>)
 8000c50:	4845      	ldr	r0, [pc, #276]	@ (8000d68 <main+0x2c8>)
 8000c52:	f005 fa98 	bl	8006186 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	2217      	movs	r2, #23
 8000c5c:	4944      	ldr	r1, [pc, #272]	@ (8000d70 <main+0x2d0>)
 8000c5e:	4842      	ldr	r0, [pc, #264]	@ (8000d68 <main+0x2c8>)
 8000c60:	f005 fa91 	bl	8006186 <HAL_UART_Transmit>
          break;
 8000c64:	e000      	b.n	8000c68 <main+0x1c8>
          break;
 8000c66:	bf00      	nop
      }
      uartRxReceived = 0;
 8000c68:	4b42      	ldr	r3, [pc, #264]	@ (8000d74 <main+0x2d4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
      /**
        * @brief Relance la réception UART en interruption.
        */
      HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	493a      	ldr	r1, [pc, #232]	@ (8000d5c <main+0x2bc>)
 8000c72:	483d      	ldr	r0, [pc, #244]	@ (8000d68 <main+0x2c8>)
 8000c74:	f005 fb16 	bl	80062a4 <HAL_UART_Receive_IT>
    }
    /**
      * @brief Vérifie si une nouvelle commande est prête à être traitée.
      */
    if (newCmdReady)
 8000c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f43f af71 	beq.w	8000b62 <main+0xc2>
    {
      newCmdReady = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (argc > 0)
 8000c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f340 8099 	ble.w	8000dbe <main+0x31e>
      {
    	/**
    	  * @brief (Sera remplacé par une fonction) Traite les commandes reconnues : help, pinout, start, stop.
    	  */
        if (strcmp(argv[0], "help") == 0)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	493d      	ldr	r1, [pc, #244]	@ (8000d84 <main+0x2e4>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fac5 	bl	8000220 <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d107      	bne.n	8000cac <main+0x20c>
        {
          HAL_UART_Transmit(&huart2, helpMsg, strlen((char*)helpMsg), HAL_MAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	22ac      	movs	r2, #172	@ 0xac
 8000ca2:	4939      	ldr	r1, [pc, #228]	@ (8000d88 <main+0x2e8>)
 8000ca4:	4830      	ldr	r0, [pc, #192]	@ (8000d68 <main+0x2c8>)
 8000ca6:	f005 fa6e 	bl	8006186 <HAL_UART_Transmit>
 8000caa:	e088      	b.n	8000dbe <main+0x31e>
        }
        else if (strcmp(argv[0], "pinout") == 0)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4937      	ldr	r1, [pc, #220]	@ (8000d8c <main+0x2ec>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fab5 	bl	8000220 <strcmp>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d107      	bne.n	8000ccc <main+0x22c>
        {
          HAL_UART_Transmit(&huart2, pinout, strlen((char*)pinout), HAL_MAX_DELAY);
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2239      	movs	r2, #57	@ 0x39
 8000cc2:	4933      	ldr	r1, [pc, #204]	@ (8000d90 <main+0x2f0>)
 8000cc4:	4828      	ldr	r0, [pc, #160]	@ (8000d68 <main+0x2c8>)
 8000cc6:	f005 fa5e 	bl	8006186 <HAL_UART_Transmit>
 8000cca:	e078      	b.n	8000dbe <main+0x31e>
        }
        else if (strcmp(argv[0], "start") == 0)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4931      	ldr	r1, [pc, #196]	@ (8000d94 <main+0x2f4>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff faa5 	bl	8000220 <strcmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d107      	bne.n	8000cec <main+0x24c>
        {
          HAL_UART_Transmit(&huart2, powerOn, strlen((char*)powerOn), HAL_MAX_DELAY);
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	492d      	ldr	r1, [pc, #180]	@ (8000d98 <main+0x2f8>)
 8000ce4:	4820      	ldr	r0, [pc, #128]	@ (8000d68 <main+0x2c8>)
 8000ce6:	f005 fa4e 	bl	8006186 <HAL_UART_Transmit>
 8000cea:	e068      	b.n	8000dbe <main+0x31e>
        }
        else if (strcmp(argv[0], "stop") == 0)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	492b      	ldr	r1, [pc, #172]	@ (8000d9c <main+0x2fc>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa95 	bl	8000220 <strcmp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d107      	bne.n	8000d0c <main+0x26c>
        {
          HAL_UART_Transmit(&huart2, powerOff, strlen((char*)powerOff), HAL_MAX_DELAY);
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	220b      	movs	r2, #11
 8000d02:	4927      	ldr	r1, [pc, #156]	@ (8000da0 <main+0x300>)
 8000d04:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <main+0x2c8>)
 8000d06:	f005 fa3e 	bl	8006186 <HAL_UART_Transmit>
 8000d0a:	e058      	b.n	8000dbe <main+0x31e>
        }
        else if (strcmp(argv[0], "speed") == 0) {
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4925      	ldr	r1, [pc, #148]	@ (8000da4 <main+0x304>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fa85 	bl	8000220 <strcmp>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d149      	bne.n	8000db0 <main+0x310>
            if (argc > 1) {
 8000d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	dd10      	ble.n	8000d44 <main+0x2a4>
            	changeSpeed(atoi(argv[1]));
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f007 fb2d 	bl	8008384 <atoi>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f8c0 	bl	8000eb4 <changeSpeed>
                HAL_UART_Transmit(&huart2, speedMsg, strlen((char*)speedMsg), HAL_MAX_DELAY);
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	2218      	movs	r2, #24
 8000d3a:	491b      	ldr	r1, [pc, #108]	@ (8000da8 <main+0x308>)
 8000d3c:	480a      	ldr	r0, [pc, #40]	@ (8000d68 <main+0x2c8>)
 8000d3e:	f005 fa22 	bl	8006186 <HAL_UART_Transmit>
 8000d42:	e03c      	b.n	8000dbe <main+0x31e>
            } else {
                HAL_UART_Transmit(&huart2, (uint8_t*)"Speed value missing\r\n", 21, HAL_MAX_DELAY);
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	2215      	movs	r2, #21
 8000d4a:	4918      	ldr	r1, [pc, #96]	@ (8000dac <main+0x30c>)
 8000d4c:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <main+0x2c8>)
 8000d4e:	f005 fa1a 	bl	8006186 <HAL_UART_Transmit>
 8000d52:	e034      	b.n	8000dbe <main+0x31e>
 8000d54:	200001e8 	.word	0x200001e8
 8000d58:	200001a8 	.word	0x200001a8
 8000d5c:	20000164 	.word	0x20000164
 8000d60:	20000168 	.word	0x20000168
 8000d64:	2000023c 	.word	0x2000023c
 8000d68:	20000320 	.word	0x20000320
 8000d6c:	08009514 	.word	0x08009514
 8000d70:	080094fc 	.word	0x080094fc
 8000d74:	20000160 	.word	0x20000160
 8000d78:	0800957c 	.word	0x0800957c
 8000d7c:	080094a4 	.word	0x080094a4
 8000d80:	080094a8 	.word	0x080094a8
 8000d84:	080094bc 	.word	0x080094bc
 8000d88:	0800959c 	.word	0x0800959c
 8000d8c:	080094c4 	.word	0x080094c4
 8000d90:	0800964c 	.word	0x0800964c
 8000d94:	080094cc 	.word	0x080094cc
 8000d98:	08009688 	.word	0x08009688
 8000d9c:	080094d4 	.word	0x080094d4
 8000da0:	08009694 	.word	0x08009694
 8000da4:	080094dc 	.word	0x080094dc
 8000da8:	08009580 	.word	0x08009580
 8000dac:	080094e4 	.word	0x080094e4
            }
        }
        else
        {
          HAL_UART_Transmit(&huart2, cmdNotFound, strlen((char*)cmdNotFound), HAL_MAX_DELAY);
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	2213      	movs	r2, #19
 8000db6:	490a      	ldr	r1, [pc, #40]	@ (8000de0 <main+0x340>)
 8000db8:	480a      	ldr	r0, [pc, #40]	@ (8000de4 <main+0x344>)
 8000dba:	f005 f9e4 	bl	8006186 <HAL_UART_Transmit>
        }
      }
      // Affiche le prompt
      HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	2217      	movs	r2, #23
 8000dc4:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <main+0x348>)
 8000dc6:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <main+0x344>)
 8000dc8:	f005 f9dd 	bl	8006186 <HAL_UART_Transmit>

      // Réinitialise le buffer de commande et l'index
      idxCmd = 0;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <main+0x34c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
      memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000dd2:	2240      	movs	r2, #64	@ 0x40
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <main+0x350>)
 8000dd8:	f007 fc61 	bl	800869e <memset>
    if (uartRxReceived)
 8000ddc:	e6c1      	b.n	8000b62 <main+0xc2>
 8000dde:	bf00      	nop
 8000de0:	080096a0 	.word	0x080096a0
 8000de4:	20000320 	.word	0x20000320
 8000de8:	080094fc 	.word	0x080094fc
 8000dec:	200001e8 	.word	0x200001e8
 8000df0:	200001a8 	.word	0x200001a8

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	@ 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2238      	movs	r2, #56	@ 0x38
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f007 fc4b 	bl	800869e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f002 fb0e 	bl	8003438 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e24:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e32:	2355      	movs	r3, #85	@ 0x55
 8000e34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fbaa 	bl	80035a0 <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e52:	f000 f85f 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fea8 	bl	8003bc4 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e7a:	f000 f84b 	bl	8000f14 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3750      	adds	r7, #80	@ 0x50
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_UART_RxCpltCallback>:
  * @brief Callback appelé à la fin de la réception UART.
  * @param huart Handle de l'UART.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <HAL_UART_RxCpltCallback+0x24>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d102      	bne.n	8000ea0 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxReceived = 1;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x28>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
    // La relance de la réception UART est effectuée dans la boucle principale
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	20000160 	.word	0x20000160

08000eb4 <changeSpeed>:
/** @brief Fonction qui change la vitesse du moteur en modifiant le rapport cyclique des PWM
	* @params speed : vitesse d'entrée
 */
void changeSpeed(uint16_t speed) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
    // Limite la vitesse à la plage valide
    if (speed > htim1.Init.Period) {
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <changeSpeed+0x38>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d902      	bls.n	8000ece <changeSpeed+0x1a>
        speed = htim1.Init.Period;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <changeSpeed+0x38>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	80fb      	strh	r3, [r7, #6]
    }

    // Met à jour le rappport cyclique
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <changeSpeed+0x38>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	88fa      	ldrh	r2, [r7, #6]
 8000ed4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8000ed6:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <changeSpeed+0x38>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	639a      	str	r2, [r3, #56]	@ 0x38



}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000023c 	.word	0x2000023c

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f000 fdfb 	bl	8001afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40001000 	.word	0x40001000

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f56:	f002 fb13 	bl	8003580 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	@ 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f78:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <HAL_InitTick+0xc4>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800102c <HAL_InitTick+0xc4>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f84:	4b29      	ldr	r3, [pc, #164]	@ (800102c <HAL_InitTick+0xc4>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f90:	f107 020c 	add.w	r2, r7, #12
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 ffe8 	bl	8003f70 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fa0:	f002 ffba 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8000fa4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <HAL_InitTick+0xc8>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9b      	lsrs	r3, r3, #18
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_InitTick+0xcc>)
 8000fb6:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <HAL_InitTick+0xd0>)
 8000fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <HAL_InitTick+0xcc>)
 8000fbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <HAL_InitTick+0xcc>)
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_InitTick+0xcc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <HAL_InitTick+0xcc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000fd4:	4817      	ldr	r0, [pc, #92]	@ (8001034 <HAL_InitTick+0xcc>)
 8000fd6:	f003 fa91 	bl	80044fc <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11b      	bne.n	8001020 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fe8:	4812      	ldr	r0, [pc, #72]	@ (8001034 <HAL_InitTick+0xcc>)
 8000fea:	f003 fadf 	bl	80045ac <HAL_TIM_Base_Start_IT>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d111      	bne.n	8001020 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ffc:	2036      	movs	r0, #54	@ 0x36
 8000ffe:	f001 ff8f 	bl	8002f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d808      	bhi.n	800101a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	2036      	movs	r0, #54	@ 0x36
 800100e:	f001 ff6d 	bl	8002eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_InitTick+0xd4>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e002      	b.n	8001020 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001024:	4618      	mov	r0, r3
 8001026:	3730      	adds	r7, #48	@ 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	431bde83 	.word	0x431bde83
 8001034:	200001ec 	.word	0x200001ec
 8001038:	40001000 	.word	0x40001000
 800103c:	20000004 	.word	0x20000004

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <NMI_Handler+0x4>

08001048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <MemManage_Handler+0x4>

08001058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <UsageFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <USART2_IRQHandler+0x10>)
 80010a6:	f005 f949 	bl	800633c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000320 	.word	0x20000320

080010b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80010b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010bc:	f002 f998 	bl	80033f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <TIM6_DAC_IRQHandler+0x10>)
 80010ca:	f003 fc51 	bl	8004970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200001ec 	.word	0x200001ec

080010d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return 1;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_kill>:

int _kill(int pid, int sig)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010f2:	f007 fb7f 	bl	80087f4 <__errno>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2216      	movs	r2, #22
 80010fa:	601a      	str	r2, [r3, #0]
  return -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_exit>:

void _exit (int status)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffe7 	bl	80010e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800111a:	bf00      	nop
 800111c:	e7fd      	b.n	800111a <_exit+0x12>

0800111e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e00a      	b.n	8001146 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001130:	f3af 8000 	nop.w
 8001134:	4601      	mov	r1, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	60ba      	str	r2, [r7, #8]
 800113c:	b2ca      	uxtb	r2, r1
 800113e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	dbf0      	blt.n	8001130 <_read+0x12>
  }

  return len;
 800114e:	687b      	ldr	r3, [r7, #4]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	e009      	b.n	800117e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	60ba      	str	r2, [r7, #8]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3301      	adds	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	dbf1      	blt.n	800116a <_write+0x12>
  }
  return len;
 8001186:	687b      	ldr	r3, [r7, #4]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_close>:

int _close(int file)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b8:	605a      	str	r2, [r3, #4]
  return 0;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_isatty>:

int _isatty(int file)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f007 fae4 	bl	80087f4 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20020000 	.word	0x20020000
 8001258:	00000400 	.word	0x00000400
 800125c:	20000238 	.word	0x20000238
 8001260:	20000598 	.word	0x20000598

08001264 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09c      	sub	sp, #112	@ 0x70
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2234      	movs	r2, #52	@ 0x34
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 f9eb 	bl	800869e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001404 <MX_TIM1_Init+0x17c>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80012ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012d0:	2208      	movs	r2, #8
 80012d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80012d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012d6:	2220      	movs	r2, #32
 80012d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80012da:	4b49      	ldr	r3, [pc, #292]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b47      	ldr	r3, [pc, #284]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e8:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b44      	ldr	r3, [pc, #272]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f4:	4842      	ldr	r0, [pc, #264]	@ (8001400 <MX_TIM1_Init+0x178>)
 80012f6:	f003 f901 	bl	80044fc <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001300:	f7ff fe08 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001308:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800130e:	4619      	mov	r1, r3
 8001310:	483b      	ldr	r0, [pc, #236]	@ (8001400 <MX_TIM1_Init+0x178>)
 8001312:	f003 fd91 	bl	8004e38 <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800131c:	f7ff fdfa 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001320:	4837      	ldr	r0, [pc, #220]	@ (8001400 <MX_TIM1_Init+0x178>)
 8001322:	f003 f9bb 	bl	800469c <HAL_TIM_PWM_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800132c:	f7ff fdf2 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001340:	4619      	mov	r1, r3
 8001342:	482f      	ldr	r0, [pc, #188]	@ (8001400 <MX_TIM1_Init+0x178>)
 8001344:	f004 fd3a 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800134e:	f7ff fde1 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001352:	2360      	movs	r3, #96	@ 0x60
 8001354:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 615;
 8001356:	f240 2367 	movw	r3, #615	@ 0x267
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135c:	2300      	movs	r3, #0
 800135e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001360:	2300      	movs	r3, #0
 8001362:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001370:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4821      	ldr	r0, [pc, #132]	@ (8001400 <MX_TIM1_Init+0x178>)
 800137a:	f003 fc49 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001384:	f7ff fdc6 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.Pulse = 409;
 8001388:	f240 1399 	movw	r3, #409	@ 0x199
 800138c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001392:	2204      	movs	r2, #4
 8001394:	4619      	mov	r1, r3
 8001396:	481a      	ldr	r0, [pc, #104]	@ (8001400 <MX_TIM1_Init+0x178>)
 8001398:	f003 fc3a 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80013a2:	f7ff fdb7 	bl	8000f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 80013b2:	2322      	movs	r3, #34	@ 0x22
 80013b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	@ (8001400 <MX_TIM1_Init+0x178>)
 80013e4:	f004 fd80 	bl	8005ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 80013ee:	f7ff fd91 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <MX_TIM1_Init+0x178>)
 80013f4:	f000 f97c 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 80013f8:	bf00      	nop
 80013fa:	3770      	adds	r7, #112	@ 0x70
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000023c 	.word	0x2000023c
 8001404:	40012c00 	.word	0x40012c00

08001408 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <MX_TIM2_Init+0xc4>)
 800142e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001432:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001434:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <MX_TIM2_Init+0xc4>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <MX_TIM2_Init+0xc4>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <MX_TIM2_Init+0xc4>)
 8001442:	f04f 32ff 	mov.w	r2, #4294967295
 8001446:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <MX_TIM2_Init+0xc4>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_TIM2_Init+0xc4>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001454:	481d      	ldr	r0, [pc, #116]	@ (80014cc <MX_TIM2_Init+0xc4>)
 8001456:	f003 f921 	bl	800469c <HAL_TIM_PWM_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001460:	f7ff fd58 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4816      	ldr	r0, [pc, #88]	@ (80014cc <MX_TIM2_Init+0xc4>)
 8001474:	f004 fca2 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800147e:	f7ff fd49 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001482:	2360      	movs	r3, #96	@ 0x60
 8001484:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM2_Init+0xc4>)
 800149a:	f003 fbb9 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014a4:	f7ff fd36 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	2204      	movs	r2, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM2_Init+0xc4>)
 80014b0:	f003 fbae 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80014ba:	f7ff fd2b 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014be:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM2_Init+0xc4>)
 80014c0:	f000 f916 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000288 	.word	0x20000288

080014d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_TIM3_Init+0x90>)
 80014f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <MX_TIM3_Init+0x94>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_TIM3_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_TIM3_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_TIM3_Init+0x90>)
 8001502:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_TIM3_Init+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_TIM3_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	480d      	ldr	r0, [pc, #52]	@ (8001560 <MX_TIM3_Init+0x90>)
 800152c:	f004 fad5 	bl	8005ada <HAL_TIMEx_HallSensor_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001536:	f7ff fced 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800153a:	2350      	movs	r3, #80	@ 0x50
 800153c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	@ (8001560 <MX_TIM3_Init+0x90>)
 8001548:	f004 fc38 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001552:	f7ff fcdf 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200002d4 	.word	0x200002d4
 8001564:	40000400 	.word	0x40000400

08001568 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <HAL_TIM_Base_MspInit+0x80>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d129      	bne.n	80015de <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_TIM_Base_MspInit+0x84>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_TIM_Base_MspInit+0x84>)
 8001590:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001594:	6613      	str	r3, [r2, #96]	@ 0x60
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_TIM_Base_MspInit+0x84>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_TIM_Base_MspInit+0x84>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <HAL_TIM_Base_MspInit+0x84>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_TIM_Base_MspInit+0x84>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80015ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015cc:	2306      	movs	r3, #6
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015da:	f001 fd6f 	bl	80030bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001600:	d10b      	bne.n	800161a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_TIM_PWM_MspInit+0x38>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_TIM_PWM_MspInit+0x38>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6593      	str	r3, [r2, #88]	@ 0x58
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_TIM_PWM_MspInit+0x38>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a26      	ldr	r2, [pc, #152]	@ (80016e4 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d145      	bne.n	80016da <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001652:	4a25      	ldr	r2, [pc, #148]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6593      	str	r3, [r2, #88]	@ 0x58
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	4a1f      	ldr	r2, [pc, #124]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001696:	2350      	movs	r3, #80	@ 0x50
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a6:	2302      	movs	r3, #2
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f001 fd02 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ca:	2302      	movs	r3, #2
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80016d6:	f001 fcf1 	bl	80030bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40000400 	.word	0x40000400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000800 	.word	0x48000800

080016f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a3b      	ldr	r2, [pc, #236]	@ (80017fc <HAL_TIM_MspPostInit+0x10c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d14c      	bne.n	80017ac <HAL_TIM_MspPostInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b3b      	ldr	r3, [pc, #236]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a3a      	ldr	r2, [pc, #232]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001742:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001754:	2306      	movs	r3, #6
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4829      	ldr	r0, [pc, #164]	@ (8001804 <HAL_TIM_MspPostInit+0x114>)
 8001760:	f001 fcac 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001764:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001776:	2304      	movs	r3, #4
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4820      	ldr	r0, [pc, #128]	@ (8001804 <HAL_TIM_MspPostInit+0x114>)
 8001782:	f001 fc9b 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 8001786:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001798:	2306      	movs	r3, #6
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a6:	f001 fc89 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017aa:	e022      	b.n	80017f2 <HAL_TIM_MspPostInit+0x102>
  else if(timHandle->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b4:	d11d      	bne.n	80017f2 <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a11      	ldr	r2, [pc, #68]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_TIM_MspPostInit+0x110>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017e0:	2301      	movs	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ee:	f001 fc65 	bl	80030bc <HAL_GPIO_Init>
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	@ 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40021000 	.word	0x40021000
 8001804:	48000400 	.word	0x48000400

08001808 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800180e:	4a23      	ldr	r2, [pc, #140]	@ (800189c <MX_USART2_UART_Init+0x94>)
 8001810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001850:	4811      	ldr	r0, [pc, #68]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001852:	f004 fc48 	bl	80060e6 <HAL_UART_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800185c:	f7ff fb5a 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001860:	2100      	movs	r1, #0
 8001862:	480d      	ldr	r0, [pc, #52]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001864:	f006 fcc3 	bl	80081ee <HAL_UARTEx_SetTxFifoThreshold>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800186e:	f7ff fb51 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	4808      	ldr	r0, [pc, #32]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001876:	f006 fcf8 	bl	800826a <HAL_UARTEx_SetRxFifoThreshold>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001880:	f7ff fb48 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_USART2_UART_Init+0x90>)
 8001886:	f006 fc79 	bl	800817c <HAL_UARTEx_DisableFifoMode>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001890:	f7ff fb40 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000320 	.word	0x20000320
 800189c:	40004400 	.word	0x40004400

080018a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <MX_USART3_UART_Init+0x94>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018ea:	f004 fbfc 	bl	80060e6 <HAL_UART_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018f4:	f7ff fb0e 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 80018fc:	f006 fc77 	bl	80081ee <HAL_UARTEx_SetTxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001906:	f7ff fb05 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 800190e:	f006 fcac 	bl	800826a <HAL_UARTEx_SetRxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001918:	f7ff fafc 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_USART3_UART_Init+0x90>)
 800191e:	f006 fc2d 	bl	800817c <HAL_UARTEx_DisableFifoMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001928:	f7ff faf4 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200003b4 	.word	0x200003b4
 8001934:	40004800 	.word	0x40004800

08001938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0a0      	sub	sp, #128	@ 0x80
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	2254      	movs	r2, #84	@ 0x54
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f006 fea0 	bl	800869e <memset>
  if(uartHandle->Instance==USART2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a41      	ldr	r2, [pc, #260]	@ (8001a68 <HAL_UART_MspInit+0x130>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d13f      	bne.n	80019e8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fb73 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001980:	f7ff fac8 	bl	8000f14 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001984:	4b39      	ldr	r3, [pc, #228]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	4a38      	ldr	r2, [pc, #224]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 800198a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800198e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a32      	ldr	r2, [pc, #200]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a8:	4b30      	ldr	r3, [pc, #192]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019b4:	230c      	movs	r3, #12
 80019b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c4:	2307      	movs	r3, #7
 80019c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d2:	f001 fb73 	bl	80030bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2026      	movs	r0, #38	@ 0x26
 80019dc:	f001 fa86 	bl	8002eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019e0:	2026      	movs	r0, #38	@ 0x26
 80019e2:	f001 fa9d 	bl	8002f20 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019e6:	e03b      	b.n	8001a60 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a20      	ldr	r2, [pc, #128]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d136      	bne.n	8001a60 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019f2:	2304      	movs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fb2e 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001a0a:	f7ff fa83 	bl	8000f14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a50:	2307      	movs	r3, #7
 8001a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	@ (8001a74 <HAL_UART_MspInit+0x13c>)
 8001a5c:	f001 fb2e 	bl	80030bc <HAL_GPIO_Init>
}
 8001a60:	bf00      	nop
 8001a62:	3780      	adds	r7, #128	@ 0x80
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40004800 	.word	0x40004800
 8001a74:	48000800 	.word	0x48000800

08001a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a7c:	f7ff fbf2 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a80:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a82:	490d      	ldr	r1, [pc, #52]	@ (8001ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a84:	4a0d      	ldr	r2, [pc, #52]	@ (8001abc <LoopForever+0xe>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a98:	4c0a      	ldr	r4, [pc, #40]	@ (8001ac4 <LoopForever+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f006 feab 	bl	8008800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aaa:	f7fe fff9 	bl	8000aa0 <main>

08001aae <LoopForever>:

LoopForever:
    b LoopForever
 8001aae:	e7fe      	b.n	8001aae <LoopForever>
  ldr   r0, =_estack
 8001ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001abc:	080098e8 	.word	0x080098e8
  ldr r2, =_sbss
 8001ac0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ac4:	20000598 	.word	0x20000598

08001ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>

08001aca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f001 f9fe 	bl	8002ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ada:	200f      	movs	r0, #15
 8001adc:	f7ff fa44 	bl	8000f68 <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e001      	b.n	8001af0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aec:	f7ff fa18 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af0:	79fb      	ldrb	r3, [r7, #7]

}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_IncTick+0x1c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_IncTick+0x20>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a03      	ldr	r2, [pc, #12]	@ (8001b18 <HAL_IncTick+0x1c>)
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	20000448 	.word	0x20000448
 8001b1c:	20000008 	.word	0x20000008

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000448 	.word	0x20000448

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d004      	beq.n	8001b5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_Delay+0x40>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5c:	bf00      	nop
 8001b5e:	f7ff ffdf 	bl	8001b20 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8f7      	bhi.n	8001b5e <HAL_Delay+0x26>
  {
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000008 	.word	0x20000008

08001b7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3360      	adds	r3, #96	@ 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <LL_ADC_SetOffset+0x44>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	03fff000 	.word	0x03fff000

08001c2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3360      	adds	r3, #96	@ 0x60
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3360      	adds	r3, #96	@ 0x60
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b087      	sub	sp, #28
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3360      	adds	r3, #96	@ 0x60
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3360      	adds	r3, #96	@ 0x60
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	615a      	str	r2, [r3, #20]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3330      	adds	r3, #48	@ 0x30
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	211f      	movs	r1, #31
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 011f 	and.w	r1, r3, #31
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3314      	adds	r3, #20
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0e5b      	lsrs	r3, r3, #25
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0d1b      	lsrs	r3, r3, #20
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2107      	movs	r1, #7
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0d1b      	lsrs	r3, r3, #20
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0318 	and.w	r3, r3, #24
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df4:	40d9      	lsrs	r1, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	0007ffff 	.word	0x0007ffff

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <LL_ADC_IsEnabled+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_ADC_IsEnabled+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d101      	bne.n	8001ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b089      	sub	sp, #36	@ 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1a9      	b.n	8002296 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe fc1b 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff67 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff4d 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff82 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff66 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f98:	4b9c      	ldr	r3, [pc, #624]	@ (800220c <HAL_ADC_Init+0x2e4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	4a9c      	ldr	r2, [pc, #624]	@ (8002210 <HAL_ADC_Init+0x2e8>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff64 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff75 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 8142 	bne.w	8002284 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 813e 	bne.w	8002284 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002010:	f043 0202 	orr.w	r2, r3, #2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff49 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d141      	bne.n	80020ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002030:	d004      	beq.n	800203c <HAL_ADC_Init+0x114>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a77      	ldr	r2, [pc, #476]	@ (8002214 <HAL_ADC_Init+0x2ec>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10f      	bne.n	800205c <HAL_ADC_Init+0x134>
 800203c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002040:	f7ff ff38 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002044:	4604      	mov	r4, r0
 8002046:	4873      	ldr	r0, [pc, #460]	@ (8002214 <HAL_ADC_Init+0x2ec>)
 8002048:	f7ff ff34 	bl	8001eb4 <LL_ADC_IsEnabled>
 800204c:	4603      	mov	r3, r0
 800204e:	4323      	orrs	r3, r4
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e012      	b.n	8002082 <HAL_ADC_Init+0x15a>
 800205c:	486e      	ldr	r0, [pc, #440]	@ (8002218 <HAL_ADC_Init+0x2f0>)
 800205e:	f7ff ff29 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002062:	4604      	mov	r4, r0
 8002064:	486d      	ldr	r0, [pc, #436]	@ (800221c <HAL_ADC_Init+0x2f4>)
 8002066:	f7ff ff25 	bl	8001eb4 <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	431c      	orrs	r4, r3
 800206e:	486c      	ldr	r0, [pc, #432]	@ (8002220 <HAL_ADC_Init+0x2f8>)
 8002070:	f7ff ff20 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002074:	4603      	mov	r3, r0
 8002076:	4323      	orrs	r3, r4
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d012      	beq.n	80020ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208e:	d004      	beq.n	800209a <HAL_ADC_Init+0x172>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a5f      	ldr	r2, [pc, #380]	@ (8002214 <HAL_ADC_Init+0x2ec>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x176>
 800209a:	4a62      	ldr	r2, [pc, #392]	@ (8002224 <HAL_ADC_Init+0x2fc>)
 800209c:	e000      	b.n	80020a0 <HAL_ADC_Init+0x178>
 800209e:	4a62      	ldr	r2, [pc, #392]	@ (8002228 <HAL_ADC_Init+0x300>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f7ff fd68 	bl	8001b7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7f5b      	ldrb	r3, [r3, #29]
 80020b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d106      	bne.n	80020e8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	045b      	lsls	r3, r3, #17
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b48      	ldr	r3, [pc, #288]	@ (800222c <HAL_ADC_Init+0x304>)
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	430b      	orrs	r3, r1
 8002116:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fee4 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 8002138:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d17f      	bne.n	8002240 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d17c      	bne.n	8002240 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800214a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002152:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002162:	f023 0302 	bic.w	r3, r3, #2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	430b      	orrs	r3, r1
 800216e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d017      	beq.n	80021a8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002186:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002190:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002194:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6911      	ldr	r1, [r2, #16]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80021a6:	e013      	b.n	80021d0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d12a      	bne.n	8002230 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021f0:	4311      	orrs	r1, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021fc:	430a      	orrs	r2, r1
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	e019      	b.n	8002240 <HAL_ADC_Init+0x318>
 800220c:	20000000 	.word	0x20000000
 8002210:	053e2d63 	.word	0x053e2d63
 8002214:	50000100 	.word	0x50000100
 8002218:	50000400 	.word	0x50000400
 800221c:	50000500 	.word	0x50000500
 8002220:	50000600 	.word	0x50000600
 8002224:	50000300 	.word	0x50000300
 8002228:	50000700 	.word	0x50000700
 800222c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10c      	bne.n	8002262 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f023 010f 	bic.w	r1, r3, #15
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	1e5a      	subs	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002260:	e007      	b.n	8002272 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 020f 	bic.w	r2, r2, #15
 8002270:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002282:	e007      	b.n	8002294 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002288:	f043 0210 	orr.w	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002294:	7ffb      	ldrb	r3, [r7, #31]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}
 800229e:	bf00      	nop

080022a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0b6      	sub	sp, #216	@ 0xd8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x24>
 80022be:	2302      	movs	r3, #2
 80022c0:	f000 bc13 	b.w	8002aea <HAL_ADC_ConfigChannel+0x84a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fe02 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 83f3 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f7ff fd18 	bl	8001d20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fdf0 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 80022fa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fdfc 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 8002308:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800230c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 81d9 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 81d4 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002328:	d10f      	bne.n	800234a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	4619      	mov	r1, r3
 8002336:	f7ff fd1f 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fcd9 	bl	8001cfa <LL_ADC_SetSamplingTimeCommonConfig>
 8002348:	e00e      	b.n	8002368 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	461a      	mov	r2, r3
 8002358:	f7ff fd0e 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fcc9 	bl	8001cfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	08db      	lsrs	r3, r3, #3
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b04      	cmp	r3, #4
 8002388:	d022      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6919      	ldr	r1, [r3, #16]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800239a:	f7ff fc23 	bl	8001be4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6919      	ldr	r1, [r3, #16]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7ff fc6f 	bl	8001c8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x126>
 80023c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c4:	e000      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x128>
 80023c6:	2300      	movs	r3, #0
 80023c8:	461a      	mov	r2, r3
 80023ca:	f7ff fc7b 	bl	8001cc4 <LL_ADC_SetOffsetSaturation>
 80023ce:	e17b      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fc28 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x15c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fc1d 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	f003 021f 	and.w	r2, r3, #31
 80023fa:	e01e      	b.n	800243a <HAL_ADC_ConfigChannel+0x19a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fc12 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800241a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800241e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e004      	b.n	8002438 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800242e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x1b2>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	e018      	b.n	8002484 <HAL_ADC_ConfigChannel+0x1e4>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800246a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800246e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e004      	b.n	8002484 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800247a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002484:	429a      	cmp	r2, r3
 8002486:	d106      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbe1 	bl	8001c58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2101      	movs	r1, #1
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fbc5 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x222>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fbba 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	0e9b      	lsrs	r3, r3, #26
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	e01e      	b.n	8002500 <HAL_ADC_ConfigChannel+0x260>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fbaf 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80024e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80024e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e004      	b.n	80024fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x278>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	e018      	b.n	800254a <HAL_ADC_ConfigChannel+0x2aa>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800252c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002534:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e004      	b.n	800254a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800254a:	429a      	cmp	r2, r3
 800254c:	d106      	bne.n	800255c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fb7e 	bl	8001c58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2102      	movs	r1, #2
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb62 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x2e8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fb57 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	e01e      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x326>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2102      	movs	r1, #2
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb4c 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80025a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80025ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e004      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80025ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_ADC_ConfigChannel+0x33e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0e9b      	lsrs	r3, r3, #26
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	e016      	b.n	800260c <HAL_ADC_ConfigChannel+0x36c>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80025f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80025f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e004      	b.n	800260c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002602:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2200      	movs	r2, #0
 8002616:	2102      	movs	r1, #2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fb1d 	bl	8001c58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2103      	movs	r1, #3
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fb01 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_ADC_ConfigChannel+0x3aa>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2103      	movs	r1, #3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff faf6 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	e017      	b.n	800267a <HAL_ADC_ConfigChannel+0x3da>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2103      	movs	r1, #3
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff faeb 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002664:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x3f2>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	e011      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x416>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80026a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80026a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80026ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d106      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	2103      	movs	r1, #3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fac8 	bl	8001c58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fbf1 	bl	8001eb4 <LL_ADC_IsEnabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 813d 	bne.w	8002954 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff fb72 	bl	8001dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4aa2      	ldr	r2, [pc, #648]	@ (800297c <HAL_ADC_ConfigChannel+0x6dc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	f040 812e 	bne.w	8002954 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x480>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	3301      	adds	r3, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2b09      	cmp	r3, #9
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e019      	b.n	8002754 <HAL_ADC_ConfigChannel+0x4b4>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800272e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002730:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800273c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b09      	cmp	r3, #9
 800274c:	bf94      	ite	ls
 800274e:	2301      	movls	r3, #1
 8002750:	2300      	movhi	r3, #0
 8002752:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002754:	2b00      	cmp	r3, #0
 8002756:	d079      	beq.n	800284c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x4d4>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	3301      	adds	r3, #1
 800276c:	069b      	lsls	r3, r3, #26
 800276e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002772:	e015      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x500>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002784:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e003      	b.n	8002798 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x520>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	e017      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x550>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80027ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80027d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e003      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80027dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x576>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	3301      	adds	r3, #1
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	051b      	lsls	r3, r3, #20
 8002814:	e018      	b.n	8002848 <HAL_ADC_ConfigChannel+0x5a8>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e003      	b.n	800283a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002848:	430b      	orrs	r3, r1
 800284a:	e07e      	b.n	800294a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x5c8>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	3301      	adds	r3, #1
 8002860:	069b      	lsls	r3, r3, #26
 8002862:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002866:	e015      	b.n	8002894 <HAL_ADC_ConfigChannel+0x5f4>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x614>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	3301      	adds	r3, #1
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	e017      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x644>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	61fb      	str	r3, [r7, #28]
  return result;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80028cc:	2320      	movs	r3, #32
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	ea42 0103 	orr.w	r1, r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10d      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x670>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	3b1e      	subs	r3, #30
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800290e:	e01b      	b.n	8002948 <HAL_ADC_ConfigChannel+0x6a8>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	613b      	str	r3, [r7, #16]
  return result;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f003 021f 	and.w	r2, r3, #31
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	3b1e      	subs	r3, #30
 8002942:	051b      	lsls	r3, r3, #20
 8002944:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002948:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294e:	4619      	mov	r1, r3
 8002950:	f7ff fa12 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_ADC_ConfigChannel+0x6e0>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80be 	beq.w	8002ade <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800296a:	d004      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x6d6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <HAL_ADC_ConfigChannel+0x6e4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10a      	bne.n	800298c <HAL_ADC_ConfigChannel+0x6ec>
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <HAL_ADC_ConfigChannel+0x6e8>)
 8002978:	e009      	b.n	800298e <HAL_ADC_ConfigChannel+0x6ee>
 800297a:	bf00      	nop
 800297c:	407f0000 	.word	0x407f0000
 8002980:	80080000 	.word	0x80080000
 8002984:	50000100 	.word	0x50000100
 8002988:	50000300 	.word	0x50000300
 800298c:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <HAL_ADC_ConfigChannel+0x854>)
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f91a 	bl	8001bc8 <LL_ADC_GetCommonPathInternalCh>
 8002994:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a56      	ldr	r2, [pc, #344]	@ (8002af8 <HAL_ADC_ConfigChannel+0x858>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x70c>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a55      	ldr	r2, [pc, #340]	@ (8002afc <HAL_ADC_ConfigChannel+0x85c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d13a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d134      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c0:	d005      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x72e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a4e      	ldr	r2, [pc, #312]	@ (8002b00 <HAL_ADC_ConfigChannel+0x860>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f040 8085 	bne.w	8002ad8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d6:	d004      	beq.n	80029e2 <HAL_ADC_ConfigChannel+0x742>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a49      	ldr	r2, [pc, #292]	@ (8002b04 <HAL_ADC_ConfigChannel+0x864>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x746>
 80029e2:	4a49      	ldr	r2, [pc, #292]	@ (8002b08 <HAL_ADC_ConfigChannel+0x868>)
 80029e4:	e000      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x748>
 80029e6:	4a43      	ldr	r2, [pc, #268]	@ (8002af4 <HAL_ADC_ConfigChannel+0x854>)
 80029e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f7ff f8d5 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f8:	4b44      	ldr	r3, [pc, #272]	@ (8002b0c <HAL_ADC_ConfigChannel+0x86c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	4a44      	ldr	r2, [pc, #272]	@ (8002b10 <HAL_ADC_ConfigChannel+0x870>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a12:	e002      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a20:	e05a      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a3b      	ldr	r2, [pc, #236]	@ (8002b14 <HAL_ADC_ConfigChannel+0x874>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d125      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11f      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a31      	ldr	r2, [pc, #196]	@ (8002b04 <HAL_ADC_ConfigChannel+0x864>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d104      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x7ac>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a34      	ldr	r2, [pc, #208]	@ (8002b18 <HAL_ADC_ConfigChannel+0x878>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d047      	beq.n	8002adc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a54:	d004      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x7c0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <HAL_ADC_ConfigChannel+0x864>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x7c4>
 8002a60:	4a29      	ldr	r2, [pc, #164]	@ (8002b08 <HAL_ADC_ConfigChannel+0x868>)
 8002a62:	e000      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x7c6>
 8002a64:	4a23      	ldr	r2, [pc, #140]	@ (8002af4 <HAL_ADC_ConfigChannel+0x854>)
 8002a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7ff f896 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a76:	e031      	b.n	8002adc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a27      	ldr	r2, [pc, #156]	@ (8002b1c <HAL_ADC_ConfigChannel+0x87c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d12d      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d127      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1c      	ldr	r2, [pc, #112]	@ (8002b04 <HAL_ADC_ConfigChannel+0x864>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d022      	beq.n	8002ade <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa0:	d004      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x80c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <HAL_ADC_ConfigChannel+0x864>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x810>
 8002aac:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <HAL_ADC_ConfigChannel+0x868>)
 8002aae:	e000      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x812>
 8002ab0:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <HAL_ADC_ConfigChannel+0x854>)
 8002ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7ff f870 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
 8002ac2:	e00c      	b.n	8002ade <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ad6:	e002      	b.n	8002ade <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad8:	bf00      	nop
 8002ada:	e000      	b.n	8002ade <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002adc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ae6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	37d8      	adds	r7, #216	@ 0xd8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	50000700 	.word	0x50000700
 8002af8:	c3210000 	.word	0xc3210000
 8002afc:	90c00010 	.word	0x90c00010
 8002b00:	50000600 	.word	0x50000600
 8002b04:	50000100 	.word	0x50000100
 8002b08:	50000300 	.word	0x50000300
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	c7520000 	.word	0xc7520000
 8002b18:	50000500 	.word	0x50000500
 8002b1c:	cb840000 	.word	0xcb840000

08002b20 <LL_ADC_IsEnabled>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <LL_ADC_IsEnabled+0x18>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_ADC_IsEnabled+0x1a>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b0a1      	sub	sp, #132	@ 0x84
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0e7      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b92:	2300      	movs	r3, #0
 8002b94:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b96:	2300      	movs	r3, #0
 8002b98:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba2:	d102      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	e009      	b.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6e      	ldr	r2, [pc, #440]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002bb4:	4b6d      	ldr	r3, [pc, #436]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	e001      	b.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0be      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ffb1 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8002be4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ffab 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80a0 	bne.w	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 809c 	bne.w	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c08:	d004      	beq.n	8002c14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a55      	ldr	r2, [pc, #340]	@ (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c14:	4b56      	ldr	r3, [pc, #344]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002c16:	e000      	b.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c18:	4b56      	ldr	r3, [pc, #344]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002c1a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d04b      	beq.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c36:	035b      	lsls	r3, r3, #13
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c48:	d004      	beq.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a45      	ldr	r2, [pc, #276]	@ (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d10f      	bne.n	8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c58:	f7ff ff62 	bl	8002b20 <LL_ADC_IsEnabled>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	4841      	ldr	r0, [pc, #260]	@ (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c60:	f7ff ff5e 	bl	8002b20 <LL_ADC_IsEnabled>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4323      	orrs	r3, r4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e012      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c74:	483c      	ldr	r0, [pc, #240]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c76:	f7ff ff53 	bl	8002b20 <LL_ADC_IsEnabled>
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	483b      	ldr	r0, [pc, #236]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c7e:	f7ff ff4f 	bl	8002b20 <LL_ADC_IsEnabled>
 8002c82:	4603      	mov	r3, r0
 8002c84:	431c      	orrs	r4, r3
 8002c86:	483c      	ldr	r0, [pc, #240]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c88:	f7ff ff4a 	bl	8002b20 <LL_ADC_IsEnabled>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d056      	beq.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ca6:	f023 030f 	bic.w	r3, r3, #15
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6811      	ldr	r1, [r2, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cba:	e047      	b.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cd0:	d004      	beq.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a23      	ldr	r2, [pc, #140]	@ (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10f      	bne.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002cdc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ce0:	f7ff ff1e 	bl	8002b20 <LL_ADC_IsEnabled>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	481f      	ldr	r0, [pc, #124]	@ (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ce8:	f7ff ff1a 	bl	8002b20 <LL_ADC_IsEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4323      	orrs	r3, r4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e012      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002cfc:	481a      	ldr	r0, [pc, #104]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cfe:	f7ff ff0f 	bl	8002b20 <LL_ADC_IsEnabled>
 8002d02:	4604      	mov	r4, r0
 8002d04:	4819      	ldr	r0, [pc, #100]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d06:	f7ff ff0b 	bl	8002b20 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	431c      	orrs	r4, r3
 8002d0e:	481a      	ldr	r0, [pc, #104]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d10:	f7ff ff06 	bl	8002b20 <LL_ADC_IsEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4323      	orrs	r3, r4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d34:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d36:	e009      	b.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d4a:	e000      	b.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3784      	adds	r7, #132	@ 0x84
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}
 8002d62:	bf00      	nop
 8002d64:	50000100 	.word	0x50000100
 8002d68:	50000400 	.word	0x50000400
 8002d6c:	50000500 	.word	0x50000500
 8002d70:	50000300 	.word	0x50000300
 8002d74:	50000700 	.word	0x50000700
 8002d78:	50000600 	.word	0x50000600

08002d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dae:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	60d3      	str	r3, [r2, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc8:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <__NVIC_GetPriorityGrouping+0x18>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	f003 0307 	and.w	r3, r3, #7
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	db0b      	blt.n	8002e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4907      	ldr	r1, [pc, #28]	@ (8002e18 <__NVIC_EnableIRQ+0x38>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2001      	movs	r0, #1
 8002e02:	fa00 f202 	lsl.w	r2, r0, r2
 8002e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000e100 	.word	0xe000e100

08002e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	db0a      	blt.n	8002e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	490c      	ldr	r1, [pc, #48]	@ (8002e68 <__NVIC_SetPriority+0x4c>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e44:	e00a      	b.n	8002e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4908      	ldr	r1, [pc, #32]	@ (8002e6c <__NVIC_SetPriority+0x50>)
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	3b04      	subs	r3, #4
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	440b      	add	r3, r1
 8002e5a:	761a      	strb	r2, [r3, #24]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000e100 	.word	0xe000e100
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	@ 0x24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f1c3 0307 	rsb	r3, r3, #7
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	bf28      	it	cs
 8002e8e:	2304      	movcs	r3, #4
 8002e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d902      	bls.n	8002ea0 <NVIC_EncodePriority+0x30>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3b03      	subs	r3, #3
 8002e9e:	e000      	b.n	8002ea2 <NVIC_EncodePriority+0x32>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	43d9      	mvns	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	4313      	orrs	r3, r2
         );
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ff4c 	bl	8002d7c <__NVIC_SetPriorityGrouping>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002efa:	f7ff ff63 	bl	8002dc4 <__NVIC_GetPriorityGrouping>
 8002efe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	6978      	ldr	r0, [r7, #20]
 8002f06:	f7ff ffb3 	bl	8002e70 <NVIC_EncodePriority>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff82 	bl	8002e1c <__NVIC_SetPriority>
}
 8002f18:	bf00      	nop
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff56 	bl	8002de0 <__NVIC_EnableIRQ>
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d005      	beq.n	8002f60 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2204      	movs	r2, #4
 8002f58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e037      	b.n	8002fd0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020e 	bic.w	r2, r2, #14
 8002f6e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f7e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fac:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fc4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fce:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d00d      	beq.n	8003022 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e047      	b.n	80030b2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 020e 	bic.w	r2, r2, #14
 8003030:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	f003 021f 	and.w	r2, r3, #31
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2101      	movs	r1, #1
 8003060:	fa01 f202 	lsl.w	r2, r1, r2
 8003064:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800306e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00c      	beq.n	8003092 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003086:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003090:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
    }
  }
  return status;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030ca:	e15a      	b.n	8003382 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 814c 	beq.w	800337c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d005      	beq.n	80030fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d130      	bne.n	800315e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003132:	2201      	movs	r2, #1
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0201 	and.w	r2, r3, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b03      	cmp	r3, #3
 8003168:	d017      	beq.n	800319a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d123      	bne.n	80031ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	08da      	lsrs	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3208      	adds	r2, #8
 80031ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	6939      	ldr	r1, [r7, #16]
 80031ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0203 	and.w	r2, r3, #3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80a6 	beq.w	800337c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003230:	4b5b      	ldr	r3, [pc, #364]	@ (80033a0 <HAL_GPIO_Init+0x2e4>)
 8003232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003234:	4a5a      	ldr	r2, [pc, #360]	@ (80033a0 <HAL_GPIO_Init+0x2e4>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6613      	str	r3, [r2, #96]	@ 0x60
 800323c:	4b58      	ldr	r3, [pc, #352]	@ (80033a0 <HAL_GPIO_Init+0x2e4>)
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003248:	4a56      	ldr	r2, [pc, #344]	@ (80033a4 <HAL_GPIO_Init+0x2e8>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003254:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	220f      	movs	r2, #15
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003272:	d01f      	beq.n	80032b4 <HAL_GPIO_Init+0x1f8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a4c      	ldr	r2, [pc, #304]	@ (80033a8 <HAL_GPIO_Init+0x2ec>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d019      	beq.n	80032b0 <HAL_GPIO_Init+0x1f4>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a4b      	ldr	r2, [pc, #300]	@ (80033ac <HAL_GPIO_Init+0x2f0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_GPIO_Init+0x1f0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a4a      	ldr	r2, [pc, #296]	@ (80033b0 <HAL_GPIO_Init+0x2f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00d      	beq.n	80032a8 <HAL_GPIO_Init+0x1ec>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a49      	ldr	r2, [pc, #292]	@ (80033b4 <HAL_GPIO_Init+0x2f8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <HAL_GPIO_Init+0x1e8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a48      	ldr	r2, [pc, #288]	@ (80033b8 <HAL_GPIO_Init+0x2fc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_GPIO_Init+0x1e4>
 800329c:	2305      	movs	r3, #5
 800329e:	e00a      	b.n	80032b6 <HAL_GPIO_Init+0x1fa>
 80032a0:	2306      	movs	r3, #6
 80032a2:	e008      	b.n	80032b6 <HAL_GPIO_Init+0x1fa>
 80032a4:	2304      	movs	r3, #4
 80032a6:	e006      	b.n	80032b6 <HAL_GPIO_Init+0x1fa>
 80032a8:	2303      	movs	r3, #3
 80032aa:	e004      	b.n	80032b6 <HAL_GPIO_Init+0x1fa>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e002      	b.n	80032b6 <HAL_GPIO_Init+0x1fa>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_GPIO_Init+0x1fa>
 80032b4:	2300      	movs	r3, #0
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	f002 0203 	and.w	r2, r2, #3
 80032bc:	0092      	lsls	r2, r2, #2
 80032be:	4093      	lsls	r3, r2
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c6:	4937      	ldr	r1, [pc, #220]	@ (80033a4 <HAL_GPIO_Init+0x2e8>)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032d4:	4b39      	ldr	r3, [pc, #228]	@ (80033bc <HAL_GPIO_Init+0x300>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43db      	mvns	r3, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032f8:	4a30      	ldr	r2, [pc, #192]	@ (80033bc <HAL_GPIO_Init+0x300>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <HAL_GPIO_Init+0x300>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003322:	4a26      	ldr	r2, [pc, #152]	@ (80033bc <HAL_GPIO_Init+0x300>)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003328:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <HAL_GPIO_Init+0x300>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43db      	mvns	r3, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <HAL_GPIO_Init+0x300>)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <HAL_GPIO_Init+0x300>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003376:	4a11      	ldr	r2, [pc, #68]	@ (80033bc <HAL_GPIO_Init+0x300>)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3301      	adds	r3, #1
 8003380:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	f47f ae9d 	bne.w	80030cc <HAL_GPIO_Init+0x10>
  }
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40010000 	.word	0x40010000
 80033a8:	48000400 	.word	0x48000400
 80033ac:	48000800 	.word	0x48000800
 80033b0:	48000c00 	.word	0x48000c00
 80033b4:	48001000 	.word	0x48001000
 80033b8:	48001400 	.word	0x48001400
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	807b      	strh	r3, [r7, #2]
 80033cc:	4613      	mov	r3, r2
 80033ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d0:	787b      	ldrb	r3, [r7, #1]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033dc:	e002      	b.n	80033e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033fa:	4b08      	ldr	r3, [pc, #32]	@ (800341c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003406:	4a05      	ldr	r2, [pc, #20]	@ (800341c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f806 	bl	8003420 <HAL_GPIO_EXTI_Callback>
  }
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40010400 	.word	0x40010400

08003420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d141      	bne.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003446:	4b4b      	ldr	r3, [pc, #300]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d131      	bne.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003454:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345a:	4a46      	ldr	r2, [pc, #280]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003464:	4b43      	ldr	r3, [pc, #268]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800346c:	4a41      	ldr	r2, [pc, #260]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003474:	4b40      	ldr	r3, [pc, #256]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2232      	movs	r2, #50	@ 0x32
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	4a3f      	ldr	r2, [pc, #252]	@ (800357c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0c9b      	lsrs	r3, r3, #18
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348a:	e002      	b.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b01      	subs	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003492:	4b38      	ldr	r3, [pc, #224]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349e:	d102      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f2      	bne.n	800348c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a6:	4b33      	ldr	r3, [pc, #204]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b2:	d158      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e057      	b.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034be:	4a2d      	ldr	r2, [pc, #180]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034c8:	e04d      	b.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034d0:	d141      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d2:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034de:	d131      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e0:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034e6:	4a23      	ldr	r2, [pc, #140]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034f0:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2232      	movs	r2, #50	@ 0x32
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	4a1c      	ldr	r2, [pc, #112]	@ (800357c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	0c9b      	lsrs	r3, r3, #18
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003516:	e002      	b.n	800351e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3b01      	subs	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352a:	d102      	bne.n	8003532 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f2      	bne.n	8003518 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003532:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800353e:	d112      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e011      	b.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800354a:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003550:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003554:	e007      	b.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800355e:	4a05      	ldr	r2, [pc, #20]	@ (8003574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003560:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003564:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40007000 	.word	0x40007000
 8003578:	20000000 	.word	0x20000000
 800357c:	431bde83 	.word	0x431bde83

08003580 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003584:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a04      	ldr	r2, [pc, #16]	@ (800359c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800358a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800358e:	6093      	str	r3, [r2, #8]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e2fe      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d075      	beq.n	80036aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035be:	4b97      	ldr	r3, [pc, #604]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c8:	4b94      	ldr	r3, [pc, #592]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d102      	bne.n	80035de <HAL_RCC_OscConfig+0x3e>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d002      	beq.n	80035e4 <HAL_RCC_OscConfig+0x44>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b8d      	ldr	r3, [pc, #564]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05b      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d157      	bne.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e2d9      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x74>
 8003606:	4b85      	ldr	r3, [pc, #532]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a84      	ldr	r2, [pc, #528]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x98>
 800361e:	4b7f      	ldr	r3, [pc, #508]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7e      	ldr	r2, [pc, #504]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b7c      	ldr	r3, [pc, #496]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7b      	ldr	r2, [pc, #492]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003638:	4b78      	ldr	r3, [pc, #480]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a77      	ldr	r2, [pc, #476]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b75      	ldr	r3, [pc, #468]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a74      	ldr	r2, [pc, #464]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800364e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fa62 	bl	8001b20 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fa5e 	bl	8001b20 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e29e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003672:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xc0>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fa4e 	bl	8001b20 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fe fa4a 	bl	8001b20 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	@ 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e28a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800369a:	4b60      	ldr	r3, [pc, #384]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d075      	beq.n	80037a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b6:	4b59      	ldr	r3, [pc, #356]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c0:	4b56      	ldr	r3, [pc, #344]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b0c      	cmp	r3, #12
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_OscConfig+0x136>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d002      	beq.n	80036dc <HAL_RCC_OscConfig+0x13c>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11f      	bne.n	800371c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036dc:	4b4f      	ldr	r3, [pc, #316]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_OscConfig+0x154>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e25d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	4b49      	ldr	r3, [pc, #292]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	4946      	ldr	r1, [pc, #280]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003708:	4b45      	ldr	r3, [pc, #276]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fc2b 	bl	8000f68 <HAL_InitTick>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d043      	beq.n	80037a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e249      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d023      	beq.n	800376c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003724:	4b3d      	ldr	r3, [pc, #244]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3c      	ldr	r2, [pc, #240]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800372e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe f9f6 	bl	8001b20 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003738:	f7fe f9f2 	bl	8001b20 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e232      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374a:	4b34      	ldr	r3, [pc, #208]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b31      	ldr	r3, [pc, #196]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	492d      	ldr	r1, [pc, #180]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
 800376a:	e01a      	b.n	80037a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376c:	4b2b      	ldr	r3, [pc, #172]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2a      	ldr	r2, [pc, #168]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003772:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe f9d2 	bl	8001b20 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe f9ce 	bl	8001b20 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e20e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003792:	4b22      	ldr	r3, [pc, #136]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x1e0>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d041      	beq.n	8003832 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b6:	4b19      	ldr	r3, [pc, #100]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80037b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037bc:	4a17      	ldr	r2, [pc, #92]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fe f9ab 	bl	8001b20 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ce:	f7fe f9a7 	bl	8001b20 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1e7      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e0:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ef      	beq.n	80037ce <HAL_RCC_OscConfig+0x22e>
 80037ee:	e020      	b.n	8003832 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f0:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f6:	4a09      	ldr	r2, [pc, #36]	@ (800381c <HAL_RCC_OscConfig+0x27c>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe f98e 	bl	8001b20 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003806:	e00d      	b.n	8003824 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7fe f98a 	bl	8001b20 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d906      	bls.n	8003824 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1ca      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003824:	4b8c      	ldr	r3, [pc, #560]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ea      	bne.n	8003808 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80a6 	beq.w	800398c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003844:	4b84      	ldr	r3, [pc, #528]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_OscConfig+0x2b4>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x2b6>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003864:	6593      	str	r3, [r2, #88]	@ 0x58
 8003866:	4b7c      	ldr	r3, [pc, #496]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003872:	2301      	movs	r3, #1
 8003874:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003876:	4b79      	ldr	r3, [pc, #484]	@ (8003a5c <HAL_RCC_OscConfig+0x4bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d118      	bne.n	80038b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003882:	4b76      	ldr	r3, [pc, #472]	@ (8003a5c <HAL_RCC_OscConfig+0x4bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a75      	ldr	r2, [pc, #468]	@ (8003a5c <HAL_RCC_OscConfig+0x4bc>)
 8003888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800388c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388e:	f7fe f947 	bl	8001b20 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003896:	f7fe f943 	bl	8001b20 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e183      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a5c <HAL_RCC_OscConfig+0x4bc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d108      	bne.n	80038ce <HAL_RCC_OscConfig+0x32e>
 80038bc:	4b66      	ldr	r3, [pc, #408]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	4a65      	ldr	r2, [pc, #404]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038cc:	e024      	b.n	8003918 <HAL_RCC_OscConfig+0x378>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d110      	bne.n	80038f8 <HAL_RCC_OscConfig+0x358>
 80038d6:	4b60      	ldr	r3, [pc, #384]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038f6:	e00f      	b.n	8003918 <HAL_RCC_OscConfig+0x378>
 80038f8:	4b57      	ldr	r3, [pc, #348]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fe:	4a56      	ldr	r2, [pc, #344]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003908:	4b53      	ldr	r3, [pc, #332]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	4a52      	ldr	r2, [pc, #328]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d016      	beq.n	800394e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fe f8fe 	bl	8001b20 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003926:	e00a      	b.n	800393e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003928:	f7fe f8fa 	bl	8001b20 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e138      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800393e:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ed      	beq.n	8003928 <HAL_RCC_OscConfig+0x388>
 800394c:	e015      	b.n	800397a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fe f8e7 	bl	8001b20 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7fe f8e3 	bl	8001b20 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e121      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800396c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ed      	bne.n	8003956 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800397a:	7ffb      	ldrb	r3, [r7, #31]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b35      	ldr	r3, [pc, #212]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	4a34      	ldr	r2, [pc, #208]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800398a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d03c      	beq.n	8003a12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01c      	beq.n	80039da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe f8b6 	bl	8001b20 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b8:	f7fe f8b2 	bl	8001b20 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0f2      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ca:	4b23      	ldr	r3, [pc, #140]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80039cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ef      	beq.n	80039b8 <HAL_RCC_OscConfig+0x418>
 80039d8:	e01b      	b.n	8003a12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039da:	4b1f      	ldr	r3, [pc, #124]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80039dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fe f899 	bl	8001b20 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f2:	f7fe f895 	bl	8001b20 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0d5      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a04:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ef      	bne.n	80039f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80c9 	beq.w	8003bae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	f000 8083 	beq.w	8003b30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d15e      	bne.n	8003af0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fe f86f 	bl	8001b20 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a44:	e00c      	b.n	8003a60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fe f86b 	bl	8001b20 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d905      	bls.n	8003a60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e0ab      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a60:	4b55      	ldr	r3, [pc, #340]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ec      	bne.n	8003a46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a6c:	4b52      	ldr	r3, [pc, #328]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	4b52      	ldr	r3, [pc, #328]	@ (8003bbc <HAL_RCC_OscConfig+0x61c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6a11      	ldr	r1, [r2, #32]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0112      	lsls	r2, r2, #4
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a86:	0212      	lsls	r2, r2, #8
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a8e:	0852      	lsrs	r2, r2, #1
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0552      	lsls	r2, r2, #21
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a9a:	0852      	lsrs	r2, r2, #1
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	0652      	lsls	r2, r2, #25
 8003aa0:	4311      	orrs	r1, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003aa6:	06d2      	lsls	r2, r2, #27
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	4943      	ldr	r1, [pc, #268]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab0:	4b41      	ldr	r3, [pc, #260]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003abc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a3d      	ldr	r2, [pc, #244]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f82a 	bl	8001b20 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fe f826 	bl	8001b20 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e066      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	4b35      	ldr	r3, [pc, #212]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x530>
 8003aee:	e05e      	b.n	8003bae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af0:	4b31      	ldr	r3, [pc, #196]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a30      	ldr	r2, [pc, #192]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003af6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe f810 	bl	8001b20 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fe f80c 	bl	8001b20 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b16:	4b28      	ldr	r3, [pc, #160]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b22:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	4924      	ldr	r1, [pc, #144]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003b28:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <HAL_RCC_OscConfig+0x620>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60cb      	str	r3, [r1, #12]
 8003b2e:	e03e      	b.n	8003bae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e039      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb8 <HAL_RCC_OscConfig+0x618>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0203 	and.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d12c      	bne.n	8003baa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d123      	bne.n	8003baa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d11b      	bne.n	8003baa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d113      	bne.n	8003baa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3720      	adds	r7, #32
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	019f800c 	.word	0x019f800c
 8003bc0:	feeefffc 	.word	0xfeeefffc

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e11e      	b.n	8003e1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b91      	ldr	r3, [pc, #580]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d910      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b8e      	ldr	r3, [pc, #568]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 020f 	bic.w	r2, r3, #15
 8003bf2:	498c      	ldr	r1, [pc, #560]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b8a      	ldr	r3, [pc, #552]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e106      	b.n	8003e1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d073      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d129      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c20:	4b81      	ldr	r3, [pc, #516]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0f4      	b.n	8003e1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c30:	f000 f9d0 	bl	8003fd4 <RCC_GetSysClockFreqFromPLLSource>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4a7c      	ldr	r2, [pc, #496]	@ (8003e2c <HAL_RCC_ClockConfig+0x268>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d93f      	bls.n	8003cbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d033      	beq.n	8003cbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d12f      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c5e:	4b72      	ldr	r3, [pc, #456]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c66:	4a70      	ldr	r2, [pc, #448]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e024      	b.n	8003cbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0c6      	b.n	8003e1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8c:	4b66      	ldr	r3, [pc, #408]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0be      	b.n	8003e1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c9c:	f000 f8ce 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4a61      	ldr	r2, [pc, #388]	@ (8003e2c <HAL_RCC_ClockConfig+0x268>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d909      	bls.n	8003cbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003caa:	4b5f      	ldr	r3, [pc, #380]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4957      	ldr	r1, [pc, #348]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fd ff26 	bl	8001b20 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd8:	f7fd ff22 	bl	8001b20 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e095      	b.n	8003e1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	4b4e      	ldr	r3, [pc, #312]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 020c 	and.w	r2, r3, #12
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1eb      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d023      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d18:	4b43      	ldr	r3, [pc, #268]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a42      	ldr	r2, [pc, #264]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d30:	4b3d      	ldr	r3, [pc, #244]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d38:	4a3b      	ldr	r2, [pc, #236]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d40:	4b39      	ldr	r3, [pc, #228]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4936      	ldr	r1, [pc, #216]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b80      	cmp	r3, #128	@ 0x80
 8003d58:	d105      	bne.n	8003d66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d5a:	4b33      	ldr	r3, [pc, #204]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	4a32      	ldr	r2, [pc, #200]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003d60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d66:	4b2f      	ldr	r3, [pc, #188]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d21d      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d74:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 020f 	bic.w	r2, r3, #15
 8003d7c:	4929      	ldr	r1, [pc, #164]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d84:	f7fd fecc 	bl	8001b20 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7fd fec8 	bl	8001b20 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e03b      	b.n	8003e1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <HAL_RCC_ClockConfig+0x260>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d1ed      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4917      	ldr	r1, [pc, #92]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	490f      	ldr	r1, [pc, #60]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dee:	f000 f825 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003df2:	4602      	mov	r2, r0
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <HAL_RCC_ClockConfig+0x264>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	490c      	ldr	r1, [pc, #48]	@ (8003e30 <HAL_RCC_ClockConfig+0x26c>)
 8003e00:	5ccb      	ldrb	r3, [r1, r3]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <HAL_RCC_ClockConfig+0x270>)
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HAL_RCC_ClockConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd f8a8 	bl	8000f68 <HAL_InitTick>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	04c4b400 	.word	0x04c4b400
 8003e30:	080096b4 	.word	0x080096b4
 8003e34:	20000000 	.word	0x20000000
 8003e38:	20000004 	.word	0x20000004

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e42:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d102      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	e047      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e54:	4b27      	ldr	r3, [pc, #156]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d102      	bne.n	8003e66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e60:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	e03e      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e66:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d136      	bne.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e72:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3301      	adds	r3, #1
 8003e88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e90:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e9a:	68d2      	ldr	r2, [r2, #12]
 8003e9c:	0a12      	lsrs	r2, r2, #8
 8003e9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	617b      	str	r3, [r7, #20]
      break;
 8003ea8:	e00c      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eaa:	4a13      	ldr	r2, [pc, #76]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	4a10      	ldr	r2, [pc, #64]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	0a12      	lsrs	r2, r2, #8
 8003eb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
      break;
 8003ec2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0e5b      	lsrs	r3, r3, #25
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	e001      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ee4:	693b      	ldr	r3, [r7, #16]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	016e3600 	.word	0x016e3600

08003f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000000 	.word	0x20000000

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4904      	ldr	r1, [pc, #16]	@ (8003f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	080096c4 	.word	0x080096c4

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f48:	f7ff ffda 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0adb      	lsrs	r3, r3, #11
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4904      	ldr	r1, [pc, #16]	@ (8003f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	080096c4 	.word	0x080096c4

08003f70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f80:	4b12      	ldr	r3, [pc, #72]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0203 	and.w	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f98:	4b0c      	ldr	r3, [pc, #48]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fa4:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003fb2:	4b07      	ldr	r3, [pc, #28]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x60>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 020f 	and.w	r2, r3, #15
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	601a      	str	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40022000 	.word	0x40022000

08003fd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fda:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d10c      	bne.n	8004012 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ff8:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	4a14      	ldr	r2, [pc, #80]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004002:	68d2      	ldr	r2, [r2, #12]
 8004004:	0a12      	lsrs	r2, r2, #8
 8004006:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	617b      	str	r3, [r7, #20]
    break;
 8004010:	e00c      	b.n	800402c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004012:	4a12      	ldr	r2, [pc, #72]	@ (800405c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	4a0e      	ldr	r2, [pc, #56]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800401c:	68d2      	ldr	r2, [r2, #12]
 800401e:	0a12      	lsrs	r2, r2, #8
 8004020:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]
    break;
 800402a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	0e5b      	lsrs	r3, r3, #25
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004046:	687b      	ldr	r3, [r7, #4]
}
 8004048:	4618      	mov	r0, r3
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40021000 	.word	0x40021000
 8004058:	016e3600 	.word	0x016e3600
 800405c:	00f42400 	.word	0x00f42400

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004068:	2300      	movs	r3, #0
 800406a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800406c:	2300      	movs	r3, #0
 800406e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8098 	beq.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004082:	4b43      	ldr	r3, [pc, #268]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	4b40      	ldr	r3, [pc, #256]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	4a3f      	ldr	r2, [pc, #252]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004098:	6593      	str	r3, [r2, #88]	@ 0x58
 800409a:	4b3d      	ldr	r3, [pc, #244]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a6:	2301      	movs	r3, #1
 80040a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a39      	ldr	r2, [pc, #228]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b6:	f7fd fd33 	bl	8001b20 <HAL_GetTick>
 80040ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040bc:	e009      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7fd fd2f 	bl	8001b20 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d902      	bls.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	74fb      	strb	r3, [r7, #19]
        break;
 80040d0:	e005      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d2:	4b30      	ldr	r3, [pc, #192]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0ef      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d159      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01e      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d019      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004100:	4b23      	ldr	r3, [pc, #140]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800410c:	4b20      	ldr	r3, [pc, #128]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004112:	4a1f      	ldr	r2, [pc, #124]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800411c:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	4a1b      	ldr	r2, [pc, #108]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800412c:	4a18      	ldr	r2, [pc, #96]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd fcef 	bl	8001b20 <HAL_GetTick>
 8004142:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004144:	e00b      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fd fceb 	bl	8001b20 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d902      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	74fb      	strb	r3, [r7, #19]
            break;
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	4b0c      	ldr	r3, [pc, #48]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ec      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004172:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004180:	4903      	ldr	r1, [pc, #12]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004188:	e008      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	74bb      	strb	r3, [r7, #18]
 800418e:	e005      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004190:	40021000 	.word	0x40021000
 8004194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419c:	7c7b      	ldrb	r3, [r7, #17]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d105      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a2:	4ba7      	ldr	r3, [pc, #668]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	4aa6      	ldr	r2, [pc, #664]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ba:	4ba1      	ldr	r3, [pc, #644]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c0:	f023 0203 	bic.w	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	499d      	ldr	r1, [pc, #628]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041dc:	4b98      	ldr	r3, [pc, #608]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f023 020c 	bic.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4995      	ldr	r1, [pc, #596]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041fe:	4b90      	ldr	r3, [pc, #576]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	498c      	ldr	r1, [pc, #560]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004220:	4b87      	ldr	r3, [pc, #540]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	4984      	ldr	r1, [pc, #528]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004242:	4b7f      	ldr	r3, [pc, #508]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	497b      	ldr	r1, [pc, #492]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004264:	4b76      	ldr	r3, [pc, #472]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	4973      	ldr	r1, [pc, #460]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004286:	4b6e      	ldr	r3, [pc, #440]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	496a      	ldr	r1, [pc, #424]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042a8:	4b65      	ldr	r3, [pc, #404]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4962      	ldr	r1, [pc, #392]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	4959      	ldr	r1, [pc, #356]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042ec:	4b54      	ldr	r3, [pc, #336]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042f2:	f023 0203 	bic.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fa:	4951      	ldr	r1, [pc, #324]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800430e:	4b4c      	ldr	r3, [pc, #304]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004314:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4948      	ldr	r1, [pc, #288]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d015      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004330:	4b43      	ldr	r3, [pc, #268]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	4940      	ldr	r1, [pc, #256]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800434e:	d105      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004350:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a3a      	ldr	r2, [pc, #232]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800435a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004364:	2b00      	cmp	r3, #0
 8004366:	d015      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004368:	4b35      	ldr	r3, [pc, #212]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004376:	4932      	ldr	r1, [pc, #200]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004386:	d105      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004388:	4b2d      	ldr	r3, [pc, #180]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a2c      	ldr	r2, [pc, #176]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004392:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043a0:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	4924      	ldr	r1, [pc, #144]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d8:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e6:	4916      	ldr	r1, [pc, #88]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043f6:	d105      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a10      	ldr	r2, [pc, #64]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d019      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4908      	ldr	r1, [pc, #32]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800442e:	d109      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a02      	ldr	r2, [pc, #8]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800443a:	60d3      	str	r3, [r2, #12]
 800443c:	e002      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004450:	4b29      	ldr	r3, [pc, #164]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	4926      	ldr	r1, [pc, #152]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800446e:	d105      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004470:	4b21      	ldr	r3, [pc, #132]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a20      	ldr	r2, [pc, #128]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004488:	4b1b      	ldr	r3, [pc, #108]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004496:	4918      	ldr	r1, [pc, #96]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044a8:	4b13      	ldr	r3, [pc, #76]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a12      	ldr	r2, [pc, #72]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044c0:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ce:	490a      	ldr	r1, [pc, #40]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044de:	d105      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e0:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e049      	b.n	80045a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd f820 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 fdba 	bl	80050b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d001      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e054      	b.n	800466e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a26      	ldr	r2, [pc, #152]	@ (800467c <HAL_TIM_Base_Start_IT+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ee:	d01d      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a22      	ldr	r2, [pc, #136]	@ (8004680 <HAL_TIM_Base_Start_IT+0xd4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a21      	ldr	r2, [pc, #132]	@ (8004684 <HAL_TIM_Base_Start_IT+0xd8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <HAL_TIM_Base_Start_IT+0xdc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1e      	ldr	r2, [pc, #120]	@ (800468c <HAL_TIM_Base_Start_IT+0xe0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <HAL_TIM_Base_Start_IT+0xe4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <HAL_TIM_Base_Start_IT+0xe8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d115      	bne.n	8004658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <HAL_TIM_Base_Start_IT+0xec>)
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d015      	beq.n	800466a <HAL_TIM_Base_Start_IT+0xbe>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d011      	beq.n	800466a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	e008      	b.n	800466a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e000      	b.n	800466c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40013400 	.word	0x40013400
 8004690:	40014000 	.word	0x40014000
 8004694:	40015000 	.word	0x40015000
 8004698:	00010007 	.word	0x00010007

0800469c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e049      	b.n	8004742 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc ff94 	bl	80015f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 fcea 	bl	80050b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_TIM_PWM_Start+0x24>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e03c      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d109      	bne.n	800478a <HAL_TIM_PWM_Start+0x3e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e02f      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x58>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e022      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d109      	bne.n	80047be <HAL_TIM_PWM_Start+0x72>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e015      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x8c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e008      	b.n	80047ea <HAL_TIM_PWM_Start+0x9e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0a6      	b.n	8004940 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0xb6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004800:	e023      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xc6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004810:	e01b      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xd6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	e013      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start+0xe6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004830:	e00b      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start+0xf6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004840:	e003      	b.n	800484a <HAL_TIM_PWM_Start+0xfe>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2201      	movs	r2, #1
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f91c 	bl	8005a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3a      	ldr	r2, [pc, #232]	@ (8004948 <HAL_TIM_PWM_Start+0x1fc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d018      	beq.n	8004894 <HAL_TIM_PWM_Start+0x148>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a39      	ldr	r2, [pc, #228]	@ (800494c <HAL_TIM_PWM_Start+0x200>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_TIM_PWM_Start+0x148>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a37      	ldr	r2, [pc, #220]	@ (8004950 <HAL_TIM_PWM_Start+0x204>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <HAL_TIM_PWM_Start+0x148>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a36      	ldr	r2, [pc, #216]	@ (8004954 <HAL_TIM_PWM_Start+0x208>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <HAL_TIM_PWM_Start+0x148>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a34      	ldr	r2, [pc, #208]	@ (8004958 <HAL_TIM_PWM_Start+0x20c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_TIM_PWM_Start+0x148>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a33      	ldr	r2, [pc, #204]	@ (800495c <HAL_TIM_PWM_Start+0x210>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_TIM_PWM_Start+0x14c>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_TIM_PWM_Start+0x14e>
 8004898:	2300      	movs	r3, #0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a25      	ldr	r2, [pc, #148]	@ (8004948 <HAL_TIM_PWM_Start+0x1fc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d022      	beq.n	80048fe <HAL_TIM_PWM_Start+0x1b2>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c0:	d01d      	beq.n	80048fe <HAL_TIM_PWM_Start+0x1b2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a26      	ldr	r2, [pc, #152]	@ (8004960 <HAL_TIM_PWM_Start+0x214>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d018      	beq.n	80048fe <HAL_TIM_PWM_Start+0x1b2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a24      	ldr	r2, [pc, #144]	@ (8004964 <HAL_TIM_PWM_Start+0x218>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_TIM_PWM_Start+0x1b2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a23      	ldr	r2, [pc, #140]	@ (8004968 <HAL_TIM_PWM_Start+0x21c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIM_PWM_Start+0x1b2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a19      	ldr	r2, [pc, #100]	@ (800494c <HAL_TIM_PWM_Start+0x200>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_TIM_PWM_Start+0x1b2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <HAL_TIM_PWM_Start+0x204>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIM_PWM_Start+0x1b2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a18      	ldr	r2, [pc, #96]	@ (800495c <HAL_TIM_PWM_Start+0x210>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d115      	bne.n	800492a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	4b19      	ldr	r3, [pc, #100]	@ (800496c <HAL_TIM_PWM_Start+0x220>)
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b06      	cmp	r3, #6
 800490e:	d015      	beq.n	800493c <HAL_TIM_PWM_Start+0x1f0>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004916:	d011      	beq.n	800493c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004928:	e008      	b.n	800493c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e000      	b.n	800493e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40013400 	.word	0x40013400
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800
 800495c:	40015000 	.word	0x40015000
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	00010007 	.word	0x00010007

08004970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0202 	mvn.w	r2, #2
 80049a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fb5c 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fb4e 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fb5f 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d020      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0204 	mvn.w	r2, #4
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fb36 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fb28 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fb39 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0208 	mvn.w	r2, #8
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2204      	movs	r2, #4
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fb10 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fb02 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fb13 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0210 	mvn.w	r2, #16
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 faea 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fadc 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 faed 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0201 	mvn.w	r2, #1
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc fa0a 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f001 fa8d 	bl	8006024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f001 fa85 	bl	8006038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00c      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 faa7 	bl	80050a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00c      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f06f 0220 	mvn.w	r2, #32
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 fa4d 	bl	8006010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f001 fa59 	bl	800604c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 fa51 	bl	8006060 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f001 fa49 	bl	8006074 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00c      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 fa41 	bl	8006088 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e0ff      	b.n	8004e2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b14      	cmp	r3, #20
 8004c3a:	f200 80f0 	bhi.w	8004e1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c99 	.word	0x08004c99
 8004c48:	08004e1f 	.word	0x08004e1f
 8004c4c:	08004e1f 	.word	0x08004e1f
 8004c50:	08004e1f 	.word	0x08004e1f
 8004c54:	08004cd9 	.word	0x08004cd9
 8004c58:	08004e1f 	.word	0x08004e1f
 8004c5c:	08004e1f 	.word	0x08004e1f
 8004c60:	08004e1f 	.word	0x08004e1f
 8004c64:	08004d1b 	.word	0x08004d1b
 8004c68:	08004e1f 	.word	0x08004e1f
 8004c6c:	08004e1f 	.word	0x08004e1f
 8004c70:	08004e1f 	.word	0x08004e1f
 8004c74:	08004d5b 	.word	0x08004d5b
 8004c78:	08004e1f 	.word	0x08004e1f
 8004c7c:	08004e1f 	.word	0x08004e1f
 8004c80:	08004e1f 	.word	0x08004e1f
 8004c84:	08004d9d 	.word	0x08004d9d
 8004c88:	08004e1f 	.word	0x08004e1f
 8004c8c:	08004e1f 	.word	0x08004e1f
 8004c90:	08004e1f 	.word	0x08004e1f
 8004c94:	08004ddd 	.word	0x08004ddd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fabc 	bl	800521c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0208 	orr.w	r2, r2, #8
 8004cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0204 	bic.w	r2, r2, #4
 8004cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6999      	ldr	r1, [r3, #24]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
      break;
 8004cd6:	e0a5      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fb36 	bl	8005350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6999      	ldr	r1, [r3, #24]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	021a      	lsls	r2, r3, #8
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	619a      	str	r2, [r3, #24]
      break;
 8004d18:	e084      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fba9 	bl	8005478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0208 	orr.w	r2, r2, #8
 8004d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0204 	bic.w	r2, r2, #4
 8004d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69d9      	ldr	r1, [r3, #28]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	61da      	str	r2, [r3, #28]
      break;
 8004d58:	e064      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fc1b 	bl	800559c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69d9      	ldr	r1, [r3, #28]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	021a      	lsls	r2, r3, #8
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	61da      	str	r2, [r3, #28]
      break;
 8004d9a:	e043      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fc8e 	bl	80056c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0204 	bic.w	r2, r2, #4
 8004dc6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004dda:	e023      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fcd8 	bl	8005798 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004df6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	021a      	lsls	r2, r3, #8
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004e1c:	e002      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
      break;
 8004e22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop

08004e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_ConfigClockSource+0x1c>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0f6      	b.n	8005042 <HAL_TIM_ConfigClockSource+0x20a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004e72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a6f      	ldr	r2, [pc, #444]	@ (800504c <HAL_TIM_ConfigClockSource+0x214>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	f000 80c1 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004e94:	4a6d      	ldr	r2, [pc, #436]	@ (800504c <HAL_TIM_ConfigClockSource+0x214>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f200 80c6 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004e9c:	4a6c      	ldr	r2, [pc, #432]	@ (8005050 <HAL_TIM_ConfigClockSource+0x218>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	f000 80b9 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8005050 <HAL_TIM_ConfigClockSource+0x218>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	f200 80be 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004eac:	4a69      	ldr	r2, [pc, #420]	@ (8005054 <HAL_TIM_ConfigClockSource+0x21c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	f000 80b1 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004eb4:	4a67      	ldr	r2, [pc, #412]	@ (8005054 <HAL_TIM_ConfigClockSource+0x21c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	f200 80b6 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ebc:	4a66      	ldr	r2, [pc, #408]	@ (8005058 <HAL_TIM_ConfigClockSource+0x220>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	f000 80a9 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004ec4:	4a64      	ldr	r2, [pc, #400]	@ (8005058 <HAL_TIM_ConfigClockSource+0x220>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f200 80ae 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ecc:	4a63      	ldr	r2, [pc, #396]	@ (800505c <HAL_TIM_ConfigClockSource+0x224>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f000 80a1 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004ed4:	4a61      	ldr	r2, [pc, #388]	@ (800505c <HAL_TIM_ConfigClockSource+0x224>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f200 80a6 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004edc:	4a60      	ldr	r2, [pc, #384]	@ (8005060 <HAL_TIM_ConfigClockSource+0x228>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f000 8099 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8005060 <HAL_TIM_ConfigClockSource+0x228>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	f200 809e 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004eec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ef0:	f000 8091 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004ef4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ef8:	f200 8096 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004efc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f00:	f000 8089 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004f04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f08:	f200 808e 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f10:	d03e      	beq.n	8004f90 <HAL_TIM_ConfigClockSource+0x158>
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f16:	f200 8087 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f1e:	f000 8086 	beq.w	800502e <HAL_TIM_ConfigClockSource+0x1f6>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f26:	d87f      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f28:	2b70      	cmp	r3, #112	@ 0x70
 8004f2a:	d01a      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x12a>
 8004f2c:	2b70      	cmp	r3, #112	@ 0x70
 8004f2e:	d87b      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f30:	2b60      	cmp	r3, #96	@ 0x60
 8004f32:	d050      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x19e>
 8004f34:	2b60      	cmp	r3, #96	@ 0x60
 8004f36:	d877      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f38:	2b50      	cmp	r3, #80	@ 0x50
 8004f3a:	d03c      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x17e>
 8004f3c:	2b50      	cmp	r3, #80	@ 0x50
 8004f3e:	d873      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f40:	2b40      	cmp	r3, #64	@ 0x40
 8004f42:	d058      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x1be>
 8004f44:	2b40      	cmp	r3, #64	@ 0x40
 8004f46:	d86f      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f48:	2b30      	cmp	r3, #48	@ 0x30
 8004f4a:	d064      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004f4c:	2b30      	cmp	r3, #48	@ 0x30
 8004f4e:	d86b      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d060      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d867      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d05c      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d05a      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1de>
 8004f60:	e062      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	f000 fd6d 	bl	8005a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	609a      	str	r2, [r3, #8]
      break;
 8004f8e:	e04f      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	f000 fd56 	bl	8005a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fb2:	609a      	str	r2, [r3, #8]
      break;
 8004fb4:	e03c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 fcc8 	bl	8005958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2150      	movs	r1, #80	@ 0x50
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fd21 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e02c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f000 fce7 	bl	80059b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2160      	movs	r1, #96	@ 0x60
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fd11 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 8004ff4:	e01c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	461a      	mov	r2, r3
 8005004:	f000 fca8 	bl	8005958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2140      	movs	r1, #64	@ 0x40
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fd01 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 8005014:	e00c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f000 fcf8 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 8005026:	e003      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      break;
 800502c:	e000      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800502e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	00100070 	.word	0x00100070
 8005050:	00100060 	.word	0x00100060
 8005054:	00100050 	.word	0x00100050
 8005058:	00100040 	.word	0x00100040
 800505c:	00100030 	.word	0x00100030
 8005060:	00100020 	.word	0x00100020

08005064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a4c      	ldr	r2, [pc, #304]	@ (80051f8 <TIM_Base_SetConfig+0x144>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d017      	beq.n	80050fc <TIM_Base_SetConfig+0x48>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x48>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a49      	ldr	r2, [pc, #292]	@ (80051fc <TIM_Base_SetConfig+0x148>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x48>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a48      	ldr	r2, [pc, #288]	@ (8005200 <TIM_Base_SetConfig+0x14c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x48>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a47      	ldr	r2, [pc, #284]	@ (8005204 <TIM_Base_SetConfig+0x150>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x48>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a46      	ldr	r2, [pc, #280]	@ (8005208 <TIM_Base_SetConfig+0x154>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x48>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a45      	ldr	r2, [pc, #276]	@ (800520c <TIM_Base_SetConfig+0x158>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a39      	ldr	r2, [pc, #228]	@ (80051f8 <TIM_Base_SetConfig+0x144>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d023      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511c:	d01f      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a36      	ldr	r2, [pc, #216]	@ (80051fc <TIM_Base_SetConfig+0x148>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a35      	ldr	r2, [pc, #212]	@ (8005200 <TIM_Base_SetConfig+0x14c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a34      	ldr	r2, [pc, #208]	@ (8005204 <TIM_Base_SetConfig+0x150>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a33      	ldr	r2, [pc, #204]	@ (8005208 <TIM_Base_SetConfig+0x154>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a33      	ldr	r2, [pc, #204]	@ (8005210 <TIM_Base_SetConfig+0x15c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a32      	ldr	r2, [pc, #200]	@ (8005214 <TIM_Base_SetConfig+0x160>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a31      	ldr	r2, [pc, #196]	@ (8005218 <TIM_Base_SetConfig+0x164>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0xaa>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2c      	ldr	r2, [pc, #176]	@ (800520c <TIM_Base_SetConfig+0x158>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a18      	ldr	r2, [pc, #96]	@ (80051f8 <TIM_Base_SetConfig+0x144>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <TIM_Base_SetConfig+0x110>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a1a      	ldr	r2, [pc, #104]	@ (8005208 <TIM_Base_SetConfig+0x154>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00f      	beq.n	80051c4 <TIM_Base_SetConfig+0x110>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005210 <TIM_Base_SetConfig+0x15c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <TIM_Base_SetConfig+0x110>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a19      	ldr	r2, [pc, #100]	@ (8005214 <TIM_Base_SetConfig+0x160>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <TIM_Base_SetConfig+0x110>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a18      	ldr	r2, [pc, #96]	@ (8005218 <TIM_Base_SetConfig+0x164>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0x110>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a13      	ldr	r2, [pc, #76]	@ (800520c <TIM_Base_SetConfig+0x158>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d103      	bne.n	80051cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d105      	bne.n	80051ea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f023 0201 	bic.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	611a      	str	r2, [r3, #16]
  }
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40013400 	.word	0x40013400
 800520c:	40015000 	.word	0x40015000
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800

0800521c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f023 0201 	bic.w	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 0302 	bic.w	r3, r3, #2
 8005268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a30      	ldr	r2, [pc, #192]	@ (8005338 <TIM_OC1_SetConfig+0x11c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <TIM_OC1_SetConfig+0x88>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a2f      	ldr	r2, [pc, #188]	@ (800533c <TIM_OC1_SetConfig+0x120>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_OC1_SetConfig+0x88>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a2e      	ldr	r2, [pc, #184]	@ (8005340 <TIM_OC1_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_OC1_SetConfig+0x88>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a2d      	ldr	r2, [pc, #180]	@ (8005344 <TIM_OC1_SetConfig+0x128>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_OC1_SetConfig+0x88>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a2c      	ldr	r2, [pc, #176]	@ (8005348 <TIM_OC1_SetConfig+0x12c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC1_SetConfig+0x88>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a2b      	ldr	r2, [pc, #172]	@ (800534c <TIM_OC1_SetConfig+0x130>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0308 	bic.w	r3, r3, #8
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <TIM_OC1_SetConfig+0x11c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <TIM_OC1_SetConfig+0xd2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <TIM_OC1_SetConfig+0x120>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00f      	beq.n	80052ee <TIM_OC1_SetConfig+0xd2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <TIM_OC1_SetConfig+0x124>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00b      	beq.n	80052ee <TIM_OC1_SetConfig+0xd2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <TIM_OC1_SetConfig+0x128>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <TIM_OC1_SetConfig+0xd2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <TIM_OC1_SetConfig+0x12c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d003      	beq.n	80052ee <TIM_OC1_SetConfig+0xd2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a18      	ldr	r2, [pc, #96]	@ (800534c <TIM_OC1_SetConfig+0x130>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d111      	bne.n	8005312 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	621a      	str	r2, [r3, #32]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40013400 	.word	0x40013400
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800
 800534c:	40015000 	.word	0x40015000

08005350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f023 0210 	bic.w	r2, r3, #16
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0320 	bic.w	r3, r3, #32
 800539e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005460 <TIM_OC2_SetConfig+0x110>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <TIM_OC2_SetConfig+0x74>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005464 <TIM_OC2_SetConfig+0x114>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_OC2_SetConfig+0x74>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a2a      	ldr	r2, [pc, #168]	@ (8005468 <TIM_OC2_SetConfig+0x118>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d10d      	bne.n	80053e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <TIM_OC2_SetConfig+0x110>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <TIM_OC2_SetConfig+0xc0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005464 <TIM_OC2_SetConfig+0x114>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00f      	beq.n	8005410 <TIM_OC2_SetConfig+0xc0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a1e      	ldr	r2, [pc, #120]	@ (800546c <TIM_OC2_SetConfig+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_OC2_SetConfig+0xc0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005470 <TIM_OC2_SetConfig+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_OC2_SetConfig+0xc0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <TIM_OC2_SetConfig+0x124>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_OC2_SetConfig+0xc0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a17      	ldr	r2, [pc, #92]	@ (8005468 <TIM_OC2_SetConfig+0x118>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d113      	bne.n	8005438 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40015000 	.word	0x40015000
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005584 <TIM_OC3_SetConfig+0x10c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_OC3_SetConfig+0x72>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005588 <TIM_OC3_SetConfig+0x110>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_OC3_SetConfig+0x72>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a29      	ldr	r2, [pc, #164]	@ (800558c <TIM_OC3_SetConfig+0x114>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10d      	bne.n	8005506 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1e      	ldr	r2, [pc, #120]	@ (8005584 <TIM_OC3_SetConfig+0x10c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_OC3_SetConfig+0xbe>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <TIM_OC3_SetConfig+0x110>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_OC3_SetConfig+0xbe>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <TIM_OC3_SetConfig+0x118>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_OC3_SetConfig+0xbe>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <TIM_OC3_SetConfig+0x11c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_OC3_SetConfig+0xbe>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <TIM_OC3_SetConfig+0x120>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_OC3_SetConfig+0xbe>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a16      	ldr	r2, [pc, #88]	@ (800558c <TIM_OC3_SetConfig+0x114>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d113      	bne.n	800555e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800553c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40015000 	.word	0x40015000
 8005590:	40014000 	.word	0x40014000
 8005594:	40014400 	.word	0x40014400
 8005598:	40014800 	.word	0x40014800

0800559c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	031b      	lsls	r3, r3, #12
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2c      	ldr	r2, [pc, #176]	@ (80056ac <TIM_OC4_SetConfig+0x110>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_OC4_SetConfig+0x74>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a2b      	ldr	r2, [pc, #172]	@ (80056b0 <TIM_OC4_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC4_SetConfig+0x74>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a2a      	ldr	r2, [pc, #168]	@ (80056b4 <TIM_OC4_SetConfig+0x118>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d10d      	bne.n	800562c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	031b      	lsls	r3, r3, #12
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800562a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1f      	ldr	r2, [pc, #124]	@ (80056ac <TIM_OC4_SetConfig+0x110>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d013      	beq.n	800565c <TIM_OC4_SetConfig+0xc0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <TIM_OC4_SetConfig+0x114>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00f      	beq.n	800565c <TIM_OC4_SetConfig+0xc0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1e      	ldr	r2, [pc, #120]	@ (80056b8 <TIM_OC4_SetConfig+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00b      	beq.n	800565c <TIM_OC4_SetConfig+0xc0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a1d      	ldr	r2, [pc, #116]	@ (80056bc <TIM_OC4_SetConfig+0x120>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d007      	beq.n	800565c <TIM_OC4_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1c      	ldr	r2, [pc, #112]	@ (80056c0 <TIM_OC4_SetConfig+0x124>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_OC4_SetConfig+0xc0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a17      	ldr	r2, [pc, #92]	@ (80056b4 <TIM_OC4_SetConfig+0x118>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d113      	bne.n	8005684 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005662:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800566a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40013400 	.word	0x40013400
 80056b4:	40015000 	.word	0x40015000
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800

080056c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005708:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <TIM_OC5_SetConfig+0xbc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <TIM_OC5_SetConfig+0x82>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a18      	ldr	r2, [pc, #96]	@ (8005784 <TIM_OC5_SetConfig+0xc0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_OC5_SetConfig+0x82>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <TIM_OC5_SetConfig+0xc4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_OC5_SetConfig+0x82>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a16      	ldr	r2, [pc, #88]	@ (800578c <TIM_OC5_SetConfig+0xc8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_OC5_SetConfig+0x82>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a15      	ldr	r2, [pc, #84]	@ (8005790 <TIM_OC5_SetConfig+0xcc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC5_SetConfig+0x82>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a14      	ldr	r2, [pc, #80]	@ (8005794 <TIM_OC5_SetConfig+0xd0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d109      	bne.n	800575a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800574c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	621a      	str	r2, [r3, #32]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800
 8005794:	40015000 	.word	0x40015000

08005798 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	051b      	lsls	r3, r3, #20
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005858 <TIM_OC6_SetConfig+0xc0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <TIM_OC6_SetConfig+0x84>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a19      	ldr	r2, [pc, #100]	@ (800585c <TIM_OC6_SetConfig+0xc4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00f      	beq.n	800581c <TIM_OC6_SetConfig+0x84>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a18      	ldr	r2, [pc, #96]	@ (8005860 <TIM_OC6_SetConfig+0xc8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00b      	beq.n	800581c <TIM_OC6_SetConfig+0x84>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <TIM_OC6_SetConfig+0xcc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <TIM_OC6_SetConfig+0x84>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a16      	ldr	r2, [pc, #88]	@ (8005868 <TIM_OC6_SetConfig+0xd0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_OC6_SetConfig+0x84>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a15      	ldr	r2, [pc, #84]	@ (800586c <TIM_OC6_SetConfig+0xd4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d109      	bne.n	8005830 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005822:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40013400 	.word	0x40013400
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800
 800586c:	40015000 	.word	0x40015000

08005870 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 0201 	bic.w	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a28      	ldr	r2, [pc, #160]	@ (800593c <TIM_TI1_SetConfig+0xcc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01b      	beq.n	80058d6 <TIM_TI1_SetConfig+0x66>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a4:	d017      	beq.n	80058d6 <TIM_TI1_SetConfig+0x66>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a25      	ldr	r2, [pc, #148]	@ (8005940 <TIM_TI1_SetConfig+0xd0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <TIM_TI1_SetConfig+0x66>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a24      	ldr	r2, [pc, #144]	@ (8005944 <TIM_TI1_SetConfig+0xd4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00f      	beq.n	80058d6 <TIM_TI1_SetConfig+0x66>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a23      	ldr	r2, [pc, #140]	@ (8005948 <TIM_TI1_SetConfig+0xd8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <TIM_TI1_SetConfig+0x66>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a22      	ldr	r2, [pc, #136]	@ (800594c <TIM_TI1_SetConfig+0xdc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <TIM_TI1_SetConfig+0x66>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a21      	ldr	r2, [pc, #132]	@ (8005950 <TIM_TI1_SetConfig+0xe0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_TI1_SetConfig+0x66>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4a20      	ldr	r2, [pc, #128]	@ (8005954 <TIM_TI1_SetConfig+0xe4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <TIM_TI1_SetConfig+0x6a>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <TIM_TI1_SetConfig+0x6c>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e003      	b.n	80058fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	b2db      	uxtb	r3, r3
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f023 030a 	bic.w	r3, r3, #10
 8005914:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f003 030a 	and.w	r3, r3, #10
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40013400 	.word	0x40013400
 8005950:	40014000 	.word	0x40014000
 8005954:	40015000 	.word	0x40015000

08005958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 030a 	bic.w	r3, r3, #10
 8005994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f023 0210 	bic.w	r2, r3, #16
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f043 0307 	orr.w	r3, r3, #7
 8005a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	609a      	str	r2, [r3, #8]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1a      	ldr	r2, [r3, #32]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b08a      	sub	sp, #40	@ 0x28
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e0a0      	b.n	8005c30 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb fd92 	bl	800162c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f7ff faca 	bl	80050b4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	f7ff fe9f 	bl	8005870 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 020c 	bic.w	r2, r2, #12
 8005b40:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6999      	ldr	r1, [r3, #24]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b62:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b76:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b86:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0204 	orr.w	r2, r2, #4
 8005baa:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005bb4:	2370      	movs	r3, #112	@ 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f107 020c 	add.w	r2, r7, #12
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fbbb 	bl	8005350 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bec:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3728      	adds	r7, #40	@ 0x28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <HAL_TIMEx_PWMN_Start+0x24>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e022      	b.n	8005ca2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d109      	bne.n	8005c76 <HAL_TIMEx_PWMN_Start+0x3e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	bf14      	ite	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	2300      	moveq	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	e015      	b.n	8005ca2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d109      	bne.n	8005c90 <HAL_TIMEx_PWMN_Start+0x58>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	e008      	b.n	8005ca2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e073      	b.n	8005d92 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <HAL_TIMEx_PWMN_Start+0x82>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb8:	e013      	b.n	8005ce2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d104      	bne.n	8005cca <HAL_TIMEx_PWMN_Start+0x92>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cc8:	e00b      	b.n	8005ce2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d104      	bne.n	8005cda <HAL_TIMEx_PWMN_Start+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cd8:	e003      	b.n	8005ce2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f9d6 	bl	800609c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a25      	ldr	r2, [pc, #148]	@ (8005d9c <HAL_TIMEx_PWMN_Start+0x164>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d022      	beq.n	8005d50 <HAL_TIMEx_PWMN_Start+0x118>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d12:	d01d      	beq.n	8005d50 <HAL_TIMEx_PWMN_Start+0x118>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a21      	ldr	r2, [pc, #132]	@ (8005da0 <HAL_TIMEx_PWMN_Start+0x168>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d018      	beq.n	8005d50 <HAL_TIMEx_PWMN_Start+0x118>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a20      	ldr	r2, [pc, #128]	@ (8005da4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <HAL_TIMEx_PWMN_Start+0x118>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005da8 <HAL_TIMEx_PWMN_Start+0x170>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00e      	beq.n	8005d50 <HAL_TIMEx_PWMN_Start+0x118>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <HAL_TIMEx_PWMN_Start+0x174>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d009      	beq.n	8005d50 <HAL_TIMEx_PWMN_Start+0x118>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	@ (8005db0 <HAL_TIMEx_PWMN_Start+0x178>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d004      	beq.n	8005d50 <HAL_TIMEx_PWMN_Start+0x118>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005db4 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d115      	bne.n	8005d7c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	4b18      	ldr	r3, [pc, #96]	@ (8005db8 <HAL_TIMEx_PWMN_Start+0x180>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d015      	beq.n	8005d8e <HAL_TIMEx_PWMN_Start+0x156>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d68:	d011      	beq.n	8005d8e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	e008      	b.n	8005d8e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e000      	b.n	8005d90 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40013400 	.word	0x40013400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40015000 	.word	0x40015000
 8005db8:	00010007 	.word	0x00010007

08005dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e074      	b.n	8005ebe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a34      	ldr	r2, [pc, #208]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a33      	ldr	r2, [pc, #204]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a31      	ldr	r2, [pc, #196]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a21      	ldr	r2, [pc, #132]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d022      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d01d      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d018      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1d      	ldr	r2, [pc, #116]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a18      	ldr	r2, [pc, #96]	@ (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a11      	ldr	r2, [pc, #68]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d10c      	bne.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40015000 	.word	0x40015000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40014000 	.word	0x40014000

08005ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e078      	b.n	8005ff6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1c      	ldr	r2, [pc, #112]	@ (8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a19      	ldr	r2, [pc, #100]	@ (800600c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d11c      	bne.n	8005fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb4:	051b      	lsls	r3, r3, #20
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40015000 	.word	0x40015000

08006010 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	2204      	movs	r2, #4
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	43db      	mvns	r3, r3
 80060be:	401a      	ands	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1a      	ldr	r2, [r3, #32]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	fa01 f303 	lsl.w	r3, r1, r3
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e042      	b.n	800617e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb fc14 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2224      	movs	r2, #36	@ 0x24
 8006114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 ff61 	bl	8006ff8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fc62 	bl	8006a00 <UART_SetConfig>
 800613c:	4603      	mov	r3, r0
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e01b      	b.n	800617e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006164:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 ffe0 	bl	800713c <UART_CheckIdleState>
 800617c:	4603      	mov	r3, r0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b08a      	sub	sp, #40	@ 0x28
 800618a:	af02      	add	r7, sp, #8
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619c:	2b20      	cmp	r3, #32
 800619e:	d17b      	bne.n	8006298 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_UART_Transmit+0x26>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e074      	b.n	800629a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2221      	movs	r2, #33	@ 0x21
 80061bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c0:	f7fb fcae 	bl	8001b20 <HAL_GetTick>
 80061c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061de:	d108      	bne.n	80061f2 <HAL_UART_Transmit+0x6c>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e003      	b.n	80061fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061fa:	e030      	b.n	800625e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	2180      	movs	r1, #128	@ 0x80
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 f842 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e03d      	b.n	800629a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006232:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	3302      	adds	r3, #2
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e007      	b.n	800624c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	781a      	ldrb	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3301      	adds	r3, #1
 800624a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1c8      	bne.n	80061fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	2140      	movs	r1, #64	@ 0x40
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f001 f80b 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e006      	b.n	800629a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	@ 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d137      	bne.n	800632c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_UART_Receive_IT+0x24>
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e030      	b.n	800632e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a18      	ldr	r2, [pc, #96]	@ (8006338 <HAL_UART_Receive_IT+0x94>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01f      	beq.n	800631c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	613b      	str	r3, [r7, #16]
   return(result);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	69f9      	ldr	r1, [r7, #28]
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	61bb      	str	r3, [r7, #24]
   return(result);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	461a      	mov	r2, r3
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f001 f822 	bl	800736c <UART_Start_Receive_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	e000      	b.n	800632e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3728      	adds	r7, #40	@ 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40008000 	.word	0x40008000

0800633c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b0ba      	sub	sp, #232	@ 0xe8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006366:	f640 030f 	movw	r3, #2063	@ 0x80f
 800636a:	4013      	ands	r3, r2
 800636c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11b      	bne.n	80063b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d015      	beq.n	80063b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8300 	beq.w	80069a6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
      }
      return;
 80063ae:	e2fa      	b.n	80069a6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8123 	beq.w	8006600 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80063ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063be:	4b8d      	ldr	r3, [pc, #564]	@ (80065f4 <HAL_UART_IRQHandler+0x2b8>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063ca:	4b8b      	ldr	r3, [pc, #556]	@ (80065f8 <HAL_UART_IRQHandler+0x2bc>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8116 	beq.w	8006600 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d011      	beq.n	8006404 <HAL_UART_IRQHandler+0xc8>
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	f043 0201 	orr.w	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <HAL_UART_IRQHandler+0xf8>
 8006410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2202      	movs	r2, #2
 8006422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	f043 0204 	orr.w	r2, r3, #4
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d011      	beq.n	8006464 <HAL_UART_IRQHandler+0x128>
 8006440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2204      	movs	r2, #4
 8006452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645a:	f043 0202 	orr.w	r2, r3, #2
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d017      	beq.n	80064a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800647c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006480:	4b5c      	ldr	r3, [pc, #368]	@ (80065f4 <HAL_UART_IRQHandler+0x2b8>)
 8006482:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2208      	movs	r2, #8
 800648e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006496:	f043 0208 	orr.w	r2, r3, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d012      	beq.n	80064d2 <HAL_UART_IRQHandler+0x196>
 80064ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c8:	f043 0220 	orr.w	r2, r3, #32
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8266 	beq.w	80069aa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d013      	beq.n	8006512 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d105      	bne.n	8006502 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006526:	2b40      	cmp	r3, #64	@ 0x40
 8006528:	d005      	beq.n	8006536 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800652a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800652e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006532:	2b00      	cmp	r3, #0
 8006534:	d054      	beq.n	80065e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 f83a 	bl	80075b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006546:	2b40      	cmp	r3, #64	@ 0x40
 8006548:	d146      	bne.n	80065d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006576:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800657a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800658e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1d9      	bne.n	800654a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d017      	beq.n	80065d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a6:	4a15      	ldr	r2, [pc, #84]	@ (80065fc <HAL_UART_IRQHandler+0x2c0>)
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fc fd1c 	bl	8002fee <HAL_DMA_Abort_IT>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d019      	beq.n	80065f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80065ca:	4610      	mov	r0, r2
 80065cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ce:	e00f      	b.n	80065f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f9ff 	bl	80069d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d6:	e00b      	b.n	80065f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f9fb 	bl	80069d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065de:	e007      	b.n	80065f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f9f7 	bl	80069d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80065ee:	e1dc      	b.n	80069aa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	bf00      	nop
    return;
 80065f2:	e1da      	b.n	80069aa <HAL_UART_IRQHandler+0x66e>
 80065f4:	10000001 	.word	0x10000001
 80065f8:	04000120 	.word	0x04000120
 80065fc:	0800767d 	.word	0x0800767d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006604:	2b01      	cmp	r3, #1
 8006606:	f040 8170 	bne.w	80068ea <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660e:	f003 0310 	and.w	r3, r3, #16
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8169 	beq.w	80068ea <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8162 	beq.w	80068ea <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2210      	movs	r2, #16
 800662c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	f040 80d8 	bne.w	80067ee <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800664c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80af 	beq.w	80067b4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800665c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006660:	429a      	cmp	r2, r3
 8006662:	f080 80a7 	bcs.w	80067b4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800666c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 8087 	bne.w	8006792 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800669c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1da      	bne.n	8006684 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066e0:	f023 0301 	bic.w	r3, r3, #1
 80066e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3308      	adds	r3, #8
 80066ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e1      	bne.n	80066ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800671a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800671c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800672e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006730:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006734:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800673c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e3      	bne.n	800670a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800675e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006760:	f023 0310 	bic.w	r3, r3, #16
 8006764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006772:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006774:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006778:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e4      	bne.n	8006750 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678c:	4618      	mov	r0, r3
 800678e:	f7fc fbd5 	bl	8002f3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f91b 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80067b2:	e0fc      	b.n	80069ae <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067be:	429a      	cmp	r2, r3
 80067c0:	f040 80f5 	bne.w	80069ae <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	f040 80eb 	bne.w	80069ae <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f8fe 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
      return;
 80067ec:	e0df      	b.n	80069ae <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80d1 	beq.w	80069b2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80cc 	beq.w	80069b2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800682e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800683c:	647b      	str	r3, [r7, #68]	@ 0x44
 800683e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e4      	bne.n	800681a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	623b      	str	r3, [r7, #32]
   return(result);
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006878:	633a      	str	r2, [r7, #48]	@ 0x30
 800687a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800687e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e1      	bne.n	8006850 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 0310 	bic.w	r3, r3, #16
 80068b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	69b9      	ldr	r1, [r7, #24]
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	617b      	str	r3, [r7, #20]
   return(result);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e4      	bne.n	80068a0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f880 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068e8:	e063      	b.n	80069b2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00e      	beq.n	8006914 <HAL_UART_IRQHandler+0x5d8>
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800690a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 fc17 	bl	8008140 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006912:	e051      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d014      	beq.n	800694a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006928:	2b00      	cmp	r3, #0
 800692a:	d105      	bne.n	8006938 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800692c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006930:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800693c:	2b00      	cmp	r3, #0
 800693e:	d03a      	beq.n	80069b6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
    }
    return;
 8006948:	e035      	b.n	80069b6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_UART_IRQHandler+0x62e>
 8006956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fea0 	bl	80076a8 <UART_EndTransmit_IT>
    return;
 8006968:	e026      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_UART_IRQHandler+0x64e>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fbf0 	bl	8008168 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006988:	e016      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d010      	beq.n	80069b8 <HAL_UART_IRQHandler+0x67c>
 8006996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699a:	2b00      	cmp	r3, #0
 800699c:	da0c      	bge.n	80069b8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 fbd8 	bl	8008154 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069a4:	e008      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80069a6:	bf00      	nop
 80069a8:	e006      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80069aa:	bf00      	nop
 80069ac:	e004      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80069ae:	bf00      	nop
 80069b0:	e002      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80069b6:	bf00      	nop
  }
}
 80069b8:	37e8      	adds	r7, #232	@ 0xe8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop

080069c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a04:	b08c      	sub	sp, #48	@ 0x30
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4baa      	ldr	r3, [pc, #680]	@ (8006cd8 <UART_SetConfig+0x2d8>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a9f      	ldr	r2, [pc, #636]	@ (8006cdc <UART_SetConfig+0x2dc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d004      	beq.n	8006a6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	6812      	ldr	r2, [r2, #0]
 8006a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a80:	430b      	orrs	r3, r1
 8006a82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8a:	f023 010f 	bic.w	r1, r3, #15
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a90      	ldr	r2, [pc, #576]	@ (8006ce0 <UART_SetConfig+0x2e0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d125      	bne.n	8006af0 <UART_SetConfig+0xf0>
 8006aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce4 <UART_SetConfig+0x2e4>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d81a      	bhi.n	8006ae8 <UART_SetConfig+0xe8>
 8006ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <UART_SetConfig+0xb8>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ace:	e116      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad6:	e112      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ad8:	2304      	movs	r3, #4
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ade:	e10e      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae6:	e10a      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aee:	e106      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ce8 <UART_SetConfig+0x2e8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d138      	bne.n	8006b6c <UART_SetConfig+0x16c>
 8006afa:	4b7a      	ldr	r3, [pc, #488]	@ (8006ce4 <UART_SetConfig+0x2e4>)
 8006afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b00:	f003 030c 	and.w	r3, r3, #12
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	d82d      	bhi.n	8006b64 <UART_SetConfig+0x164>
 8006b08:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <UART_SetConfig+0x110>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b45 	.word	0x08006b45
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	08006b65 	.word	0x08006b65
 8006b1c:	08006b65 	.word	0x08006b65
 8006b20:	08006b55 	.word	0x08006b55
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b65 	.word	0x08006b65
 8006b2c:	08006b65 	.word	0x08006b65
 8006b30:	08006b4d 	.word	0x08006b4d
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b5d 	.word	0x08006b5d
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4a:	e0d8      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b52:	e0d4      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5a:	e0d0      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b62:	e0cc      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6a:	e0c8      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a5e      	ldr	r2, [pc, #376]	@ (8006cec <UART_SetConfig+0x2ec>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d125      	bne.n	8006bc2 <UART_SetConfig+0x1c2>
 8006b76:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce4 <UART_SetConfig+0x2e4>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b80:	2b30      	cmp	r3, #48	@ 0x30
 8006b82:	d016      	beq.n	8006bb2 <UART_SetConfig+0x1b2>
 8006b84:	2b30      	cmp	r3, #48	@ 0x30
 8006b86:	d818      	bhi.n	8006bba <UART_SetConfig+0x1ba>
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d00a      	beq.n	8006ba2 <UART_SetConfig+0x1a2>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d814      	bhi.n	8006bba <UART_SetConfig+0x1ba>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <UART_SetConfig+0x19a>
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d008      	beq.n	8006baa <UART_SetConfig+0x1aa>
 8006b98:	e00f      	b.n	8006bba <UART_SetConfig+0x1ba>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba0:	e0ad      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba8:	e0a9      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006baa:	2304      	movs	r3, #4
 8006bac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb0:	e0a5      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb8:	e0a1      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bba:	2310      	movs	r3, #16
 8006bbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc0:	e09d      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a4a      	ldr	r2, [pc, #296]	@ (8006cf0 <UART_SetConfig+0x2f0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d125      	bne.n	8006c18 <UART_SetConfig+0x218>
 8006bcc:	4b45      	ldr	r3, [pc, #276]	@ (8006ce4 <UART_SetConfig+0x2e4>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bd8:	d016      	beq.n	8006c08 <UART_SetConfig+0x208>
 8006bda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bdc:	d818      	bhi.n	8006c10 <UART_SetConfig+0x210>
 8006bde:	2b80      	cmp	r3, #128	@ 0x80
 8006be0:	d00a      	beq.n	8006bf8 <UART_SetConfig+0x1f8>
 8006be2:	2b80      	cmp	r3, #128	@ 0x80
 8006be4:	d814      	bhi.n	8006c10 <UART_SetConfig+0x210>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <UART_SetConfig+0x1f0>
 8006bea:	2b40      	cmp	r3, #64	@ 0x40
 8006bec:	d008      	beq.n	8006c00 <UART_SetConfig+0x200>
 8006bee:	e00f      	b.n	8006c10 <UART_SetConfig+0x210>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf6:	e082      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfe:	e07e      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c00:	2304      	movs	r3, #4
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c06:	e07a      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e076      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e072      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a35      	ldr	r2, [pc, #212]	@ (8006cf4 <UART_SetConfig+0x2f4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d12a      	bne.n	8006c78 <UART_SetConfig+0x278>
 8006c22:	4b30      	ldr	r3, [pc, #192]	@ (8006ce4 <UART_SetConfig+0x2e4>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c30:	d01a      	beq.n	8006c68 <UART_SetConfig+0x268>
 8006c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c36:	d81b      	bhi.n	8006c70 <UART_SetConfig+0x270>
 8006c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c3c:	d00c      	beq.n	8006c58 <UART_SetConfig+0x258>
 8006c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c42:	d815      	bhi.n	8006c70 <UART_SetConfig+0x270>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <UART_SetConfig+0x250>
 8006c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c4c:	d008      	beq.n	8006c60 <UART_SetConfig+0x260>
 8006c4e:	e00f      	b.n	8006c70 <UART_SetConfig+0x270>
 8006c50:	2300      	movs	r3, #0
 8006c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c56:	e052      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	e04e      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c60:	2304      	movs	r3, #4
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	e04a      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c68:	2308      	movs	r3, #8
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6e:	e046      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e042      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a17      	ldr	r2, [pc, #92]	@ (8006cdc <UART_SetConfig+0x2dc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d13a      	bne.n	8006cf8 <UART_SetConfig+0x2f8>
 8006c82:	4b18      	ldr	r3, [pc, #96]	@ (8006ce4 <UART_SetConfig+0x2e4>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c90:	d01a      	beq.n	8006cc8 <UART_SetConfig+0x2c8>
 8006c92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c96:	d81b      	bhi.n	8006cd0 <UART_SetConfig+0x2d0>
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c9c:	d00c      	beq.n	8006cb8 <UART_SetConfig+0x2b8>
 8006c9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ca2:	d815      	bhi.n	8006cd0 <UART_SetConfig+0x2d0>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <UART_SetConfig+0x2b0>
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cac:	d008      	beq.n	8006cc0 <UART_SetConfig+0x2c0>
 8006cae:	e00f      	b.n	8006cd0 <UART_SetConfig+0x2d0>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	e022      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	e01e      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e01a      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cce:	e016      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd6:	e012      	b.n	8006cfe <UART_SetConfig+0x2fe>
 8006cd8:	cfff69f3 	.word	0xcfff69f3
 8006cdc:	40008000 	.word	0x40008000
 8006ce0:	40013800 	.word	0x40013800
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	40004400 	.word	0x40004400
 8006cec:	40004800 	.word	0x40004800
 8006cf0:	40004c00 	.word	0x40004c00
 8006cf4:	40005000 	.word	0x40005000
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4aae      	ldr	r2, [pc, #696]	@ (8006fbc <UART_SetConfig+0x5bc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	f040 8097 	bne.w	8006e38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d823      	bhi.n	8006d5a <UART_SetConfig+0x35a>
 8006d12:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <UART_SetConfig+0x318>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d5b 	.word	0x08006d5b
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d5b 	.word	0x08006d5b
 8006d28:	08006d4b 	.word	0x08006d4b
 8006d2c:	08006d5b 	.word	0x08006d5b
 8006d30:	08006d5b 	.word	0x08006d5b
 8006d34:	08006d5b 	.word	0x08006d5b
 8006d38:	08006d53 	.word	0x08006d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d3c:	f7fd f8ec 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d42:	e010      	b.n	8006d66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d44:	4b9e      	ldr	r3, [pc, #632]	@ (8006fc0 <UART_SetConfig+0x5c0>)
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d48:	e00d      	b.n	8006d66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4a:	f7fd f877 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8006d4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d50:	e009      	b.n	8006d66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d58:	e005      	b.n	8006d66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8130 	beq.w	8006fce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	4a94      	ldr	r2, [pc, #592]	@ (8006fc4 <UART_SetConfig+0x5c4>)
 8006d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	4413      	add	r3, r2
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d305      	bcc.n	8006d9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d903      	bls.n	8006da6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006da4:	e113      	b.n	8006fce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	2200      	movs	r2, #0
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	60fa      	str	r2, [r7, #12]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	4a84      	ldr	r2, [pc, #528]	@ (8006fc4 <UART_SetConfig+0x5c4>)
 8006db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2200      	movs	r2, #0
 8006dbc:	603b      	str	r3, [r7, #0]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dc8:	f7f9 fa8a 	bl	80002e0 <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	020b      	lsls	r3, r1, #8
 8006dde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006de2:	0202      	lsls	r2, r0, #8
 8006de4:	6979      	ldr	r1, [r7, #20]
 8006de6:	6849      	ldr	r1, [r1, #4]
 8006de8:	0849      	lsrs	r1, r1, #1
 8006dea:	2000      	movs	r0, #0
 8006dec:	460c      	mov	r4, r1
 8006dee:	4605      	mov	r5, r0
 8006df0:	eb12 0804 	adds.w	r8, r2, r4
 8006df4:	eb43 0905 	adc.w	r9, r3, r5
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	469a      	mov	sl, r3
 8006e00:	4693      	mov	fp, r2
 8006e02:	4652      	mov	r2, sl
 8006e04:	465b      	mov	r3, fp
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 fa69 	bl	80002e0 <__aeabi_uldivmod>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4613      	mov	r3, r2
 8006e14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e1c:	d308      	bcc.n	8006e30 <UART_SetConfig+0x430>
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e24:	d204      	bcs.n	8006e30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a3a      	ldr	r2, [r7, #32]
 8006e2c:	60da      	str	r2, [r3, #12]
 8006e2e:	e0ce      	b.n	8006fce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e36:	e0ca      	b.n	8006fce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e40:	d166      	bne.n	8006f10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d827      	bhi.n	8006e9a <UART_SetConfig+0x49a>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <UART_SetConfig+0x450>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	08006e9b 	.word	0x08006e9b
 8006e60:	08006e8b 	.word	0x08006e8b
 8006e64:	08006e9b 	.word	0x08006e9b
 8006e68:	08006e9b 	.word	0x08006e9b
 8006e6c:	08006e9b 	.word	0x08006e9b
 8006e70:	08006e93 	.word	0x08006e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e74:	f7fd f850 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8006e78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e7a:	e014      	b.n	8006ea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e7c:	f7fd f862 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8006e80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e82:	e010      	b.n	8006ea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e84:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc0 <UART_SetConfig+0x5c0>)
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e88:	e00d      	b.n	8006ea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8a:	f7fc ffd7 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8006e8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e90:	e009      	b.n	8006ea6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e98:	e005      	b.n	8006ea6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8090 	beq.w	8006fce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	4a44      	ldr	r2, [pc, #272]	@ (8006fc4 <UART_SetConfig+0x5c4>)
 8006eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec0:	005a      	lsls	r2, r3, #1
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	441a      	add	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	d916      	bls.n	8006f08 <UART_SetConfig+0x508>
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee0:	d212      	bcs.n	8006f08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f023 030f 	bic.w	r3, r3, #15
 8006eea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	8bfb      	ldrh	r3, [r7, #30]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	8bfa      	ldrh	r2, [r7, #30]
 8006f04:	60da      	str	r2, [r3, #12]
 8006f06:	e062      	b.n	8006fce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f0e:	e05e      	b.n	8006fce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d828      	bhi.n	8006f6a <UART_SetConfig+0x56a>
 8006f18:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <UART_SetConfig+0x520>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f55 	.word	0x08006f55
 8006f2c:	08006f6b 	.word	0x08006f6b
 8006f30:	08006f5b 	.word	0x08006f5b
 8006f34:	08006f6b 	.word	0x08006f6b
 8006f38:	08006f6b 	.word	0x08006f6b
 8006f3c:	08006f6b 	.word	0x08006f6b
 8006f40:	08006f63 	.word	0x08006f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f44:	f7fc ffe8 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8006f48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f4a:	e014      	b.n	8006f76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f4c:	f7fc fffa 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8006f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f52:	e010      	b.n	8006f76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f54:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc0 <UART_SetConfig+0x5c0>)
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f58:	e00d      	b.n	8006f76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f5a:	f7fc ff6f 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8006f5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f60:	e009      	b.n	8006f76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f68:	e005      	b.n	8006f76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f74:	bf00      	nop
    }

    if (pclk != 0U)
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d028      	beq.n	8006fce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	4a10      	ldr	r2, [pc, #64]	@ (8006fc4 <UART_SetConfig+0x5c4>)
 8006f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	441a      	add	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	2b0f      	cmp	r3, #15
 8006fa4:	d910      	bls.n	8006fc8 <UART_SetConfig+0x5c8>
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fac:	d20c      	bcs.n	8006fc8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
 8006fb8:	e009      	b.n	8006fce <UART_SetConfig+0x5ce>
 8006fba:	bf00      	nop
 8006fbc:	40008000 	.word	0x40008000
 8006fc0:	00f42400 	.word	0x00f42400
 8006fc4:	080096cc 	.word	0x080096cc
      }
      else
      {
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3730      	adds	r7, #48	@ 0x30
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01a      	beq.n	800710e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070f6:	d10a      	bne.n	800710e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	605a      	str	r2, [r3, #4]
  }
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b098      	sub	sp, #96	@ 0x60
 8007140:	af02      	add	r7, sp, #8
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800714c:	f7fa fce8 	bl	8001b20 <HAL_GetTick>
 8007150:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b08      	cmp	r3, #8
 800715e:	d12f      	bne.n	80071c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007160:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007168:	2200      	movs	r2, #0
 800716a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f88e 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d022      	beq.n	80071c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007198:	647b      	str	r3, [r7, #68]	@ 0x44
 800719a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800719e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e6      	bne.n	800717a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e063      	b.n	8007288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d149      	bne.n	8007262 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071d6:	2200      	movs	r2, #0
 80071d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f857 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d03c      	beq.n	8007262 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	623b      	str	r3, [r7, #32]
   return(result);
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007206:	633b      	str	r3, [r7, #48]	@ 0x30
 8007208:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800720c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e6      	bne.n	80071e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	60fb      	str	r3, [r7, #12]
   return(result);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800723a:	61fa      	str	r2, [r7, #28]
 800723c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	69b9      	ldr	r1, [r7, #24]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	617b      	str	r3, [r7, #20]
   return(result);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e012      	b.n	8007288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3758      	adds	r7, #88	@ 0x58
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a0:	e04f      	b.n	8007342 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d04b      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072aa:	f7fa fc39 	bl	8001b20 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d302      	bcc.n	80072c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e04e      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d037      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b80      	cmp	r3, #128	@ 0x80
 80072d6:	d034      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b40      	cmp	r3, #64	@ 0x40
 80072dc:	d031      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d110      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2208      	movs	r2, #8
 80072f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f95b 	bl	80075b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2208      	movs	r2, #8
 80072fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e029      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800731c:	d111      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f941 	bl	80075b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e00f      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69da      	ldr	r2, [r3, #28]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	429a      	cmp	r2, r3
 8007350:	bf0c      	ite	eq
 8007352:	2301      	moveq	r3, #1
 8007354:	2300      	movne	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	429a      	cmp	r2, r3
 800735e:	d0a0      	beq.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736c:	b480      	push	{r7}
 800736e:	b0a3      	sub	sp, #140	@ 0x8c
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739e:	d10e      	bne.n	80073be <UART_Start_Receive_IT+0x52>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d105      	bne.n	80073b4 <UART_Start_Receive_IT+0x48>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073b2:	e02d      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	22ff      	movs	r2, #255	@ 0xff
 80073b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073bc:	e028      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <UART_Start_Receive_IT+0x76>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <UART_Start_Receive_IT+0x6c>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	22ff      	movs	r2, #255	@ 0xff
 80073d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073d6:	e01b      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	227f      	movs	r2, #127	@ 0x7f
 80073dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073e0:	e016      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ea:	d10d      	bne.n	8007408 <UART_Start_Receive_IT+0x9c>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <UART_Start_Receive_IT+0x92>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	227f      	movs	r2, #127	@ 0x7f
 80073f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073fc:	e008      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	223f      	movs	r2, #63	@ 0x3f
 8007402:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007406:	e003      	b.n	8007410 <UART_Start_Receive_IT+0xa4>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2222      	movs	r2, #34	@ 0x22
 800741c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007430:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007444:	673a      	str	r2, [r7, #112]	@ 0x70
 8007446:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800744a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e3      	bne.n	8007420 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800745c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007460:	d14f      	bne.n	8007502 <UART_Start_Receive_IT+0x196>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007468:	88fa      	ldrh	r2, [r7, #6]
 800746a:	429a      	cmp	r2, r3
 800746c:	d349      	bcc.n	8007502 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007476:	d107      	bne.n	8007488 <UART_Start_Receive_IT+0x11c>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4a47      	ldr	r2, [pc, #284]	@ (80075a0 <UART_Start_Receive_IT+0x234>)
 8007484:	675a      	str	r2, [r3, #116]	@ 0x74
 8007486:	e002      	b.n	800748e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a46      	ldr	r2, [pc, #280]	@ (80075a4 <UART_Start_Receive_IT+0x238>)
 800748c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01a      	beq.n	80074cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80074a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80074be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80074c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e4      	bne.n	8007496 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3308      	adds	r3, #8
 80074ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80074ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80074ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80074fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e5      	bne.n	80074cc <UART_Start_Receive_IT+0x160>
 8007500:	e046      	b.n	8007590 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750a:	d107      	bne.n	800751c <UART_Start_Receive_IT+0x1b0>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d103      	bne.n	800751c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a24      	ldr	r2, [pc, #144]	@ (80075a8 <UART_Start_Receive_IT+0x23c>)
 8007518:	675a      	str	r2, [r3, #116]	@ 0x74
 800751a:	e002      	b.n	8007522 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4a23      	ldr	r2, [pc, #140]	@ (80075ac <UART_Start_Receive_IT+0x240>)
 8007520:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d019      	beq.n	800755e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800753e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007548:	637b      	str	r3, [r7, #52]	@ 0x34
 800754a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800754e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <UART_Start_Receive_IT+0x1be>
 800755c:	e018      	b.n	8007590 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	613b      	str	r3, [r7, #16]
   return(result);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f043 0320 	orr.w	r3, r3, #32
 8007572:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800757c:	623b      	str	r3, [r7, #32]
 800757e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	69f9      	ldr	r1, [r7, #28]
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	61bb      	str	r3, [r7, #24]
   return(result);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	378c      	adds	r7, #140	@ 0x8c
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	08007dd5 	.word	0x08007dd5
 80075a4:	08007a71 	.word	0x08007a71
 80075a8:	080078b9 	.word	0x080078b9
 80075ac:	08007701 	.word	0x08007701

080075b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b095      	sub	sp, #84	@ 0x54
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80075d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e6      	bne.n	80075b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800760e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e3      	bne.n	80075ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007626:	2b01      	cmp	r3, #1
 8007628:	d118      	bne.n	800765c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	60bb      	str	r3, [r7, #8]
   return(result);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0310 	bic.w	r3, r3, #16
 800763e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6979      	ldr	r1, [r7, #20]
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	613b      	str	r3, [r7, #16]
   return(result);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007670:	bf00      	nop
 8007672:	3754      	adds	r7, #84	@ 0x54
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff f99a 	bl	80069d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076a0:	bf00      	nop
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076c4:	61fb      	str	r3, [r7, #28]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6979      	ldr	r1, [r7, #20]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	613b      	str	r3, [r7, #16]
   return(result);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e6      	bne.n	80076b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff f965 	bl	80069c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f6:	bf00      	nop
 80076f8:	3720      	adds	r7, #32
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b09c      	sub	sp, #112	@ 0x70
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800770e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007718:	2b22      	cmp	r3, #34	@ 0x22
 800771a:	f040 80be 	bne.w	800789a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007728:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800772c:	b2d9      	uxtb	r1, r3
 800772e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007732:	b2da      	uxtb	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007738:	400a      	ands	r2, r1
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 80a1 	bne.w	80078aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800777c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007786:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007788:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800778c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80077bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a33      	ldr	r2, [pc, #204]	@ (80078b4 <UART_RxISR_8BIT+0x1b4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d01f      	beq.n	800782c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d018      	beq.n	800782c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	623b      	str	r3, [r7, #32]
   return(result);
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800780e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007818:	633b      	str	r3, [r7, #48]	@ 0x30
 800781a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800781e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e6      	bne.n	80077fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d12e      	bne.n	8007892 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	60fb      	str	r3, [r7, #12]
   return(result);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0310 	bic.w	r3, r3, #16
 800784e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	617b      	str	r3, [r7, #20]
   return(result);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b10      	cmp	r3, #16
 8007878:	d103      	bne.n	8007882 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2210      	movs	r2, #16
 8007880:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff f8ac 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007890:	e00b      	b.n	80078aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7f9 faf8 	bl	8000e88 <HAL_UART_RxCpltCallback>
}
 8007898:	e007      	b.n	80078aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699a      	ldr	r2, [r3, #24]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0208 	orr.w	r2, r2, #8
 80078a8:	619a      	str	r2, [r3, #24]
}
 80078aa:	bf00      	nop
 80078ac:	3770      	adds	r7, #112	@ 0x70
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40008000 	.word	0x40008000

080078b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b09c      	sub	sp, #112	@ 0x70
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078d0:	2b22      	cmp	r3, #34	@ 0x22
 80078d2:	f040 80be 	bne.w	8007a52 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80078e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80078ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80078ee:	4013      	ands	r3, r2
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078fa:	1c9a      	adds	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 80a1 	bne.w	8007a62 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800792e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007934:	667b      	str	r3, [r7, #100]	@ 0x64
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800793e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007940:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007944:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800794c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e6      	bne.n	8007920 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	663b      	str	r3, [r7, #96]	@ 0x60
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007972:	643a      	str	r2, [r7, #64]	@ 0x40
 8007974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007978:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a33      	ldr	r2, [pc, #204]	@ (8007a6c <UART_RxISR_16BIT+0x1b4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d01f      	beq.n	80079e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d018      	beq.n	80079e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d12e      	bne.n	8007a4a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f023 0310 	bic.w	r3, r3, #16
 8007a06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e6      	bne.n	80079f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f003 0310 	and.w	r3, r3, #16
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d103      	bne.n	8007a3a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2210      	movs	r2, #16
 8007a38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fe ffd0 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a48:	e00b      	b.n	8007a62 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7f9 fa1c 	bl	8000e88 <HAL_UART_RxCpltCallback>
}
 8007a50:	e007      	b.n	8007a62 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0208 	orr.w	r2, r2, #8
 8007a60:	619a      	str	r2, [r3, #24]
}
 8007a62:	bf00      	nop
 8007a64:	3770      	adds	r7, #112	@ 0x70
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40008000 	.word	0x40008000

08007a70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b0ac      	sub	sp, #176	@ 0xb0
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aa6:	2b22      	cmp	r3, #34	@ 0x22
 8007aa8:	f040 8183 	bne.w	8007db2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ab2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ab6:	e126      	b.n	8007d06 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ac2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007ac6:	b2d9      	uxtb	r1, r3
 8007ac8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad2:	400a      	ands	r2, r1
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d053      	beq.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d011      	beq.n	8007b3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2201      	movs	r2, #1
 8007b28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b30:	f043 0201 	orr.w	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d011      	beq.n	8007b6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2202      	movs	r2, #2
 8007b58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b60:	f043 0204 	orr.w	r2, r3, #4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d011      	beq.n	8007b9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00b      	beq.n	8007b9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2204      	movs	r2, #4
 8007b88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b90:	f043 0202 	orr.w	r2, r3, #2
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7fe ff15 	bl	80069d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 80a3 	bne.w	8007d06 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007be4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007be8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007bf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e4      	bne.n	8007bc0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c0c:	f023 0301 	bic.w	r3, r3, #1
 8007c10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c1e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007c20:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007c24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e1      	bne.n	8007bf6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a60      	ldr	r2, [pc, #384]	@ (8007dcc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d021      	beq.n	8007c94 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01a      	beq.n	8007c94 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c80:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c82:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e4      	bne.n	8007c5e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d130      	bne.n	8007cfe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e4      	bne.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d103      	bne.n	8007cee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2210      	movs	r2, #16
 8007cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fe fe76 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007cfc:	e00e      	b.n	8007d1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7f9 f8c2 	bl	8000e88 <HAL_UART_RxCpltCallback>
        break;
 8007d04:	e00a      	b.n	8007d1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d06:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d006      	beq.n	8007d1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f47f aece 	bne.w	8007ab8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d22:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d049      	beq.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d34:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d242      	bcs.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e3      	bne.n	8007d3c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a16      	ldr	r2, [pc, #88]	@ (8007dd0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007d78:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f043 0320 	orr.w	r3, r3, #32
 8007d8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6979      	ldr	r1, [r7, #20]
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	613b      	str	r3, [r7, #16]
   return(result);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e4      	bne.n	8007d7a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007db0:	e007      	b.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 0208 	orr.w	r2, r2, #8
 8007dc0:	619a      	str	r2, [r3, #24]
}
 8007dc2:	bf00      	nop
 8007dc4:	37b0      	adds	r7, #176	@ 0xb0
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	40008000 	.word	0x40008000
 8007dd0:	08007701 	.word	0x08007701

08007dd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b0ae      	sub	sp, #184	@ 0xb8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007de2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e0a:	2b22      	cmp	r3, #34	@ 0x22
 8007e0c:	f040 8187 	bne.w	800811e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e16:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e1a:	e12a      	b.n	8008072 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007e32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007e36:	4013      	ands	r3, r2
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d053      	beq.n	8007f1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d011      	beq.n	8007ea2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e98:	f043 0201 	orr.w	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d011      	beq.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec8:	f043 0204 	orr.w	r2, r3, #4
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ed6:	f003 0304 	and.w	r3, r3, #4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2204      	movs	r2, #4
 8007ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef8:	f043 0202 	orr.w	r2, r3, #2
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d006      	beq.n	8007f1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7fe fd61 	bl	80069d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f040 80a5 	bne.w	8008072 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e2      	bne.n	8007f28 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e1      	bne.n	8007f62 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a60      	ldr	r2, [pc, #384]	@ (8008138 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d021      	beq.n	8008000 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01a      	beq.n	8008000 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ff2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e4      	bne.n	8007fca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d130      	bne.n	800806a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800801c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801e:	f023 0310 	bic.w	r3, r3, #16
 8008022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008030:	647b      	str	r3, [r7, #68]	@ 0x44
 8008032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800803e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e4      	bne.n	800800e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f003 0310 	and.w	r3, r3, #16
 800804e:	2b10      	cmp	r3, #16
 8008050:	d103      	bne.n	800805a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2210      	movs	r2, #16
 8008058:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fe fcc0 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008068:	e00e      	b.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7f8 ff0c 	bl	8000e88 <HAL_UART_RxCpltCallback>
        break;
 8008070:	e00a      	b.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008072:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008076:	2b00      	cmp	r3, #0
 8008078:	d006      	beq.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800807a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	f47f aeca 	bne.w	8007e1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800808e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008092:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008096:	2b00      	cmp	r3, #0
 8008098:	d049      	beq.n	800812e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080a0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d242      	bcs.n	800812e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	623b      	str	r3, [r7, #32]
   return(result);
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3308      	adds	r3, #8
 80080c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80080cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80080ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e3      	bne.n	80080a8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a16      	ldr	r2, [pc, #88]	@ (800813c <UART_RxISR_16BIT_FIFOEN+0x368>)
 80080e4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f043 0320 	orr.w	r3, r3, #32
 80080fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008108:	61fb      	str	r3, [r7, #28]
 800810a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	69b9      	ldr	r1, [r7, #24]
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	617b      	str	r3, [r7, #20]
   return(result);
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e4      	bne.n	80080e6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800811c:	e007      	b.n	800812e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	699a      	ldr	r2, [r3, #24]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0208 	orr.w	r2, r2, #8
 800812c:	619a      	str	r2, [r3, #24]
}
 800812e:	bf00      	nop
 8008130:	37b8      	adds	r7, #184	@ 0xb8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	40008000 	.word	0x40008000
 800813c:	080078b9 	.word	0x080078b9

08008140 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_UARTEx_DisableFifoMode+0x16>
 800818e:	2302      	movs	r3, #2
 8008190:	e027      	b.n	80081e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2224      	movs	r2, #36	@ 0x24
 800819e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0201 	bic.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008202:	2302      	movs	r3, #2
 8008204:	e02d      	b.n	8008262 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2224      	movs	r2, #36	@ 0x24
 8008212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f850 	bl	80082e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800827e:	2302      	movs	r3, #2
 8008280:	e02d      	b.n	80082de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2224      	movs	r2, #36	@ 0x24
 800828e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0201 	bic.w	r2, r2, #1
 80082a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f812 	bl	80082e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008308:	e031      	b.n	800836e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800830a:	2308      	movs	r3, #8
 800830c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800830e:	2308      	movs	r3, #8
 8008310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	0e5b      	lsrs	r3, r3, #25
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	0f5b      	lsrs	r3, r3, #29
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	7b3a      	ldrb	r2, [r7, #12]
 8008336:	4911      	ldr	r1, [pc, #68]	@ (800837c <UARTEx_SetNbDataToProcess+0x94>)
 8008338:	5c8a      	ldrb	r2, [r1, r2]
 800833a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800833e:	7b3a      	ldrb	r2, [r7, #12]
 8008340:	490f      	ldr	r1, [pc, #60]	@ (8008380 <UARTEx_SetNbDataToProcess+0x98>)
 8008342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008344:	fb93 f3f2 	sdiv	r3, r3, r2
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	7b7a      	ldrb	r2, [r7, #13]
 8008354:	4909      	ldr	r1, [pc, #36]	@ (800837c <UARTEx_SetNbDataToProcess+0x94>)
 8008356:	5c8a      	ldrb	r2, [r1, r2]
 8008358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800835c:	7b7a      	ldrb	r2, [r7, #13]
 800835e:	4908      	ldr	r1, [pc, #32]	@ (8008380 <UARTEx_SetNbDataToProcess+0x98>)
 8008360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008362:	fb93 f3f2 	sdiv	r3, r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	080096e4 	.word	0x080096e4
 8008380:	080096ec 	.word	0x080096ec

08008384 <atoi>:
 8008384:	220a      	movs	r2, #10
 8008386:	2100      	movs	r1, #0
 8008388:	f000 b87a 	b.w	8008480 <strtol>

0800838c <_strtol_l.constprop.0>:
 800838c:	2b24      	cmp	r3, #36	@ 0x24
 800838e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008392:	4686      	mov	lr, r0
 8008394:	4690      	mov	r8, r2
 8008396:	d801      	bhi.n	800839c <_strtol_l.constprop.0+0x10>
 8008398:	2b01      	cmp	r3, #1
 800839a:	d106      	bne.n	80083aa <_strtol_l.constprop.0+0x1e>
 800839c:	f000 fa2a 	bl	80087f4 <__errno>
 80083a0:	2316      	movs	r3, #22
 80083a2:	6003      	str	r3, [r0, #0]
 80083a4:	2000      	movs	r0, #0
 80083a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083aa:	4834      	ldr	r0, [pc, #208]	@ (800847c <_strtol_l.constprop.0+0xf0>)
 80083ac:	460d      	mov	r5, r1
 80083ae:	462a      	mov	r2, r5
 80083b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083b4:	5d06      	ldrb	r6, [r0, r4]
 80083b6:	f016 0608 	ands.w	r6, r6, #8
 80083ba:	d1f8      	bne.n	80083ae <_strtol_l.constprop.0+0x22>
 80083bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80083be:	d12d      	bne.n	800841c <_strtol_l.constprop.0+0x90>
 80083c0:	782c      	ldrb	r4, [r5, #0]
 80083c2:	2601      	movs	r6, #1
 80083c4:	1c95      	adds	r5, r2, #2
 80083c6:	f033 0210 	bics.w	r2, r3, #16
 80083ca:	d109      	bne.n	80083e0 <_strtol_l.constprop.0+0x54>
 80083cc:	2c30      	cmp	r4, #48	@ 0x30
 80083ce:	d12a      	bne.n	8008426 <_strtol_l.constprop.0+0x9a>
 80083d0:	782a      	ldrb	r2, [r5, #0]
 80083d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083d6:	2a58      	cmp	r2, #88	@ 0x58
 80083d8:	d125      	bne.n	8008426 <_strtol_l.constprop.0+0x9a>
 80083da:	786c      	ldrb	r4, [r5, #1]
 80083dc:	2310      	movs	r3, #16
 80083de:	3502      	adds	r5, #2
 80083e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083e8:	2200      	movs	r2, #0
 80083ea:	fbbc f9f3 	udiv	r9, ip, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80083f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083f8:	2f09      	cmp	r7, #9
 80083fa:	d81b      	bhi.n	8008434 <_strtol_l.constprop.0+0xa8>
 80083fc:	463c      	mov	r4, r7
 80083fe:	42a3      	cmp	r3, r4
 8008400:	dd27      	ble.n	8008452 <_strtol_l.constprop.0+0xc6>
 8008402:	1c57      	adds	r7, r2, #1
 8008404:	d007      	beq.n	8008416 <_strtol_l.constprop.0+0x8a>
 8008406:	4581      	cmp	r9, r0
 8008408:	d320      	bcc.n	800844c <_strtol_l.constprop.0+0xc0>
 800840a:	d101      	bne.n	8008410 <_strtol_l.constprop.0+0x84>
 800840c:	45a2      	cmp	sl, r4
 800840e:	db1d      	blt.n	800844c <_strtol_l.constprop.0+0xc0>
 8008410:	fb00 4003 	mla	r0, r0, r3, r4
 8008414:	2201      	movs	r2, #1
 8008416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800841a:	e7eb      	b.n	80083f4 <_strtol_l.constprop.0+0x68>
 800841c:	2c2b      	cmp	r4, #43	@ 0x2b
 800841e:	bf04      	itt	eq
 8008420:	782c      	ldrbeq	r4, [r5, #0]
 8008422:	1c95      	addeq	r5, r2, #2
 8008424:	e7cf      	b.n	80083c6 <_strtol_l.constprop.0+0x3a>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1da      	bne.n	80083e0 <_strtol_l.constprop.0+0x54>
 800842a:	2c30      	cmp	r4, #48	@ 0x30
 800842c:	bf0c      	ite	eq
 800842e:	2308      	moveq	r3, #8
 8008430:	230a      	movne	r3, #10
 8008432:	e7d5      	b.n	80083e0 <_strtol_l.constprop.0+0x54>
 8008434:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008438:	2f19      	cmp	r7, #25
 800843a:	d801      	bhi.n	8008440 <_strtol_l.constprop.0+0xb4>
 800843c:	3c37      	subs	r4, #55	@ 0x37
 800843e:	e7de      	b.n	80083fe <_strtol_l.constprop.0+0x72>
 8008440:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008444:	2f19      	cmp	r7, #25
 8008446:	d804      	bhi.n	8008452 <_strtol_l.constprop.0+0xc6>
 8008448:	3c57      	subs	r4, #87	@ 0x57
 800844a:	e7d8      	b.n	80083fe <_strtol_l.constprop.0+0x72>
 800844c:	f04f 32ff 	mov.w	r2, #4294967295
 8008450:	e7e1      	b.n	8008416 <_strtol_l.constprop.0+0x8a>
 8008452:	1c53      	adds	r3, r2, #1
 8008454:	d108      	bne.n	8008468 <_strtol_l.constprop.0+0xdc>
 8008456:	2322      	movs	r3, #34	@ 0x22
 8008458:	f8ce 3000 	str.w	r3, [lr]
 800845c:	4660      	mov	r0, ip
 800845e:	f1b8 0f00 	cmp.w	r8, #0
 8008462:	d0a0      	beq.n	80083a6 <_strtol_l.constprop.0+0x1a>
 8008464:	1e69      	subs	r1, r5, #1
 8008466:	e006      	b.n	8008476 <_strtol_l.constprop.0+0xea>
 8008468:	b106      	cbz	r6, 800846c <_strtol_l.constprop.0+0xe0>
 800846a:	4240      	negs	r0, r0
 800846c:	f1b8 0f00 	cmp.w	r8, #0
 8008470:	d099      	beq.n	80083a6 <_strtol_l.constprop.0+0x1a>
 8008472:	2a00      	cmp	r2, #0
 8008474:	d1f6      	bne.n	8008464 <_strtol_l.constprop.0+0xd8>
 8008476:	f8c8 1000 	str.w	r1, [r8]
 800847a:	e794      	b.n	80083a6 <_strtol_l.constprop.0+0x1a>
 800847c:	080096f5 	.word	0x080096f5

08008480 <strtol>:
 8008480:	4613      	mov	r3, r2
 8008482:	460a      	mov	r2, r1
 8008484:	4601      	mov	r1, r0
 8008486:	4802      	ldr	r0, [pc, #8]	@ (8008490 <strtol+0x10>)
 8008488:	6800      	ldr	r0, [r0, #0]
 800848a:	f7ff bf7f 	b.w	800838c <_strtol_l.constprop.0>
 800848e:	bf00      	nop
 8008490:	20000018 	.word	0x20000018

08008494 <std>:
 8008494:	2300      	movs	r3, #0
 8008496:	b510      	push	{r4, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	e9c0 3300 	strd	r3, r3, [r0]
 800849e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084a2:	6083      	str	r3, [r0, #8]
 80084a4:	8181      	strh	r1, [r0, #12]
 80084a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80084a8:	81c2      	strh	r2, [r0, #14]
 80084aa:	6183      	str	r3, [r0, #24]
 80084ac:	4619      	mov	r1, r3
 80084ae:	2208      	movs	r2, #8
 80084b0:	305c      	adds	r0, #92	@ 0x5c
 80084b2:	f000 f8f4 	bl	800869e <memset>
 80084b6:	4b0d      	ldr	r3, [pc, #52]	@ (80084ec <std+0x58>)
 80084b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80084ba:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <std+0x5c>)
 80084bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084be:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <std+0x60>)
 80084c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <std+0x64>)
 80084c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80084c6:	4b0d      	ldr	r3, [pc, #52]	@ (80084fc <std+0x68>)
 80084c8:	6224      	str	r4, [r4, #32]
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d006      	beq.n	80084dc <std+0x48>
 80084ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084d2:	4294      	cmp	r4, r2
 80084d4:	d002      	beq.n	80084dc <std+0x48>
 80084d6:	33d0      	adds	r3, #208	@ 0xd0
 80084d8:	429c      	cmp	r4, r3
 80084da:	d105      	bne.n	80084e8 <std+0x54>
 80084dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f000 b9b0 	b.w	8008848 <__retarget_lock_init_recursive>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	08008619 	.word	0x08008619
 80084f0:	0800863b 	.word	0x0800863b
 80084f4:	08008673 	.word	0x08008673
 80084f8:	08008697 	.word	0x08008697
 80084fc:	2000044c 	.word	0x2000044c

08008500 <stdio_exit_handler>:
 8008500:	4a02      	ldr	r2, [pc, #8]	@ (800850c <stdio_exit_handler+0xc>)
 8008502:	4903      	ldr	r1, [pc, #12]	@ (8008510 <stdio_exit_handler+0x10>)
 8008504:	4803      	ldr	r0, [pc, #12]	@ (8008514 <stdio_exit_handler+0x14>)
 8008506:	f000 b869 	b.w	80085dc <_fwalk_sglue>
 800850a:	bf00      	nop
 800850c:	2000000c 	.word	0x2000000c
 8008510:	08008b95 	.word	0x08008b95
 8008514:	2000001c 	.word	0x2000001c

08008518 <cleanup_stdio>:
 8008518:	6841      	ldr	r1, [r0, #4]
 800851a:	4b0c      	ldr	r3, [pc, #48]	@ (800854c <cleanup_stdio+0x34>)
 800851c:	4299      	cmp	r1, r3
 800851e:	b510      	push	{r4, lr}
 8008520:	4604      	mov	r4, r0
 8008522:	d001      	beq.n	8008528 <cleanup_stdio+0x10>
 8008524:	f000 fb36 	bl	8008b94 <_fflush_r>
 8008528:	68a1      	ldr	r1, [r4, #8]
 800852a:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <cleanup_stdio+0x38>)
 800852c:	4299      	cmp	r1, r3
 800852e:	d002      	beq.n	8008536 <cleanup_stdio+0x1e>
 8008530:	4620      	mov	r0, r4
 8008532:	f000 fb2f 	bl	8008b94 <_fflush_r>
 8008536:	68e1      	ldr	r1, [r4, #12]
 8008538:	4b06      	ldr	r3, [pc, #24]	@ (8008554 <cleanup_stdio+0x3c>)
 800853a:	4299      	cmp	r1, r3
 800853c:	d004      	beq.n	8008548 <cleanup_stdio+0x30>
 800853e:	4620      	mov	r0, r4
 8008540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008544:	f000 bb26 	b.w	8008b94 <_fflush_r>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	bf00      	nop
 800854c:	2000044c 	.word	0x2000044c
 8008550:	200004b4 	.word	0x200004b4
 8008554:	2000051c 	.word	0x2000051c

08008558 <global_stdio_init.part.0>:
 8008558:	b510      	push	{r4, lr}
 800855a:	4b0b      	ldr	r3, [pc, #44]	@ (8008588 <global_stdio_init.part.0+0x30>)
 800855c:	4c0b      	ldr	r4, [pc, #44]	@ (800858c <global_stdio_init.part.0+0x34>)
 800855e:	4a0c      	ldr	r2, [pc, #48]	@ (8008590 <global_stdio_init.part.0+0x38>)
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	4620      	mov	r0, r4
 8008564:	2200      	movs	r2, #0
 8008566:	2104      	movs	r1, #4
 8008568:	f7ff ff94 	bl	8008494 <std>
 800856c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008570:	2201      	movs	r2, #1
 8008572:	2109      	movs	r1, #9
 8008574:	f7ff ff8e 	bl	8008494 <std>
 8008578:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800857c:	2202      	movs	r2, #2
 800857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008582:	2112      	movs	r1, #18
 8008584:	f7ff bf86 	b.w	8008494 <std>
 8008588:	20000584 	.word	0x20000584
 800858c:	2000044c 	.word	0x2000044c
 8008590:	08008501 	.word	0x08008501

08008594 <__sfp_lock_acquire>:
 8008594:	4801      	ldr	r0, [pc, #4]	@ (800859c <__sfp_lock_acquire+0x8>)
 8008596:	f000 b958 	b.w	800884a <__retarget_lock_acquire_recursive>
 800859a:	bf00      	nop
 800859c:	2000058d 	.word	0x2000058d

080085a0 <__sfp_lock_release>:
 80085a0:	4801      	ldr	r0, [pc, #4]	@ (80085a8 <__sfp_lock_release+0x8>)
 80085a2:	f000 b953 	b.w	800884c <__retarget_lock_release_recursive>
 80085a6:	bf00      	nop
 80085a8:	2000058d 	.word	0x2000058d

080085ac <__sinit>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	4604      	mov	r4, r0
 80085b0:	f7ff fff0 	bl	8008594 <__sfp_lock_acquire>
 80085b4:	6a23      	ldr	r3, [r4, #32]
 80085b6:	b11b      	cbz	r3, 80085c0 <__sinit+0x14>
 80085b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085bc:	f7ff bff0 	b.w	80085a0 <__sfp_lock_release>
 80085c0:	4b04      	ldr	r3, [pc, #16]	@ (80085d4 <__sinit+0x28>)
 80085c2:	6223      	str	r3, [r4, #32]
 80085c4:	4b04      	ldr	r3, [pc, #16]	@ (80085d8 <__sinit+0x2c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1f5      	bne.n	80085b8 <__sinit+0xc>
 80085cc:	f7ff ffc4 	bl	8008558 <global_stdio_init.part.0>
 80085d0:	e7f2      	b.n	80085b8 <__sinit+0xc>
 80085d2:	bf00      	nop
 80085d4:	08008519 	.word	0x08008519
 80085d8:	20000584 	.word	0x20000584

080085dc <_fwalk_sglue>:
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e0:	4607      	mov	r7, r0
 80085e2:	4688      	mov	r8, r1
 80085e4:	4614      	mov	r4, r2
 80085e6:	2600      	movs	r6, #0
 80085e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ec:	f1b9 0901 	subs.w	r9, r9, #1
 80085f0:	d505      	bpl.n	80085fe <_fwalk_sglue+0x22>
 80085f2:	6824      	ldr	r4, [r4, #0]
 80085f4:	2c00      	cmp	r4, #0
 80085f6:	d1f7      	bne.n	80085e8 <_fwalk_sglue+0xc>
 80085f8:	4630      	mov	r0, r6
 80085fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d907      	bls.n	8008614 <_fwalk_sglue+0x38>
 8008604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008608:	3301      	adds	r3, #1
 800860a:	d003      	beq.n	8008614 <_fwalk_sglue+0x38>
 800860c:	4629      	mov	r1, r5
 800860e:	4638      	mov	r0, r7
 8008610:	47c0      	blx	r8
 8008612:	4306      	orrs	r6, r0
 8008614:	3568      	adds	r5, #104	@ 0x68
 8008616:	e7e9      	b.n	80085ec <_fwalk_sglue+0x10>

08008618 <__sread>:
 8008618:	b510      	push	{r4, lr}
 800861a:	460c      	mov	r4, r1
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	f000 f8c4 	bl	80087ac <_read_r>
 8008624:	2800      	cmp	r0, #0
 8008626:	bfab      	itete	ge
 8008628:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800862a:	89a3      	ldrhlt	r3, [r4, #12]
 800862c:	181b      	addge	r3, r3, r0
 800862e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008632:	bfac      	ite	ge
 8008634:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008636:	81a3      	strhlt	r3, [r4, #12]
 8008638:	bd10      	pop	{r4, pc}

0800863a <__swrite>:
 800863a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863e:	461f      	mov	r7, r3
 8008640:	898b      	ldrh	r3, [r1, #12]
 8008642:	05db      	lsls	r3, r3, #23
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	4616      	mov	r6, r2
 800864a:	d505      	bpl.n	8008658 <__swrite+0x1e>
 800864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008650:	2302      	movs	r3, #2
 8008652:	2200      	movs	r2, #0
 8008654:	f000 f898 	bl	8008788 <_lseek_r>
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800865e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	4628      	mov	r0, r5
 800866a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800866e:	f000 b8af 	b.w	80087d0 <_write_r>

08008672 <__sseek>:
 8008672:	b510      	push	{r4, lr}
 8008674:	460c      	mov	r4, r1
 8008676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867a:	f000 f885 	bl	8008788 <_lseek_r>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	bf15      	itete	ne
 8008684:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800868a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800868e:	81a3      	strheq	r3, [r4, #12]
 8008690:	bf18      	it	ne
 8008692:	81a3      	strhne	r3, [r4, #12]
 8008694:	bd10      	pop	{r4, pc}

08008696 <__sclose>:
 8008696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869a:	f000 b865 	b.w	8008768 <_close_r>

0800869e <memset>:
 800869e:	4402      	add	r2, r0
 80086a0:	4603      	mov	r3, r0
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d100      	bne.n	80086a8 <memset+0xa>
 80086a6:	4770      	bx	lr
 80086a8:	f803 1b01 	strb.w	r1, [r3], #1
 80086ac:	e7f9      	b.n	80086a2 <memset+0x4>
	...

080086b0 <strtok>:
 80086b0:	4b16      	ldr	r3, [pc, #88]	@ (800870c <strtok+0x5c>)
 80086b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b6:	681f      	ldr	r7, [r3, #0]
 80086b8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80086ba:	4605      	mov	r5, r0
 80086bc:	460e      	mov	r6, r1
 80086be:	b9ec      	cbnz	r4, 80086fc <strtok+0x4c>
 80086c0:	2050      	movs	r0, #80	@ 0x50
 80086c2:	f000 f92d 	bl	8008920 <malloc>
 80086c6:	4602      	mov	r2, r0
 80086c8:	6478      	str	r0, [r7, #68]	@ 0x44
 80086ca:	b920      	cbnz	r0, 80086d6 <strtok+0x26>
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <strtok+0x60>)
 80086ce:	4811      	ldr	r0, [pc, #68]	@ (8008714 <strtok+0x64>)
 80086d0:	215b      	movs	r1, #91	@ 0x5b
 80086d2:	f000 f8bd 	bl	8008850 <__assert_func>
 80086d6:	e9c0 4400 	strd	r4, r4, [r0]
 80086da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80086e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80086ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80086ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80086f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80086f6:	6184      	str	r4, [r0, #24]
 80086f8:	7704      	strb	r4, [r0, #28]
 80086fa:	6244      	str	r4, [r0, #36]	@ 0x24
 80086fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	2301      	movs	r3, #1
 8008704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	f000 b806 	b.w	8008718 <__strtok_r>
 800870c:	20000018 	.word	0x20000018
 8008710:	080097f5 	.word	0x080097f5
 8008714:	0800980c 	.word	0x0800980c

08008718 <__strtok_r>:
 8008718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	b908      	cbnz	r0, 8008722 <__strtok_r+0xa>
 800871e:	6814      	ldr	r4, [r2, #0]
 8008720:	b144      	cbz	r4, 8008734 <__strtok_r+0x1c>
 8008722:	4620      	mov	r0, r4
 8008724:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008728:	460f      	mov	r7, r1
 800872a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800872e:	b91e      	cbnz	r6, 8008738 <__strtok_r+0x20>
 8008730:	b965      	cbnz	r5, 800874c <__strtok_r+0x34>
 8008732:	6015      	str	r5, [r2, #0]
 8008734:	2000      	movs	r0, #0
 8008736:	e005      	b.n	8008744 <__strtok_r+0x2c>
 8008738:	42b5      	cmp	r5, r6
 800873a:	d1f6      	bne.n	800872a <__strtok_r+0x12>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1f0      	bne.n	8008722 <__strtok_r+0xa>
 8008740:	6014      	str	r4, [r2, #0]
 8008742:	7003      	strb	r3, [r0, #0]
 8008744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008746:	461c      	mov	r4, r3
 8008748:	e00c      	b.n	8008764 <__strtok_r+0x4c>
 800874a:	b915      	cbnz	r5, 8008752 <__strtok_r+0x3a>
 800874c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008750:	460e      	mov	r6, r1
 8008752:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008756:	42ab      	cmp	r3, r5
 8008758:	d1f7      	bne.n	800874a <__strtok_r+0x32>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f3      	beq.n	8008746 <__strtok_r+0x2e>
 800875e:	2300      	movs	r3, #0
 8008760:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008764:	6014      	str	r4, [r2, #0]
 8008766:	e7ed      	b.n	8008744 <__strtok_r+0x2c>

08008768 <_close_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d06      	ldr	r5, [pc, #24]	@ (8008784 <_close_r+0x1c>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	602b      	str	r3, [r5, #0]
 8008774:	f7f8 fd0c 	bl	8001190 <_close>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_close_r+0x1a>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_close_r+0x1a>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	20000588 	.word	0x20000588

08008788 <_lseek_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	@ (80087a8 <_lseek_r+0x20>)
 800878c:	4604      	mov	r4, r0
 800878e:	4608      	mov	r0, r1
 8008790:	4611      	mov	r1, r2
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f7f8 fd21 	bl	80011de <_lseek>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_lseek_r+0x1e>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_lseek_r+0x1e>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20000588 	.word	0x20000588

080087ac <_read_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d07      	ldr	r5, [pc, #28]	@ (80087cc <_read_r+0x20>)
 80087b0:	4604      	mov	r4, r0
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	2200      	movs	r2, #0
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	f7f8 fcaf 	bl	800111e <_read>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_read_r+0x1e>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_read_r+0x1e>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	20000588 	.word	0x20000588

080087d0 <_write_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d07      	ldr	r5, [pc, #28]	@ (80087f0 <_write_r+0x20>)
 80087d4:	4604      	mov	r4, r0
 80087d6:	4608      	mov	r0, r1
 80087d8:	4611      	mov	r1, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	602a      	str	r2, [r5, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	f7f8 fcba 	bl	8001158 <_write>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_write_r+0x1e>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_write_r+0x1e>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	20000588 	.word	0x20000588

080087f4 <__errno>:
 80087f4:	4b01      	ldr	r3, [pc, #4]	@ (80087fc <__errno+0x8>)
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	20000018 	.word	0x20000018

08008800 <__libc_init_array>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	4d0d      	ldr	r5, [pc, #52]	@ (8008838 <__libc_init_array+0x38>)
 8008804:	4c0d      	ldr	r4, [pc, #52]	@ (800883c <__libc_init_array+0x3c>)
 8008806:	1b64      	subs	r4, r4, r5
 8008808:	10a4      	asrs	r4, r4, #2
 800880a:	2600      	movs	r6, #0
 800880c:	42a6      	cmp	r6, r4
 800880e:	d109      	bne.n	8008824 <__libc_init_array+0x24>
 8008810:	4d0b      	ldr	r5, [pc, #44]	@ (8008840 <__libc_init_array+0x40>)
 8008812:	4c0c      	ldr	r4, [pc, #48]	@ (8008844 <__libc_init_array+0x44>)
 8008814:	f000 fe3a 	bl	800948c <_init>
 8008818:	1b64      	subs	r4, r4, r5
 800881a:	10a4      	asrs	r4, r4, #2
 800881c:	2600      	movs	r6, #0
 800881e:	42a6      	cmp	r6, r4
 8008820:	d105      	bne.n	800882e <__libc_init_array+0x2e>
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	f855 3b04 	ldr.w	r3, [r5], #4
 8008828:	4798      	blx	r3
 800882a:	3601      	adds	r6, #1
 800882c:	e7ee      	b.n	800880c <__libc_init_array+0xc>
 800882e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008832:	4798      	blx	r3
 8008834:	3601      	adds	r6, #1
 8008836:	e7f2      	b.n	800881e <__libc_init_array+0x1e>
 8008838:	080098e0 	.word	0x080098e0
 800883c:	080098e0 	.word	0x080098e0
 8008840:	080098e0 	.word	0x080098e0
 8008844:	080098e4 	.word	0x080098e4

08008848 <__retarget_lock_init_recursive>:
 8008848:	4770      	bx	lr

0800884a <__retarget_lock_acquire_recursive>:
 800884a:	4770      	bx	lr

0800884c <__retarget_lock_release_recursive>:
 800884c:	4770      	bx	lr
	...

08008850 <__assert_func>:
 8008850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008852:	4614      	mov	r4, r2
 8008854:	461a      	mov	r2, r3
 8008856:	4b09      	ldr	r3, [pc, #36]	@ (800887c <__assert_func+0x2c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4605      	mov	r5, r0
 800885c:	68d8      	ldr	r0, [r3, #12]
 800885e:	b954      	cbnz	r4, 8008876 <__assert_func+0x26>
 8008860:	4b07      	ldr	r3, [pc, #28]	@ (8008880 <__assert_func+0x30>)
 8008862:	461c      	mov	r4, r3
 8008864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008868:	9100      	str	r1, [sp, #0]
 800886a:	462b      	mov	r3, r5
 800886c:	4905      	ldr	r1, [pc, #20]	@ (8008884 <__assert_func+0x34>)
 800886e:	f000 f9b9 	bl	8008be4 <fiprintf>
 8008872:	f000 f9d9 	bl	8008c28 <abort>
 8008876:	4b04      	ldr	r3, [pc, #16]	@ (8008888 <__assert_func+0x38>)
 8008878:	e7f4      	b.n	8008864 <__assert_func+0x14>
 800887a:	bf00      	nop
 800887c:	20000018 	.word	0x20000018
 8008880:	080098a1 	.word	0x080098a1
 8008884:	08009873 	.word	0x08009873
 8008888:	08009866 	.word	0x08009866

0800888c <_free_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4605      	mov	r5, r0
 8008890:	2900      	cmp	r1, #0
 8008892:	d041      	beq.n	8008918 <_free_r+0x8c>
 8008894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008898:	1f0c      	subs	r4, r1, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfb8      	it	lt
 800889e:	18e4      	addlt	r4, r4, r3
 80088a0:	f000 f8e8 	bl	8008a74 <__malloc_lock>
 80088a4:	4a1d      	ldr	r2, [pc, #116]	@ (800891c <_free_r+0x90>)
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	b933      	cbnz	r3, 80088b8 <_free_r+0x2c>
 80088aa:	6063      	str	r3, [r4, #4]
 80088ac:	6014      	str	r4, [r2, #0]
 80088ae:	4628      	mov	r0, r5
 80088b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b4:	f000 b8e4 	b.w	8008a80 <__malloc_unlock>
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	d908      	bls.n	80088ce <_free_r+0x42>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	1821      	adds	r1, r4, r0
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf01      	itttt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	1809      	addeq	r1, r1, r0
 80088ca:	6021      	streq	r1, [r4, #0]
 80088cc:	e7ed      	b.n	80088aa <_free_r+0x1e>
 80088ce:	461a      	mov	r2, r3
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	b10b      	cbz	r3, 80088d8 <_free_r+0x4c>
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d9fa      	bls.n	80088ce <_free_r+0x42>
 80088d8:	6811      	ldr	r1, [r2, #0]
 80088da:	1850      	adds	r0, r2, r1
 80088dc:	42a0      	cmp	r0, r4
 80088de:	d10b      	bne.n	80088f8 <_free_r+0x6c>
 80088e0:	6820      	ldr	r0, [r4, #0]
 80088e2:	4401      	add	r1, r0
 80088e4:	1850      	adds	r0, r2, r1
 80088e6:	4283      	cmp	r3, r0
 80088e8:	6011      	str	r1, [r2, #0]
 80088ea:	d1e0      	bne.n	80088ae <_free_r+0x22>
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	6053      	str	r3, [r2, #4]
 80088f2:	4408      	add	r0, r1
 80088f4:	6010      	str	r0, [r2, #0]
 80088f6:	e7da      	b.n	80088ae <_free_r+0x22>
 80088f8:	d902      	bls.n	8008900 <_free_r+0x74>
 80088fa:	230c      	movs	r3, #12
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	e7d6      	b.n	80088ae <_free_r+0x22>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	1821      	adds	r1, r4, r0
 8008904:	428b      	cmp	r3, r1
 8008906:	bf04      	itt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	6063      	str	r3, [r4, #4]
 800890e:	bf04      	itt	eq
 8008910:	1809      	addeq	r1, r1, r0
 8008912:	6021      	streq	r1, [r4, #0]
 8008914:	6054      	str	r4, [r2, #4]
 8008916:	e7ca      	b.n	80088ae <_free_r+0x22>
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	bf00      	nop
 800891c:	20000594 	.word	0x20000594

08008920 <malloc>:
 8008920:	4b02      	ldr	r3, [pc, #8]	@ (800892c <malloc+0xc>)
 8008922:	4601      	mov	r1, r0
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	f000 b825 	b.w	8008974 <_malloc_r>
 800892a:	bf00      	nop
 800892c:	20000018 	.word	0x20000018

08008930 <sbrk_aligned>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4e0f      	ldr	r6, [pc, #60]	@ (8008970 <sbrk_aligned+0x40>)
 8008934:	460c      	mov	r4, r1
 8008936:	6831      	ldr	r1, [r6, #0]
 8008938:	4605      	mov	r5, r0
 800893a:	b911      	cbnz	r1, 8008942 <sbrk_aligned+0x12>
 800893c:	f000 f964 	bl	8008c08 <_sbrk_r>
 8008940:	6030      	str	r0, [r6, #0]
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f000 f95f 	bl	8008c08 <_sbrk_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d103      	bne.n	8008956 <sbrk_aligned+0x26>
 800894e:	f04f 34ff 	mov.w	r4, #4294967295
 8008952:	4620      	mov	r0, r4
 8008954:	bd70      	pop	{r4, r5, r6, pc}
 8008956:	1cc4      	adds	r4, r0, #3
 8008958:	f024 0403 	bic.w	r4, r4, #3
 800895c:	42a0      	cmp	r0, r4
 800895e:	d0f8      	beq.n	8008952 <sbrk_aligned+0x22>
 8008960:	1a21      	subs	r1, r4, r0
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f950 	bl	8008c08 <_sbrk_r>
 8008968:	3001      	adds	r0, #1
 800896a:	d1f2      	bne.n	8008952 <sbrk_aligned+0x22>
 800896c:	e7ef      	b.n	800894e <sbrk_aligned+0x1e>
 800896e:	bf00      	nop
 8008970:	20000590 	.word	0x20000590

08008974 <_malloc_r>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	1ccd      	adds	r5, r1, #3
 800897a:	f025 0503 	bic.w	r5, r5, #3
 800897e:	3508      	adds	r5, #8
 8008980:	2d0c      	cmp	r5, #12
 8008982:	bf38      	it	cc
 8008984:	250c      	movcc	r5, #12
 8008986:	2d00      	cmp	r5, #0
 8008988:	4606      	mov	r6, r0
 800898a:	db01      	blt.n	8008990 <_malloc_r+0x1c>
 800898c:	42a9      	cmp	r1, r5
 800898e:	d904      	bls.n	800899a <_malloc_r+0x26>
 8008990:	230c      	movs	r3, #12
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	2000      	movs	r0, #0
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a70 <_malloc_r+0xfc>
 800899e:	f000 f869 	bl	8008a74 <__malloc_lock>
 80089a2:	f8d8 3000 	ldr.w	r3, [r8]
 80089a6:	461c      	mov	r4, r3
 80089a8:	bb44      	cbnz	r4, 80089fc <_malloc_r+0x88>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff ffbf 	bl	8008930 <sbrk_aligned>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	4604      	mov	r4, r0
 80089b6:	d158      	bne.n	8008a6a <_malloc_r+0xf6>
 80089b8:	f8d8 4000 	ldr.w	r4, [r8]
 80089bc:	4627      	mov	r7, r4
 80089be:	2f00      	cmp	r7, #0
 80089c0:	d143      	bne.n	8008a4a <_malloc_r+0xd6>
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d04b      	beq.n	8008a5e <_malloc_r+0xea>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	4639      	mov	r1, r7
 80089ca:	4630      	mov	r0, r6
 80089cc:	eb04 0903 	add.w	r9, r4, r3
 80089d0:	f000 f91a 	bl	8008c08 <_sbrk_r>
 80089d4:	4581      	cmp	r9, r0
 80089d6:	d142      	bne.n	8008a5e <_malloc_r+0xea>
 80089d8:	6821      	ldr	r1, [r4, #0]
 80089da:	1a6d      	subs	r5, r5, r1
 80089dc:	4629      	mov	r1, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff ffa6 	bl	8008930 <sbrk_aligned>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d03a      	beq.n	8008a5e <_malloc_r+0xea>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	442b      	add	r3, r5
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	f8d8 3000 	ldr.w	r3, [r8]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	bb62      	cbnz	r2, 8008a50 <_malloc_r+0xdc>
 80089f6:	f8c8 7000 	str.w	r7, [r8]
 80089fa:	e00f      	b.n	8008a1c <_malloc_r+0xa8>
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	1b52      	subs	r2, r2, r5
 8008a00:	d420      	bmi.n	8008a44 <_malloc_r+0xd0>
 8008a02:	2a0b      	cmp	r2, #11
 8008a04:	d917      	bls.n	8008a36 <_malloc_r+0xc2>
 8008a06:	1961      	adds	r1, r4, r5
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	6025      	str	r5, [r4, #0]
 8008a0c:	bf18      	it	ne
 8008a0e:	6059      	strne	r1, [r3, #4]
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	bf08      	it	eq
 8008a14:	f8c8 1000 	streq.w	r1, [r8]
 8008a18:	5162      	str	r2, [r4, r5]
 8008a1a:	604b      	str	r3, [r1, #4]
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 f82f 	bl	8008a80 <__malloc_unlock>
 8008a22:	f104 000b 	add.w	r0, r4, #11
 8008a26:	1d23      	adds	r3, r4, #4
 8008a28:	f020 0007 	bic.w	r0, r0, #7
 8008a2c:	1ac2      	subs	r2, r0, r3
 8008a2e:	bf1c      	itt	ne
 8008a30:	1a1b      	subne	r3, r3, r0
 8008a32:	50a3      	strne	r3, [r4, r2]
 8008a34:	e7af      	b.n	8008996 <_malloc_r+0x22>
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	bf0c      	ite	eq
 8008a3c:	f8c8 2000 	streq.w	r2, [r8]
 8008a40:	605a      	strne	r2, [r3, #4]
 8008a42:	e7eb      	b.n	8008a1c <_malloc_r+0xa8>
 8008a44:	4623      	mov	r3, r4
 8008a46:	6864      	ldr	r4, [r4, #4]
 8008a48:	e7ae      	b.n	80089a8 <_malloc_r+0x34>
 8008a4a:	463c      	mov	r4, r7
 8008a4c:	687f      	ldr	r7, [r7, #4]
 8008a4e:	e7b6      	b.n	80089be <_malloc_r+0x4a>
 8008a50:	461a      	mov	r2, r3
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d1fb      	bne.n	8008a50 <_malloc_r+0xdc>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	6053      	str	r3, [r2, #4]
 8008a5c:	e7de      	b.n	8008a1c <_malloc_r+0xa8>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f80c 	bl	8008a80 <__malloc_unlock>
 8008a68:	e794      	b.n	8008994 <_malloc_r+0x20>
 8008a6a:	6005      	str	r5, [r0, #0]
 8008a6c:	e7d6      	b.n	8008a1c <_malloc_r+0xa8>
 8008a6e:	bf00      	nop
 8008a70:	20000594 	.word	0x20000594

08008a74 <__malloc_lock>:
 8008a74:	4801      	ldr	r0, [pc, #4]	@ (8008a7c <__malloc_lock+0x8>)
 8008a76:	f7ff bee8 	b.w	800884a <__retarget_lock_acquire_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	2000058c 	.word	0x2000058c

08008a80 <__malloc_unlock>:
 8008a80:	4801      	ldr	r0, [pc, #4]	@ (8008a88 <__malloc_unlock+0x8>)
 8008a82:	f7ff bee3 	b.w	800884c <__retarget_lock_release_recursive>
 8008a86:	bf00      	nop
 8008a88:	2000058c 	.word	0x2000058c

08008a8c <__sflush_r>:
 8008a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a94:	0716      	lsls	r6, r2, #28
 8008a96:	4605      	mov	r5, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	d454      	bmi.n	8008b46 <__sflush_r+0xba>
 8008a9c:	684b      	ldr	r3, [r1, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	dc02      	bgt.n	8008aa8 <__sflush_r+0x1c>
 8008aa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dd48      	ble.n	8008b3a <__sflush_r+0xae>
 8008aa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	d045      	beq.n	8008b3a <__sflush_r+0xae>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ab4:	682f      	ldr	r7, [r5, #0]
 8008ab6:	6a21      	ldr	r1, [r4, #32]
 8008ab8:	602b      	str	r3, [r5, #0]
 8008aba:	d030      	beq.n	8008b1e <__sflush_r+0x92>
 8008abc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	0759      	lsls	r1, r3, #29
 8008ac2:	d505      	bpl.n	8008ad0 <__sflush_r+0x44>
 8008ac4:	6863      	ldr	r3, [r4, #4]
 8008ac6:	1ad2      	subs	r2, r2, r3
 8008ac8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aca:	b10b      	cbz	r3, 8008ad0 <__sflush_r+0x44>
 8008acc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ad4:	6a21      	ldr	r1, [r4, #32]
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b0      	blx	r6
 8008ada:	1c43      	adds	r3, r0, #1
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	d106      	bne.n	8008aee <__sflush_r+0x62>
 8008ae0:	6829      	ldr	r1, [r5, #0]
 8008ae2:	291d      	cmp	r1, #29
 8008ae4:	d82b      	bhi.n	8008b3e <__sflush_r+0xb2>
 8008ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b90 <__sflush_r+0x104>)
 8008ae8:	410a      	asrs	r2, r1
 8008aea:	07d6      	lsls	r6, r2, #31
 8008aec:	d427      	bmi.n	8008b3e <__sflush_r+0xb2>
 8008aee:	2200      	movs	r2, #0
 8008af0:	6062      	str	r2, [r4, #4]
 8008af2:	04d9      	lsls	r1, r3, #19
 8008af4:	6922      	ldr	r2, [r4, #16]
 8008af6:	6022      	str	r2, [r4, #0]
 8008af8:	d504      	bpl.n	8008b04 <__sflush_r+0x78>
 8008afa:	1c42      	adds	r2, r0, #1
 8008afc:	d101      	bne.n	8008b02 <__sflush_r+0x76>
 8008afe:	682b      	ldr	r3, [r5, #0]
 8008b00:	b903      	cbnz	r3, 8008b04 <__sflush_r+0x78>
 8008b02:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b06:	602f      	str	r7, [r5, #0]
 8008b08:	b1b9      	cbz	r1, 8008b3a <__sflush_r+0xae>
 8008b0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	d002      	beq.n	8008b18 <__sflush_r+0x8c>
 8008b12:	4628      	mov	r0, r5
 8008b14:	f7ff feba 	bl	800888c <_free_r>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b1c:	e00d      	b.n	8008b3a <__sflush_r+0xae>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	4602      	mov	r2, r0
 8008b26:	1c50      	adds	r0, r2, #1
 8008b28:	d1c9      	bne.n	8008abe <__sflush_r+0x32>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0c6      	beq.n	8008abe <__sflush_r+0x32>
 8008b30:	2b1d      	cmp	r3, #29
 8008b32:	d001      	beq.n	8008b38 <__sflush_r+0xac>
 8008b34:	2b16      	cmp	r3, #22
 8008b36:	d11e      	bne.n	8008b76 <__sflush_r+0xea>
 8008b38:	602f      	str	r7, [r5, #0]
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e022      	b.n	8008b84 <__sflush_r+0xf8>
 8008b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b42:	b21b      	sxth	r3, r3
 8008b44:	e01b      	b.n	8008b7e <__sflush_r+0xf2>
 8008b46:	690f      	ldr	r7, [r1, #16]
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	d0f6      	beq.n	8008b3a <__sflush_r+0xae>
 8008b4c:	0793      	lsls	r3, r2, #30
 8008b4e:	680e      	ldr	r6, [r1, #0]
 8008b50:	bf08      	it	eq
 8008b52:	694b      	ldreq	r3, [r1, #20]
 8008b54:	600f      	str	r7, [r1, #0]
 8008b56:	bf18      	it	ne
 8008b58:	2300      	movne	r3, #0
 8008b5a:	eba6 0807 	sub.w	r8, r6, r7
 8008b5e:	608b      	str	r3, [r1, #8]
 8008b60:	f1b8 0f00 	cmp.w	r8, #0
 8008b64:	dde9      	ble.n	8008b3a <__sflush_r+0xae>
 8008b66:	6a21      	ldr	r1, [r4, #32]
 8008b68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b6a:	4643      	mov	r3, r8
 8008b6c:	463a      	mov	r2, r7
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b0      	blx	r6
 8008b72:	2800      	cmp	r0, #0
 8008b74:	dc08      	bgt.n	8008b88 <__sflush_r+0xfc>
 8008b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	4407      	add	r7, r0
 8008b8a:	eba8 0800 	sub.w	r8, r8, r0
 8008b8e:	e7e7      	b.n	8008b60 <__sflush_r+0xd4>
 8008b90:	dfbffffe 	.word	0xdfbffffe

08008b94 <_fflush_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	690b      	ldr	r3, [r1, #16]
 8008b98:	4605      	mov	r5, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	b913      	cbnz	r3, 8008ba4 <_fflush_r+0x10>
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	b118      	cbz	r0, 8008bae <_fflush_r+0x1a>
 8008ba6:	6a03      	ldr	r3, [r0, #32]
 8008ba8:	b90b      	cbnz	r3, 8008bae <_fflush_r+0x1a>
 8008baa:	f7ff fcff 	bl	80085ac <__sinit>
 8008bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0f3      	beq.n	8008b9e <_fflush_r+0xa>
 8008bb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bb8:	07d0      	lsls	r0, r2, #31
 8008bba:	d404      	bmi.n	8008bc6 <_fflush_r+0x32>
 8008bbc:	0599      	lsls	r1, r3, #22
 8008bbe:	d402      	bmi.n	8008bc6 <_fflush_r+0x32>
 8008bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bc2:	f7ff fe42 	bl	800884a <__retarget_lock_acquire_recursive>
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f7ff ff5f 	bl	8008a8c <__sflush_r>
 8008bce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bd0:	07da      	lsls	r2, r3, #31
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	d4e4      	bmi.n	8008ba0 <_fflush_r+0xc>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	059b      	lsls	r3, r3, #22
 8008bda:	d4e1      	bmi.n	8008ba0 <_fflush_r+0xc>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bde:	f7ff fe35 	bl	800884c <__retarget_lock_release_recursive>
 8008be2:	e7dd      	b.n	8008ba0 <_fflush_r+0xc>

08008be4 <fiprintf>:
 8008be4:	b40e      	push	{r1, r2, r3}
 8008be6:	b503      	push	{r0, r1, lr}
 8008be8:	4601      	mov	r1, r0
 8008bea:	ab03      	add	r3, sp, #12
 8008bec:	4805      	ldr	r0, [pc, #20]	@ (8008c04 <fiprintf+0x20>)
 8008bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf2:	6800      	ldr	r0, [r0, #0]
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	f000 f847 	bl	8008c88 <_vfiprintf_r>
 8008bfa:	b002      	add	sp, #8
 8008bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c00:	b003      	add	sp, #12
 8008c02:	4770      	bx	lr
 8008c04:	20000018 	.word	0x20000018

08008c08 <_sbrk_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d06      	ldr	r5, [pc, #24]	@ (8008c24 <_sbrk_r+0x1c>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	602b      	str	r3, [r5, #0]
 8008c14:	f7f8 faf0 	bl	80011f8 <_sbrk>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d102      	bne.n	8008c22 <_sbrk_r+0x1a>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	b103      	cbz	r3, 8008c22 <_sbrk_r+0x1a>
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	20000588 	.word	0x20000588

08008c28 <abort>:
 8008c28:	b508      	push	{r3, lr}
 8008c2a:	2006      	movs	r0, #6
 8008c2c:	f000 fb8e 	bl	800934c <raise>
 8008c30:	2001      	movs	r0, #1
 8008c32:	f7f8 fa69 	bl	8001108 <_exit>

08008c36 <__sfputc_r>:
 8008c36:	6893      	ldr	r3, [r2, #8]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	b410      	push	{r4}
 8008c3e:	6093      	str	r3, [r2, #8]
 8008c40:	da08      	bge.n	8008c54 <__sfputc_r+0x1e>
 8008c42:	6994      	ldr	r4, [r2, #24]
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	db01      	blt.n	8008c4c <__sfputc_r+0x16>
 8008c48:	290a      	cmp	r1, #10
 8008c4a:	d103      	bne.n	8008c54 <__sfputc_r+0x1e>
 8008c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c50:	f000 bac0 	b.w	80091d4 <__swbuf_r>
 8008c54:	6813      	ldr	r3, [r2, #0]
 8008c56:	1c58      	adds	r0, r3, #1
 8008c58:	6010      	str	r0, [r2, #0]
 8008c5a:	7019      	strb	r1, [r3, #0]
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <__sfputs_r>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	4606      	mov	r6, r0
 8008c68:	460f      	mov	r7, r1
 8008c6a:	4614      	mov	r4, r2
 8008c6c:	18d5      	adds	r5, r2, r3
 8008c6e:	42ac      	cmp	r4, r5
 8008c70:	d101      	bne.n	8008c76 <__sfputs_r+0x12>
 8008c72:	2000      	movs	r0, #0
 8008c74:	e007      	b.n	8008c86 <__sfputs_r+0x22>
 8008c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7a:	463a      	mov	r2, r7
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7ff ffda 	bl	8008c36 <__sfputc_r>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	d1f3      	bne.n	8008c6e <__sfputs_r+0xa>
 8008c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c88 <_vfiprintf_r>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	b09d      	sub	sp, #116	@ 0x74
 8008c90:	4614      	mov	r4, r2
 8008c92:	4698      	mov	r8, r3
 8008c94:	4606      	mov	r6, r0
 8008c96:	b118      	cbz	r0, 8008ca0 <_vfiprintf_r+0x18>
 8008c98:	6a03      	ldr	r3, [r0, #32]
 8008c9a:	b90b      	cbnz	r3, 8008ca0 <_vfiprintf_r+0x18>
 8008c9c:	f7ff fc86 	bl	80085ac <__sinit>
 8008ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca2:	07d9      	lsls	r1, r3, #31
 8008ca4:	d405      	bmi.n	8008cb2 <_vfiprintf_r+0x2a>
 8008ca6:	89ab      	ldrh	r3, [r5, #12]
 8008ca8:	059a      	lsls	r2, r3, #22
 8008caa:	d402      	bmi.n	8008cb2 <_vfiprintf_r+0x2a>
 8008cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cae:	f7ff fdcc 	bl	800884a <__retarget_lock_acquire_recursive>
 8008cb2:	89ab      	ldrh	r3, [r5, #12]
 8008cb4:	071b      	lsls	r3, r3, #28
 8008cb6:	d501      	bpl.n	8008cbc <_vfiprintf_r+0x34>
 8008cb8:	692b      	ldr	r3, [r5, #16]
 8008cba:	b99b      	cbnz	r3, 8008ce4 <_vfiprintf_r+0x5c>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f000 fac6 	bl	8009250 <__swsetup_r>
 8008cc4:	b170      	cbz	r0, 8008ce4 <_vfiprintf_r+0x5c>
 8008cc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cc8:	07dc      	lsls	r4, r3, #31
 8008cca:	d504      	bpl.n	8008cd6 <_vfiprintf_r+0x4e>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	b01d      	add	sp, #116	@ 0x74
 8008cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd6:	89ab      	ldrh	r3, [r5, #12]
 8008cd8:	0598      	lsls	r0, r3, #22
 8008cda:	d4f7      	bmi.n	8008ccc <_vfiprintf_r+0x44>
 8008cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cde:	f7ff fdb5 	bl	800884c <__retarget_lock_release_recursive>
 8008ce2:	e7f3      	b.n	8008ccc <_vfiprintf_r+0x44>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ce8:	2320      	movs	r3, #32
 8008cea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf2:	2330      	movs	r3, #48	@ 0x30
 8008cf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ea4 <_vfiprintf_r+0x21c>
 8008cf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cfc:	f04f 0901 	mov.w	r9, #1
 8008d00:	4623      	mov	r3, r4
 8008d02:	469a      	mov	sl, r3
 8008d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d08:	b10a      	cbz	r2, 8008d0e <_vfiprintf_r+0x86>
 8008d0a:	2a25      	cmp	r2, #37	@ 0x25
 8008d0c:	d1f9      	bne.n	8008d02 <_vfiprintf_r+0x7a>
 8008d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d12:	d00b      	beq.n	8008d2c <_vfiprintf_r+0xa4>
 8008d14:	465b      	mov	r3, fp
 8008d16:	4622      	mov	r2, r4
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ffa2 	bl	8008c64 <__sfputs_r>
 8008d20:	3001      	adds	r0, #1
 8008d22:	f000 80a7 	beq.w	8008e74 <_vfiprintf_r+0x1ec>
 8008d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d28:	445a      	add	r2, fp
 8008d2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 809f 	beq.w	8008e74 <_vfiprintf_r+0x1ec>
 8008d36:	2300      	movs	r3, #0
 8008d38:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d40:	f10a 0a01 	add.w	sl, sl, #1
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	9307      	str	r3, [sp, #28]
 8008d48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d4e:	4654      	mov	r4, sl
 8008d50:	2205      	movs	r2, #5
 8008d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d56:	4853      	ldr	r0, [pc, #332]	@ (8008ea4 <_vfiprintf_r+0x21c>)
 8008d58:	f7f7 fa72 	bl	8000240 <memchr>
 8008d5c:	9a04      	ldr	r2, [sp, #16]
 8008d5e:	b9d8      	cbnz	r0, 8008d98 <_vfiprintf_r+0x110>
 8008d60:	06d1      	lsls	r1, r2, #27
 8008d62:	bf44      	itt	mi
 8008d64:	2320      	movmi	r3, #32
 8008d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d6a:	0713      	lsls	r3, r2, #28
 8008d6c:	bf44      	itt	mi
 8008d6e:	232b      	movmi	r3, #43	@ 0x2b
 8008d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d74:	f89a 3000 	ldrb.w	r3, [sl]
 8008d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d7a:	d015      	beq.n	8008da8 <_vfiprintf_r+0x120>
 8008d7c:	9a07      	ldr	r2, [sp, #28]
 8008d7e:	4654      	mov	r4, sl
 8008d80:	2000      	movs	r0, #0
 8008d82:	f04f 0c0a 	mov.w	ip, #10
 8008d86:	4621      	mov	r1, r4
 8008d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8c:	3b30      	subs	r3, #48	@ 0x30
 8008d8e:	2b09      	cmp	r3, #9
 8008d90:	d94b      	bls.n	8008e2a <_vfiprintf_r+0x1a2>
 8008d92:	b1b0      	cbz	r0, 8008dc2 <_vfiprintf_r+0x13a>
 8008d94:	9207      	str	r2, [sp, #28]
 8008d96:	e014      	b.n	8008dc2 <_vfiprintf_r+0x13a>
 8008d98:	eba0 0308 	sub.w	r3, r0, r8
 8008d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8008da0:	4313      	orrs	r3, r2
 8008da2:	9304      	str	r3, [sp, #16]
 8008da4:	46a2      	mov	sl, r4
 8008da6:	e7d2      	b.n	8008d4e <_vfiprintf_r+0xc6>
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	1d19      	adds	r1, r3, #4
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	9103      	str	r1, [sp, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	bfbb      	ittet	lt
 8008db4:	425b      	neglt	r3, r3
 8008db6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dba:	9307      	strge	r3, [sp, #28]
 8008dbc:	9307      	strlt	r3, [sp, #28]
 8008dbe:	bfb8      	it	lt
 8008dc0:	9204      	strlt	r2, [sp, #16]
 8008dc2:	7823      	ldrb	r3, [r4, #0]
 8008dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dc6:	d10a      	bne.n	8008dde <_vfiprintf_r+0x156>
 8008dc8:	7863      	ldrb	r3, [r4, #1]
 8008dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dcc:	d132      	bne.n	8008e34 <_vfiprintf_r+0x1ac>
 8008dce:	9b03      	ldr	r3, [sp, #12]
 8008dd0:	1d1a      	adds	r2, r3, #4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	9203      	str	r2, [sp, #12]
 8008dd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dda:	3402      	adds	r4, #2
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008eb4 <_vfiprintf_r+0x22c>
 8008de2:	7821      	ldrb	r1, [r4, #0]
 8008de4:	2203      	movs	r2, #3
 8008de6:	4650      	mov	r0, sl
 8008de8:	f7f7 fa2a 	bl	8000240 <memchr>
 8008dec:	b138      	cbz	r0, 8008dfe <_vfiprintf_r+0x176>
 8008dee:	9b04      	ldr	r3, [sp, #16]
 8008df0:	eba0 000a 	sub.w	r0, r0, sl
 8008df4:	2240      	movs	r2, #64	@ 0x40
 8008df6:	4082      	lsls	r2, r0
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	3401      	adds	r4, #1
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e02:	4829      	ldr	r0, [pc, #164]	@ (8008ea8 <_vfiprintf_r+0x220>)
 8008e04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e08:	2206      	movs	r2, #6
 8008e0a:	f7f7 fa19 	bl	8000240 <memchr>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d03f      	beq.n	8008e92 <_vfiprintf_r+0x20a>
 8008e12:	4b26      	ldr	r3, [pc, #152]	@ (8008eac <_vfiprintf_r+0x224>)
 8008e14:	bb1b      	cbnz	r3, 8008e5e <_vfiprintf_r+0x1d6>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	3307      	adds	r3, #7
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	3308      	adds	r3, #8
 8008e20:	9303      	str	r3, [sp, #12]
 8008e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e24:	443b      	add	r3, r7
 8008e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e28:	e76a      	b.n	8008d00 <_vfiprintf_r+0x78>
 8008e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e2e:	460c      	mov	r4, r1
 8008e30:	2001      	movs	r0, #1
 8008e32:	e7a8      	b.n	8008d86 <_vfiprintf_r+0xfe>
 8008e34:	2300      	movs	r3, #0
 8008e36:	3401      	adds	r4, #1
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f04f 0c0a 	mov.w	ip, #10
 8008e40:	4620      	mov	r0, r4
 8008e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e46:	3a30      	subs	r2, #48	@ 0x30
 8008e48:	2a09      	cmp	r2, #9
 8008e4a:	d903      	bls.n	8008e54 <_vfiprintf_r+0x1cc>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d0c6      	beq.n	8008dde <_vfiprintf_r+0x156>
 8008e50:	9105      	str	r1, [sp, #20]
 8008e52:	e7c4      	b.n	8008dde <_vfiprintf_r+0x156>
 8008e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e58:	4604      	mov	r4, r0
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e7f0      	b.n	8008e40 <_vfiprintf_r+0x1b8>
 8008e5e:	ab03      	add	r3, sp, #12
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	462a      	mov	r2, r5
 8008e64:	4b12      	ldr	r3, [pc, #72]	@ (8008eb0 <_vfiprintf_r+0x228>)
 8008e66:	a904      	add	r1, sp, #16
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f3af 8000 	nop.w
 8008e6e:	4607      	mov	r7, r0
 8008e70:	1c78      	adds	r0, r7, #1
 8008e72:	d1d6      	bne.n	8008e22 <_vfiprintf_r+0x19a>
 8008e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e76:	07d9      	lsls	r1, r3, #31
 8008e78:	d405      	bmi.n	8008e86 <_vfiprintf_r+0x1fe>
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	059a      	lsls	r2, r3, #22
 8008e7e:	d402      	bmi.n	8008e86 <_vfiprintf_r+0x1fe>
 8008e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e82:	f7ff fce3 	bl	800884c <__retarget_lock_release_recursive>
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	065b      	lsls	r3, r3, #25
 8008e8a:	f53f af1f 	bmi.w	8008ccc <_vfiprintf_r+0x44>
 8008e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e90:	e71e      	b.n	8008cd0 <_vfiprintf_r+0x48>
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <_vfiprintf_r+0x228>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 f879 	bl	8008f94 <_printf_i>
 8008ea2:	e7e4      	b.n	8008e6e <_vfiprintf_r+0x1e6>
 8008ea4:	080098a2 	.word	0x080098a2
 8008ea8:	080098ac 	.word	0x080098ac
 8008eac:	00000000 	.word	0x00000000
 8008eb0:	08008c65 	.word	0x08008c65
 8008eb4:	080098a8 	.word	0x080098a8

08008eb8 <_printf_common>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	4698      	mov	r8, r3
 8008ec0:	688a      	ldr	r2, [r1, #8]
 8008ec2:	690b      	ldr	r3, [r1, #16]
 8008ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	bfb8      	it	lt
 8008ecc:	4613      	movlt	r3, r2
 8008ece:	6033      	str	r3, [r6, #0]
 8008ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b10a      	cbz	r2, 8008ede <_printf_common+0x26>
 8008eda:	3301      	adds	r3, #1
 8008edc:	6033      	str	r3, [r6, #0]
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	0699      	lsls	r1, r3, #26
 8008ee2:	bf42      	ittt	mi
 8008ee4:	6833      	ldrmi	r3, [r6, #0]
 8008ee6:	3302      	addmi	r3, #2
 8008ee8:	6033      	strmi	r3, [r6, #0]
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	f015 0506 	ands.w	r5, r5, #6
 8008ef0:	d106      	bne.n	8008f00 <_printf_common+0x48>
 8008ef2:	f104 0a19 	add.w	sl, r4, #25
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	6832      	ldr	r2, [r6, #0]
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dc26      	bgt.n	8008f4e <_printf_common+0x96>
 8008f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	3b00      	subs	r3, #0
 8008f08:	bf18      	it	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	0692      	lsls	r2, r2, #26
 8008f0e:	d42b      	bmi.n	8008f68 <_printf_common+0xb0>
 8008f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f14:	4641      	mov	r1, r8
 8008f16:	4638      	mov	r0, r7
 8008f18:	47c8      	blx	r9
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d01e      	beq.n	8008f5c <_printf_common+0xa4>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	f003 0306 	and.w	r3, r3, #6
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	bf02      	ittt	eq
 8008f2a:	68e5      	ldreq	r5, [r4, #12]
 8008f2c:	6833      	ldreq	r3, [r6, #0]
 8008f2e:	1aed      	subeq	r5, r5, r3
 8008f30:	68a3      	ldr	r3, [r4, #8]
 8008f32:	bf0c      	ite	eq
 8008f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f38:	2500      	movne	r5, #0
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	bfc4      	itt	gt
 8008f3e:	1a9b      	subgt	r3, r3, r2
 8008f40:	18ed      	addgt	r5, r5, r3
 8008f42:	2600      	movs	r6, #0
 8008f44:	341a      	adds	r4, #26
 8008f46:	42b5      	cmp	r5, r6
 8008f48:	d11a      	bne.n	8008f80 <_printf_common+0xc8>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e008      	b.n	8008f60 <_printf_common+0xa8>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4652      	mov	r2, sl
 8008f52:	4641      	mov	r1, r8
 8008f54:	4638      	mov	r0, r7
 8008f56:	47c8      	blx	r9
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d103      	bne.n	8008f64 <_printf_common+0xac>
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f64:	3501      	adds	r5, #1
 8008f66:	e7c6      	b.n	8008ef6 <_printf_common+0x3e>
 8008f68:	18e1      	adds	r1, r4, r3
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	2030      	movs	r0, #48	@ 0x30
 8008f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f72:	4422      	add	r2, r4
 8008f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	e7c7      	b.n	8008f10 <_printf_common+0x58>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4622      	mov	r2, r4
 8008f84:	4641      	mov	r1, r8
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c8      	blx	r9
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0e6      	beq.n	8008f5c <_printf_common+0xa4>
 8008f8e:	3601      	adds	r6, #1
 8008f90:	e7d9      	b.n	8008f46 <_printf_common+0x8e>
	...

08008f94 <_printf_i>:
 8008f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	7e0f      	ldrb	r7, [r1, #24]
 8008f9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f9c:	2f78      	cmp	r7, #120	@ 0x78
 8008f9e:	4691      	mov	r9, r2
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	469a      	mov	sl, r3
 8008fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008faa:	d807      	bhi.n	8008fbc <_printf_i+0x28>
 8008fac:	2f62      	cmp	r7, #98	@ 0x62
 8008fae:	d80a      	bhi.n	8008fc6 <_printf_i+0x32>
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f000 80d2 	beq.w	800915a <_printf_i+0x1c6>
 8008fb6:	2f58      	cmp	r7, #88	@ 0x58
 8008fb8:	f000 80b9 	beq.w	800912e <_printf_i+0x19a>
 8008fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fc4:	e03a      	b.n	800903c <_printf_i+0xa8>
 8008fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fca:	2b15      	cmp	r3, #21
 8008fcc:	d8f6      	bhi.n	8008fbc <_printf_i+0x28>
 8008fce:	a101      	add	r1, pc, #4	@ (adr r1, 8008fd4 <_printf_i+0x40>)
 8008fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08008fbd 	.word	0x08008fbd
 8008fe0:	08008fbd 	.word	0x08008fbd
 8008fe4:	08008fbd 	.word	0x08008fbd
 8008fe8:	08008fbd 	.word	0x08008fbd
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008fbd 	.word	0x08008fbd
 8008ff4:	08008fbd 	.word	0x08008fbd
 8008ff8:	08008fbd 	.word	0x08008fbd
 8008ffc:	08008fbd 	.word	0x08008fbd
 8009000:	08009141 	.word	0x08009141
 8009004:	0800906b 	.word	0x0800906b
 8009008:	080090fb 	.word	0x080090fb
 800900c:	08008fbd 	.word	0x08008fbd
 8009010:	08008fbd 	.word	0x08008fbd
 8009014:	08009163 	.word	0x08009163
 8009018:	08008fbd 	.word	0x08008fbd
 800901c:	0800906b 	.word	0x0800906b
 8009020:	08008fbd 	.word	0x08008fbd
 8009024:	08008fbd 	.word	0x08008fbd
 8009028:	08009103 	.word	0x08009103
 800902c:	6833      	ldr	r3, [r6, #0]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6032      	str	r2, [r6, #0]
 8009034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800903c:	2301      	movs	r3, #1
 800903e:	e09d      	b.n	800917c <_printf_i+0x1e8>
 8009040:	6833      	ldr	r3, [r6, #0]
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	1d19      	adds	r1, r3, #4
 8009046:	6031      	str	r1, [r6, #0]
 8009048:	0606      	lsls	r6, r0, #24
 800904a:	d501      	bpl.n	8009050 <_printf_i+0xbc>
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	e003      	b.n	8009058 <_printf_i+0xc4>
 8009050:	0645      	lsls	r5, r0, #25
 8009052:	d5fb      	bpl.n	800904c <_printf_i+0xb8>
 8009054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009058:	2d00      	cmp	r5, #0
 800905a:	da03      	bge.n	8009064 <_printf_i+0xd0>
 800905c:	232d      	movs	r3, #45	@ 0x2d
 800905e:	426d      	negs	r5, r5
 8009060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009064:	4859      	ldr	r0, [pc, #356]	@ (80091cc <_printf_i+0x238>)
 8009066:	230a      	movs	r3, #10
 8009068:	e011      	b.n	800908e <_printf_i+0xfa>
 800906a:	6821      	ldr	r1, [r4, #0]
 800906c:	6833      	ldr	r3, [r6, #0]
 800906e:	0608      	lsls	r0, r1, #24
 8009070:	f853 5b04 	ldr.w	r5, [r3], #4
 8009074:	d402      	bmi.n	800907c <_printf_i+0xe8>
 8009076:	0649      	lsls	r1, r1, #25
 8009078:	bf48      	it	mi
 800907a:	b2ad      	uxthmi	r5, r5
 800907c:	2f6f      	cmp	r7, #111	@ 0x6f
 800907e:	4853      	ldr	r0, [pc, #332]	@ (80091cc <_printf_i+0x238>)
 8009080:	6033      	str	r3, [r6, #0]
 8009082:	bf14      	ite	ne
 8009084:	230a      	movne	r3, #10
 8009086:	2308      	moveq	r3, #8
 8009088:	2100      	movs	r1, #0
 800908a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800908e:	6866      	ldr	r6, [r4, #4]
 8009090:	60a6      	str	r6, [r4, #8]
 8009092:	2e00      	cmp	r6, #0
 8009094:	bfa2      	ittt	ge
 8009096:	6821      	ldrge	r1, [r4, #0]
 8009098:	f021 0104 	bicge.w	r1, r1, #4
 800909c:	6021      	strge	r1, [r4, #0]
 800909e:	b90d      	cbnz	r5, 80090a4 <_printf_i+0x110>
 80090a0:	2e00      	cmp	r6, #0
 80090a2:	d04b      	beq.n	800913c <_printf_i+0x1a8>
 80090a4:	4616      	mov	r6, r2
 80090a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80090aa:	fb03 5711 	mls	r7, r3, r1, r5
 80090ae:	5dc7      	ldrb	r7, [r0, r7]
 80090b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090b4:	462f      	mov	r7, r5
 80090b6:	42bb      	cmp	r3, r7
 80090b8:	460d      	mov	r5, r1
 80090ba:	d9f4      	bls.n	80090a6 <_printf_i+0x112>
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d10b      	bne.n	80090d8 <_printf_i+0x144>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	07df      	lsls	r7, r3, #31
 80090c4:	d508      	bpl.n	80090d8 <_printf_i+0x144>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	6861      	ldr	r1, [r4, #4]
 80090ca:	4299      	cmp	r1, r3
 80090cc:	bfde      	ittt	le
 80090ce:	2330      	movle	r3, #48	@ 0x30
 80090d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090d8:	1b92      	subs	r2, r2, r6
 80090da:	6122      	str	r2, [r4, #16]
 80090dc:	f8cd a000 	str.w	sl, [sp]
 80090e0:	464b      	mov	r3, r9
 80090e2:	aa03      	add	r2, sp, #12
 80090e4:	4621      	mov	r1, r4
 80090e6:	4640      	mov	r0, r8
 80090e8:	f7ff fee6 	bl	8008eb8 <_printf_common>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d14a      	bne.n	8009186 <_printf_i+0x1f2>
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	b004      	add	sp, #16
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	f043 0320 	orr.w	r3, r3, #32
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	4833      	ldr	r0, [pc, #204]	@ (80091d0 <_printf_i+0x23c>)
 8009104:	2778      	movs	r7, #120	@ 0x78
 8009106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	6831      	ldr	r1, [r6, #0]
 800910e:	061f      	lsls	r7, r3, #24
 8009110:	f851 5b04 	ldr.w	r5, [r1], #4
 8009114:	d402      	bmi.n	800911c <_printf_i+0x188>
 8009116:	065f      	lsls	r7, r3, #25
 8009118:	bf48      	it	mi
 800911a:	b2ad      	uxthmi	r5, r5
 800911c:	6031      	str	r1, [r6, #0]
 800911e:	07d9      	lsls	r1, r3, #31
 8009120:	bf44      	itt	mi
 8009122:	f043 0320 	orrmi.w	r3, r3, #32
 8009126:	6023      	strmi	r3, [r4, #0]
 8009128:	b11d      	cbz	r5, 8009132 <_printf_i+0x19e>
 800912a:	2310      	movs	r3, #16
 800912c:	e7ac      	b.n	8009088 <_printf_i+0xf4>
 800912e:	4827      	ldr	r0, [pc, #156]	@ (80091cc <_printf_i+0x238>)
 8009130:	e7e9      	b.n	8009106 <_printf_i+0x172>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	f023 0320 	bic.w	r3, r3, #32
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	e7f6      	b.n	800912a <_printf_i+0x196>
 800913c:	4616      	mov	r6, r2
 800913e:	e7bd      	b.n	80090bc <_printf_i+0x128>
 8009140:	6833      	ldr	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	6961      	ldr	r1, [r4, #20]
 8009146:	1d18      	adds	r0, r3, #4
 8009148:	6030      	str	r0, [r6, #0]
 800914a:	062e      	lsls	r6, r5, #24
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	d501      	bpl.n	8009154 <_printf_i+0x1c0>
 8009150:	6019      	str	r1, [r3, #0]
 8009152:	e002      	b.n	800915a <_printf_i+0x1c6>
 8009154:	0668      	lsls	r0, r5, #25
 8009156:	d5fb      	bpl.n	8009150 <_printf_i+0x1bc>
 8009158:	8019      	strh	r1, [r3, #0]
 800915a:	2300      	movs	r3, #0
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	4616      	mov	r6, r2
 8009160:	e7bc      	b.n	80090dc <_printf_i+0x148>
 8009162:	6833      	ldr	r3, [r6, #0]
 8009164:	1d1a      	adds	r2, r3, #4
 8009166:	6032      	str	r2, [r6, #0]
 8009168:	681e      	ldr	r6, [r3, #0]
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	2100      	movs	r1, #0
 800916e:	4630      	mov	r0, r6
 8009170:	f7f7 f866 	bl	8000240 <memchr>
 8009174:	b108      	cbz	r0, 800917a <_printf_i+0x1e6>
 8009176:	1b80      	subs	r0, r0, r6
 8009178:	6060      	str	r0, [r4, #4]
 800917a:	6863      	ldr	r3, [r4, #4]
 800917c:	6123      	str	r3, [r4, #16]
 800917e:	2300      	movs	r3, #0
 8009180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009184:	e7aa      	b.n	80090dc <_printf_i+0x148>
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	4632      	mov	r2, r6
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	47d0      	blx	sl
 8009190:	3001      	adds	r0, #1
 8009192:	d0ad      	beq.n	80090f0 <_printf_i+0x15c>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	079b      	lsls	r3, r3, #30
 8009198:	d413      	bmi.n	80091c2 <_printf_i+0x22e>
 800919a:	68e0      	ldr	r0, [r4, #12]
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	4298      	cmp	r0, r3
 80091a0:	bfb8      	it	lt
 80091a2:	4618      	movlt	r0, r3
 80091a4:	e7a6      	b.n	80090f4 <_printf_i+0x160>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4632      	mov	r2, r6
 80091aa:	4649      	mov	r1, r9
 80091ac:	4640      	mov	r0, r8
 80091ae:	47d0      	blx	sl
 80091b0:	3001      	adds	r0, #1
 80091b2:	d09d      	beq.n	80090f0 <_printf_i+0x15c>
 80091b4:	3501      	adds	r5, #1
 80091b6:	68e3      	ldr	r3, [r4, #12]
 80091b8:	9903      	ldr	r1, [sp, #12]
 80091ba:	1a5b      	subs	r3, r3, r1
 80091bc:	42ab      	cmp	r3, r5
 80091be:	dcf2      	bgt.n	80091a6 <_printf_i+0x212>
 80091c0:	e7eb      	b.n	800919a <_printf_i+0x206>
 80091c2:	2500      	movs	r5, #0
 80091c4:	f104 0619 	add.w	r6, r4, #25
 80091c8:	e7f5      	b.n	80091b6 <_printf_i+0x222>
 80091ca:	bf00      	nop
 80091cc:	080098b3 	.word	0x080098b3
 80091d0:	080098c4 	.word	0x080098c4

080091d4 <__swbuf_r>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	460e      	mov	r6, r1
 80091d8:	4614      	mov	r4, r2
 80091da:	4605      	mov	r5, r0
 80091dc:	b118      	cbz	r0, 80091e6 <__swbuf_r+0x12>
 80091de:	6a03      	ldr	r3, [r0, #32]
 80091e0:	b90b      	cbnz	r3, 80091e6 <__swbuf_r+0x12>
 80091e2:	f7ff f9e3 	bl	80085ac <__sinit>
 80091e6:	69a3      	ldr	r3, [r4, #24]
 80091e8:	60a3      	str	r3, [r4, #8]
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	071a      	lsls	r2, r3, #28
 80091ee:	d501      	bpl.n	80091f4 <__swbuf_r+0x20>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	b943      	cbnz	r3, 8009206 <__swbuf_r+0x32>
 80091f4:	4621      	mov	r1, r4
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f82a 	bl	8009250 <__swsetup_r>
 80091fc:	b118      	cbz	r0, 8009206 <__swbuf_r+0x32>
 80091fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009202:	4638      	mov	r0, r7
 8009204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	6922      	ldr	r2, [r4, #16]
 800920a:	1a98      	subs	r0, r3, r2
 800920c:	6963      	ldr	r3, [r4, #20]
 800920e:	b2f6      	uxtb	r6, r6
 8009210:	4283      	cmp	r3, r0
 8009212:	4637      	mov	r7, r6
 8009214:	dc05      	bgt.n	8009222 <__swbuf_r+0x4e>
 8009216:	4621      	mov	r1, r4
 8009218:	4628      	mov	r0, r5
 800921a:	f7ff fcbb 	bl	8008b94 <_fflush_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	d1ed      	bne.n	80091fe <__swbuf_r+0x2a>
 8009222:	68a3      	ldr	r3, [r4, #8]
 8009224:	3b01      	subs	r3, #1
 8009226:	60a3      	str	r3, [r4, #8]
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	6022      	str	r2, [r4, #0]
 800922e:	701e      	strb	r6, [r3, #0]
 8009230:	6962      	ldr	r2, [r4, #20]
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	429a      	cmp	r2, r3
 8009236:	d004      	beq.n	8009242 <__swbuf_r+0x6e>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	07db      	lsls	r3, r3, #31
 800923c:	d5e1      	bpl.n	8009202 <__swbuf_r+0x2e>
 800923e:	2e0a      	cmp	r6, #10
 8009240:	d1df      	bne.n	8009202 <__swbuf_r+0x2e>
 8009242:	4621      	mov	r1, r4
 8009244:	4628      	mov	r0, r5
 8009246:	f7ff fca5 	bl	8008b94 <_fflush_r>
 800924a:	2800      	cmp	r0, #0
 800924c:	d0d9      	beq.n	8009202 <__swbuf_r+0x2e>
 800924e:	e7d6      	b.n	80091fe <__swbuf_r+0x2a>

08009250 <__swsetup_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4b29      	ldr	r3, [pc, #164]	@ (80092f8 <__swsetup_r+0xa8>)
 8009254:	4605      	mov	r5, r0
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	460c      	mov	r4, r1
 800925a:	b118      	cbz	r0, 8009264 <__swsetup_r+0x14>
 800925c:	6a03      	ldr	r3, [r0, #32]
 800925e:	b90b      	cbnz	r3, 8009264 <__swsetup_r+0x14>
 8009260:	f7ff f9a4 	bl	80085ac <__sinit>
 8009264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009268:	0719      	lsls	r1, r3, #28
 800926a:	d422      	bmi.n	80092b2 <__swsetup_r+0x62>
 800926c:	06da      	lsls	r2, r3, #27
 800926e:	d407      	bmi.n	8009280 <__swsetup_r+0x30>
 8009270:	2209      	movs	r2, #9
 8009272:	602a      	str	r2, [r5, #0]
 8009274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	f04f 30ff 	mov.w	r0, #4294967295
 800927e:	e033      	b.n	80092e8 <__swsetup_r+0x98>
 8009280:	0758      	lsls	r0, r3, #29
 8009282:	d512      	bpl.n	80092aa <__swsetup_r+0x5a>
 8009284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009286:	b141      	cbz	r1, 800929a <__swsetup_r+0x4a>
 8009288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800928c:	4299      	cmp	r1, r3
 800928e:	d002      	beq.n	8009296 <__swsetup_r+0x46>
 8009290:	4628      	mov	r0, r5
 8009292:	f7ff fafb 	bl	800888c <_free_r>
 8009296:	2300      	movs	r3, #0
 8009298:	6363      	str	r3, [r4, #52]	@ 0x34
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	2300      	movs	r3, #0
 80092a4:	6063      	str	r3, [r4, #4]
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f043 0308 	orr.w	r3, r3, #8
 80092b0:	81a3      	strh	r3, [r4, #12]
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	b94b      	cbnz	r3, 80092ca <__swsetup_r+0x7a>
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c0:	d003      	beq.n	80092ca <__swsetup_r+0x7a>
 80092c2:	4621      	mov	r1, r4
 80092c4:	4628      	mov	r0, r5
 80092c6:	f000 f883 	bl	80093d0 <__smakebuf_r>
 80092ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ce:	f013 0201 	ands.w	r2, r3, #1
 80092d2:	d00a      	beq.n	80092ea <__swsetup_r+0x9a>
 80092d4:	2200      	movs	r2, #0
 80092d6:	60a2      	str	r2, [r4, #8]
 80092d8:	6962      	ldr	r2, [r4, #20]
 80092da:	4252      	negs	r2, r2
 80092dc:	61a2      	str	r2, [r4, #24]
 80092de:	6922      	ldr	r2, [r4, #16]
 80092e0:	b942      	cbnz	r2, 80092f4 <__swsetup_r+0xa4>
 80092e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092e6:	d1c5      	bne.n	8009274 <__swsetup_r+0x24>
 80092e8:	bd38      	pop	{r3, r4, r5, pc}
 80092ea:	0799      	lsls	r1, r3, #30
 80092ec:	bf58      	it	pl
 80092ee:	6962      	ldrpl	r2, [r4, #20]
 80092f0:	60a2      	str	r2, [r4, #8]
 80092f2:	e7f4      	b.n	80092de <__swsetup_r+0x8e>
 80092f4:	2000      	movs	r0, #0
 80092f6:	e7f7      	b.n	80092e8 <__swsetup_r+0x98>
 80092f8:	20000018 	.word	0x20000018

080092fc <_raise_r>:
 80092fc:	291f      	cmp	r1, #31
 80092fe:	b538      	push	{r3, r4, r5, lr}
 8009300:	4605      	mov	r5, r0
 8009302:	460c      	mov	r4, r1
 8009304:	d904      	bls.n	8009310 <_raise_r+0x14>
 8009306:	2316      	movs	r3, #22
 8009308:	6003      	str	r3, [r0, #0]
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009312:	b112      	cbz	r2, 800931a <_raise_r+0x1e>
 8009314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009318:	b94b      	cbnz	r3, 800932e <_raise_r+0x32>
 800931a:	4628      	mov	r0, r5
 800931c:	f000 f830 	bl	8009380 <_getpid_r>
 8009320:	4622      	mov	r2, r4
 8009322:	4601      	mov	r1, r0
 8009324:	4628      	mov	r0, r5
 8009326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800932a:	f000 b817 	b.w	800935c <_kill_r>
 800932e:	2b01      	cmp	r3, #1
 8009330:	d00a      	beq.n	8009348 <_raise_r+0x4c>
 8009332:	1c59      	adds	r1, r3, #1
 8009334:	d103      	bne.n	800933e <_raise_r+0x42>
 8009336:	2316      	movs	r3, #22
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	2001      	movs	r0, #1
 800933c:	e7e7      	b.n	800930e <_raise_r+0x12>
 800933e:	2100      	movs	r1, #0
 8009340:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009344:	4620      	mov	r0, r4
 8009346:	4798      	blx	r3
 8009348:	2000      	movs	r0, #0
 800934a:	e7e0      	b.n	800930e <_raise_r+0x12>

0800934c <raise>:
 800934c:	4b02      	ldr	r3, [pc, #8]	@ (8009358 <raise+0xc>)
 800934e:	4601      	mov	r1, r0
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f7ff bfd3 	b.w	80092fc <_raise_r>
 8009356:	bf00      	nop
 8009358:	20000018 	.word	0x20000018

0800935c <_kill_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d07      	ldr	r5, [pc, #28]	@ (800937c <_kill_r+0x20>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	4611      	mov	r1, r2
 8009368:	602b      	str	r3, [r5, #0]
 800936a:	f7f7 febd 	bl	80010e8 <_kill>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	d102      	bne.n	8009378 <_kill_r+0x1c>
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	b103      	cbz	r3, 8009378 <_kill_r+0x1c>
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	bd38      	pop	{r3, r4, r5, pc}
 800937a:	bf00      	nop
 800937c:	20000588 	.word	0x20000588

08009380 <_getpid_r>:
 8009380:	f7f7 beaa 	b.w	80010d8 <_getpid>

08009384 <__swhatbuf_r>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	460c      	mov	r4, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	2900      	cmp	r1, #0
 800938e:	b096      	sub	sp, #88	@ 0x58
 8009390:	4615      	mov	r5, r2
 8009392:	461e      	mov	r6, r3
 8009394:	da0d      	bge.n	80093b2 <__swhatbuf_r+0x2e>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800939c:	f04f 0100 	mov.w	r1, #0
 80093a0:	bf14      	ite	ne
 80093a2:	2340      	movne	r3, #64	@ 0x40
 80093a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093a8:	2000      	movs	r0, #0
 80093aa:	6031      	str	r1, [r6, #0]
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	b016      	add	sp, #88	@ 0x58
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
 80093b2:	466a      	mov	r2, sp
 80093b4:	f000 f848 	bl	8009448 <_fstat_r>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	dbec      	blt.n	8009396 <__swhatbuf_r+0x12>
 80093bc:	9901      	ldr	r1, [sp, #4]
 80093be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093c6:	4259      	negs	r1, r3
 80093c8:	4159      	adcs	r1, r3
 80093ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093ce:	e7eb      	b.n	80093a8 <__swhatbuf_r+0x24>

080093d0 <__smakebuf_r>:
 80093d0:	898b      	ldrh	r3, [r1, #12]
 80093d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093d4:	079d      	lsls	r5, r3, #30
 80093d6:	4606      	mov	r6, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	d507      	bpl.n	80093ec <__smakebuf_r+0x1c>
 80093dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	6123      	str	r3, [r4, #16]
 80093e4:	2301      	movs	r3, #1
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	b003      	add	sp, #12
 80093ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ec:	ab01      	add	r3, sp, #4
 80093ee:	466a      	mov	r2, sp
 80093f0:	f7ff ffc8 	bl	8009384 <__swhatbuf_r>
 80093f4:	9f00      	ldr	r7, [sp, #0]
 80093f6:	4605      	mov	r5, r0
 80093f8:	4639      	mov	r1, r7
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff faba 	bl	8008974 <_malloc_r>
 8009400:	b948      	cbnz	r0, 8009416 <__smakebuf_r+0x46>
 8009402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009406:	059a      	lsls	r2, r3, #22
 8009408:	d4ee      	bmi.n	80093e8 <__smakebuf_r+0x18>
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	f043 0302 	orr.w	r3, r3, #2
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	e7e2      	b.n	80093dc <__smakebuf_r+0xc>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	6020      	str	r0, [r4, #0]
 800941a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009426:	b15b      	cbz	r3, 8009440 <__smakebuf_r+0x70>
 8009428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800942c:	4630      	mov	r0, r6
 800942e:	f000 f81d 	bl	800946c <_isatty_r>
 8009432:	b128      	cbz	r0, 8009440 <__smakebuf_r+0x70>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	431d      	orrs	r5, r3
 8009444:	81a5      	strh	r5, [r4, #12]
 8009446:	e7cf      	b.n	80093e8 <__smakebuf_r+0x18>

08009448 <_fstat_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	@ (8009468 <_fstat_r+0x20>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	f7f7 fea7 	bl	80011a8 <_fstat>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d102      	bne.n	8009464 <_fstat_r+0x1c>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	b103      	cbz	r3, 8009464 <_fstat_r+0x1c>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20000588 	.word	0x20000588

0800946c <_isatty_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d06      	ldr	r5, [pc, #24]	@ (8009488 <_isatty_r+0x1c>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	602b      	str	r3, [r5, #0]
 8009478:	f7f7 fea6 	bl	80011c8 <_isatty>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_isatty_r+0x1a>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_isatty_r+0x1a>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20000588 	.word	0x20000588

0800948c <_init>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	bf00      	nop
 8009490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009492:	bc08      	pop	{r3}
 8009494:	469e      	mov	lr, r3
 8009496:	4770      	bx	lr

08009498 <_fini>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr
