
TP_SaC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009958  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08009b38  08009b38  0000ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fac  08009fac  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fac  08009fac  0000afac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb4  08009fb4  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb4  08009fb4  0000afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fb8  08009fb8  0000afb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009fbc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  2000006c  0800a028  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800a028  0000b59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a39d  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003528  00000000  00000000  00025439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00028968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112f  00000000  00000000  00029f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a041  00000000  00000000  0002b0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b024  00000000  00000000  00055108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114a15  00000000  00000000  0007012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184b41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a34  00000000  00000000  00184b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0018b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009b20 	.word	0x08009b20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08009b20 	.word	0x08009b20

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 f9e4 	bl	80089c6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fcdb 	bl	8002024 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fcce 	bl	8001014 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 faf0 	bl	8002c68 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fcc1 	bl	8001014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fe74 	bl	800239c <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fcab 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000088 	.word	0x20000088
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 f972 	bl	80089c6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fc6a 	bl	8002024 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fc5d 	bl	8001014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fe10 	bl	800239c <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fc47 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000f4 	.word	0x200000f4
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 f902 	bl	80089c6 <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fcbd 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 fc14 	bl	8001014 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fc9f 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fc90 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fc82 	bl	80031b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fc43 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 fb9a 	bl	8001014 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fc31 	bl	80031b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fc22 	bl	80031b8 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000160 	.word	0x20000160
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fd49 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fd44 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 fbb4 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 fba5 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 fb97 	bl	80031b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 faaa 	bl	8002fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 fac1 	bl	800301c <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /** @brief Tableau des arguments extraits de la commande */
  char* argv[MAX_ARGS];

  /** @brief Nombre d'arguments */
  int argc = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34

  /** @brief Token pour l'analyse de la chaîne */
  char* token;

  /** @brief Flag indiquant qu'une nouvelle commande est prête */
  int newCmdReady = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f001 f882 	bl	8001bc6 <HAL_Init>

  /* USER CODE BEGIN Init */
  idxCmd = 0;
 8000ac2:	4ba9      	ldr	r3, [pc, #676]	@ (8000d68 <main+0x2b8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
  memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000ac8:	2240      	movs	r2, #64	@ 0x40
 8000aca:	2100      	movs	r1, #0
 8000acc:	48a7      	ldr	r0, [pc, #668]	@ (8000d6c <main+0x2bc>)
 8000ace:	f007 ff7a 	bl	80089c6 <memset>
  memset(argv, 0, MAX_ARGS * sizeof(char*));
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2224      	movs	r2, #36	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 ff73 	bl	80089c6 <memset>
  memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8000d70 <main+0x2c0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE);
 8000ae6:	2240      	movs	r2, #64	@ 0x40
 8000ae8:	2100      	movs	r1, #0
 8000aea:	48a2      	ldr	r0, [pc, #648]	@ (8000d74 <main+0x2c4>)
 8000aec:	f007 ff6b 	bl	80089c6 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f968 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f7ff ff4c 	bl	8000990 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000af8:	f7ff fdea 	bl	80006d0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000afc:	f7ff fd70 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b00:	f000 fc42 	bl	8001388 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b04:	f000 fd62 	bl	80015cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b08:	f000 fefc 	bl	8001904 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b0c:	f000 ff46 	bl	800199c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000b10:	f000 fcf8 	bl	8001504 <MX_TIM2_Init>
//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 103);
//



  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b14:	2201      	movs	r2, #1
 8000b16:	4996      	ldr	r1, [pc, #600]	@ (8000d70 <main+0x2c0>)
 8000b18:	4897      	ldr	r0, [pc, #604]	@ (8000d78 <main+0x2c8>)
 8000b1a:	f005 fd3b 	bl	8006594 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f001 f888 	bl	8001c34 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, strlen((char*)started), HAL_MAX_DELAY);
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	2265      	movs	r2, #101	@ 0x65
 8000b2a:	4994      	ldr	r1, [pc, #592]	@ (8000d7c <main+0x2cc>)
 8000b2c:	4892      	ldr	r0, [pc, #584]	@ (8000d78 <main+0x2c8>)
 8000b2e:	f005 fca2 	bl	8006476 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2217      	movs	r2, #23
 8000b38:	4991      	ldr	r1, [pc, #580]	@ (8000d80 <main+0x2d0>)
 8000b3a:	488f      	ldr	r0, [pc, #572]	@ (8000d78 <main+0x2c8>)
 8000b3c:	f005 fc9b 	bl	8006476 <HAL_UART_Transmit>
  while (1)
  {
	/**
	   * @brief Vérifie si un caractère a été reçu sur l'UART.
	   */
    if (uartRxReceived)
 8000b40:	4b90      	ldr	r3, [pc, #576]	@ (8000d84 <main+0x2d4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8086 	beq.w	8000c56 <main+0x1a6>
    {
      uint8_t receivedChar = uartRxBuffer[0];
 8000b4a:	4b89      	ldr	r3, [pc, #548]	@ (8000d70 <main+0x2c0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
      /**
        * @brief Écho du caractère reçu sur l'UART.
        */
      HAL_UART_Transmit(&huart2, &receivedChar, 1, HAL_MAX_DELAY);
 8000b50:	1df9      	adds	r1, r7, #7
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	2201      	movs	r2, #1
 8000b58:	4887      	ldr	r0, [pc, #540]	@ (8000d78 <main+0x2c8>)
 8000b5a:	f005 fc8c 	bl	8006476 <HAL_UART_Transmit>

      /**
        * @brief Traitement du caractère reçu.
        */
      switch (receivedChar)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b62:	d033      	beq.n	8000bcc <main+0x11c>
 8000b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b66:	dc49      	bgt.n	8000bfc <main+0x14c>
 8000b68:	2b0a      	cmp	r3, #10
 8000b6a:	d001      	beq.n	8000b70 <main+0xc0>
 8000b6c:	2b0d      	cmp	r3, #13
 8000b6e:	d145      	bne.n	8000bfc <main+0x14c>
      /**
         * @brief Cas du retour chariot ou du saut de ligne : traite la commande entrée.
         */
        case ASCII_CR:
        case ASCII_LF:
          HAL_UART_Transmit(&huart2, newLine, strlen((char*)newLine), HAL_MAX_DELAY);
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	2202      	movs	r2, #2
 8000b76:	4984      	ldr	r1, [pc, #528]	@ (8000d88 <main+0x2d8>)
 8000b78:	487f      	ldr	r0, [pc, #508]	@ (8000d78 <main+0x2c8>)
 8000b7a:	f005 fc7c 	bl	8006476 <HAL_UART_Transmit>
          cmd[idxCmd] = '\0';
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8000d68 <main+0x2b8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a7a      	ldr	r2, [pc, #488]	@ (8000d6c <main+0x2bc>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	54d1      	strb	r1, [r2, r3]
          argc = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
          token = strtok(cmd, " ");
 8000b8c:	497f      	ldr	r1, [pc, #508]	@ (8000d8c <main+0x2dc>)
 8000b8e:	4877      	ldr	r0, [pc, #476]	@ (8000d6c <main+0x2bc>)
 8000b90:	f007 ff22 	bl	80089d8 <strtok>
 8000b94:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000b96:	e00d      	b.n	8000bb4 <main+0x104>
          {
            argv[argc++] = token;
 8000b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	637a      	str	r2, [r7, #52]	@ 0x34
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	3338      	adds	r3, #56	@ 0x38
 8000ba2:	443b      	add	r3, r7
 8000ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ba6:	f843 2c30 	str.w	r2, [r3, #-48]
            token = strtok(NULL, " ");
 8000baa:	4978      	ldr	r1, [pc, #480]	@ (8000d8c <main+0x2dc>)
 8000bac:	2000      	movs	r0, #0
 8000bae:	f007 ff13 	bl	80089d8 <strtok>
 8000bb2:	6338      	str	r0, [r7, #48]	@ 0x30
          while (token != NULL && argc < MAX_ARGS)
 8000bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <main+0x110>
 8000bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	ddeb      	ble.n	8000b98 <main+0xe8>
          }

          idxCmd = 0;
 8000bc0:	4b69      	ldr	r3, [pc, #420]	@ (8000d68 <main+0x2b8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
          newCmdReady = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8000bca:	e03c      	b.n	8000c46 <main+0x196>
          /**
              * @brief Cas de la suppression : efface le dernier caractère saisi.
              */
        case ASCII_DEL:
          if (idxCmd > 0)
 8000bcc:	4b66      	ldr	r3, [pc, #408]	@ (8000d68 <main+0x2b8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dd37      	ble.n	8000c44 <main+0x194>
          {
            idxCmd--;
 8000bd4:	4b64      	ldr	r3, [pc, #400]	@ (8000d68 <main+0x2b8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	4a63      	ldr	r2, [pc, #396]	@ (8000d68 <main+0x2b8>)
 8000bdc:	6013      	str	r3, [r2, #0]
            cmd[idxCmd] = '\0';
 8000bde:	4b62      	ldr	r3, [pc, #392]	@ (8000d68 <main+0x2b8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a62      	ldr	r2, [pc, #392]	@ (8000d6c <main+0x2bc>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	54d1      	strb	r1, [r2, r3]
            // Envoyer un retour en arrière pour effacer dans le terminal
            uint8_t backspace = '\b';
 8000be8:	2308      	movs	r3, #8
 8000bea:	71bb      	strb	r3, [r7, #6]
            HAL_UART_Transmit(&huart2, &backspace, 1, HAL_MAX_DELAY);
 8000bec:	1db9      	adds	r1, r7, #6
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4860      	ldr	r0, [pc, #384]	@ (8000d78 <main+0x2c8>)
 8000bf6:	f005 fc3e 	bl	8006476 <HAL_UART_Transmit>
          }
          break;
 8000bfa:	e023      	b.n	8000c44 <main+0x194>

        /**
           * @brief Cas par défaut : ajoute le caractère au buffer de commande.
           */
        default:
          if (idxCmd < CMD_BUFFER_SIZE - 1)
 8000bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8000d68 <main+0x2b8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c02:	dc08      	bgt.n	8000c16 <main+0x166>
          {
            cmd[idxCmd++] = receivedChar;
 8000c04:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <main+0x2b8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	4957      	ldr	r1, [pc, #348]	@ (8000d68 <main+0x2b8>)
 8000c0c:	600a      	str	r2, [r1, #0]
 8000c0e:	79f9      	ldrb	r1, [r7, #7]
 8000c10:	4a56      	ldr	r2, [pc, #344]	@ (8000d6c <main+0x2bc>)
 8000c12:	54d1      	strb	r1, [r2, r3]
            idxCmd = 0;
            memset(cmd, '\0', CMD_BUFFER_SIZE);
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
          }
          break;
 8000c14:	e017      	b.n	8000c46 <main+0x196>
            idxCmd = 0;
 8000c16:	4b54      	ldr	r3, [pc, #336]	@ (8000d68 <main+0x2b8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
            memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000c1c:	2240      	movs	r2, #64	@ 0x40
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4852      	ldr	r0, [pc, #328]	@ (8000d6c <main+0x2bc>)
 8000c22:	f007 fed0 	bl	80089c6 <memset>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Command too long\r\n", 18, HAL_MAX_DELAY);
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	2212      	movs	r2, #18
 8000c2c:	4958      	ldr	r1, [pc, #352]	@ (8000d90 <main+0x2e0>)
 8000c2e:	4852      	ldr	r0, [pc, #328]	@ (8000d78 <main+0x2c8>)
 8000c30:	f005 fc21 	bl	8006476 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	2217      	movs	r2, #23
 8000c3a:	4951      	ldr	r1, [pc, #324]	@ (8000d80 <main+0x2d0>)
 8000c3c:	484e      	ldr	r0, [pc, #312]	@ (8000d78 <main+0x2c8>)
 8000c3e:	f005 fc1a 	bl	8006476 <HAL_UART_Transmit>
          break;
 8000c42:	e000      	b.n	8000c46 <main+0x196>
          break;
 8000c44:	bf00      	nop
      }
      uartRxReceived = 0;
 8000c46:	4b4f      	ldr	r3, [pc, #316]	@ (8000d84 <main+0x2d4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
      /**
        * @brief Relance la réception UART en interruption.
        */
      HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4948      	ldr	r1, [pc, #288]	@ (8000d70 <main+0x2c0>)
 8000c50:	4849      	ldr	r0, [pc, #292]	@ (8000d78 <main+0x2c8>)
 8000c52:	f005 fc9f 	bl	8006594 <HAL_UART_Receive_IT>
    }
    /**
      * @brief Vérifie si une nouvelle commande est prête à être traitée.
      */
    if (newCmdReady)
 8000c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f43f af71 	beq.w	8000b40 <main+0x90>
    {
      newCmdReady = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (argc > 0)
 8000c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dd6e      	ble.n	8000d46 <main+0x296>
      {
    	/**
    	  * @brief (Sera remplacé par une fonction) Traite les commandes reconnues : help, pinout, start, stop.
    	  */
        if (strcmp(argv[0], "help") == 0)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	494a      	ldr	r1, [pc, #296]	@ (8000d94 <main+0x2e4>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fad7 	bl	8000220 <strcmp>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d107      	bne.n	8000c88 <main+0x1d8>
        {
          HAL_UART_Transmit(&huart2, helpMsg, strlen((char*)helpMsg), HAL_MAX_DELAY);
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	22ac      	movs	r2, #172	@ 0xac
 8000c7e:	4946      	ldr	r1, [pc, #280]	@ (8000d98 <main+0x2e8>)
 8000c80:	483d      	ldr	r0, [pc, #244]	@ (8000d78 <main+0x2c8>)
 8000c82:	f005 fbf8 	bl	8006476 <HAL_UART_Transmit>
 8000c86:	e05e      	b.n	8000d46 <main+0x296>
        }
        else if (strcmp(argv[0], "pinout") == 0)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4944      	ldr	r1, [pc, #272]	@ (8000d9c <main+0x2ec>)
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fac7 	bl	8000220 <strcmp>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d107      	bne.n	8000ca8 <main+0x1f8>
        {
          HAL_UART_Transmit(&huart2, pinout, strlen((char*)pinout), HAL_MAX_DELAY);
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	2239      	movs	r2, #57	@ 0x39
 8000c9e:	4940      	ldr	r1, [pc, #256]	@ (8000da0 <main+0x2f0>)
 8000ca0:	4835      	ldr	r0, [pc, #212]	@ (8000d78 <main+0x2c8>)
 8000ca2:	f005 fbe8 	bl	8006476 <HAL_UART_Transmit>
 8000ca6:	e04e      	b.n	8000d46 <main+0x296>
        }
        else if (strcmp(argv[0], "start") == 0)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	493e      	ldr	r1, [pc, #248]	@ (8000da4 <main+0x2f4>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fab7 	bl	8000220 <strcmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d109      	bne.n	8000ccc <main+0x21c>
        {
        	start();
 8000cb8:	f000 f8e4 	bl	8000e84 <start>
          HAL_UART_Transmit(&huart2, powerOn, strlen((char*)powerOn), HAL_MAX_DELAY);
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	4939      	ldr	r1, [pc, #228]	@ (8000da8 <main+0x2f8>)
 8000cc4:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <main+0x2c8>)
 8000cc6:	f005 fbd6 	bl	8006476 <HAL_UART_Transmit>
 8000cca:	e03c      	b.n	8000d46 <main+0x296>
        }
        else if (strcmp(argv[0], "stop") == 0)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4937      	ldr	r1, [pc, #220]	@ (8000dac <main+0x2fc>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff faa5 	bl	8000220 <strcmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <main+0x240>
        {
          stop();
 8000cdc:	f000 f8f2 	bl	8000ec4 <stop>
          HAL_UART_Transmit(&huart2, powerOff, strlen((char*)powerOff), HAL_MAX_DELAY);
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	220b      	movs	r2, #11
 8000ce6:	4932      	ldr	r1, [pc, #200]	@ (8000db0 <main+0x300>)
 8000ce8:	4823      	ldr	r0, [pc, #140]	@ (8000d78 <main+0x2c8>)
 8000cea:	f005 fbc4 	bl	8006476 <HAL_UART_Transmit>
 8000cee:	e02a      	b.n	8000d46 <main+0x296>
        }
        else if (strcmp(argv[0], "speed") == 0) {
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4930      	ldr	r1, [pc, #192]	@ (8000db4 <main+0x304>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fa93 	bl	8000220 <strcmp>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d11b      	bne.n	8000d38 <main+0x288>
            if (argc > 1) {
 8000d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	dd10      	ble.n	8000d28 <main+0x278>
            	changeSpeed(atoi(argv[1]));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f007 fcaf 	bl	800866c <atoi>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f8ec 	bl	8000ef0 <changeSpeed>
                HAL_UART_Transmit(&huart2, speedMsg, strlen((char*)speedMsg), HAL_MAX_DELAY);
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	2218      	movs	r2, #24
 8000d1e:	4926      	ldr	r1, [pc, #152]	@ (8000db8 <main+0x308>)
 8000d20:	4815      	ldr	r0, [pc, #84]	@ (8000d78 <main+0x2c8>)
 8000d22:	f005 fba8 	bl	8006476 <HAL_UART_Transmit>
 8000d26:	e00e      	b.n	8000d46 <main+0x296>
            } else {
                HAL_UART_Transmit(&huart2, (uint8_t*)"Speed value missing\r\n", 21, HAL_MAX_DELAY);
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	2215      	movs	r2, #21
 8000d2e:	4923      	ldr	r1, [pc, #140]	@ (8000dbc <main+0x30c>)
 8000d30:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <main+0x2c8>)
 8000d32:	f005 fba0 	bl	8006476 <HAL_UART_Transmit>
 8000d36:	e006      	b.n	8000d46 <main+0x296>
            }
        }
        else
        {
          HAL_UART_Transmit(&huart2, cmdNotFound, strlen((char*)cmdNotFound), HAL_MAX_DELAY);
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	2213      	movs	r2, #19
 8000d3e:	4920      	ldr	r1, [pc, #128]	@ (8000dc0 <main+0x310>)
 8000d40:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <main+0x2c8>)
 8000d42:	f005 fb98 	bl	8006476 <HAL_UART_Transmit>
        }
      }
      // Affiche le prompt
      HAL_UART_Transmit(&huart2, prompt, strlen((char*)prompt), HAL_MAX_DELAY);
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	2217      	movs	r2, #23
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <main+0x2d0>)
 8000d4e:	480a      	ldr	r0, [pc, #40]	@ (8000d78 <main+0x2c8>)
 8000d50:	f005 fb91 	bl	8006476 <HAL_UART_Transmit>

      // Réinitialise le buffer de commande et l'index
      idxCmd = 0;
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <main+0x2b8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
      memset(cmd, '\0', CMD_BUFFER_SIZE);
 8000d5a:	2240      	movs	r2, #64	@ 0x40
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <main+0x2bc>)
 8000d60:	f007 fe31 	bl	80089c6 <memset>
    if (uartRxReceived)
 8000d64:	e6ec      	b.n	8000b40 <main+0x90>
 8000d66:	bf00      	nop
 8000d68:	200001ec 	.word	0x200001ec
 8000d6c:	200001ac 	.word	0x200001ac
 8000d70:	20000168 	.word	0x20000168
 8000d74:	2000016c 	.word	0x2000016c
 8000d78:	20000324 	.word	0x20000324
 8000d7c:	08009be8 	.word	0x08009be8
 8000d80:	08009bd0 	.word	0x08009bd0
 8000d84:	20000164 	.word	0x20000164
 8000d88:	08009c50 	.word	0x08009c50
 8000d8c:	08009b38 	.word	0x08009b38
 8000d90:	08009b3c 	.word	0x08009b3c
 8000d94:	08009b50 	.word	0x08009b50
 8000d98:	08009c70 	.word	0x08009c70
 8000d9c:	08009b58 	.word	0x08009b58
 8000da0:	08009d20 	.word	0x08009d20
 8000da4:	08009b60 	.word	0x08009b60
 8000da8:	08009d5c 	.word	0x08009d5c
 8000dac:	08009b68 	.word	0x08009b68
 8000db0:	08009d68 	.word	0x08009d68
 8000db4:	08009b70 	.word	0x08009b70
 8000db8:	08009c54 	.word	0x08009c54
 8000dbc:	08009b78 	.word	0x08009b78
 8000dc0:	08009d74 	.word	0x08009d74

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	@ 0x50
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2238      	movs	r2, #56	@ 0x38
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f007 fdf7 	bl	80089c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f002 fba4 	bl	8003534 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e02:	2355      	movs	r3, #85	@ 0x55
 8000e04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fc40 	bl	800369c <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e22:	f000 f8f7 	bl	8001014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e26:	230f      	movs	r3, #15
 8000e28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 ff3e 	bl	8003cc0 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e4a:	f000 f8e3 	bl	8001014 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	@ 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_UART_RxCpltCallback>:
  * @brief Callback appelé à la fin de la réception UART.
  * @param huart Handle de l'UART.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <HAL_UART_RxCpltCallback+0x24>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d102      	bne.n	8000e70 <HAL_UART_RxCpltCallback+0x18>
  {
    uartRxReceived = 1;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_UART_RxCpltCallback+0x28>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
    // La relance de la réception UART est effectuée dans la boucle principale
  }
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	20000164 	.word	0x20000164

08000e84 <start>:


void start(){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0


	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <start+0x3c>)
 8000e8c:	f003 fcdc 	bl	8004848 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e90:	2104      	movs	r1, #4
 8000e92:	480b      	ldr	r0, [pc, #44]	@ (8000ec0 <start+0x3c>)
 8000e94:	f003 fcd8 	bl	8004848 <HAL_TIM_PWM_Start>

	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <start+0x3c>)
 8000e9c:	f004 ffe6 	bl	8005e6c <HAL_TIMEx_PWMN_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <start+0x3c>)
 8000ea4:	f004 ffe2 	bl	8005e6c <HAL_TIMEx_PWMN_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <start+0x3c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);
 8000eb2:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <start+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eba:	639a      	str	r2, [r3, #56]	@ 0x38



}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000240 	.word	0x20000240

08000ec4 <stop>:

void stop(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <stop+0x28>)
 8000ecc:	f003 fdce 	bl	8004a6c <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <stop+0x28>)
 8000ed4:	f003 fdca 	bl	8004a6c <HAL_TIM_PWM_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4804      	ldr	r0, [pc, #16]	@ (8000eec <stop+0x28>)
 8000edc:	f005 f888 	bl	8005ff0 <HAL_TIMEx_PWMN_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4802      	ldr	r0, [pc, #8]	@ (8000eec <stop+0x28>)
 8000ee4:	f005 f884 	bl	8005ff0 <HAL_TIMEx_PWMN_Stop>

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000240 	.word	0x20000240

08000ef0 <changeSpeed>:

/** @brief Fonction qui change la vitesse du moteur en modifiant le rapport cyclique des PWM
	* @params speed : vitesse d'entrée
 */

void changeSpeed(uint16_t targetSpeed) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b092      	sub	sp, #72	@ 0x48
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
    static uint16_t currentSpeed = 512;  // Vitesse actuelle (persistant puisque static)

    if (targetSpeed > 100) {
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	2b64      	cmp	r3, #100	@ 0x64
 8000efe:	d915      	bls.n	8000f2c <changeSpeed+0x3c>
        char errorMsg[50];
        sprintf(errorMsg, "Valeur de speed incorrecte: %d. Doit être entre 0 et 100.\r\n", targetSpeed);
 8000f00:	88fa      	ldrh	r2, [r7, #6]
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4935      	ldr	r1, [pc, #212]	@ (8000fdc <changeSpeed+0xec>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 fcf9 	bl	8008900 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)errorMsg, strlen(errorMsg), HAL_MAX_DELAY);
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f98e 	bl	8000234 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	f107 0108 	add.w	r1, r7, #8
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	482e      	ldr	r0, [pc, #184]	@ (8000fe0 <changeSpeed+0xf0>)
 8000f26:	f005 faa6 	bl	8006476 <HAL_UART_Transmit>
 8000f2a:	e053      	b.n	8000fd4 <changeSpeed+0xe4>
        return;
    }

    // Converti la vitesse de 0-100 à 0-1024
    uint16_t targetValue = (targetSpeed * 1024) / 100;
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe4 <changeSpeed+0xf4>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	1152      	asrs	r2, r2, #5
 8000f38:	17db      	asrs	r3, r3, #31
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    // pas de changement
    int16_t step = (targetValue - currentSpeed) / SPEED_STEPS;
 8000f40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000f44:	4a28      	ldr	r2, [pc, #160]	@ (8000fe8 <changeSpeed+0xf8>)
 8000f46:	8812      	ldrh	r2, [r2, #0]
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <changeSpeed+0xf4>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	1152      	asrs	r2, r2, #5
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    // Changer progressivement la vitesse
    for (int i = 0; i < SPEED_STEPS; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f5e:	e026      	b.n	8000fae <changeSpeed+0xbe>
        currentSpeed += step;
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <changeSpeed+0xf8>)
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <changeSpeed+0xf8>)
 8000f6e:	801a      	strh	r2, [r3, #0]

        // currentSpeed reste dans les limites
        if (currentSpeed > 1024) currentSpeed = 1024;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <changeSpeed+0xf8>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f78:	d903      	bls.n	8000f82 <changeSpeed+0x92>
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <changeSpeed+0xf8>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f80:	801a      	strh	r2, [r3, #0]
        if (currentSpeed < 0) currentSpeed = 0;

        uint16_t speed_channel_1 = currentSpeed;
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <changeSpeed+0xf8>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        uint16_t speed_channel_2 = 1024 - currentSpeed;
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <changeSpeed+0xf8>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000f90:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // Mise à jour du rapport cyclique
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed_channel_1);
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <changeSpeed+0xfc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8000f98:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed_channel_2);
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <changeSpeed+0xfc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8000fa0:	639a      	str	r2, [r3, #56]	@ 0x38

        HAL_Delay(SPEED_DELAY);  // Petit délai pour une transition en douceur
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 fe46 	bl	8001c34 <HAL_Delay>
    for (int i = 0; i < SPEED_STEPS; i++) {
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000faa:	3301      	adds	r3, #1
 8000fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fb0:	2b63      	cmp	r3, #99	@ 0x63
 8000fb2:	ddd5      	ble.n	8000f60 <changeSpeed+0x70>
    }

    // Assurer que la vitesse finale est exactement celle demandée
    currentSpeed = targetValue;
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe8 <changeSpeed+0xf8>)
 8000fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000fba:	8013      	strh	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, currentSpeed);
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <changeSpeed+0xf8>)
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <changeSpeed+0xfc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024 - currentSpeed);
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <changeSpeed+0xf8>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <changeSpeed+0xfc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8000fd4:	3748      	adds	r7, #72	@ 0x48
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08009b90 	.word	0x08009b90
 8000fe0:	20000324 	.word	0x20000324
 8000fe4:	51eb851f 	.word	0x51eb851f
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000240 	.word	0x20000240

08000ff0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001002:	f000 fdf9 	bl	8001bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40001000 	.word	0x40001000

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <Error_Handler+0x8>

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	@ 0x60
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	@ 0x58
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001056:	f002 fb11 	bl	800367c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	@ 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001078:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <HAL_InitTick+0xc4>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107c:	4a2b      	ldr	r2, [pc, #172]	@ (800112c <HAL_InitTick+0xc4>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6593      	str	r3, [r2, #88]	@ 0x58
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <HAL_InitTick+0xc4>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001090:	f107 020c 	add.w	r2, r7, #12
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f002 ffe6 	bl	800406c <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010a0:	f002 ffb8 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 80010a4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a8:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <HAL_InitTick+0xc8>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9b      	lsrs	r3, r3, #18
 80010b0:	3b01      	subs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_InitTick+0xcc>)
 80010b6:	4a20      	ldr	r2, [pc, #128]	@ (8001138 <HAL_InitTick+0xd0>)
 80010b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <HAL_InitTick+0xcc>)
 80010bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <HAL_InitTick+0xcc>)
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <HAL_InitTick+0xcc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_InitTick+0xcc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80010d4:	4817      	ldr	r0, [pc, #92]	@ (8001134 <HAL_InitTick+0xcc>)
 80010d6:	f003 fa8f 	bl	80045f8 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80010e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d11b      	bne.n	8001120 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010e8:	4812      	ldr	r0, [pc, #72]	@ (8001134 <HAL_InitTick+0xcc>)
 80010ea:	f003 fadd 	bl	80046a8 <HAL_TIM_Base_Start_IT>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80010f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d111      	bne.n	8001120 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010fc:	2036      	movs	r0, #54	@ 0x36
 80010fe:	f001 ff8d 	bl	800301c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d808      	bhi.n	800111a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	2036      	movs	r0, #54	@ 0x36
 800110e:	f001 ff6b 	bl	8002fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_InitTick+0xd4>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	e002      	b.n	8001120 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001124:	4618      	mov	r0, r3
 8001126:	3730      	adds	r7, #48	@ 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	431bde83 	.word	0x431bde83
 8001134:	200001f0 	.word	0x200001f0
 8001138:	40001000 	.word	0x40001000
 800113c:	20000008 	.word	0x20000008

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <USART2_IRQHandler+0x10>)
 80011a6:	f005 fa41 	bl	800662c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000324 	.word	0x20000324

080011b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80011b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011bc:	f002 f996 	bl	80034ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <TIM6_DAC_IRQHandler+0x10>)
 80011ca:	f003 fceb 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001f0 	.word	0x200001f0

080011d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_kill>:

int _kill(int pid, int sig)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011f2:	f007 fc93 	bl	8008b1c <__errno>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2216      	movs	r2, #22
 80011fa:	601a      	str	r2, [r3, #0]
  return -1;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_exit>:

void _exit (int status)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffe7 	bl	80011e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800121a:	bf00      	nop
 800121c:	e7fd      	b.n	800121a <_exit+0x12>

0800121e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e00a      	b.n	8001246 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001230:	f3af 8000 	nop.w
 8001234:	4601      	mov	r1, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	60ba      	str	r2, [r7, #8]
 800123c:	b2ca      	uxtb	r2, r1
 800123e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	dbf0      	blt.n	8001230 <_read+0x12>
  }

  return len;
 800124e:	687b      	ldr	r3, [r7, #4]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e009      	b.n	800127e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	60ba      	str	r2, [r7, #8]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	dbf1      	blt.n	800126a <_write+0x12>
  }
  return len;
 8001286:	687b      	ldr	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_close>:

int _close(int file)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b8:	605a      	str	r2, [r3, #4]
  return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_isatty>:

int _isatty(int file)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f007 fbf8 	bl	8008b1c <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20020000 	.word	0x20020000
 8001358:	00000400 	.word	0x00000400
 800135c:	2000023c 	.word	0x2000023c
 8001360:	200005a0 	.word	0x200005a0

08001364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09c      	sub	sp, #112	@ 0x70
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2234      	movs	r2, #52	@ 0x34
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 faff 	bl	80089c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c8:	4b4c      	ldr	r3, [pc, #304]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001500 <MX_TIM1_Init+0x178>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80013ce:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013d4:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013d6:	2220      	movs	r2, #32
 80013d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80013da:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e8:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b43      	ldr	r3, [pc, #268]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013f4:	4841      	ldr	r0, [pc, #260]	@ (80014fc <MX_TIM1_Init+0x174>)
 80013f6:	f003 f8ff 	bl	80045f8 <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001400:	f7ff fe08 	bl	8001014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001408:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800140e:	4619      	mov	r1, r3
 8001410:	483a      	ldr	r0, [pc, #232]	@ (80014fc <MX_TIM1_Init+0x174>)
 8001412:	f003 fe2b 	bl	800506c <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800141c:	f7ff fdfa 	bl	8001014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001420:	4836      	ldr	r0, [pc, #216]	@ (80014fc <MX_TIM1_Init+0x174>)
 8001422:	f003 f9b9 	bl	8004798 <HAL_TIM_PWM_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800142c:	f7ff fdf2 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001440:	4619      	mov	r1, r3
 8001442:	482e      	ldr	r0, [pc, #184]	@ (80014fc <MX_TIM1_Init+0x174>)
 8001444:	f004 fe32 	bl	80060ac <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800144e:	f7ff fde1 	bl	8001014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001452:	2360      	movs	r3, #96	@ 0x60
 8001454:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 512;
 8001456:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001470:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	4820      	ldr	r0, [pc, #128]	@ (80014fc <MX_TIM1_Init+0x174>)
 800147a:	f003 fce3 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001484:	f7ff fdc6 	bl	8001014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001488:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800148c:	2204      	movs	r2, #4
 800148e:	4619      	mov	r1, r3
 8001490:	481a      	ldr	r0, [pc, #104]	@ (80014fc <MX_TIM1_Init+0x174>)
 8001492:	f003 fcd7 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800149c:	f7ff fdba 	bl	8001014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 80014ac:	2322      	movs	r3, #34	@ 0x22
 80014ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4807      	ldr	r0, [pc, #28]	@ (80014fc <MX_TIM1_Init+0x174>)
 80014de:	f004 fe7b 	bl	80061d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80014e8:	f7ff fd94 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <MX_TIM1_Init+0x174>)
 80014ee:	f000 f97d 	bl	80017ec <HAL_TIM_MspPostInit>

}
 80014f2:	bf00      	nop
 80014f4:	3770      	adds	r7, #112	@ 0x70
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000240 	.word	0x20000240
 8001500:	40012c00 	.word	0x40012c00

08001504 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001528:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 800152a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800152e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001530:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 800153e:	f04f 32ff 	mov.w	r2, #4294967295
 8001542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001550:	481d      	ldr	r0, [pc, #116]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 8001552:	f003 f921 	bl	8004798 <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800155c:	f7ff fd5a 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4816      	ldr	r0, [pc, #88]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 8001570:	f004 fd9c 	bl	80060ac <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800157a:	f7ff fd4b 	bl	8001014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	@ 0x60
 8001580:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 8001596:	f003 fc55 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80015a0:	f7ff fd38 	bl	8001014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	2204      	movs	r2, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 80015ac:	f003 fc4a 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80015b6:	f7ff fd2d 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ba:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <MX_TIM2_Init+0xc4>)
 80015bc:	f000 f916 	bl	80017ec <HAL_TIM_MspPostInit>

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	@ 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000028c 	.word	0x2000028c

080015cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <MX_TIM3_Init+0x90>)
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <MX_TIM3_Init+0x94>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <MX_TIM3_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <MX_TIM3_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <MX_TIM3_Init+0x90>)
 80015fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001602:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <MX_TIM3_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b14      	ldr	r3, [pc, #80]	@ (800165c <MX_TIM3_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <MX_TIM3_Init+0x90>)
 8001628:	f004 fb71 	bl	8005d0e <HAL_TIMEx_HallSensor_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001632:	f7ff fcef 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001636:	2350      	movs	r3, #80	@ 0x50
 8001638:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	@ (800165c <MX_TIM3_Init+0x90>)
 8001644:	f004 fd32 	bl	80060ac <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800164e:	f7ff fce1 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3720      	adds	r7, #32
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002d8 	.word	0x200002d8
 8001660:	40000400 	.word	0x40000400

08001664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d129      	bne.n	80016da <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	4a17      	ldr	r2, [pc, #92]	@ (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 800168c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001690:	6613      	str	r3, [r2, #96]	@ 0x60
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	4a11      	ldr	r2, [pc, #68]	@ (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80016b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016c8:	2306      	movs	r3, #6
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d6:	f001 fd6f 	bl	80031b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012c00 	.word	0x40012c00
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016fc:	d10b      	bne.n	8001716 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_TIM_PWM_MspInit+0x38>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	4a08      	ldr	r2, [pc, #32]	@ (8001724 <HAL_TIM_PWM_MspInit+0x38>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6593      	str	r3, [r2, #88]	@ 0x58
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_TIM_PWM_MspInit+0x38>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d145      	bne.n	80017d6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	4a25      	ldr	r2, [pc, #148]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6593      	str	r3, [r2, #88]	@ 0x58
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	4a1f      	ldr	r2, [pc, #124]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001792:	2350      	movs	r3, #80	@ 0x50
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017a2:	2302      	movs	r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b0:	f001 fd02 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c6:	2302      	movs	r3, #2
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80017d2:	f001 fcf1 	bl	80031b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000800 	.word	0x48000800

080017ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3b      	ldr	r2, [pc, #236]	@ (80018f8 <HAL_TIM_MspPostInit+0x10c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d14c      	bne.n	80018a8 <HAL_TIM_MspPostInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4b3b      	ldr	r3, [pc, #236]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a3a      	ldr	r2, [pc, #232]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b38      	ldr	r3, [pc, #224]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b35      	ldr	r3, [pc, #212]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a34      	ldr	r2, [pc, #208]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b32      	ldr	r3, [pc, #200]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800183e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001850:	2306      	movs	r3, #6
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4829      	ldr	r0, [pc, #164]	@ (8001900 <HAL_TIM_MspPostInit+0x114>)
 800185c:	f001 fcac 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001872:	2304      	movs	r3, #4
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4820      	ldr	r0, [pc, #128]	@ (8001900 <HAL_TIM_MspPostInit+0x114>)
 800187e:	f001 fc9b 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 8001882:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001894:	2306      	movs	r3, #6
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a2:	f001 fc89 	bl	80031b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018a6:	e022      	b.n	80018ee <HAL_TIM_MspPostInit+0x102>
  else if(timHandle->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b0:	d11d      	bne.n	80018ee <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <HAL_TIM_MspPostInit+0x110>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ea:	f001 fc65 	bl	80031b8 <HAL_GPIO_Init>
}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	@ 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000400 	.word	0x48000400

08001904 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 800190a:	4a23      	ldr	r2, [pc, #140]	@ (8001998 <MX_USART2_UART_Init+0x94>)
 800190c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193a:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194c:	4811      	ldr	r0, [pc, #68]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 800194e:	f004 fd42 	bl	80063d6 <HAL_UART_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001958:	f7ff fb5c 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195c:	2100      	movs	r1, #0
 800195e:	480d      	ldr	r0, [pc, #52]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001960:	f006 fdb9 	bl	80084d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800196a:	f7ff fb53 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800196e:	2100      	movs	r1, #0
 8001970:	4808      	ldr	r0, [pc, #32]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001972:	f006 fdee 	bl	8008552 <HAL_UARTEx_SetRxFifoThreshold>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800197c:	f7ff fb4a 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	@ (8001994 <MX_USART2_UART_Init+0x90>)
 8001982:	f006 fd6f 	bl	8008464 <HAL_UARTEx_DisableFifoMode>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800198c:	f7ff fb42 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000324 	.word	0x20000324
 8001998:	40004400 	.word	0x40004400

0800199c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019a0:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019a2:	4a23      	ldr	r2, [pc, #140]	@ (8001a30 <MX_USART3_UART_Init+0x94>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e4:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019e6:	f004 fcf6 	bl	80063d6 <HAL_UART_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019f0:	f7ff fb10 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 80019f8:	f006 fd6d 	bl	80084d6 <HAL_UARTEx_SetTxFifoThreshold>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a02:	f7ff fb07 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	4808      	ldr	r0, [pc, #32]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 8001a0a:	f006 fda2 	bl	8008552 <HAL_UARTEx_SetRxFifoThreshold>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f7ff fafe 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <MX_USART3_UART_Init+0x90>)
 8001a1a:	f006 fd23 	bl	8008464 <HAL_UARTEx_DisableFifoMode>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a24:	f7ff faf6 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200003b8 	.word	0x200003b8
 8001a30:	40004800 	.word	0x40004800

08001a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0a0      	sub	sp, #128	@ 0x80
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0318 	add.w	r3, r7, #24
 8001a50:	2254      	movs	r2, #84	@ 0x54
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 ffb6 	bl	80089c6 <memset>
  if(uartHandle->Instance==USART2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a41      	ldr	r2, [pc, #260]	@ (8001b64 <HAL_UART_MspInit+0x130>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d13f      	bne.n	8001ae4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fb73 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a7c:	f7ff faca 	bl	8001014 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a80:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	4a38      	ldr	r2, [pc, #224]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8c:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b33      	ldr	r3, [pc, #204]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a32      	ldr	r2, [pc, #200]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ace:	f001 fb73 	bl	80031b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2026      	movs	r0, #38	@ 0x26
 8001ad8:	f001 fa86 	bl	8002fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001adc:	2026      	movs	r0, #38	@ 0x26
 8001ade:	f001 fa9d 	bl	800301c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ae2:	e03b      	b.n	8001b5c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <HAL_UART_MspInit+0x138>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d136      	bne.n	8001b5c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aee:	2304      	movs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fb2e 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001b06:	f7ff fa85 	bl	8001014 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b0a:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	4a16      	ldr	r2, [pc, #88]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b16:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a10      	ldr	r2, [pc, #64]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <HAL_UART_MspInit+0x134>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <HAL_UART_MspInit+0x13c>)
 8001b58:	f001 fb2e 	bl	80031b8 <HAL_GPIO_Init>
}
 8001b5c:	bf00      	nop
 8001b5e:	3780      	adds	r7, #128	@ 0x80
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40004400 	.word	0x40004400
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40004800 	.word	0x40004800
 8001b70:	48000800 	.word	0x48000800

08001b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b78:	f7ff fbf4 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopForever+0xe>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopForever+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f006 ffc1 	bl	8008b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba6:	f7fe ff83 	bl	8000ab0 <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   r0, =_estack
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bb8:	08009fbc 	.word	0x08009fbc
  ldr r2, =_sbss
 8001bbc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bc0:	2000059c 	.word	0x2000059c

08001bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_2_IRQHandler>

08001bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f001 f9fe 	bl	8002fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f7ff fa46 	bl	8001068 <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	e001      	b.n	8001bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be8:	f7ff fa1a 	bl	8001020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bec:	79fb      	ldrb	r3, [r7, #7]

}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_IncTick+0x1c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_IncTick+0x20>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a03      	ldr	r2, [pc, #12]	@ (8001c14 <HAL_IncTick+0x1c>)
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	2000044c 	.word	0x2000044c
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000044c 	.word	0x2000044c

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d004      	beq.n	8001c58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_Delay+0x40>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c58:	bf00      	nop
 8001c5a:	f7ff ffdf 	bl	8001c1c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d8f7      	bhi.n	8001c5a <HAL_Delay+0x26>
  {
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000000c 	.word	0x2000000c

08001c78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3360      	adds	r3, #96	@ 0x60
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <LL_ADC_SetOffset+0x44>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	03fff000 	.word	0x03fff000

08001d28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3360      	adds	r3, #96	@ 0x60
 8001d36:	461a      	mov	r2, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3360      	adds	r3, #96	@ 0x60
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3360      	adds	r3, #96	@ 0x60
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3360      	adds	r3, #96	@ 0x60
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	615a      	str	r2, [r3, #20]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3330      	adds	r3, #48	@ 0x30
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	211f      	movs	r1, #31
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 011f 	and.w	r1, r3, #31
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	431a      	orrs	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3314      	adds	r3, #20
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	0e5b      	lsrs	r3, r3, #25
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	0d1b      	lsrs	r3, r3, #20
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2107      	movs	r1, #7
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	0d1b      	lsrs	r3, r3, #20
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0318 	and.w	r3, r3, #24
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ef0:	40d9      	lsrs	r1, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	431a      	orrs	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	0007ffff 	.word	0x0007ffff

08001f14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6093      	str	r3, [r2, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f4c:	d101      	bne.n	8001f52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_IsEnabled+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_IsEnabled+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b08      	cmp	r3, #8
 800200e:	d101      	bne.n	8002014 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1a9      	b.n	8002392 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe fba5 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff67 	bl	8001f38 <LL_ADC_IsDeepPowerDownEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff4d 	bl	8001f14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff82 	bl	8001f88 <LL_ADC_IsInternalRegulatorEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff66 	bl	8001f60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002094:	4b9c      	ldr	r3, [pc, #624]	@ (8002308 <HAL_ADC_Init+0x2e4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	4a9c      	ldr	r2, [pc, #624]	@ (800230c <HAL_ADC_Init+0x2e8>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff64 	bl	8001f88 <LL_ADC_IsInternalRegulatorEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10d      	bne.n	80020e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	f043 0210 	orr.w	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff75 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80020ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8142 	bne.w	8002380 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 813e 	bne.w	8002380 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800210c:	f043 0202 	orr.w	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff49 	bl	8001fb0 <LL_ADC_IsEnabled>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d141      	bne.n	80021a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800212c:	d004      	beq.n	8002138 <HAL_ADC_Init+0x114>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a77      	ldr	r2, [pc, #476]	@ (8002310 <HAL_ADC_Init+0x2ec>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d10f      	bne.n	8002158 <HAL_ADC_Init+0x134>
 8002138:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800213c:	f7ff ff38 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002140:	4604      	mov	r4, r0
 8002142:	4873      	ldr	r0, [pc, #460]	@ (8002310 <HAL_ADC_Init+0x2ec>)
 8002144:	f7ff ff34 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002148:	4603      	mov	r3, r0
 800214a:	4323      	orrs	r3, r4
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e012      	b.n	800217e <HAL_ADC_Init+0x15a>
 8002158:	486e      	ldr	r0, [pc, #440]	@ (8002314 <HAL_ADC_Init+0x2f0>)
 800215a:	f7ff ff29 	bl	8001fb0 <LL_ADC_IsEnabled>
 800215e:	4604      	mov	r4, r0
 8002160:	486d      	ldr	r0, [pc, #436]	@ (8002318 <HAL_ADC_Init+0x2f4>)
 8002162:	f7ff ff25 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	431c      	orrs	r4, r3
 800216a:	486c      	ldr	r0, [pc, #432]	@ (800231c <HAL_ADC_Init+0x2f8>)
 800216c:	f7ff ff20 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002170:	4603      	mov	r3, r0
 8002172:	4323      	orrs	r3, r4
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d012      	beq.n	80021a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800218a:	d004      	beq.n	8002196 <HAL_ADC_Init+0x172>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5f      	ldr	r2, [pc, #380]	@ (8002310 <HAL_ADC_Init+0x2ec>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x176>
 8002196:	4a62      	ldr	r2, [pc, #392]	@ (8002320 <HAL_ADC_Init+0x2fc>)
 8002198:	e000      	b.n	800219c <HAL_ADC_Init+0x178>
 800219a:	4a62      	ldr	r2, [pc, #392]	@ (8002324 <HAL_ADC_Init+0x300>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f7ff fd68 	bl	8001c78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7f5b      	ldrb	r3, [r3, #29]
 80021ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d106      	bne.n	80021e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	045b      	lsls	r3, r3, #17
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b48      	ldr	r3, [pc, #288]	@ (8002328 <HAL_ADC_Init+0x304>)
 8002208:	4013      	ands	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	430b      	orrs	r3, r1
 8002212:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fee4 	bl	8001ffc <LL_ADC_INJ_IsConversionOngoing>
 8002234:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d17f      	bne.n	800233c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d17c      	bne.n	800233c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002246:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800224e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800225e:	f023 0302 	bic.w	r3, r3, #2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	69b9      	ldr	r1, [r7, #24]
 8002268:	430b      	orrs	r3, r1
 800226a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d017      	beq.n	80022a4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002282:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800228c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002290:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6911      	ldr	r1, [r2, #16]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80022a2:	e013      	b.n	80022cc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d12a      	bne.n	800232c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022f2:	4311      	orrs	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022f8:	430a      	orrs	r2, r1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	e019      	b.n	800233c <HAL_ADC_Init+0x318>
 8002308:	20000004 	.word	0x20000004
 800230c:	053e2d63 	.word	0x053e2d63
 8002310:	50000100 	.word	0x50000100
 8002314:	50000400 	.word	0x50000400
 8002318:	50000500 	.word	0x50000500
 800231c:	50000600 	.word	0x50000600
 8002320:	50000300 	.word	0x50000300
 8002324:	50000700 	.word	0x50000700
 8002328:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10c      	bne.n	800235e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f023 010f 	bic.w	r1, r3, #15
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	1e5a      	subs	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
 800235c:	e007      	b.n	800236e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 020f 	bic.w	r2, r2, #15
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800237e:	e007      	b.n	8002390 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	f043 0210 	orr.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	bf00      	nop

0800239c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0b6      	sub	sp, #216	@ 0xd8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x24>
 80023ba:	2302      	movs	r3, #2
 80023bc:	f000 bc13 	b.w	8002be6 <HAL_ADC_ConfigChannel+0x84a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fe02 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 83f3 	bne.w	8002bc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f7ff fd18 	bl	8001e1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fdf0 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80023f6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fdfc 	bl	8001ffc <LL_ADC_INJ_IsConversionOngoing>
 8002404:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002408:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 81d9 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 81d4 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002424:	d10f      	bne.n	8002446 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	4619      	mov	r1, r3
 8002432:	f7ff fd1f 	bl	8001e74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fcd9 	bl	8001df6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002444:	e00e      	b.n	8002464 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	461a      	mov	r2, r3
 8002454:	f7ff fd0e 	bl	8001e74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fcc9 	bl	8001df6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d022      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002496:	f7ff fc23 	bl	8001ce0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7ff fc6f 	bl	8001d8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d102      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x126>
 80024bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024c0:	e000      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x128>
 80024c2:	2300      	movs	r3, #0
 80024c4:	461a      	mov	r2, r3
 80024c6:	f7ff fc7b 	bl	8001dc0 <LL_ADC_SetOffsetSaturation>
 80024ca:	e17b      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fc28 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x15c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fc1d 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 021f 	and.w	r2, r3, #31
 80024f6:	e01e      	b.n	8002536 <HAL_ADC_ConfigChannel+0x19a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fc12 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800251a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800251e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e004      	b.n	8002534 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800252a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_ADC_ConfigChannel+0x1b2>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	e018      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1e4>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002566:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800256a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e004      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fbe1 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2101      	movs	r1, #1
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fbc5 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x222>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fbba 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	e01e      	b.n	80025fc <HAL_ADC_ConfigChannel+0x260>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2101      	movs	r1, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fbaf 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80025dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80025e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e004      	b.n	80025fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x278>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	e018      	b.n	8002646 <HAL_ADC_ConfigChannel+0x2aa>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002628:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800262c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e004      	b.n	8002646 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800263c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002646:	429a      	cmp	r2, r3
 8002648:	d106      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fb7e 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fb62 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x2e8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fb57 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	f003 021f 	and.w	r2, r3, #31
 8002682:	e01e      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x326>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fb4c 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80026a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80026aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026b2:	2320      	movs	r3, #32
 80026b4:	e004      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_ADC_ConfigChannel+0x33e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	e016      	b.n	8002708 <HAL_ADC_ConfigChannel+0x36c>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80026ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80026f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80026fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fb1d 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2103      	movs	r1, #3
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fb01 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x3aa>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2103      	movs	r1, #3
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff faf6 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	e017      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3da>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2103      	movs	r1, #3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff faeb 	bl	8001d28 <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800275e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002760:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e003      	b.n	8002774 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800276c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_ConfigChannel+0x3f2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	e011      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x416>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800279c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800279e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80027a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80027aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d106      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2103      	movs	r1, #3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fac8 	bl	8001d54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fbf1 	bl	8001fb0 <LL_ADC_IsEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 813d 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f7ff fb72 	bl	8001ecc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4aa2      	ldr	r2, [pc, #648]	@ (8002a78 <HAL_ADC_ConfigChannel+0x6dc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 812e 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_ADC_ConfigChannel+0x480>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b09      	cmp	r3, #9
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e019      	b.n	8002850 <HAL_ADC_ConfigChannel+0x4b4>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800282a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800282c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800282e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002838:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2b09      	cmp	r3, #9
 8002848:	bf94      	ite	ls
 800284a:	2301      	movls	r3, #1
 800284c:	2300      	movhi	r3, #0
 800284e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002850:	2b00      	cmp	r3, #0
 8002852:	d079      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x4d4>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800286e:	e015      	b.n	800289c <HAL_ADC_ConfigChannel+0x500>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800287e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002880:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e003      	b.n	8002894 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800288c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x520>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	e017      	b.n	80028ec <HAL_ADC_ConfigChannel+0x550>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80028ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80028ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80028d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x576>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	3301      	adds	r3, #1
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	051b      	lsls	r3, r3, #20
 8002910:	e018      	b.n	8002944 <HAL_ADC_ConfigChannel+0x5a8>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800292e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002944:	430b      	orrs	r3, r1
 8002946:	e07e      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x5c8>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0e9b      	lsrs	r3, r3, #26
 800295a:	3301      	adds	r3, #1
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002962:	e015      	b.n	8002990 <HAL_ADC_ConfigChannel+0x5f4>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e003      	b.n	8002988 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	069b      	lsls	r3, r3, #26
 800298c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x614>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	e017      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x644>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	61fb      	str	r3, [r7, #28]
  return result;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	ea42 0103 	orr.w	r1, r2, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10d      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x670>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	3b1e      	subs	r3, #30
 8002a04:	051b      	lsls	r3, r3, #20
 8002a06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	e01b      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x6a8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	613b      	str	r3, [r7, #16]
  return result;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b1e      	subs	r3, #30
 8002a3e:	051b      	lsls	r3, r3, #20
 8002a40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7ff fa12 	bl	8001e74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_ADC_ConfigChannel+0x6e0>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80be 	beq.w	8002bda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_ConfigChannel+0x6d6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10a      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x6ec>
 8002a72:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a74:	e009      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x6ee>
 8002a76:	bf00      	nop
 8002a78:	407f0000 	.word	0x407f0000
 8002a7c:	80080000 	.word	0x80080000
 8002a80:	50000100 	.word	0x50000100
 8002a84:	50000300 	.word	0x50000300
 8002a88:	4b59      	ldr	r3, [pc, #356]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff f91a 	bl	8001cc4 <LL_ADC_GetCommonPathInternalCh>
 8002a90:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a56      	ldr	r2, [pc, #344]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x858>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x70c>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a55      	ldr	r2, [pc, #340]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x85c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d13a      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d134      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002abc:	d005      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x72e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4e      	ldr	r2, [pc, #312]	@ (8002bfc <HAL_ADC_ConfigChannel+0x860>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	f040 8085 	bne.w	8002bd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_ConfigChannel+0x742>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a49      	ldr	r2, [pc, #292]	@ (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x746>
 8002ade:	4a49      	ldr	r2, [pc, #292]	@ (8002c04 <HAL_ADC_ConfigChannel+0x868>)
 8002ae0:	e000      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x748>
 8002ae2:	4a43      	ldr	r2, [pc, #268]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ae8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f7ff f8d5 	bl	8001c9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af4:	4b44      	ldr	r3, [pc, #272]	@ (8002c08 <HAL_ADC_ConfigChannel+0x86c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	4a44      	ldr	r2, [pc, #272]	@ (8002c0c <HAL_ADC_ConfigChannel+0x870>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b0e:	e002      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f9      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b1c:	e05a      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3b      	ldr	r2, [pc, #236]	@ (8002c10 <HAL_ADC_ConfigChannel+0x874>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d125      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11f      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a31      	ldr	r2, [pc, #196]	@ (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d104      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x7ac>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <HAL_ADC_ConfigChannel+0x878>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d047      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x7c0>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2a      	ldr	r2, [pc, #168]	@ (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x7c4>
 8002b5c:	4a29      	ldr	r2, [pc, #164]	@ (8002c04 <HAL_ADC_ConfigChannel+0x868>)
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x7c6>
 8002b60:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7ff f896 	bl	8001c9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b72:	e031      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a27      	ldr	r2, [pc, #156]	@ (8002c18 <HAL_ADC_ConfigChannel+0x87c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12d      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d127      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b9c:	d004      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x80c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x810>
 8002ba8:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_ADC_ConfigChannel+0x868>)
 8002baa:	e000      	b.n	8002bae <HAL_ADC_ConfigChannel+0x812>
 8002bac:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002bae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7ff f870 	bl	8001c9e <LL_ADC_SetCommonPathInternalCh>
 8002bbe:	e00c      	b.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002bd2:	e002      	b.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002be2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	37d8      	adds	r7, #216	@ 0xd8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	50000700 	.word	0x50000700
 8002bf4:	c3210000 	.word	0xc3210000
 8002bf8:	90c00010 	.word	0x90c00010
 8002bfc:	50000600 	.word	0x50000600
 8002c00:	50000100 	.word	0x50000100
 8002c04:	50000300 	.word	0x50000300
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	c7520000 	.word	0xc7520000
 8002c14:	50000500 	.word	0x50000500
 8002c18:	cb840000 	.word	0xcb840000

08002c1c <LL_ADC_IsEnabled>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_IsEnabled+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_IsEnabled+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b0a1      	sub	sp, #132	@ 0x84
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e0e7      	b.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c92:	2300      	movs	r3, #0
 8002c94:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9e:	d102      	bne.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	e009      	b.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6e      	ldr	r2, [pc, #440]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d102      	bne.n	8002cb6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002cb0:	4b6d      	ldr	r3, [pc, #436]	@ (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	e001      	b.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0be      	b.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ffb1 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 8002ce0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ffab 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 80a0 	bne.w	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 809c 	bne.w	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d04:	d004      	beq.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a55      	ldr	r2, [pc, #340]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d10:	4b56      	ldr	r3, [pc, #344]	@ (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002d12:	e000      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d14:	4b56      	ldr	r3, [pc, #344]	@ (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002d16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d04b      	beq.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d32:	035b      	lsls	r3, r3, #13
 8002d34:	430b      	orrs	r3, r1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d44:	d004      	beq.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a45      	ldr	r2, [pc, #276]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10f      	bne.n	8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002d50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d54:	f7ff ff62 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d58:	4604      	mov	r4, r0
 8002d5a:	4841      	ldr	r0, [pc, #260]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d5c:	f7ff ff5e 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4323      	orrs	r3, r4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e012      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002d70:	483c      	ldr	r0, [pc, #240]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d72:	f7ff ff53 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d76:	4604      	mov	r4, r0
 8002d78:	483b      	ldr	r0, [pc, #236]	@ (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d7a:	f7ff ff4f 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	431c      	orrs	r4, r3
 8002d82:	483c      	ldr	r0, [pc, #240]	@ (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d84:	f7ff ff4a 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d056      	beq.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002da2:	f023 030f 	bic.w	r3, r3, #15
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	6811      	ldr	r1, [r2, #0]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	431a      	orrs	r2, r3
 8002db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002db4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002db6:	e047      	b.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dcc:	d004      	beq.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a23      	ldr	r2, [pc, #140]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10f      	bne.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002dd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ddc:	f7ff ff1e 	bl	8002c1c <LL_ADC_IsEnabled>
 8002de0:	4604      	mov	r4, r0
 8002de2:	481f      	ldr	r0, [pc, #124]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002de4:	f7ff ff1a 	bl	8002c1c <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4323      	orrs	r3, r4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e012      	b.n	8002e1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002df8:	481a      	ldr	r0, [pc, #104]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002dfa:	f7ff ff0f 	bl	8002c1c <LL_ADC_IsEnabled>
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4819      	ldr	r0, [pc, #100]	@ (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e02:	f7ff ff0b 	bl	8002c1c <LL_ADC_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	431c      	orrs	r4, r3
 8002e0a:	481a      	ldr	r0, [pc, #104]	@ (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e0c:	f7ff ff06 	bl	8002c1c <LL_ADC_IsEnabled>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4323      	orrs	r3, r4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e2a:	f023 030f 	bic.w	r3, r3, #15
 8002e2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e30:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e32:	e009      	b.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e46:	e000      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3784      	adds	r7, #132	@ 0x84
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	50000100 	.word	0x50000100
 8002e64:	50000400 	.word	0x50000400
 8002e68:	50000500 	.word	0x50000500
 8002e6c:	50000300 	.word	0x50000300
 8002e70:	50000700 	.word	0x50000700
 8002e74:	50000600 	.word	0x50000600

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	@ (8002f14 <__NVIC_EnableIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	@ (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	@ (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	@ 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	@ 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff4c 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff6:	f7ff ff63 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 8002ffa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	6978      	ldr	r0, [r7, #20]
 8003002:	f7ff ffb3 	bl	8002f6c <NVIC_EncodePriority>
 8003006:	4602      	mov	r2, r0
 8003008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ff82 	bl	8002f18 <__NVIC_SetPriority>
}
 8003014:	bf00      	nop
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff56 	bl	8002edc <__NVIC_EnableIRQ>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d005      	beq.n	800305c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2204      	movs	r2, #4
 8003054:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	e037      	b.n	80030cc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 020e 	bic.w	r2, r2, #14
 800306a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800307a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030a8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030c0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030ca:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d00d      	beq.n	800311e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e047      	b.n	80031ae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 020e 	bic.w	r2, r2, #14
 800312c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800314c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	f003 021f 	and.w	r2, r3, #31
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f202 	lsl.w	r2, r1, r2
 8003160:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800316a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00c      	beq.n	800318e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003182:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800318c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
    }
  }
  return status;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031c6:	e15a      	b.n	800347e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 814c 	beq.w	8003478 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d005      	beq.n	80031f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d130      	bne.n	800325a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800322e:	2201      	movs	r2, #1
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 0201 	and.w	r2, r3, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b03      	cmp	r3, #3
 8003264:	d017      	beq.n	8003296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	2203      	movs	r2, #3
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d123      	bne.n	80032ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	08da      	lsrs	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3208      	adds	r2, #8
 80032aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	6939      	ldr	r1, [r7, #16]
 80032e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0203 	and.w	r2, r3, #3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80a6 	beq.w	8003478 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332c:	4b5b      	ldr	r3, [pc, #364]	@ (800349c <HAL_GPIO_Init+0x2e4>)
 800332e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003330:	4a5a      	ldr	r2, [pc, #360]	@ (800349c <HAL_GPIO_Init+0x2e4>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6613      	str	r3, [r2, #96]	@ 0x60
 8003338:	4b58      	ldr	r3, [pc, #352]	@ (800349c <HAL_GPIO_Init+0x2e4>)
 800333a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003344:	4a56      	ldr	r2, [pc, #344]	@ (80034a0 <HAL_GPIO_Init+0x2e8>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	3302      	adds	r3, #2
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800336e:	d01f      	beq.n	80033b0 <HAL_GPIO_Init+0x1f8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a4c      	ldr	r2, [pc, #304]	@ (80034a4 <HAL_GPIO_Init+0x2ec>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d019      	beq.n	80033ac <HAL_GPIO_Init+0x1f4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a4b      	ldr	r2, [pc, #300]	@ (80034a8 <HAL_GPIO_Init+0x2f0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_GPIO_Init+0x1f0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a4a      	ldr	r2, [pc, #296]	@ (80034ac <HAL_GPIO_Init+0x2f4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00d      	beq.n	80033a4 <HAL_GPIO_Init+0x1ec>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a49      	ldr	r2, [pc, #292]	@ (80034b0 <HAL_GPIO_Init+0x2f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <HAL_GPIO_Init+0x1e8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a48      	ldr	r2, [pc, #288]	@ (80034b4 <HAL_GPIO_Init+0x2fc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_GPIO_Init+0x1e4>
 8003398:	2305      	movs	r3, #5
 800339a:	e00a      	b.n	80033b2 <HAL_GPIO_Init+0x1fa>
 800339c:	2306      	movs	r3, #6
 800339e:	e008      	b.n	80033b2 <HAL_GPIO_Init+0x1fa>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e006      	b.n	80033b2 <HAL_GPIO_Init+0x1fa>
 80033a4:	2303      	movs	r3, #3
 80033a6:	e004      	b.n	80033b2 <HAL_GPIO_Init+0x1fa>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e002      	b.n	80033b2 <HAL_GPIO_Init+0x1fa>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_GPIO_Init+0x1fa>
 80033b0:	2300      	movs	r3, #0
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	f002 0203 	and.w	r2, r2, #3
 80033b8:	0092      	lsls	r2, r2, #2
 80033ba:	4093      	lsls	r3, r2
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c2:	4937      	ldr	r1, [pc, #220]	@ (80034a0 <HAL_GPIO_Init+0x2e8>)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3302      	adds	r3, #2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d0:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f4:	4a30      	ldr	r2, [pc, #192]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033fa:	4b2f      	ldr	r3, [pc, #188]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800341e:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003424:	4b24      	ldr	r3, [pc, #144]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	43db      	mvns	r3, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003448:	4a1b      	ldr	r2, [pc, #108]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800344e:	4b1a      	ldr	r3, [pc, #104]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003472:	4a11      	ldr	r2, [pc, #68]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3301      	adds	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	f47f ae9d 	bne.w	80031c8 <HAL_GPIO_Init+0x10>
  }
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40021000 	.word	0x40021000
 80034a0:	40010000 	.word	0x40010000
 80034a4:	48000400 	.word	0x48000400
 80034a8:	48000800 	.word	0x48000800
 80034ac:	48000c00 	.word	0x48000c00
 80034b0:	48001000 	.word	0x48001000
 80034b4:	48001400 	.word	0x48001400
 80034b8:	40010400 	.word	0x40010400

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034f6:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003502:	4a05      	ldr	r2, [pc, #20]	@ (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f806 	bl	800351c <HAL_GPIO_EXTI_Callback>
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d141      	bne.n	80035c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003542:	4b4b      	ldr	r3, [pc, #300]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354e:	d131      	bne.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003550:	4b47      	ldr	r3, [pc, #284]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003556:	4a46      	ldr	r2, [pc, #280]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800355c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003560:	4b43      	ldr	r3, [pc, #268]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003568:	4a41      	ldr	r2, [pc, #260]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800356e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003570:	4b40      	ldr	r3, [pc, #256]	@ (8003674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2232      	movs	r2, #50	@ 0x32
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	4a3f      	ldr	r2, [pc, #252]	@ (8003678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	0c9b      	lsrs	r3, r3, #18
 8003582:	3301      	adds	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003586:	e002      	b.n	800358e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3b01      	subs	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800358e:	4b38      	ldr	r3, [pc, #224]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359a:	d102      	bne.n	80035a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f2      	bne.n	8003588 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a2:	4b33      	ldr	r3, [pc, #204]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ae:	d158      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e057      	b.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035c4:	e04d      	b.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035cc:	d141      	bne.n	8003652 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ce:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035da:	d131      	bne.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035dc:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e2:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ec:	4b20      	ldr	r3, [pc, #128]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2232      	movs	r2, #50	@ 0x32
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	3301      	adds	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003612:	e002      	b.n	800361a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3b01      	subs	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800361a:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	d102      	bne.n	800362e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f2      	bne.n	8003614 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363a:	d112      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e011      	b.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003646:	4a0a      	ldr	r2, [pc, #40]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003650:	e007      	b.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003652:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800365a:	4a05      	ldr	r2, [pc, #20]	@ (8003670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003660:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40007000 	.word	0x40007000
 8003674:	20000004 	.word	0x20000004
 8003678:	431bde83 	.word	0x431bde83

0800367c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800368a:	6093      	str	r3, [r2, #8]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40007000 	.word	0x40007000

0800369c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e2fe      	b.n	8003cac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d075      	beq.n	80037a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ba:	4b97      	ldr	r3, [pc, #604]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c4:	4b94      	ldr	r3, [pc, #592]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d102      	bne.n	80036da <HAL_RCC_OscConfig+0x3e>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_OscConfig+0x44>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d10b      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d05b      	beq.n	80037a4 <HAL_RCC_OscConfig+0x108>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d157      	bne.n	80037a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e2d9      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d106      	bne.n	8003710 <HAL_RCC_OscConfig+0x74>
 8003702:	4b85      	ldr	r3, [pc, #532]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a84      	ldr	r2, [pc, #528]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e01d      	b.n	800374c <HAL_RCC_OscConfig+0xb0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x98>
 800371a:	4b7f      	ldr	r3, [pc, #508]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7e      	ldr	r2, [pc, #504]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b7c      	ldr	r3, [pc, #496]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7b      	ldr	r2, [pc, #492]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0xb0>
 8003734:	4b78      	ldr	r3, [pc, #480]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a77      	ldr	r2, [pc, #476]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b75      	ldr	r3, [pc, #468]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a74      	ldr	r2, [pc, #464]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800374a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe fa62 	bl	8001c1c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800375c:	f7fe fa5e 	bl	8001c1c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	@ 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e29e      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376e:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0xc0>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fa4e 	bl	8001c1c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe fa4a 	bl	8001c1c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	@ 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e28a      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003796:	4b60      	ldr	r3, [pc, #384]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0xe8>
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d075      	beq.n	800389e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b2:	4b59      	ldr	r3, [pc, #356]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037bc:	4b56      	ldr	r3, [pc, #344]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_OscConfig+0x136>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_OscConfig+0x13c>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d11f      	bne.n	8003818 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_OscConfig+0x154>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e25d      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b49      	ldr	r3, [pc, #292]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	4946      	ldr	r1, [pc, #280]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003804:	4b45      	ldr	r3, [pc, #276]	@ (800391c <HAL_RCC_OscConfig+0x280>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fc2d 	bl	8001068 <HAL_InitTick>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d043      	beq.n	800389c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e249      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d023      	beq.n	8003868 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b3d      	ldr	r3, [pc, #244]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a3c      	ldr	r2, [pc, #240]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe f9f6 	bl	8001c1c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003834:	f7fe f9f2 	bl	8001c1c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e232      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003846:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b31      	ldr	r3, [pc, #196]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	492d      	ldr	r1, [pc, #180]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
 8003866:	e01a      	b.n	800389e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003868:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 800386e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f9d2 	bl	8001c1c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387c:	f7fe f9ce 	bl	8001c1c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e20e      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800388e:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x1e0>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d041      	beq.n	800392e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01c      	beq.n	80038ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b2:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b8:	4a17      	ldr	r2, [pc, #92]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fe f9ab 	bl	8001c1c <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ca:	f7fe f9a7 	bl	8001c1c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1e7      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0ef      	beq.n	80038ca <HAL_RCC_OscConfig+0x22e>
 80038ea:	e020      	b.n	800392e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f2:	4a09      	ldr	r2, [pc, #36]	@ (8003918 <HAL_RCC_OscConfig+0x27c>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe f98e 	bl	8001c1c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003902:	e00d      	b.n	8003920 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe f98a 	bl	8001c1c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d906      	bls.n	8003920 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e1ca      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003920:	4b8c      	ldr	r3, [pc, #560]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ea      	bne.n	8003904 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a6 	beq.w	8003a88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393c:	2300      	movs	r3, #0
 800393e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003940:	4b84      	ldr	r3, [pc, #528]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_OscConfig+0x2b4>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x2b6>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	4b7f      	ldr	r3, [pc, #508]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003960:	6593      	str	r3, [r2, #88]	@ 0x58
 8003962:	4b7c      	ldr	r3, [pc, #496]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003972:	4b79      	ldr	r3, [pc, #484]	@ (8003b58 <HAL_RCC_OscConfig+0x4bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800397e:	4b76      	ldr	r3, [pc, #472]	@ (8003b58 <HAL_RCC_OscConfig+0x4bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	@ (8003b58 <HAL_RCC_OscConfig+0x4bc>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fe f947 	bl	8001c1c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fe f943 	bl	8001c1c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e183      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <HAL_RCC_OscConfig+0x4bc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d108      	bne.n	80039ca <HAL_RCC_OscConfig+0x32e>
 80039b8:	4b66      	ldr	r3, [pc, #408]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039be:	4a65      	ldr	r2, [pc, #404]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039c8:	e024      	b.n	8003a14 <HAL_RCC_OscConfig+0x378>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d110      	bne.n	80039f4 <HAL_RCC_OscConfig+0x358>
 80039d2:	4b60      	ldr	r3, [pc, #384]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039da:	f043 0304 	orr.w	r3, r3, #4
 80039de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039f2:	e00f      	b.n	8003a14 <HAL_RCC_OscConfig+0x378>
 80039f4:	4b57      	ldr	r3, [pc, #348]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fa:	4a56      	ldr	r2, [pc, #344]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a04:	4b53      	ldr	r3, [pc, #332]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0a:	4a52      	ldr	r2, [pc, #328]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003a0c:	f023 0304 	bic.w	r3, r3, #4
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d016      	beq.n	8003a4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fe f8fe 	bl	8001c1c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fe f8fa 	bl	8001c1c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e138      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3a:	4b46      	ldr	r3, [pc, #280]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ed      	beq.n	8003a24 <HAL_RCC_OscConfig+0x388>
 8003a48:	e015      	b.n	8003a76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fe f8e7 	bl	8001c1c <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe f8e3 	bl	8001c1c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e121      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a68:	4b3a      	ldr	r3, [pc, #232]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1ed      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a76:	7ffb      	ldrb	r3, [r7, #31]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7c:	4b35      	ldr	r3, [pc, #212]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a80:	4a34      	ldr	r2, [pc, #208]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d03c      	beq.n	8003b0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01c      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe f8b6 	bl	8001c1c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab4:	f7fe f8b2 	bl	8001c1c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0f2      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ac6:	4b23      	ldr	r3, [pc, #140]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x418>
 8003ad4:	e01b      	b.n	8003b0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003adc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae6:	f7fe f899 	bl	8001c1c <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aee:	f7fe f895 	bl	8001c1c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0d5      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b00:	4b14      	ldr	r3, [pc, #80]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ef      	bne.n	8003aee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80c9 	beq.w	8003caa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b18:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	f000 8083 	beq.w	8003c2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d15e      	bne.n	8003bec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a08      	ldr	r2, [pc, #32]	@ (8003b54 <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fe f86f 	bl	8001c1c <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b40:	e00c      	b.n	8003b5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b42:	f7fe f86b 	bl	8001c1c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d905      	bls.n	8003b5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e0ab      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	4b55      	ldr	r3, [pc, #340]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ec      	bne.n	8003b42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b52      	ldr	r3, [pc, #328]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4b52      	ldr	r3, [pc, #328]	@ (8003cb8 <HAL_RCC_OscConfig+0x61c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6a11      	ldr	r1, [r2, #32]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b82:	0212      	lsls	r2, r2, #8
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	0552      	lsls	r2, r2, #21
 8003b90:	4311      	orrs	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b96:	0852      	lsrs	r2, r2, #1
 8003b98:	3a01      	subs	r2, #1
 8003b9a:	0652      	lsls	r2, r2, #25
 8003b9c:	4311      	orrs	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ba2:	06d2      	lsls	r2, r2, #27
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	4943      	ldr	r1, [pc, #268]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bac:	4b41      	ldr	r3, [pc, #260]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a40      	ldr	r2, [pc, #256]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe f82a 	bl	8001c1c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe f826 	bl	8001c1c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e066      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b35      	ldr	r3, [pc, #212]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x530>
 8003bea:	e05e      	b.n	8003caa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bec:	4b31      	ldr	r3, [pc, #196]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a30      	ldr	r2, [pc, #192]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003bf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe f810 	bl	8001c1c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe f80c 	bl	8001c1c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e04c      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c12:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c1e:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	4924      	ldr	r1, [pc, #144]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003c24:	4b25      	ldr	r3, [pc, #148]	@ (8003cbc <HAL_RCC_OscConfig+0x620>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	60cb      	str	r3, [r1, #12]
 8003c2a:	e03e      	b.n	8003caa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e039      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c38:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb4 <HAL_RCC_OscConfig+0x618>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d12c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	3b01      	subs	r3, #1
 8003c58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d123      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d11b      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d113      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	019f800c 	.word	0x019f800c
 8003cbc:	feeefffc 	.word	0xfeeefffc

08003cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e11e      	b.n	8003f16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b91      	ldr	r3, [pc, #580]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d910      	bls.n	8003d08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b8e      	ldr	r3, [pc, #568]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 020f 	bic.w	r2, r3, #15
 8003cee:	498c      	ldr	r1, [pc, #560]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b8a      	ldr	r3, [pc, #552]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e106      	b.n	8003f16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d073      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d129      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1c:	4b81      	ldr	r3, [pc, #516]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0f4      	b.n	8003f16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d2c:	f000 f9d0 	bl	80040d0 <RCC_GetSysClockFreqFromPLLSource>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4a7c      	ldr	r2, [pc, #496]	@ (8003f28 <HAL_RCC_ClockConfig+0x268>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d93f      	bls.n	8003dba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d033      	beq.n	8003dba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d12f      	bne.n	8003dba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d5a:	4b72      	ldr	r3, [pc, #456]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d62:	4a70      	ldr	r2, [pc, #448]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d6a:	2380      	movs	r3, #128	@ 0x80
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e024      	b.n	8003dba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d78:	4b6a      	ldr	r3, [pc, #424]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0c6      	b.n	8003f16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d88:	4b66      	ldr	r3, [pc, #408]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0be      	b.n	8003f16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d98:	f000 f8ce 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4a61      	ldr	r2, [pc, #388]	@ (8003f28 <HAL_RCC_ClockConfig+0x268>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d909      	bls.n	8003dba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003da6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dae:	4a5d      	ldr	r2, [pc, #372]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003db4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003db6:	2380      	movs	r3, #128	@ 0x80
 8003db8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dba:	4b5a      	ldr	r3, [pc, #360]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4957      	ldr	r1, [pc, #348]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fd ff26 	bl	8001c1c <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fd ff22 	bl	8001c1c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e095      	b.n	8003f16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	4b4e      	ldr	r3, [pc, #312]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 020c 	and.w	r2, r3, #12
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1eb      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d023      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b43      	ldr	r3, [pc, #268]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a42      	ldr	r2, [pc, #264]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e34:	4a3b      	ldr	r2, [pc, #236]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e3c:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4936      	ldr	r1, [pc, #216]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b80      	cmp	r3, #128	@ 0x80
 8003e54:	d105      	bne.n	8003e62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e56:	4b33      	ldr	r3, [pc, #204]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	4a32      	ldr	r2, [pc, #200]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e62:	4b2f      	ldr	r3, [pc, #188]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d21d      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e70:	4b2b      	ldr	r3, [pc, #172]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 020f 	bic.w	r2, r3, #15
 8003e78:	4929      	ldr	r1, [pc, #164]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e80:	f7fd fecc 	bl	8001c1c <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e88:	f7fd fec8 	bl	8001c1c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e03b      	b.n	8003f16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	@ (8003f20 <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d1ed      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4917      	ldr	r1, [pc, #92]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed6:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	490f      	ldr	r1, [pc, #60]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eea:	f000 f825 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <HAL_RCC_ClockConfig+0x264>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	490c      	ldr	r1, [pc, #48]	@ (8003f2c <HAL_RCC_ClockConfig+0x26c>)
 8003efc:	5ccb      	ldrb	r3, [r1, r3]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <HAL_RCC_ClockConfig+0x270>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <HAL_RCC_ClockConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd f8aa 	bl	8001068 <HAL_InitTick>
 8003f14:	4603      	mov	r3, r0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40022000 	.word	0x40022000
 8003f24:	40021000 	.word	0x40021000
 8003f28:	04c4b400 	.word	0x04c4b400
 8003f2c:	08009d88 	.word	0x08009d88
 8003f30:	20000004 	.word	0x20000004
 8003f34:	20000008 	.word	0x20000008

08003f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d102      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e047      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f50:	4b27      	ldr	r3, [pc, #156]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d102      	bne.n	8003f62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f5c:	4b26      	ldr	r3, [pc, #152]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e03e      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f62:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d136      	bne.n	8003fdc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	3301      	adds	r3, #1
 8003f84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	4a16      	ldr	r2, [pc, #88]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f96:	68d2      	ldr	r2, [r2, #12]
 8003f98:	0a12      	lsrs	r2, r2, #8
 8003f9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	617b      	str	r3, [r7, #20]
      break;
 8003fa4:	e00c      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fa6:	4a13      	ldr	r2, [pc, #76]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	4a10      	ldr	r2, [pc, #64]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb0:	68d2      	ldr	r2, [r2, #12]
 8003fb2:	0a12      	lsrs	r2, r2, #8
 8003fb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
      break;
 8003fbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0e5b      	lsrs	r3, r3, #25
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	e001      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fe0:	693b      	ldr	r3, [r7, #16]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	016e3600 	.word	0x016e3600

08003ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004000:	4b03      	ldr	r3, [pc, #12]	@ (8004010 <HAL_RCC_GetHCLKFreq+0x14>)
 8004002:	681b      	ldr	r3, [r3, #0]
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004018:	f7ff fff0 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4904      	ldr	r1, [pc, #16]	@ (800403c <HAL_RCC_GetPCLK1Freq+0x28>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	08009d98 	.word	0x08009d98

08004040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004044:	f7ff ffda 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0adb      	lsrs	r3, r3, #11
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4904      	ldr	r1, [pc, #16]	@ (8004068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	08009d98 	.word	0x08009d98

0800406c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	220f      	movs	r2, #15
 800407a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_RCC_GetClockConfig+0x5c>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0203 	and.w	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004088:	4b0f      	ldr	r3, [pc, #60]	@ (80040c8 <HAL_RCC_GetClockConfig+0x5c>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004094:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80040a0:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <HAL_RCC_GetClockConfig+0x5c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	08db      	lsrs	r3, r3, #3
 80040a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040ae:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_RCC_GetClockConfig+0x60>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 020f 	and.w	r2, r3, #15
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40022000 	.word	0x40022000

080040d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3301      	adds	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d10c      	bne.n	800410e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f4:	4a17      	ldr	r2, [pc, #92]	@ (8004154 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	4a14      	ldr	r2, [pc, #80]	@ (8004150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040fe:	68d2      	ldr	r2, [r2, #12]
 8004100:	0a12      	lsrs	r2, r2, #8
 8004102:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	617b      	str	r3, [r7, #20]
    break;
 800410c:	e00c      	b.n	8004128 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800410e:	4a12      	ldr	r2, [pc, #72]	@ (8004158 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	4a0e      	ldr	r2, [pc, #56]	@ (8004150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	0a12      	lsrs	r2, r2, #8
 800411c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
    break;
 8004126:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0e5b      	lsrs	r3, r3, #25
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	3301      	adds	r3, #1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004142:	687b      	ldr	r3, [r7, #4]
}
 8004144:	4618      	mov	r0, r3
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40021000 	.word	0x40021000
 8004154:	016e3600 	.word	0x016e3600
 8004158:	00f42400 	.word	0x00f42400

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004164:	2300      	movs	r3, #0
 8004166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004168:	2300      	movs	r3, #0
 800416a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8098 	beq.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b43      	ldr	r3, [pc, #268]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4b40      	ldr	r3, [pc, #256]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418e:	4a3f      	ldr	r2, [pc, #252]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004194:	6593      	str	r3, [r2, #88]	@ 0x58
 8004196:	4b3d      	ldr	r3, [pc, #244]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a39      	ldr	r2, [pc, #228]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b2:	f7fd fd33 	bl	8001c1c <HAL_GetTick>
 80041b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041b8:	e009      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fd fd2f 	bl	8001c1c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d902      	bls.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	74fb      	strb	r3, [r7, #19]
        break;
 80041cc:	e005      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ce:	4b30      	ldr	r3, [pc, #192]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0ef      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d159      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041e0:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01e      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d019      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041fc:	4b23      	ldr	r3, [pc, #140]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004208:	4b20      	ldr	r3, [pc, #128]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420e:	4a1f      	ldr	r2, [pc, #124]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004218:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421e:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004228:	4a18      	ldr	r2, [pc, #96]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7fd fcef 	bl	8001c1c <HAL_GetTick>
 800423e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004240:	e00b      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fd fceb 	bl	8001c1c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d902      	bls.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	74fb      	strb	r3, [r7, #19]
            break;
 8004258:	e006      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425a:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ec      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426e:	4b07      	ldr	r3, [pc, #28]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427c:	4903      	ldr	r1, [pc, #12]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004284:	e008      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	74bb      	strb	r3, [r7, #18]
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800428c:	40021000 	.word	0x40021000
 8004290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004298:	7c7b      	ldrb	r3, [r7, #17]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4ba7      	ldr	r3, [pc, #668]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	4aa6      	ldr	r2, [pc, #664]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b6:	4ba1      	ldr	r3, [pc, #644]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f023 0203 	bic.w	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	499d      	ldr	r1, [pc, #628]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d8:	4b98      	ldr	r3, [pc, #608]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f023 020c 	bic.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4995      	ldr	r1, [pc, #596]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042fa:	4b90      	ldr	r3, [pc, #576]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	498c      	ldr	r1, [pc, #560]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800431c:	4b87      	ldr	r3, [pc, #540]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	4984      	ldr	r1, [pc, #528]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800433e:	4b7f      	ldr	r3, [pc, #508]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	497b      	ldr	r1, [pc, #492]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004360:	4b76      	ldr	r3, [pc, #472]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	4973      	ldr	r1, [pc, #460]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004382:	4b6e      	ldr	r3, [pc, #440]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	496a      	ldr	r1, [pc, #424]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043a4:	4b65      	ldr	r3, [pc, #404]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4962      	ldr	r1, [pc, #392]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043c6:	4b5d      	ldr	r3, [pc, #372]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	4959      	ldr	r1, [pc, #356]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043e8:	4b54      	ldr	r3, [pc, #336]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f6:	4951      	ldr	r1, [pc, #324]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b4c      	ldr	r3, [pc, #304]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	4948      	ldr	r1, [pc, #288]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800442c:	4b43      	ldr	r3, [pc, #268]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4940      	ldr	r1, [pc, #256]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800444a:	d105      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	4b3b      	ldr	r3, [pc, #236]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a3a      	ldr	r2, [pc, #232]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004456:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004464:	4b35      	ldr	r3, [pc, #212]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004472:	4932      	ldr	r1, [pc, #200]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b2d      	ldr	r3, [pc, #180]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a2c      	ldr	r2, [pc, #176]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800448e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800449c:	4b27      	ldr	r3, [pc, #156]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	4924      	ldr	r1, [pc, #144]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ba:	d105      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b1f      	ldr	r3, [pc, #124]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a1e      	ldr	r2, [pc, #120]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d4:	4b19      	ldr	r3, [pc, #100]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e2:	4916      	ldr	r1, [pc, #88]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a10      	ldr	r2, [pc, #64]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d019      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	4908      	ldr	r1, [pc, #32]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800452a:	d109      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800452c:	4b03      	ldr	r3, [pc, #12]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a02      	ldr	r2, [pc, #8]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004536:	60d3      	str	r3, [r2, #12]
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d015      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800454c:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	4926      	ldr	r1, [pc, #152]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800456a:	d105      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800456c:	4b21      	ldr	r3, [pc, #132]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a20      	ldr	r2, [pc, #128]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004576:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004592:	4918      	ldr	r1, [pc, #96]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d105      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045a4:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a12      	ldr	r2, [pc, #72]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045bc:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ca:	490a      	ldr	r1, [pc, #40]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045da:	d105      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a04      	ldr	r2, [pc, #16]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000

080045f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e049      	b.n	800469e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd f820 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f000 fe56 	bl	80052e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d001      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e054      	b.n	800476a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a26      	ldr	r2, [pc, #152]	@ (8004778 <HAL_TIM_Base_Start_IT+0xd0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d022      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x80>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ea:	d01d      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x80>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a22      	ldr	r2, [pc, #136]	@ (800477c <HAL_TIM_Base_Start_IT+0xd4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d018      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x80>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a21      	ldr	r2, [pc, #132]	@ (8004780 <HAL_TIM_Base_Start_IT+0xd8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x80>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1f      	ldr	r2, [pc, #124]	@ (8004784 <HAL_TIM_Base_Start_IT+0xdc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00e      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x80>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1e      	ldr	r2, [pc, #120]	@ (8004788 <HAL_TIM_Base_Start_IT+0xe0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x80>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1c      	ldr	r2, [pc, #112]	@ (800478c <HAL_TIM_Base_Start_IT+0xe4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x80>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1b      	ldr	r2, [pc, #108]	@ (8004790 <HAL_TIM_Base_Start_IT+0xe8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d115      	bne.n	8004754 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <HAL_TIM_Base_Start_IT+0xec>)
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b06      	cmp	r3, #6
 8004738:	d015      	beq.n	8004766 <HAL_TIM_Base_Start_IT+0xbe>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d011      	beq.n	8004766 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	e008      	b.n	8004766 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e000      	b.n	8004768 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40013400 	.word	0x40013400
 800478c:	40014000 	.word	0x40014000
 8004790:	40015000 	.word	0x40015000
 8004794:	00010007 	.word	0x00010007

08004798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e049      	b.n	800483e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc ff94 	bl	80016ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f000 fd86 	bl	80052e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_TIM_PWM_Start+0x24>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e03c      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b04      	cmp	r3, #4
 8004870:	d109      	bne.n	8004886 <HAL_TIM_PWM_Start+0x3e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	e02f      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d109      	bne.n	80048a0 <HAL_TIM_PWM_Start+0x58>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e022      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	d109      	bne.n	80048ba <HAL_TIM_PWM_Start+0x72>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e015      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d109      	bne.n	80048d4 <HAL_TIM_PWM_Start+0x8c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e008      	b.n	80048e6 <HAL_TIM_PWM_Start+0x9e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e0a6      	b.n	8004a3c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d104      	bne.n	80048fe <HAL_TIM_PWM_Start+0xb6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048fc:	e023      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d104      	bne.n	800490e <HAL_TIM_PWM_Start+0xc6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800490c:	e01b      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d104      	bne.n	800491e <HAL_TIM_PWM_Start+0xd6>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800491c:	e013      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start+0xe6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800492c:	e00b      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b10      	cmp	r3, #16
 8004932:	d104      	bne.n	800493e <HAL_TIM_PWM_Start+0xf6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800493c:	e003      	b.n	8004946 <HAL_TIM_PWM_Start+0xfe>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2201      	movs	r2, #1
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f001 f9b8 	bl	8005cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3a      	ldr	r2, [pc, #232]	@ (8004a44 <HAL_TIM_PWM_Start+0x1fc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d018      	beq.n	8004990 <HAL_TIM_PWM_Start+0x148>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a39      	ldr	r2, [pc, #228]	@ (8004a48 <HAL_TIM_PWM_Start+0x200>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <HAL_TIM_PWM_Start+0x148>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a37      	ldr	r2, [pc, #220]	@ (8004a4c <HAL_TIM_PWM_Start+0x204>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <HAL_TIM_PWM_Start+0x148>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a36      	ldr	r2, [pc, #216]	@ (8004a50 <HAL_TIM_PWM_Start+0x208>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_TIM_PWM_Start+0x148>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a34      	ldr	r2, [pc, #208]	@ (8004a54 <HAL_TIM_PWM_Start+0x20c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_TIM_PWM_Start+0x148>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a33      	ldr	r2, [pc, #204]	@ (8004a58 <HAL_TIM_PWM_Start+0x210>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <HAL_TIM_PWM_Start+0x14c>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_TIM_PWM_Start+0x14e>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a25      	ldr	r2, [pc, #148]	@ (8004a44 <HAL_TIM_PWM_Start+0x1fc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_TIM_PWM_Start+0x1b2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049bc:	d01d      	beq.n	80049fa <HAL_TIM_PWM_Start+0x1b2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a26      	ldr	r2, [pc, #152]	@ (8004a5c <HAL_TIM_PWM_Start+0x214>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_TIM_PWM_Start+0x1b2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a24      	ldr	r2, [pc, #144]	@ (8004a60 <HAL_TIM_PWM_Start+0x218>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_TIM_PWM_Start+0x1b2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a23      	ldr	r2, [pc, #140]	@ (8004a64 <HAL_TIM_PWM_Start+0x21c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_TIM_PWM_Start+0x1b2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a19      	ldr	r2, [pc, #100]	@ (8004a48 <HAL_TIM_PWM_Start+0x200>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_TIM_PWM_Start+0x1b2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a18      	ldr	r2, [pc, #96]	@ (8004a4c <HAL_TIM_PWM_Start+0x204>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_TIM_PWM_Start+0x1b2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <HAL_TIM_PWM_Start+0x210>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d115      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	4b19      	ldr	r3, [pc, #100]	@ (8004a68 <HAL_TIM_PWM_Start+0x220>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d015      	beq.n	8004a38 <HAL_TIM_PWM_Start+0x1f0>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a12:	d011      	beq.n	8004a38 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	e008      	b.n	8004a38 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e000      	b.n	8004a3a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40013400 	.word	0x40013400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800
 8004a58:	40015000 	.word	0x40015000
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	00010007 	.word	0x00010007

08004a6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 f920 	bl	8005cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a40      	ldr	r2, [pc, #256]	@ (8004b8c <HAL_TIM_PWM_Stop+0x120>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <HAL_TIM_PWM_Stop+0x54>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3f      	ldr	r2, [pc, #252]	@ (8004b90 <HAL_TIM_PWM_Stop+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_TIM_PWM_Stop+0x54>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8004b94 <HAL_TIM_PWM_Stop+0x128>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_PWM_Stop+0x54>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8004b98 <HAL_TIM_PWM_Stop+0x12c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_PWM_Stop+0x54>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8004b9c <HAL_TIM_PWM_Stop+0x130>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_PWM_Stop+0x54>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a39      	ldr	r2, [pc, #228]	@ (8004ba0 <HAL_TIM_PWM_Stop+0x134>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_PWM_Stop+0x58>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_Stop+0x5a>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d017      	beq.n	8004afa <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_TIM_PWM_Stop+0x8e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_PWM_Stop+0x8e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <HAL_TIM_PWM_Stop+0xbe>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_PWM_Stop+0xbe>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_PWM_Stop+0xce>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b38:	e023      	b.n	8004b82 <HAL_TIM_PWM_Stop+0x116>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d104      	bne.n	8004b4a <HAL_TIM_PWM_Stop+0xde>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b48:	e01b      	b.n	8004b82 <HAL_TIM_PWM_Stop+0x116>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_PWM_Stop+0xee>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b58:	e013      	b.n	8004b82 <HAL_TIM_PWM_Stop+0x116>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Stop+0xfe>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b68:	e00b      	b.n	8004b82 <HAL_TIM_PWM_Stop+0x116>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Stop+0x10e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b78:	e003      	b.n	8004b82 <HAL_TIM_PWM_Stop+0x116>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800
 8004ba0:	40015000 	.word	0x40015000

08004ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0202 	mvn.w	r2, #2
 8004bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fb5c 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fb4e 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb5f 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0204 	mvn.w	r2, #4
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb36 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fb28 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fb39 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0208 	mvn.w	r2, #8
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb10 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fb02 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb13 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0210 	mvn.w	r2, #16
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 faea 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fadc 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 faed 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0201 	mvn.w	r2, #1
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc f970 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00c      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 faeb 	bl	8006314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f001 fae3 	bl	8006328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00c      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 faa7 	bl	80052d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0220 	mvn.w	r2, #32
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 faab 	bl	8006300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00c      	beq.n	8004dce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f001 fab7 	bl	800633c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00c      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 faaf 	bl	8006350 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00c      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 faa7 	bl	8006364 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f001 fa9f 	bl	8006378 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e0ff      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b14      	cmp	r3, #20
 8004e6e:	f200 80f0 	bhi.w	8005052 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e72:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08005053 	.word	0x08005053
 8004e80:	08005053 	.word	0x08005053
 8004e84:	08005053 	.word	0x08005053
 8004e88:	08004f0d 	.word	0x08004f0d
 8004e8c:	08005053 	.word	0x08005053
 8004e90:	08005053 	.word	0x08005053
 8004e94:	08005053 	.word	0x08005053
 8004e98:	08004f4f 	.word	0x08004f4f
 8004e9c:	08005053 	.word	0x08005053
 8004ea0:	08005053 	.word	0x08005053
 8004ea4:	08005053 	.word	0x08005053
 8004ea8:	08004f8f 	.word	0x08004f8f
 8004eac:	08005053 	.word	0x08005053
 8004eb0:	08005053 	.word	0x08005053
 8004eb4:	08005053 	.word	0x08005053
 8004eb8:	08004fd1 	.word	0x08004fd1
 8004ebc:	08005053 	.word	0x08005053
 8004ec0:	08005053 	.word	0x08005053
 8004ec4:	08005053 	.word	0x08005053
 8004ec8:	08005011 	.word	0x08005011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fabc 	bl	8005450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0204 	bic.w	r2, r2, #4
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6999      	ldr	r1, [r3, #24]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	619a      	str	r2, [r3, #24]
      break;
 8004f0a:	e0a5      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fb36 	bl	8005584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6999      	ldr	r1, [r3, #24]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	619a      	str	r2, [r3, #24]
      break;
 8004f4c:	e084      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fba9 	bl	80056ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0208 	orr.w	r2, r2, #8
 8004f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0204 	bic.w	r2, r2, #4
 8004f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69d9      	ldr	r1, [r3, #28]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	61da      	str	r2, [r3, #28]
      break;
 8004f8c:	e064      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fc1b 	bl	80057d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69d9      	ldr	r1, [r3, #28]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	021a      	lsls	r2, r3, #8
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	61da      	str	r2, [r3, #28]
      break;
 8004fce:	e043      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fc8e 	bl	80058f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0208 	orr.w	r2, r2, #8
 8004fea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800500e:	e023      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fcd8 	bl	80059cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800502a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800503a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	021a      	lsls	r2, r3, #8
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005050:	e002      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
      break;
 8005056:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005060:	7dfb      	ldrb	r3, [r7, #23]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop

0800506c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIM_ConfigClockSource+0x1c>
 8005084:	2302      	movs	r3, #2
 8005086:	e0f6      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x20a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80050a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a6f      	ldr	r2, [pc, #444]	@ (8005280 <HAL_TIM_ConfigClockSource+0x214>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	f000 80c1 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 80050c8:	4a6d      	ldr	r2, [pc, #436]	@ (8005280 <HAL_TIM_ConfigClockSource+0x214>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	f200 80c6 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 80050d0:	4a6c      	ldr	r2, [pc, #432]	@ (8005284 <HAL_TIM_ConfigClockSource+0x218>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	f000 80b9 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 80050d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005284 <HAL_TIM_ConfigClockSource+0x218>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	f200 80be 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 80050e0:	4a69      	ldr	r2, [pc, #420]	@ (8005288 <HAL_TIM_ConfigClockSource+0x21c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	f000 80b1 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 80050e8:	4a67      	ldr	r2, [pc, #412]	@ (8005288 <HAL_TIM_ConfigClockSource+0x21c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	f200 80b6 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 80050f0:	4a66      	ldr	r2, [pc, #408]	@ (800528c <HAL_TIM_ConfigClockSource+0x220>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	f000 80a9 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 80050f8:	4a64      	ldr	r2, [pc, #400]	@ (800528c <HAL_TIM_ConfigClockSource+0x220>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	f200 80ae 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005100:	4a63      	ldr	r2, [pc, #396]	@ (8005290 <HAL_TIM_ConfigClockSource+0x224>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f000 80a1 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005108:	4a61      	ldr	r2, [pc, #388]	@ (8005290 <HAL_TIM_ConfigClockSource+0x224>)
 800510a:	4293      	cmp	r3, r2
 800510c:	f200 80a6 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005110:	4a60      	ldr	r2, [pc, #384]	@ (8005294 <HAL_TIM_ConfigClockSource+0x228>)
 8005112:	4293      	cmp	r3, r2
 8005114:	f000 8099 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005118:	4a5e      	ldr	r2, [pc, #376]	@ (8005294 <HAL_TIM_ConfigClockSource+0x228>)
 800511a:	4293      	cmp	r3, r2
 800511c:	f200 809e 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005120:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005124:	f000 8091 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005128:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800512c:	f200 8096 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005130:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005134:	f000 8089 	beq.w	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005138:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800513c:	f200 808e 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005144:	d03e      	beq.n	80051c4 <HAL_TIM_ConfigClockSource+0x158>
 8005146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514a:	f200 8087 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005152:	f000 8086 	beq.w	8005262 <HAL_TIM_ConfigClockSource+0x1f6>
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515a:	d87f      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 800515c:	2b70      	cmp	r3, #112	@ 0x70
 800515e:	d01a      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x12a>
 8005160:	2b70      	cmp	r3, #112	@ 0x70
 8005162:	d87b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005164:	2b60      	cmp	r3, #96	@ 0x60
 8005166:	d050      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x19e>
 8005168:	2b60      	cmp	r3, #96	@ 0x60
 800516a:	d877      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 800516c:	2b50      	cmp	r3, #80	@ 0x50
 800516e:	d03c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x17e>
 8005170:	2b50      	cmp	r3, #80	@ 0x50
 8005172:	d873      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d058      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x1be>
 8005178:	2b40      	cmp	r3, #64	@ 0x40
 800517a:	d86f      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 800517c:	2b30      	cmp	r3, #48	@ 0x30
 800517e:	d064      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005180:	2b30      	cmp	r3, #48	@ 0x30
 8005182:	d86b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 8005184:	2b20      	cmp	r3, #32
 8005186:	d060      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005188:	2b20      	cmp	r3, #32
 800518a:	d867      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d05c      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005190:	2b10      	cmp	r3, #16
 8005192:	d05a      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005194:	e062      	b.n	800525c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	f000 fd6d 	bl	8005c84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	609a      	str	r2, [r3, #8]
      break;
 80051c2:	e04f      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	f000 fd56 	bl	8005c84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051e6:	609a      	str	r2, [r3, #8]
      break;
 80051e8:	e03c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 fcc8 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2150      	movs	r1, #80	@ 0x50
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fd21 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005208:	e02c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005216:	461a      	mov	r2, r3
 8005218:	f000 fce7 	bl	8005bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2160      	movs	r1, #96	@ 0x60
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fd11 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005228:	e01c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005236:	461a      	mov	r2, r3
 8005238:	f000 fca8 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2140      	movs	r1, #64	@ 0x40
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fd01 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005248:	e00c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f000 fcf8 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 800525a:	e003      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
      break;
 8005260:	e000      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	00100070 	.word	0x00100070
 8005284:	00100060 	.word	0x00100060
 8005288:	00100050 	.word	0x00100050
 800528c:	00100040 	.word	0x00100040
 8005290:	00100030 	.word	0x00100030
 8005294:	00100020 	.word	0x00100020

08005298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a4c      	ldr	r2, [pc, #304]	@ (800542c <TIM_Base_SetConfig+0x144>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d017      	beq.n	8005330 <TIM_Base_SetConfig+0x48>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005306:	d013      	beq.n	8005330 <TIM_Base_SetConfig+0x48>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a49      	ldr	r2, [pc, #292]	@ (8005430 <TIM_Base_SetConfig+0x148>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00f      	beq.n	8005330 <TIM_Base_SetConfig+0x48>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a48      	ldr	r2, [pc, #288]	@ (8005434 <TIM_Base_SetConfig+0x14c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00b      	beq.n	8005330 <TIM_Base_SetConfig+0x48>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a47      	ldr	r2, [pc, #284]	@ (8005438 <TIM_Base_SetConfig+0x150>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_Base_SetConfig+0x48>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a46      	ldr	r2, [pc, #280]	@ (800543c <TIM_Base_SetConfig+0x154>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_Base_SetConfig+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a45      	ldr	r2, [pc, #276]	@ (8005440 <TIM_Base_SetConfig+0x158>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a39      	ldr	r2, [pc, #228]	@ (800542c <TIM_Base_SetConfig+0x144>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d023      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d01f      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a36      	ldr	r2, [pc, #216]	@ (8005430 <TIM_Base_SetConfig+0x148>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01b      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a35      	ldr	r2, [pc, #212]	@ (8005434 <TIM_Base_SetConfig+0x14c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d017      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a34      	ldr	r2, [pc, #208]	@ (8005438 <TIM_Base_SetConfig+0x150>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d013      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a33      	ldr	r2, [pc, #204]	@ (800543c <TIM_Base_SetConfig+0x154>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00f      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a33      	ldr	r2, [pc, #204]	@ (8005444 <TIM_Base_SetConfig+0x15c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a32      	ldr	r2, [pc, #200]	@ (8005448 <TIM_Base_SetConfig+0x160>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a31      	ldr	r2, [pc, #196]	@ (800544c <TIM_Base_SetConfig+0x164>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2c      	ldr	r2, [pc, #176]	@ (8005440 <TIM_Base_SetConfig+0x158>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d108      	bne.n	80053a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a18      	ldr	r2, [pc, #96]	@ (800542c <TIM_Base_SetConfig+0x144>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <TIM_Base_SetConfig+0x110>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <TIM_Base_SetConfig+0x154>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00f      	beq.n	80053f8 <TIM_Base_SetConfig+0x110>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a1a      	ldr	r2, [pc, #104]	@ (8005444 <TIM_Base_SetConfig+0x15c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00b      	beq.n	80053f8 <TIM_Base_SetConfig+0x110>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <TIM_Base_SetConfig+0x160>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d007      	beq.n	80053f8 <TIM_Base_SetConfig+0x110>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a18      	ldr	r2, [pc, #96]	@ (800544c <TIM_Base_SetConfig+0x164>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_Base_SetConfig+0x110>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a13      	ldr	r2, [pc, #76]	@ (8005440 <TIM_Base_SetConfig+0x158>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d103      	bne.n	8005400 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d105      	bne.n	800541e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	611a      	str	r2, [r3, #16]
  }
}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00
 800543c:	40013400 	.word	0x40013400
 8005440:	40015000 	.word	0x40015000
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0201 	bic.w	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800547e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 0302 	bic.w	r3, r3, #2
 800549c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a30      	ldr	r2, [pc, #192]	@ (800556c <TIM_OC1_SetConfig+0x11c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <TIM_OC1_SetConfig+0x120>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00f      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005574 <TIM_OC1_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <TIM_OC1_SetConfig+0x128>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2c      	ldr	r2, [pc, #176]	@ (800557c <TIM_OC1_SetConfig+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC1_SetConfig+0x88>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005580 <TIM_OC1_SetConfig+0x130>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10c      	bne.n	80054f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0308 	bic.w	r3, r3, #8
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 0304 	bic.w	r3, r3, #4
 80054f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	@ (800556c <TIM_OC1_SetConfig+0x11c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005570 <TIM_OC1_SetConfig+0x120>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1b      	ldr	r2, [pc, #108]	@ (8005574 <TIM_OC1_SetConfig+0x124>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <TIM_OC1_SetConfig+0x128>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a19      	ldr	r2, [pc, #100]	@ (800557c <TIM_OC1_SetConfig+0x12c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_OC1_SetConfig+0xd2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a18      	ldr	r2, [pc, #96]	@ (8005580 <TIM_OC1_SetConfig+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d111      	bne.n	8005546 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	621a      	str	r2, [r3, #32]
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40015000 	.word	0x40015000

08005584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f023 0210 	bic.w	r2, r3, #16
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0320 	bic.w	r3, r3, #32
 80055d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005694 <TIM_OC2_SetConfig+0x110>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_OC2_SetConfig+0x74>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005698 <TIM_OC2_SetConfig+0x114>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_OC2_SetConfig+0x74>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2a      	ldr	r2, [pc, #168]	@ (800569c <TIM_OC2_SetConfig+0x118>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d10d      	bne.n	8005614 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a1f      	ldr	r2, [pc, #124]	@ (8005694 <TIM_OC2_SetConfig+0x110>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a1e      	ldr	r2, [pc, #120]	@ (8005698 <TIM_OC2_SetConfig+0x114>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00f      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1e      	ldr	r2, [pc, #120]	@ (80056a0 <TIM_OC2_SetConfig+0x11c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1d      	ldr	r2, [pc, #116]	@ (80056a4 <TIM_OC2_SetConfig+0x120>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1c      	ldr	r2, [pc, #112]	@ (80056a8 <TIM_OC2_SetConfig+0x124>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC2_SetConfig+0xc0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a17      	ldr	r2, [pc, #92]	@ (800569c <TIM_OC2_SetConfig+0x118>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d113      	bne.n	800566c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800564a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40015000 	.word	0x40015000
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2b      	ldr	r2, [pc, #172]	@ (80057b8 <TIM_OC3_SetConfig+0x10c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_OC3_SetConfig+0x72>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2a      	ldr	r2, [pc, #168]	@ (80057bc <TIM_OC3_SetConfig+0x110>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_OC3_SetConfig+0x72>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a29      	ldr	r2, [pc, #164]	@ (80057c0 <TIM_OC3_SetConfig+0x114>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d10d      	bne.n	800573a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1e      	ldr	r2, [pc, #120]	@ (80057b8 <TIM_OC3_SetConfig+0x10c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1d      	ldr	r2, [pc, #116]	@ (80057bc <TIM_OC3_SetConfig+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00f      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1d      	ldr	r2, [pc, #116]	@ (80057c4 <TIM_OC3_SetConfig+0x118>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1c      	ldr	r2, [pc, #112]	@ (80057c8 <TIM_OC3_SetConfig+0x11c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <TIM_OC3_SetConfig+0x120>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_OC3_SetConfig+0xbe>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a16      	ldr	r2, [pc, #88]	@ (80057c0 <TIM_OC3_SetConfig+0x114>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d113      	bne.n	8005792 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40015000 	.word	0x40015000
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800

080057d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800581e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	031b      	lsls	r3, r3, #12
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a2c      	ldr	r2, [pc, #176]	@ (80058e0 <TIM_OC4_SetConfig+0x110>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_OC4_SetConfig+0x74>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a2b      	ldr	r2, [pc, #172]	@ (80058e4 <TIM_OC4_SetConfig+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC4_SetConfig+0x74>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a2a      	ldr	r2, [pc, #168]	@ (80058e8 <TIM_OC4_SetConfig+0x118>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d10d      	bne.n	8005860 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800584a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	031b      	lsls	r3, r3, #12
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1f      	ldr	r2, [pc, #124]	@ (80058e0 <TIM_OC4_SetConfig+0x110>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <TIM_OC4_SetConfig+0xc0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a1e      	ldr	r2, [pc, #120]	@ (80058e4 <TIM_OC4_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00f      	beq.n	8005890 <TIM_OC4_SetConfig+0xc0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a1e      	ldr	r2, [pc, #120]	@ (80058ec <TIM_OC4_SetConfig+0x11c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <TIM_OC4_SetConfig+0xc0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <TIM_OC4_SetConfig+0x120>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_OC4_SetConfig+0xc0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a1c      	ldr	r2, [pc, #112]	@ (80058f4 <TIM_OC4_SetConfig+0x124>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_OC4_SetConfig+0xc0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <TIM_OC4_SetConfig+0x118>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d113      	bne.n	80058b8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005896:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800589e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	019b      	lsls	r3, r3, #6
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40015000 	.word	0x40015000
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800

080058f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800593c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a19      	ldr	r2, [pc, #100]	@ (80059b4 <TIM_OC5_SetConfig+0xbc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <TIM_OC5_SetConfig+0x82>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <TIM_OC5_SetConfig+0xc0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00f      	beq.n	800597a <TIM_OC5_SetConfig+0x82>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a17      	ldr	r2, [pc, #92]	@ (80059bc <TIM_OC5_SetConfig+0xc4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00b      	beq.n	800597a <TIM_OC5_SetConfig+0x82>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a16      	ldr	r2, [pc, #88]	@ (80059c0 <TIM_OC5_SetConfig+0xc8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d007      	beq.n	800597a <TIM_OC5_SetConfig+0x82>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <TIM_OC5_SetConfig+0xcc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_OC5_SetConfig+0x82>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a14      	ldr	r2, [pc, #80]	@ (80059c8 <TIM_OC5_SetConfig+0xd0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d109      	bne.n	800598e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40013400 	.word	0x40013400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800
 80059c8:	40015000 	.word	0x40015000

080059cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	051b      	lsls	r3, r3, #20
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a1a      	ldr	r2, [pc, #104]	@ (8005a8c <TIM_OC6_SetConfig+0xc0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <TIM_OC6_SetConfig+0x84>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a19      	ldr	r2, [pc, #100]	@ (8005a90 <TIM_OC6_SetConfig+0xc4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00f      	beq.n	8005a50 <TIM_OC6_SetConfig+0x84>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a18      	ldr	r2, [pc, #96]	@ (8005a94 <TIM_OC6_SetConfig+0xc8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_OC6_SetConfig+0x84>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a17      	ldr	r2, [pc, #92]	@ (8005a98 <TIM_OC6_SetConfig+0xcc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <TIM_OC6_SetConfig+0x84>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <TIM_OC6_SetConfig+0xd0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC6_SetConfig+0x84>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <TIM_OC6_SetConfig+0xd4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d109      	bne.n	8005a64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	029b      	lsls	r3, r3, #10
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800
 8005aa0:	40015000 	.word	0x40015000

08005aa4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f023 0201 	bic.w	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a28      	ldr	r2, [pc, #160]	@ (8005b70 <TIM_TI1_SetConfig+0xcc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01b      	beq.n	8005b0a <TIM_TI1_SetConfig+0x66>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad8:	d017      	beq.n	8005b0a <TIM_TI1_SetConfig+0x66>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a25      	ldr	r2, [pc, #148]	@ (8005b74 <TIM_TI1_SetConfig+0xd0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <TIM_TI1_SetConfig+0x66>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4a24      	ldr	r2, [pc, #144]	@ (8005b78 <TIM_TI1_SetConfig+0xd4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_TI1_SetConfig+0x66>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4a23      	ldr	r2, [pc, #140]	@ (8005b7c <TIM_TI1_SetConfig+0xd8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_TI1_SetConfig+0x66>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a22      	ldr	r2, [pc, #136]	@ (8005b80 <TIM_TI1_SetConfig+0xdc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_TI1_SetConfig+0x66>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4a21      	ldr	r2, [pc, #132]	@ (8005b84 <TIM_TI1_SetConfig+0xe0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_TI1_SetConfig+0x66>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a20      	ldr	r2, [pc, #128]	@ (8005b88 <TIM_TI1_SetConfig+0xe4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d101      	bne.n	8005b0e <TIM_TI1_SetConfig+0x6a>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <TIM_TI1_SetConfig+0x6c>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e003      	b.n	8005b2e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f023 030a 	bic.w	r3, r3, #10
 8005b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f003 030a 	and.w	r3, r3, #10
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40000c00 	.word	0x40000c00
 8005b80:	40013400 	.word	0x40013400
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40015000 	.word	0x40015000

08005b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f023 0201 	bic.w	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 030a 	bic.w	r3, r3, #10
 8005bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f023 0210 	bic.w	r2, r3, #16
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f043 0307 	orr.w	r3, r3, #7
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	609a      	str	r2, [r3, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	609a      	str	r2, [r3, #8]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1a      	ldr	r2, [r3, #32]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b08a      	sub	sp, #40	@ 0x28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e0a0      	b.n	8005e64 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fb fcf6 	bl	8001728 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7ff faca 	bl	80052e8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2203      	movs	r2, #3
 8005d62:	f7ff fe9f 	bl	8005aa4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 020c 	bic.w	r2, r2, #12
 8005d74:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6999      	ldr	r1, [r3, #24]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d96:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005daa:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dba:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0204 	orr.w	r2, r2, #4
 8005dde:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005de4:	2300      	movs	r3, #0
 8005de6:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005de8:	2370      	movs	r3, #112	@ 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dec:	2300      	movs	r3, #0
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f107 020c 	add.w	r2, r7, #12
 8005e06:	4611      	mov	r1, r2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fbbb 	bl	8005584 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e20:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005e30:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3728      	adds	r7, #40	@ 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_TIMEx_PWMN_Start+0x24>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	e022      	b.n	8005ed6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d109      	bne.n	8005eaa <HAL_TIMEx_PWMN_Start+0x3e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	bf14      	ite	ne
 8005ea2:	2301      	movne	r3, #1
 8005ea4:	2300      	moveq	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	e015      	b.n	8005ed6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d109      	bne.n	8005ec4 <HAL_TIMEx_PWMN_Start+0x58>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	e008      	b.n	8005ed6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e073      	b.n	8005fc6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <HAL_TIMEx_PWMN_Start+0x82>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eec:	e013      	b.n	8005f16 <HAL_TIMEx_PWMN_Start+0xaa>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d104      	bne.n	8005efe <HAL_TIMEx_PWMN_Start+0x92>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005efc:	e00b      	b.n	8005f16 <HAL_TIMEx_PWMN_Start+0xaa>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d104      	bne.n	8005f0e <HAL_TIMEx_PWMN_Start+0xa2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f0c:	e003      	b.n	8005f16 <HAL_TIMEx_PWMN_Start+0xaa>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fa34 	bl	800638c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a25      	ldr	r2, [pc, #148]	@ (8005fd0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_TIMEx_PWMN_Start+0x118>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f46:	d01d      	beq.n	8005f84 <HAL_TIMEx_PWMN_Start+0x118>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	@ (8005fd4 <HAL_TIMEx_PWMN_Start+0x168>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_TIMEx_PWMN_Start+0x118>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a20      	ldr	r2, [pc, #128]	@ (8005fd8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_TIMEx_PWMN_Start+0x118>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1e      	ldr	r2, [pc, #120]	@ (8005fdc <HAL_TIMEx_PWMN_Start+0x170>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIMEx_PWMN_Start+0x118>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe0 <HAL_TIMEx_PWMN_Start+0x174>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIMEx_PWMN_Start+0x118>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe4 <HAL_TIMEx_PWMN_Start+0x178>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIMEx_PWMN_Start+0x118>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d115      	bne.n	8005fb0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	4b18      	ldr	r3, [pc, #96]	@ (8005fec <HAL_TIMEx_PWMN_Start+0x180>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d015      	beq.n	8005fc2 <HAL_TIMEx_PWMN_Start+0x156>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d011      	beq.n	8005fc2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	e008      	b.n	8005fc2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e000      	b.n	8005fc4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40015000 	.word	0x40015000
 8005fec:	00010007 	.word	0x00010007

08005ff0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2200      	movs	r2, #0
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f9c2 	bl	800638c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6a1a      	ldr	r2, [r3, #32]
 800600e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006012:	4013      	ands	r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10f      	bne.n	8006038 <HAL_TIMEx_PWMN_Stop+0x48>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <HAL_TIMEx_PWMN_Stop+0x48>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006036:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10f      	bne.n	8006068 <HAL_TIMEx_PWMN_Stop+0x78>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d107      	bne.n	8006068 <HAL_TIMEx_PWMN_Stop+0x78>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <HAL_TIMEx_PWMN_Stop+0x88>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006076:	e013      	b.n	80060a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b04      	cmp	r3, #4
 800607c:	d104      	bne.n	8006088 <HAL_TIMEx_PWMN_Stop+0x98>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006086:	e00b      	b.n	80060a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b08      	cmp	r3, #8
 800608c:	d104      	bne.n	8006098 <HAL_TIMEx_PWMN_Stop+0xa8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006096:	e003      	b.n	80060a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e074      	b.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a34      	ldr	r2, [pc, #208]	@ (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d009      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a33      	ldr	r2, [pc, #204]	@ (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d004      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a31      	ldr	r2, [pc, #196]	@ (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d108      	bne.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006108:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800611a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a21      	ldr	r2, [pc, #132]	@ (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d022      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006144:	d01d      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1f      	ldr	r2, [pc, #124]	@ (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d018      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1d      	ldr	r2, [pc, #116]	@ (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1c      	ldr	r2, [pc, #112]	@ (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00e      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d009      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a18      	ldr	r2, [pc, #96]	@ (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d004      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a11      	ldr	r2, [pc, #68]	@ (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d10c      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4313      	orrs	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40012c00 	.word	0x40012c00
 80061c0:	40013400 	.word	0x40013400
 80061c4:	40015000 	.word	0x40015000
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40014000 	.word	0x40014000

080061d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e078      	b.n	80062e6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a19      	ldr	r2, [pc, #100]	@ (80062fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d11c      	bne.n	80062d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	051b      	lsls	r3, r3, #20
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40013400 	.word	0x40013400
 80062fc:	40015000 	.word	0x40015000

08006300 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	2204      	movs	r2, #4
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1a      	ldr	r2, [r3, #32]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	401a      	ands	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1a      	ldr	r2, [r3, #32]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	431a      	orrs	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e042      	b.n	800646e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fb fb1a 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2224      	movs	r2, #36	@ 0x24
 8006404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 ff61 	bl	80072e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fc62 	bl	8006cf0 <UART_SetConfig>
 800642c:	4603      	mov	r3, r0
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e01b      	b.n	800646e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006444:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006454:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0201 	orr.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 ffe0 	bl	800742c <UART_CheckIdleState>
 800646c:	4603      	mov	r3, r0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b08a      	sub	sp, #40	@ 0x28
 800647a:	af02      	add	r7, sp, #8
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648c:	2b20      	cmp	r3, #32
 800648e:	d17b      	bne.n	8006588 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_UART_Transmit+0x26>
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e074      	b.n	800658a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2221      	movs	r2, #33	@ 0x21
 80064ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b0:	f7fb fbb4 	bl	8001c1c <HAL_GetTick>
 80064b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ce:	d108      	bne.n	80064e2 <HAL_UART_Transmit+0x6c>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	e003      	b.n	80064ea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064ea:	e030      	b.n	800654e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2200      	movs	r2, #0
 80064f4:	2180      	movs	r1, #128	@ 0x80
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f001 f842 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e03d      	b.n	800658a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006522:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3302      	adds	r3, #2
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e007      	b.n	800653c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3301      	adds	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1c8      	bne.n	80064ec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2140      	movs	r1, #64	@ 0x40
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f001 f80b 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e006      	b.n	800658a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	e000      	b.n	800658a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
  }
}
 800658a:	4618      	mov	r0, r3
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	@ 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d137      	bne.n	800661c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_UART_Receive_IT+0x24>
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e030      	b.n	800661e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a18      	ldr	r2, [pc, #96]	@ (8006628 <HAL_UART_Receive_IT+0x94>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01f      	beq.n	800660c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d018      	beq.n	800660c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	613b      	str	r3, [r7, #16]
   return(result);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	69f9      	ldr	r1, [r7, #28]
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	61bb      	str	r3, [r7, #24]
   return(result);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e6      	bne.n	80065da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	461a      	mov	r2, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f001 f822 	bl	800765c <UART_Start_Receive_IT>
 8006618:	4603      	mov	r3, r0
 800661a:	e000      	b.n	800661e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3728      	adds	r7, #40	@ 0x28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40008000 	.word	0x40008000

0800662c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b0ba      	sub	sp, #232	@ 0xe8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006652:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006656:	f640 030f 	movw	r3, #2063	@ 0x80f
 800665a:	4013      	ands	r3, r2
 800665c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d11b      	bne.n	80066a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d015      	beq.n	80066a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 8300 	beq.w	8006c96 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
      }
      return;
 800669e:	e2fa      	b.n	8006c96 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8123 	beq.w	80068f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066ae:	4b8d      	ldr	r3, [pc, #564]	@ (80068e4 <HAL_UART_IRQHandler+0x2b8>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80066ba:	4b8b      	ldr	r3, [pc, #556]	@ (80068e8 <HAL_UART_IRQHandler+0x2bc>)
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8116 	beq.w	80068f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_UART_IRQHandler+0xc8>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2201      	movs	r2, #1
 80066e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ea:	f043 0201 	orr.w	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d011      	beq.n	8006724 <HAL_UART_IRQHandler+0xf8>
 8006700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2202      	movs	r2, #2
 8006712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d011      	beq.n	8006754 <HAL_UART_IRQHandler+0x128>
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2204      	movs	r2, #4
 8006742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800674a:	f043 0202 	orr.w	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800676c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006770:	4b5c      	ldr	r3, [pc, #368]	@ (80068e4 <HAL_UART_IRQHandler+0x2b8>)
 8006772:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2208      	movs	r2, #8
 800677e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006786:	f043 0208 	orr.w	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006798:	2b00      	cmp	r3, #0
 800679a:	d012      	beq.n	80067c2 <HAL_UART_IRQHandler+0x196>
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00c      	beq.n	80067c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b8:	f043 0220 	orr.w	r2, r3, #32
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8266 	beq.w	8006c9a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d013      	beq.n	8006802 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006808:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d005      	beq.n	8006826 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800681a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800681e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006822:	2b00      	cmp	r3, #0
 8006824:	d054      	beq.n	80068d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 f83a 	bl	80078a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006836:	2b40      	cmp	r3, #64	@ 0x40
 8006838:	d146      	bne.n	80068c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006866:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800686a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800687e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1d9      	bne.n	800683a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688c:	2b00      	cmp	r3, #0
 800688e:	d017      	beq.n	80068c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006896:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <HAL_UART_IRQHandler+0x2c0>)
 8006898:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fc fc22 	bl	80030ea <HAL_DMA_Abort_IT>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d019      	beq.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80068ba:	4610      	mov	r0, r2
 80068bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068be:	e00f      	b.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f9ff 	bl	8006cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c6:	e00b      	b.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9fb 	bl	8006cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ce:	e007      	b.n	80068e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f9f7 	bl	8006cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80068de:	e1dc      	b.n	8006c9a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e0:	bf00      	nop
    return;
 80068e2:	e1da      	b.n	8006c9a <HAL_UART_IRQHandler+0x66e>
 80068e4:	10000001 	.word	0x10000001
 80068e8:	04000120 	.word	0x04000120
 80068ec:	0800796d 	.word	0x0800796d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	f040 8170 	bne.w	8006bda <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8169 	beq.w	8006bda <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8162 	beq.w	8006bda <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2210      	movs	r2, #16
 800691c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	f040 80d8 	bne.w	8006ade <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800693c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80af 	beq.w	8006aa4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800694c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006950:	429a      	cmp	r2, r3
 8006952:	f080 80a7 	bcs.w	8006aa4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800695c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 8087 	bne.w	8006a82 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800698c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800699e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1da      	bne.n	8006974 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e1      	bne.n	80069be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e3      	bne.n	80069fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a50:	f023 0310 	bic.w	r3, r3, #16
 8006a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e4      	bne.n	8006a40 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fc fadb 	bl	8003038 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f91b 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006aa2:	e0fc      	b.n	8006c9e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	f040 80f5 	bne.w	8006c9e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	f040 80eb 	bne.w	8006c9e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8fe 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
      return;
 8006adc:	e0df      	b.n	8006c9e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80d1 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80cc 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e4      	bne.n	8006b0a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b68:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e1      	bne.n	8006b40 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f023 0310 	bic.w	r3, r3, #16
 8006ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	69b9      	ldr	r1, [r7, #24]
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e4      	bne.n	8006b90 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f880 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd8:	e063      	b.n	8006ca2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00e      	beq.n	8006c04 <HAL_UART_IRQHandler+0x5d8>
 8006be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 fc13 	bl	8008428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c02:	e051      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d014      	beq.n	8006c3a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d105      	bne.n	8006c28 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d03a      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
    }
    return;
 8006c38:	e035      	b.n	8006ca6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <HAL_UART_IRQHandler+0x62e>
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fe9c 	bl	8007990 <UART_EndTransmit_IT>
    return;
 8006c58:	e026      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <HAL_UART_IRQHandler+0x64e>
 8006c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fbec 	bl	8008450 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c78:	e016      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d010      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
 8006c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da0c      	bge.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fbd4 	bl	800843c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c94:	e008      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006c96:	bf00      	nop
 8006c98:	e006      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
    return;
 8006c9a:	bf00      	nop
 8006c9c:	e004      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006c9e:	bf00      	nop
 8006ca0:	e002      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006ca2:	bf00      	nop
 8006ca4:	e000      	b.n	8006ca8 <HAL_UART_IRQHandler+0x67c>
    return;
 8006ca6:	bf00      	nop
  }
}
 8006ca8:	37e8      	adds	r7, #232	@ 0xe8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf4:	b08c      	sub	sp, #48	@ 0x30
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4baa      	ldr	r3, [pc, #680]	@ (8006fc8 <UART_SetConfig+0x2d8>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a9f      	ldr	r2, [pc, #636]	@ (8006fcc <UART_SetConfig+0x2dc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d66:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	6812      	ldr	r2, [r2, #0]
 8006d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d70:	430b      	orrs	r3, r1
 8006d72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7a:	f023 010f 	bic.w	r1, r3, #15
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a90      	ldr	r2, [pc, #576]	@ (8006fd0 <UART_SetConfig+0x2e0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d125      	bne.n	8006de0 <UART_SetConfig+0xf0>
 8006d94:	4b8f      	ldr	r3, [pc, #572]	@ (8006fd4 <UART_SetConfig+0x2e4>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d81a      	bhi.n	8006dd8 <UART_SetConfig+0xe8>
 8006da2:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <UART_SetConfig+0xb8>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	e116      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc6:	e112      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dce:	e10e      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd6:	e10a      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dde:	e106      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a7c      	ldr	r2, [pc, #496]	@ (8006fd8 <UART_SetConfig+0x2e8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d138      	bne.n	8006e5c <UART_SetConfig+0x16c>
 8006dea:	4b7a      	ldr	r3, [pc, #488]	@ (8006fd4 <UART_SetConfig+0x2e4>)
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df0:	f003 030c 	and.w	r3, r3, #12
 8006df4:	2b0c      	cmp	r3, #12
 8006df6:	d82d      	bhi.n	8006e54 <UART_SetConfig+0x164>
 8006df8:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <UART_SetConfig+0x110>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e35 	.word	0x08006e35
 8006e04:	08006e55 	.word	0x08006e55
 8006e08:	08006e55 	.word	0x08006e55
 8006e0c:	08006e55 	.word	0x08006e55
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e55 	.word	0x08006e55
 8006e18:	08006e55 	.word	0x08006e55
 8006e1c:	08006e55 	.word	0x08006e55
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	08006e55 	.word	0x08006e55
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	e0d8      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e0d4      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e0d0      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e0cc      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	e0c8      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a5e      	ldr	r2, [pc, #376]	@ (8006fdc <UART_SetConfig+0x2ec>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d125      	bne.n	8006eb2 <UART_SetConfig+0x1c2>
 8006e66:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd4 <UART_SetConfig+0x2e4>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e70:	2b30      	cmp	r3, #48	@ 0x30
 8006e72:	d016      	beq.n	8006ea2 <UART_SetConfig+0x1b2>
 8006e74:	2b30      	cmp	r3, #48	@ 0x30
 8006e76:	d818      	bhi.n	8006eaa <UART_SetConfig+0x1ba>
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d00a      	beq.n	8006e92 <UART_SetConfig+0x1a2>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d814      	bhi.n	8006eaa <UART_SetConfig+0x1ba>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <UART_SetConfig+0x19a>
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d008      	beq.n	8006e9a <UART_SetConfig+0x1aa>
 8006e88:	e00f      	b.n	8006eaa <UART_SetConfig+0x1ba>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e90:	e0ad      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006e92:	2302      	movs	r3, #2
 8006e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e98:	e0a9      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006e9a:	2304      	movs	r3, #4
 8006e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea0:	e0a5      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea8:	e0a1      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006eaa:	2310      	movs	r3, #16
 8006eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb0:	e09d      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a4a      	ldr	r2, [pc, #296]	@ (8006fe0 <UART_SetConfig+0x2f0>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d125      	bne.n	8006f08 <UART_SetConfig+0x218>
 8006ebc:	4b45      	ldr	r3, [pc, #276]	@ (8006fd4 <UART_SetConfig+0x2e4>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ec8:	d016      	beq.n	8006ef8 <UART_SetConfig+0x208>
 8006eca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ecc:	d818      	bhi.n	8006f00 <UART_SetConfig+0x210>
 8006ece:	2b80      	cmp	r3, #128	@ 0x80
 8006ed0:	d00a      	beq.n	8006ee8 <UART_SetConfig+0x1f8>
 8006ed2:	2b80      	cmp	r3, #128	@ 0x80
 8006ed4:	d814      	bhi.n	8006f00 <UART_SetConfig+0x210>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <UART_SetConfig+0x1f0>
 8006eda:	2b40      	cmp	r3, #64	@ 0x40
 8006edc:	d008      	beq.n	8006ef0 <UART_SetConfig+0x200>
 8006ede:	e00f      	b.n	8006f00 <UART_SetConfig+0x210>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee6:	e082      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eee:	e07e      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef6:	e07a      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006ef8:	2308      	movs	r3, #8
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efe:	e076      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006f00:	2310      	movs	r3, #16
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f06:	e072      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a35      	ldr	r2, [pc, #212]	@ (8006fe4 <UART_SetConfig+0x2f4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d12a      	bne.n	8006f68 <UART_SetConfig+0x278>
 8006f12:	4b30      	ldr	r3, [pc, #192]	@ (8006fd4 <UART_SetConfig+0x2e4>)
 8006f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f20:	d01a      	beq.n	8006f58 <UART_SetConfig+0x268>
 8006f22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f26:	d81b      	bhi.n	8006f60 <UART_SetConfig+0x270>
 8006f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f2c:	d00c      	beq.n	8006f48 <UART_SetConfig+0x258>
 8006f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f32:	d815      	bhi.n	8006f60 <UART_SetConfig+0x270>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <UART_SetConfig+0x250>
 8006f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f3c:	d008      	beq.n	8006f50 <UART_SetConfig+0x260>
 8006f3e:	e00f      	b.n	8006f60 <UART_SetConfig+0x270>
 8006f40:	2300      	movs	r3, #0
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f46:	e052      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4e:	e04e      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f56:	e04a      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f5e:	e046      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f66:	e042      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a17      	ldr	r2, [pc, #92]	@ (8006fcc <UART_SetConfig+0x2dc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d13a      	bne.n	8006fe8 <UART_SetConfig+0x2f8>
 8006f72:	4b18      	ldr	r3, [pc, #96]	@ (8006fd4 <UART_SetConfig+0x2e4>)
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f80:	d01a      	beq.n	8006fb8 <UART_SetConfig+0x2c8>
 8006f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f86:	d81b      	bhi.n	8006fc0 <UART_SetConfig+0x2d0>
 8006f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f8c:	d00c      	beq.n	8006fa8 <UART_SetConfig+0x2b8>
 8006f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f92:	d815      	bhi.n	8006fc0 <UART_SetConfig+0x2d0>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <UART_SetConfig+0x2b0>
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9c:	d008      	beq.n	8006fb0 <UART_SetConfig+0x2c0>
 8006f9e:	e00f      	b.n	8006fc0 <UART_SetConfig+0x2d0>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e022      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fae:	e01e      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb6:	e01a      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006fb8:	2308      	movs	r3, #8
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fbe:	e016      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006fc0:	2310      	movs	r3, #16
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc6:	e012      	b.n	8006fee <UART_SetConfig+0x2fe>
 8006fc8:	cfff69f3 	.word	0xcfff69f3
 8006fcc:	40008000 	.word	0x40008000
 8006fd0:	40013800 	.word	0x40013800
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40004400 	.word	0x40004400
 8006fdc:	40004800 	.word	0x40004800
 8006fe0:	40004c00 	.word	0x40004c00
 8006fe4:	40005000 	.word	0x40005000
 8006fe8:	2310      	movs	r3, #16
 8006fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4aae      	ldr	r2, [pc, #696]	@ (80072ac <UART_SetConfig+0x5bc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	f040 8097 	bne.w	8007128 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d823      	bhi.n	800704a <UART_SetConfig+0x35a>
 8007002:	a201      	add	r2, pc, #4	@ (adr r2, 8007008 <UART_SetConfig+0x318>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	0800702d 	.word	0x0800702d
 800700c:	0800704b 	.word	0x0800704b
 8007010:	08007035 	.word	0x08007035
 8007014:	0800704b 	.word	0x0800704b
 8007018:	0800703b 	.word	0x0800703b
 800701c:	0800704b 	.word	0x0800704b
 8007020:	0800704b 	.word	0x0800704b
 8007024:	0800704b 	.word	0x0800704b
 8007028:	08007043 	.word	0x08007043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800702c:	f7fc fff2 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8007030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007032:	e010      	b.n	8007056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007034:	4b9e      	ldr	r3, [pc, #632]	@ (80072b0 <UART_SetConfig+0x5c0>)
 8007036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007038:	e00d      	b.n	8007056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703a:	f7fc ff7d 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 800703e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007040:	e009      	b.n	8007056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007048:	e005      	b.n	8007056 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8130 	beq.w	80072be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	4a94      	ldr	r2, [pc, #592]	@ (80072b4 <UART_SetConfig+0x5c4>)
 8007064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007068:	461a      	mov	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007070:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	429a      	cmp	r2, r3
 8007080:	d305      	bcc.n	800708e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	429a      	cmp	r2, r3
 800708c:	d903      	bls.n	8007096 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007094:	e113      	b.n	80072be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	2200      	movs	r2, #0
 800709a:	60bb      	str	r3, [r7, #8]
 800709c:	60fa      	str	r2, [r7, #12]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	4a84      	ldr	r2, [pc, #528]	@ (80072b4 <UART_SetConfig+0x5c4>)
 80070a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2200      	movs	r2, #0
 80070ac:	603b      	str	r3, [r7, #0]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070b8:	f7f9 f91a 	bl	80002f0 <__aeabi_uldivmod>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4610      	mov	r0, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	020b      	lsls	r3, r1, #8
 80070ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070d2:	0202      	lsls	r2, r0, #8
 80070d4:	6979      	ldr	r1, [r7, #20]
 80070d6:	6849      	ldr	r1, [r1, #4]
 80070d8:	0849      	lsrs	r1, r1, #1
 80070da:	2000      	movs	r0, #0
 80070dc:	460c      	mov	r4, r1
 80070de:	4605      	mov	r5, r0
 80070e0:	eb12 0804 	adds.w	r8, r2, r4
 80070e4:	eb43 0905 	adc.w	r9, r3, r5
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	469a      	mov	sl, r3
 80070f0:	4693      	mov	fp, r2
 80070f2:	4652      	mov	r2, sl
 80070f4:	465b      	mov	r3, fp
 80070f6:	4640      	mov	r0, r8
 80070f8:	4649      	mov	r1, r9
 80070fa:	f7f9 f8f9 	bl	80002f0 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4613      	mov	r3, r2
 8007104:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800710c:	d308      	bcc.n	8007120 <UART_SetConfig+0x430>
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007114:	d204      	bcs.n	8007120 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6a3a      	ldr	r2, [r7, #32]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	e0ce      	b.n	80072be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007126:	e0ca      	b.n	80072be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007130:	d166      	bne.n	8007200 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007136:	2b08      	cmp	r3, #8
 8007138:	d827      	bhi.n	800718a <UART_SetConfig+0x49a>
 800713a:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <UART_SetConfig+0x450>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007165 	.word	0x08007165
 8007144:	0800716d 	.word	0x0800716d
 8007148:	08007175 	.word	0x08007175
 800714c:	0800718b 	.word	0x0800718b
 8007150:	0800717b 	.word	0x0800717b
 8007154:	0800718b 	.word	0x0800718b
 8007158:	0800718b 	.word	0x0800718b
 800715c:	0800718b 	.word	0x0800718b
 8007160:	08007183 	.word	0x08007183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007164:	f7fc ff56 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8007168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800716a:	e014      	b.n	8007196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800716c:	f7fc ff68 	bl	8004040 <HAL_RCC_GetPCLK2Freq>
 8007170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007172:	e010      	b.n	8007196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007174:	4b4e      	ldr	r3, [pc, #312]	@ (80072b0 <UART_SetConfig+0x5c0>)
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007178:	e00d      	b.n	8007196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717a:	f7fc fedd 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 800717e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007180:	e009      	b.n	8007196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007188:	e005      	b.n	8007196 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8090 	beq.w	80072be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	4a44      	ldr	r2, [pc, #272]	@ (80072b4 <UART_SetConfig+0x5c4>)
 80071a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b0:	005a      	lsls	r2, r3, #1
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	441a      	add	r2, r3
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	2b0f      	cmp	r3, #15
 80071c8:	d916      	bls.n	80071f8 <UART_SetConfig+0x508>
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d0:	d212      	bcs.n	80071f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f023 030f 	bic.w	r3, r3, #15
 80071da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	8bfb      	ldrh	r3, [r7, #30]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	8bfa      	ldrh	r2, [r7, #30]
 80071f4:	60da      	str	r2, [r3, #12]
 80071f6:	e062      	b.n	80072be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071fe:	e05e      	b.n	80072be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007204:	2b08      	cmp	r3, #8
 8007206:	d828      	bhi.n	800725a <UART_SetConfig+0x56a>
 8007208:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <UART_SetConfig+0x520>)
 800720a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720e:	bf00      	nop
 8007210:	08007235 	.word	0x08007235
 8007214:	0800723d 	.word	0x0800723d
 8007218:	08007245 	.word	0x08007245
 800721c:	0800725b 	.word	0x0800725b
 8007220:	0800724b 	.word	0x0800724b
 8007224:	0800725b 	.word	0x0800725b
 8007228:	0800725b 	.word	0x0800725b
 800722c:	0800725b 	.word	0x0800725b
 8007230:	08007253 	.word	0x08007253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007234:	f7fc feee 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8007238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800723a:	e014      	b.n	8007266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800723c:	f7fc ff00 	bl	8004040 <HAL_RCC_GetPCLK2Freq>
 8007240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007242:	e010      	b.n	8007266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007244:	4b1a      	ldr	r3, [pc, #104]	@ (80072b0 <UART_SetConfig+0x5c0>)
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007248:	e00d      	b.n	8007266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800724a:	f7fc fe75 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 800724e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007250:	e009      	b.n	8007266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007258:	e005      	b.n	8007266 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007264:	bf00      	nop
    }

    if (pclk != 0U)
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d028      	beq.n	80072be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007270:	4a10      	ldr	r2, [pc, #64]	@ (80072b4 <UART_SetConfig+0x5c4>)
 8007272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007276:	461a      	mov	r2, r3
 8007278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727a:	fbb3 f2f2 	udiv	r2, r3, r2
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	441a      	add	r2, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	fbb2 f3f3 	udiv	r3, r2, r3
 800728e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	2b0f      	cmp	r3, #15
 8007294:	d910      	bls.n	80072b8 <UART_SetConfig+0x5c8>
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800729c:	d20c      	bcs.n	80072b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60da      	str	r2, [r3, #12]
 80072a8:	e009      	b.n	80072be <UART_SetConfig+0x5ce>
 80072aa:	bf00      	nop
 80072ac:	40008000 	.word	0x40008000
 80072b0:	00f42400 	.word	0x00f42400
 80072b4:	08009da0 	.word	0x08009da0
      }
      else
      {
        ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3730      	adds	r7, #48	@ 0x30
 80072e2:	46bd      	mov	sp, r7
 80072e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01a      	beq.n	80073fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073e6:	d10a      	bne.n	80073fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	605a      	str	r2, [r3, #4]
  }
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b098      	sub	sp, #96	@ 0x60
 8007430:	af02      	add	r7, sp, #8
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800743c:	f7fa fbee 	bl	8001c1c <HAL_GetTick>
 8007440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d12f      	bne.n	80074b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007458:	2200      	movs	r2, #0
 800745a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f88e 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d022      	beq.n	80074b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007488:	647b      	str	r3, [r7, #68]	@ 0x44
 800748a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800748e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e063      	b.n	8007578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d149      	bne.n	8007552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c6:	2200      	movs	r2, #0
 80074c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f857 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d03c      	beq.n	8007552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	623b      	str	r3, [r7, #32]
   return(result);
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80074f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e6      	bne.n	80074d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	60fb      	str	r3, [r7, #12]
   return(result);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800752a:	61fa      	str	r2, [r7, #28]
 800752c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	69b9      	ldr	r1, [r7, #24]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	617b      	str	r3, [r7, #20]
   return(result);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e012      	b.n	8007578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3758      	adds	r7, #88	@ 0x58
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	4613      	mov	r3, r2
 800758e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007590:	e04f      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d04b      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759a:	f7fa fb3f 	bl	8001c1c <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d302      	bcc.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e04e      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d037      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b80      	cmp	r3, #128	@ 0x80
 80075c6:	d034      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b40      	cmp	r3, #64	@ 0x40
 80075cc:	d031      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d110      	bne.n	80075fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f95b 	bl	80078a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2208      	movs	r2, #8
 80075ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e029      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800760c:	d111      	bne.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f941 	bl	80078a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e00f      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4013      	ands	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	bf0c      	ite	eq
 8007642:	2301      	moveq	r3, #1
 8007644:	2300      	movne	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	429a      	cmp	r2, r3
 800764e:	d0a0      	beq.n	8007592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800765c:	b480      	push	{r7}
 800765e:	b0a3      	sub	sp, #140	@ 0x8c
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800768e:	d10e      	bne.n	80076ae <UART_Start_Receive_IT+0x52>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d105      	bne.n	80076a4 <UART_Start_Receive_IT+0x48>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800769e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076a2:	e02d      	b.n	8007700 <UART_Start_Receive_IT+0xa4>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	22ff      	movs	r2, #255	@ 0xff
 80076a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076ac:	e028      	b.n	8007700 <UART_Start_Receive_IT+0xa4>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10d      	bne.n	80076d2 <UART_Start_Receive_IT+0x76>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d104      	bne.n	80076c8 <UART_Start_Receive_IT+0x6c>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	22ff      	movs	r2, #255	@ 0xff
 80076c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076c6:	e01b      	b.n	8007700 <UART_Start_Receive_IT+0xa4>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	227f      	movs	r2, #127	@ 0x7f
 80076cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076d0:	e016      	b.n	8007700 <UART_Start_Receive_IT+0xa4>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076da:	d10d      	bne.n	80076f8 <UART_Start_Receive_IT+0x9c>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <UART_Start_Receive_IT+0x92>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	227f      	movs	r2, #127	@ 0x7f
 80076e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076ec:	e008      	b.n	8007700 <UART_Start_Receive_IT+0xa4>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	223f      	movs	r2, #63	@ 0x3f
 80076f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076f6:	e003      	b.n	8007700 <UART_Start_Receive_IT+0xa4>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2222      	movs	r2, #34	@ 0x22
 800770c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007734:	673a      	str	r2, [r7, #112]	@ 0x70
 8007736:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800773a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e3      	bne.n	8007710 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800774c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007750:	d14f      	bne.n	80077f2 <UART_Start_Receive_IT+0x196>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	429a      	cmp	r2, r3
 800775c:	d349      	bcc.n	80077f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007766:	d107      	bne.n	8007778 <UART_Start_Receive_IT+0x11c>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a47      	ldr	r2, [pc, #284]	@ (8007890 <UART_Start_Receive_IT+0x234>)
 8007774:	675a      	str	r2, [r3, #116]	@ 0x74
 8007776:	e002      	b.n	800777e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a46      	ldr	r2, [pc, #280]	@ (8007894 <UART_Start_Receive_IT+0x238>)
 800777c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01a      	beq.n	80077bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800779a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077aa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80077b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e4      	bne.n	8007786 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3308      	adds	r3, #8
 80077c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80077dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80077ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e5      	bne.n	80077bc <UART_Start_Receive_IT+0x160>
 80077f0:	e046      	b.n	8007880 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fa:	d107      	bne.n	800780c <UART_Start_Receive_IT+0x1b0>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a24      	ldr	r2, [pc, #144]	@ (8007898 <UART_Start_Receive_IT+0x23c>)
 8007808:	675a      	str	r2, [r3, #116]	@ 0x74
 800780a:	e002      	b.n	8007812 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a23      	ldr	r2, [pc, #140]	@ (800789c <UART_Start_Receive_IT+0x240>)
 8007810:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d019      	beq.n	800784e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800782e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007838:	637b      	str	r3, [r7, #52]	@ 0x34
 800783a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800783e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e6      	bne.n	800781a <UART_Start_Receive_IT+0x1be>
 800784c:	e018      	b.n	8007880 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	613b      	str	r3, [r7, #16]
   return(result);
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f043 0320 	orr.w	r3, r3, #32
 8007862:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800786c:	623b      	str	r3, [r7, #32]
 800786e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	69f9      	ldr	r1, [r7, #28]
 8007872:	6a3a      	ldr	r2, [r7, #32]
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	61bb      	str	r3, [r7, #24]
   return(result);
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e6      	bne.n	800784e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	378c      	adds	r7, #140	@ 0x8c
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	080080bd 	.word	0x080080bd
 8007894:	08007d59 	.word	0x08007d59
 8007898:	08007ba1 	.word	0x08007ba1
 800789c:	080079e9 	.word	0x080079e9

080078a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b095      	sub	sp, #84	@ 0x54
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80078c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e6      	bne.n	80078a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078f0:	f023 0301 	bic.w	r3, r3, #1
 80078f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3308      	adds	r3, #8
 80078fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e3      	bne.n	80078da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007916:	2b01      	cmp	r3, #1
 8007918:	d118      	bne.n	800794c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	60bb      	str	r3, [r7, #8]
   return(result);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 0310 	bic.w	r3, r3, #16
 800792e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	6979      	ldr	r1, [r7, #20]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	613b      	str	r3, [r7, #16]
   return(result);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e6      	bne.n	800791a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007960:	bf00      	nop
 8007962:	3754      	adds	r7, #84	@ 0x54
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff f99e 	bl	8006cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	61bb      	str	r3, [r7, #24]
 80079b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6979      	ldr	r1, [r7, #20]
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	613b      	str	r3, [r7, #16]
   return(result);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff f969 	bl	8006cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079de:	bf00      	nop
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b09c      	sub	sp, #112	@ 0x70
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a00:	2b22      	cmp	r3, #34	@ 0x22
 8007a02:	f040 80be 	bne.w	8007b82 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a14:	b2d9      	uxtb	r1, r3
 8007a16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a20:	400a      	ands	r2, r1
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f040 80a1 	bne.w	8007b92 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e6      	bne.n	8007a50 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a94:	f023 0301 	bic.w	r3, r3, #1
 8007a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007aa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e5      	bne.n	8007a82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a33      	ldr	r2, [pc, #204]	@ (8007b9c <UART_RxISR_8BIT+0x1b4>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d01f      	beq.n	8007b14 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d018      	beq.n	8007b14 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	623b      	str	r3, [r7, #32]
   return(result);
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007af6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d12e      	bne.n	8007b7a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b40:	61fb      	str	r3, [r7, #28]
 8007b42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69b9      	ldr	r1, [r7, #24]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e6      	bne.n	8007b22 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d103      	bne.n	8007b6a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2210      	movs	r2, #16
 8007b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff f8b0 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b78:	e00b      	b.n	8007b92 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7f9 f96c 	bl	8000e58 <HAL_UART_RxCpltCallback>
}
 8007b80:	e007      	b.n	8007b92 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699a      	ldr	r2, [r3, #24]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0208 	orr.w	r2, r2, #8
 8007b90:	619a      	str	r2, [r3, #24]
}
 8007b92:	bf00      	nop
 8007b94:	3770      	adds	r7, #112	@ 0x70
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40008000 	.word	0x40008000

08007ba0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b09c      	sub	sp, #112	@ 0x70
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007bae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb8:	2b22      	cmp	r3, #34	@ 0x22
 8007bba:	f040 80be 	bne.w	8007d3a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007bd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be2:	1c9a      	adds	r2, r3, #2
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f040 80a1 	bne.w	8007d4a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c28:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	f023 0301 	bic.w	r3, r3, #1
 8007c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3308      	adds	r3, #8
 8007c58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e5      	bne.n	8007c3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a33      	ldr	r2, [pc, #204]	@ (8007d54 <UART_RxISR_16BIT+0x1b4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d01f      	beq.n	8007ccc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d018      	beq.n	8007ccc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e6      	bne.n	8007c9a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d12e      	bne.n	8007d32 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 0310 	bic.w	r3, r3, #16
 8007cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6979      	ldr	r1, [r7, #20]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	613b      	str	r3, [r7, #16]
   return(result);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b10      	cmp	r3, #16
 8007d18:	d103      	bne.n	8007d22 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2210      	movs	r2, #16
 8007d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fe ffd4 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d30:	e00b      	b.n	8007d4a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7f9 f890 	bl	8000e58 <HAL_UART_RxCpltCallback>
}
 8007d38:	e007      	b.n	8007d4a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699a      	ldr	r2, [r3, #24]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0208 	orr.w	r2, r2, #8
 8007d48:	619a      	str	r2, [r3, #24]
}
 8007d4a:	bf00      	nop
 8007d4c:	3770      	adds	r7, #112	@ 0x70
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40008000 	.word	0x40008000

08007d58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b0ac      	sub	sp, #176	@ 0xb0
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d66:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d8e:	2b22      	cmp	r3, #34	@ 0x22
 8007d90:	f040 8183 	bne.w	800809a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d9a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d9e:	e126      	b.n	8007fee <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007daa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007dae:	b2d9      	uxtb	r1, r3
 8007db0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dba:	400a      	ands	r2, r1
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d053      	beq.n	8007e9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d011      	beq.n	8007e22 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00b      	beq.n	8007e22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e18:	f043 0201 	orr.w	r2, r3, #1
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d011      	beq.n	8007e52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00b      	beq.n	8007e52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e48:	f043 0204 	orr.w	r2, r3, #4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d011      	beq.n	8007e82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e78:	f043 0202 	orr.w	r2, r3, #2
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d006      	beq.n	8007e9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7fe ff19 	bl	8006cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f040 80a3 	bne.w	8007fee <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ecc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007ed0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e4      	bne.n	8007ea8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f06:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007f08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007f0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e1      	bne.n	8007ede <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a60      	ldr	r2, [pc, #384]	@ (80080b4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d021      	beq.n	8007f7c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01a      	beq.n	8007f7c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f6a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e4      	bne.n	8007f46 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d130      	bne.n	8007fe6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9a:	f023 0310 	bic.w	r3, r3, #16
 8007f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e4      	bne.n	8007f8a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d103      	bne.n	8007fd6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2210      	movs	r2, #16
 8007fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fe fe7a 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007fe4:	e00e      	b.n	8008004 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7f8 ff36 	bl	8000e58 <HAL_UART_RxCpltCallback>
        break;
 8007fec:	e00a      	b.n	8008004 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d006      	beq.n	8008004 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f47f aece 	bne.w	8007da0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800800a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800800e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008012:	2b00      	cmp	r3, #0
 8008014:	d049      	beq.n	80080aa <UART_RxISR_8BIT_FIFOEN+0x352>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800801c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008020:	429a      	cmp	r2, r3
 8008022:	d242      	bcs.n	80080aa <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3308      	adds	r3, #8
 800802a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	e853 3f00 	ldrex	r3, [r3]
 8008032:	61fb      	str	r3, [r7, #28]
   return(result);
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800803a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3308      	adds	r3, #8
 8008044:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800804a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800804e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e3      	bne.n	8008024 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a16      	ldr	r2, [pc, #88]	@ (80080b8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008060:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f043 0320 	orr.w	r3, r3, #32
 8008076:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	6979      	ldr	r1, [r7, #20]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	e841 2300 	strex	r3, r2, [r1]
 8008090:	613b      	str	r3, [r7, #16]
   return(result);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e4      	bne.n	8008062 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008098:	e007      	b.n	80080aa <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0208 	orr.w	r2, r2, #8
 80080a8:	619a      	str	r2, [r3, #24]
}
 80080aa:	bf00      	nop
 80080ac:	37b0      	adds	r7, #176	@ 0xb0
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40008000 	.word	0x40008000
 80080b8:	080079e9 	.word	0x080079e9

080080bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b0ae      	sub	sp, #184	@ 0xb8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f2:	2b22      	cmp	r3, #34	@ 0x22
 80080f4:	f040 8187 	bne.w	8008406 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008102:	e12a      	b.n	800835a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008116:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800811a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800811e:	4013      	ands	r3, r2
 8008120:	b29a      	uxth	r2, r3
 8008122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812c:	1c9a      	adds	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800814e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	2b00      	cmp	r3, #0
 8008158:	d053      	beq.n	8008202 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800815a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d011      	beq.n	800818a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800816a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00b      	beq.n	800818a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2201      	movs	r2, #1
 8008178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008180:	f043 0201 	orr.w	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800818a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d011      	beq.n	80081ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00b      	beq.n	80081ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2202      	movs	r2, #2
 80081a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b0:	f043 0204 	orr.w	r2, r3, #4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d011      	beq.n	80081ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80081c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2204      	movs	r2, #4
 80081d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e0:	f043 0202 	orr.w	r2, r3, #2
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe fd65 	bl	8006cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	f040 80a5 	bne.w	800835a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800821e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008232:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008236:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800823a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e2      	bne.n	8008210 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3308      	adds	r3, #8
 8008250:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800825a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800825c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008260:	f023 0301 	bic.w	r3, r3, #1
 8008264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3308      	adds	r3, #8
 800826e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008272:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008274:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008278:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e1      	bne.n	800824a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a60      	ldr	r2, [pc, #384]	@ (8008420 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d021      	beq.n	80082e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d01a      	beq.n	80082e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e4      	bne.n	80082b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d130      	bne.n	8008352 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008306:	f023 0310 	bic.w	r3, r3, #16
 800830a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008318:	647b      	str	r3, [r7, #68]	@ 0x44
 800831a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800831e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e4      	bne.n	80082f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b10      	cmp	r3, #16
 8008338:	d103      	bne.n	8008342 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2210      	movs	r2, #16
 8008340:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fe fcc4 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008350:	e00e      	b.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7f8 fd80 	bl	8000e58 <HAL_UART_RxCpltCallback>
        break;
 8008358:	e00a      	b.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800835a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800835e:	2b00      	cmp	r3, #0
 8008360:	d006      	beq.n	8008370 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	f47f aeca 	bne.w	8008104 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008376:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800837a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800837e:	2b00      	cmp	r3, #0
 8008380:	d049      	beq.n	8008416 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008388:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800838c:	429a      	cmp	r2, r3
 800838e:	d242      	bcs.n	8008416 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	623b      	str	r3, [r7, #32]
   return(result);
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3308      	adds	r3, #8
 80083b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80083b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e3      	bne.n	8008390 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a16      	ldr	r2, [pc, #88]	@ (8008424 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80083cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	60fb      	str	r3, [r7, #12]
   return(result);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f043 0320 	orr.w	r3, r3, #32
 80083e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	69b9      	ldr	r1, [r7, #24]
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	617b      	str	r3, [r7, #20]
   return(result);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e4      	bne.n	80083ce <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008404:	e007      	b.n	8008416 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0208 	orr.w	r2, r2, #8
 8008414:	619a      	str	r2, [r3, #24]
}
 8008416:	bf00      	nop
 8008418:	37b8      	adds	r7, #184	@ 0xb8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40008000 	.word	0x40008000
 8008424:	08007ba1 	.word	0x08007ba1

08008428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <HAL_UARTEx_DisableFifoMode+0x16>
 8008476:	2302      	movs	r3, #2
 8008478:	e027      	b.n	80084ca <HAL_UARTEx_DisableFifoMode+0x66>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2224      	movs	r2, #36	@ 0x24
 8008486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0201 	bic.w	r2, r2, #1
 80084a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e02d      	b.n	800854a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2224      	movs	r2, #36	@ 0x24
 80084fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0201 	bic.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f850 	bl	80085d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008566:	2302      	movs	r3, #2
 8008568:	e02d      	b.n	80085c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2224      	movs	r2, #36	@ 0x24
 8008576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0201 	bic.w	r2, r2, #1
 8008590:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f812 	bl	80085d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d108      	bne.n	80085f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085f0:	e031      	b.n	8008656 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085f2:	2308      	movs	r3, #8
 80085f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085f6:	2308      	movs	r3, #8
 80085f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	0e5b      	lsrs	r3, r3, #25
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	0f5b      	lsrs	r3, r3, #29
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	7b3a      	ldrb	r2, [r7, #12]
 800861e:	4911      	ldr	r1, [pc, #68]	@ (8008664 <UARTEx_SetNbDataToProcess+0x94>)
 8008620:	5c8a      	ldrb	r2, [r1, r2]
 8008622:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008626:	7b3a      	ldrb	r2, [r7, #12]
 8008628:	490f      	ldr	r1, [pc, #60]	@ (8008668 <UARTEx_SetNbDataToProcess+0x98>)
 800862a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800862c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	7b7a      	ldrb	r2, [r7, #13]
 800863c:	4909      	ldr	r1, [pc, #36]	@ (8008664 <UARTEx_SetNbDataToProcess+0x94>)
 800863e:	5c8a      	ldrb	r2, [r1, r2]
 8008640:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008644:	7b7a      	ldrb	r2, [r7, #13]
 8008646:	4908      	ldr	r1, [pc, #32]	@ (8008668 <UARTEx_SetNbDataToProcess+0x98>)
 8008648:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800864a:	fb93 f3f2 	sdiv	r3, r3, r2
 800864e:	b29a      	uxth	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	08009db8 	.word	0x08009db8
 8008668:	08009dc0 	.word	0x08009dc0

0800866c <atoi>:
 800866c:	220a      	movs	r2, #10
 800866e:	2100      	movs	r1, #0
 8008670:	f000 b87a 	b.w	8008768 <strtol>

08008674 <_strtol_l.constprop.0>:
 8008674:	2b24      	cmp	r3, #36	@ 0x24
 8008676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800867a:	4686      	mov	lr, r0
 800867c:	4690      	mov	r8, r2
 800867e:	d801      	bhi.n	8008684 <_strtol_l.constprop.0+0x10>
 8008680:	2b01      	cmp	r3, #1
 8008682:	d106      	bne.n	8008692 <_strtol_l.constprop.0+0x1e>
 8008684:	f000 fa4a 	bl	8008b1c <__errno>
 8008688:	2316      	movs	r3, #22
 800868a:	6003      	str	r3, [r0, #0]
 800868c:	2000      	movs	r0, #0
 800868e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008692:	4834      	ldr	r0, [pc, #208]	@ (8008764 <_strtol_l.constprop.0+0xf0>)
 8008694:	460d      	mov	r5, r1
 8008696:	462a      	mov	r2, r5
 8008698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800869c:	5d06      	ldrb	r6, [r0, r4]
 800869e:	f016 0608 	ands.w	r6, r6, #8
 80086a2:	d1f8      	bne.n	8008696 <_strtol_l.constprop.0+0x22>
 80086a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80086a6:	d12d      	bne.n	8008704 <_strtol_l.constprop.0+0x90>
 80086a8:	782c      	ldrb	r4, [r5, #0]
 80086aa:	2601      	movs	r6, #1
 80086ac:	1c95      	adds	r5, r2, #2
 80086ae:	f033 0210 	bics.w	r2, r3, #16
 80086b2:	d109      	bne.n	80086c8 <_strtol_l.constprop.0+0x54>
 80086b4:	2c30      	cmp	r4, #48	@ 0x30
 80086b6:	d12a      	bne.n	800870e <_strtol_l.constprop.0+0x9a>
 80086b8:	782a      	ldrb	r2, [r5, #0]
 80086ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80086be:	2a58      	cmp	r2, #88	@ 0x58
 80086c0:	d125      	bne.n	800870e <_strtol_l.constprop.0+0x9a>
 80086c2:	786c      	ldrb	r4, [r5, #1]
 80086c4:	2310      	movs	r3, #16
 80086c6:	3502      	adds	r5, #2
 80086c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80086cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086d0:	2200      	movs	r2, #0
 80086d2:	fbbc f9f3 	udiv	r9, ip, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80086dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80086e0:	2f09      	cmp	r7, #9
 80086e2:	d81b      	bhi.n	800871c <_strtol_l.constprop.0+0xa8>
 80086e4:	463c      	mov	r4, r7
 80086e6:	42a3      	cmp	r3, r4
 80086e8:	dd27      	ble.n	800873a <_strtol_l.constprop.0+0xc6>
 80086ea:	1c57      	adds	r7, r2, #1
 80086ec:	d007      	beq.n	80086fe <_strtol_l.constprop.0+0x8a>
 80086ee:	4581      	cmp	r9, r0
 80086f0:	d320      	bcc.n	8008734 <_strtol_l.constprop.0+0xc0>
 80086f2:	d101      	bne.n	80086f8 <_strtol_l.constprop.0+0x84>
 80086f4:	45a2      	cmp	sl, r4
 80086f6:	db1d      	blt.n	8008734 <_strtol_l.constprop.0+0xc0>
 80086f8:	fb00 4003 	mla	r0, r0, r3, r4
 80086fc:	2201      	movs	r2, #1
 80086fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008702:	e7eb      	b.n	80086dc <_strtol_l.constprop.0+0x68>
 8008704:	2c2b      	cmp	r4, #43	@ 0x2b
 8008706:	bf04      	itt	eq
 8008708:	782c      	ldrbeq	r4, [r5, #0]
 800870a:	1c95      	addeq	r5, r2, #2
 800870c:	e7cf      	b.n	80086ae <_strtol_l.constprop.0+0x3a>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1da      	bne.n	80086c8 <_strtol_l.constprop.0+0x54>
 8008712:	2c30      	cmp	r4, #48	@ 0x30
 8008714:	bf0c      	ite	eq
 8008716:	2308      	moveq	r3, #8
 8008718:	230a      	movne	r3, #10
 800871a:	e7d5      	b.n	80086c8 <_strtol_l.constprop.0+0x54>
 800871c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008720:	2f19      	cmp	r7, #25
 8008722:	d801      	bhi.n	8008728 <_strtol_l.constprop.0+0xb4>
 8008724:	3c37      	subs	r4, #55	@ 0x37
 8008726:	e7de      	b.n	80086e6 <_strtol_l.constprop.0+0x72>
 8008728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800872c:	2f19      	cmp	r7, #25
 800872e:	d804      	bhi.n	800873a <_strtol_l.constprop.0+0xc6>
 8008730:	3c57      	subs	r4, #87	@ 0x57
 8008732:	e7d8      	b.n	80086e6 <_strtol_l.constprop.0+0x72>
 8008734:	f04f 32ff 	mov.w	r2, #4294967295
 8008738:	e7e1      	b.n	80086fe <_strtol_l.constprop.0+0x8a>
 800873a:	1c53      	adds	r3, r2, #1
 800873c:	d108      	bne.n	8008750 <_strtol_l.constprop.0+0xdc>
 800873e:	2322      	movs	r3, #34	@ 0x22
 8008740:	f8ce 3000 	str.w	r3, [lr]
 8008744:	4660      	mov	r0, ip
 8008746:	f1b8 0f00 	cmp.w	r8, #0
 800874a:	d0a0      	beq.n	800868e <_strtol_l.constprop.0+0x1a>
 800874c:	1e69      	subs	r1, r5, #1
 800874e:	e006      	b.n	800875e <_strtol_l.constprop.0+0xea>
 8008750:	b106      	cbz	r6, 8008754 <_strtol_l.constprop.0+0xe0>
 8008752:	4240      	negs	r0, r0
 8008754:	f1b8 0f00 	cmp.w	r8, #0
 8008758:	d099      	beq.n	800868e <_strtol_l.constprop.0+0x1a>
 800875a:	2a00      	cmp	r2, #0
 800875c:	d1f6      	bne.n	800874c <_strtol_l.constprop.0+0xd8>
 800875e:	f8c8 1000 	str.w	r1, [r8]
 8008762:	e794      	b.n	800868e <_strtol_l.constprop.0+0x1a>
 8008764:	08009dc9 	.word	0x08009dc9

08008768 <strtol>:
 8008768:	4613      	mov	r3, r2
 800876a:	460a      	mov	r2, r1
 800876c:	4601      	mov	r1, r0
 800876e:	4802      	ldr	r0, [pc, #8]	@ (8008778 <strtol+0x10>)
 8008770:	6800      	ldr	r0, [r0, #0]
 8008772:	f7ff bf7f 	b.w	8008674 <_strtol_l.constprop.0>
 8008776:	bf00      	nop
 8008778:	2000001c 	.word	0x2000001c

0800877c <std>:
 800877c:	2300      	movs	r3, #0
 800877e:	b510      	push	{r4, lr}
 8008780:	4604      	mov	r4, r0
 8008782:	e9c0 3300 	strd	r3, r3, [r0]
 8008786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800878a:	6083      	str	r3, [r0, #8]
 800878c:	8181      	strh	r1, [r0, #12]
 800878e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008790:	81c2      	strh	r2, [r0, #14]
 8008792:	6183      	str	r3, [r0, #24]
 8008794:	4619      	mov	r1, r3
 8008796:	2208      	movs	r2, #8
 8008798:	305c      	adds	r0, #92	@ 0x5c
 800879a:	f000 f914 	bl	80089c6 <memset>
 800879e:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <std+0x58>)
 80087a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <std+0x5c>)
 80087a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <std+0x60>)
 80087a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <std+0x64>)
 80087ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80087ae:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <std+0x68>)
 80087b0:	6224      	str	r4, [r4, #32]
 80087b2:	429c      	cmp	r4, r3
 80087b4:	d006      	beq.n	80087c4 <std+0x48>
 80087b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087ba:	4294      	cmp	r4, r2
 80087bc:	d002      	beq.n	80087c4 <std+0x48>
 80087be:	33d0      	adds	r3, #208	@ 0xd0
 80087c0:	429c      	cmp	r4, r3
 80087c2:	d105      	bne.n	80087d0 <std+0x54>
 80087c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087cc:	f000 b9d0 	b.w	8008b70 <__retarget_lock_init_recursive>
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	08008941 	.word	0x08008941
 80087d8:	08008963 	.word	0x08008963
 80087dc:	0800899b 	.word	0x0800899b
 80087e0:	080089bf 	.word	0x080089bf
 80087e4:	20000450 	.word	0x20000450

080087e8 <stdio_exit_handler>:
 80087e8:	4a02      	ldr	r2, [pc, #8]	@ (80087f4 <stdio_exit_handler+0xc>)
 80087ea:	4903      	ldr	r1, [pc, #12]	@ (80087f8 <stdio_exit_handler+0x10>)
 80087ec:	4803      	ldr	r0, [pc, #12]	@ (80087fc <stdio_exit_handler+0x14>)
 80087ee:	f000 b869 	b.w	80088c4 <_fwalk_sglue>
 80087f2:	bf00      	nop
 80087f4:	20000010 	.word	0x20000010
 80087f8:	08009489 	.word	0x08009489
 80087fc:	20000020 	.word	0x20000020

08008800 <cleanup_stdio>:
 8008800:	6841      	ldr	r1, [r0, #4]
 8008802:	4b0c      	ldr	r3, [pc, #48]	@ (8008834 <cleanup_stdio+0x34>)
 8008804:	4299      	cmp	r1, r3
 8008806:	b510      	push	{r4, lr}
 8008808:	4604      	mov	r4, r0
 800880a:	d001      	beq.n	8008810 <cleanup_stdio+0x10>
 800880c:	f000 fe3c 	bl	8009488 <_fflush_r>
 8008810:	68a1      	ldr	r1, [r4, #8]
 8008812:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <cleanup_stdio+0x38>)
 8008814:	4299      	cmp	r1, r3
 8008816:	d002      	beq.n	800881e <cleanup_stdio+0x1e>
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fe35 	bl	8009488 <_fflush_r>
 800881e:	68e1      	ldr	r1, [r4, #12]
 8008820:	4b06      	ldr	r3, [pc, #24]	@ (800883c <cleanup_stdio+0x3c>)
 8008822:	4299      	cmp	r1, r3
 8008824:	d004      	beq.n	8008830 <cleanup_stdio+0x30>
 8008826:	4620      	mov	r0, r4
 8008828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882c:	f000 be2c 	b.w	8009488 <_fflush_r>
 8008830:	bd10      	pop	{r4, pc}
 8008832:	bf00      	nop
 8008834:	20000450 	.word	0x20000450
 8008838:	200004b8 	.word	0x200004b8
 800883c:	20000520 	.word	0x20000520

08008840 <global_stdio_init.part.0>:
 8008840:	b510      	push	{r4, lr}
 8008842:	4b0b      	ldr	r3, [pc, #44]	@ (8008870 <global_stdio_init.part.0+0x30>)
 8008844:	4c0b      	ldr	r4, [pc, #44]	@ (8008874 <global_stdio_init.part.0+0x34>)
 8008846:	4a0c      	ldr	r2, [pc, #48]	@ (8008878 <global_stdio_init.part.0+0x38>)
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	4620      	mov	r0, r4
 800884c:	2200      	movs	r2, #0
 800884e:	2104      	movs	r1, #4
 8008850:	f7ff ff94 	bl	800877c <std>
 8008854:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008858:	2201      	movs	r2, #1
 800885a:	2109      	movs	r1, #9
 800885c:	f7ff ff8e 	bl	800877c <std>
 8008860:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008864:	2202      	movs	r2, #2
 8008866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886a:	2112      	movs	r1, #18
 800886c:	f7ff bf86 	b.w	800877c <std>
 8008870:	20000588 	.word	0x20000588
 8008874:	20000450 	.word	0x20000450
 8008878:	080087e9 	.word	0x080087e9

0800887c <__sfp_lock_acquire>:
 800887c:	4801      	ldr	r0, [pc, #4]	@ (8008884 <__sfp_lock_acquire+0x8>)
 800887e:	f000 b978 	b.w	8008b72 <__retarget_lock_acquire_recursive>
 8008882:	bf00      	nop
 8008884:	20000591 	.word	0x20000591

08008888 <__sfp_lock_release>:
 8008888:	4801      	ldr	r0, [pc, #4]	@ (8008890 <__sfp_lock_release+0x8>)
 800888a:	f000 b973 	b.w	8008b74 <__retarget_lock_release_recursive>
 800888e:	bf00      	nop
 8008890:	20000591 	.word	0x20000591

08008894 <__sinit>:
 8008894:	b510      	push	{r4, lr}
 8008896:	4604      	mov	r4, r0
 8008898:	f7ff fff0 	bl	800887c <__sfp_lock_acquire>
 800889c:	6a23      	ldr	r3, [r4, #32]
 800889e:	b11b      	cbz	r3, 80088a8 <__sinit+0x14>
 80088a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a4:	f7ff bff0 	b.w	8008888 <__sfp_lock_release>
 80088a8:	4b04      	ldr	r3, [pc, #16]	@ (80088bc <__sinit+0x28>)
 80088aa:	6223      	str	r3, [r4, #32]
 80088ac:	4b04      	ldr	r3, [pc, #16]	@ (80088c0 <__sinit+0x2c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f5      	bne.n	80088a0 <__sinit+0xc>
 80088b4:	f7ff ffc4 	bl	8008840 <global_stdio_init.part.0>
 80088b8:	e7f2      	b.n	80088a0 <__sinit+0xc>
 80088ba:	bf00      	nop
 80088bc:	08008801 	.word	0x08008801
 80088c0:	20000588 	.word	0x20000588

080088c4 <_fwalk_sglue>:
 80088c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c8:	4607      	mov	r7, r0
 80088ca:	4688      	mov	r8, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	2600      	movs	r6, #0
 80088d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d4:	f1b9 0901 	subs.w	r9, r9, #1
 80088d8:	d505      	bpl.n	80088e6 <_fwalk_sglue+0x22>
 80088da:	6824      	ldr	r4, [r4, #0]
 80088dc:	2c00      	cmp	r4, #0
 80088de:	d1f7      	bne.n	80088d0 <_fwalk_sglue+0xc>
 80088e0:	4630      	mov	r0, r6
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d907      	bls.n	80088fc <_fwalk_sglue+0x38>
 80088ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f0:	3301      	adds	r3, #1
 80088f2:	d003      	beq.n	80088fc <_fwalk_sglue+0x38>
 80088f4:	4629      	mov	r1, r5
 80088f6:	4638      	mov	r0, r7
 80088f8:	47c0      	blx	r8
 80088fa:	4306      	orrs	r6, r0
 80088fc:	3568      	adds	r5, #104	@ 0x68
 80088fe:	e7e9      	b.n	80088d4 <_fwalk_sglue+0x10>

08008900 <siprintf>:
 8008900:	b40e      	push	{r1, r2, r3}
 8008902:	b500      	push	{lr}
 8008904:	b09c      	sub	sp, #112	@ 0x70
 8008906:	ab1d      	add	r3, sp, #116	@ 0x74
 8008908:	9002      	str	r0, [sp, #8]
 800890a:	9006      	str	r0, [sp, #24]
 800890c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008910:	4809      	ldr	r0, [pc, #36]	@ (8008938 <siprintf+0x38>)
 8008912:	9107      	str	r1, [sp, #28]
 8008914:	9104      	str	r1, [sp, #16]
 8008916:	4909      	ldr	r1, [pc, #36]	@ (800893c <siprintf+0x3c>)
 8008918:	f853 2b04 	ldr.w	r2, [r3], #4
 800891c:	9105      	str	r1, [sp, #20]
 800891e:	6800      	ldr	r0, [r0, #0]
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	a902      	add	r1, sp, #8
 8008924:	f000 faa2 	bl	8008e6c <_svfiprintf_r>
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	b01c      	add	sp, #112	@ 0x70
 8008930:	f85d eb04 	ldr.w	lr, [sp], #4
 8008934:	b003      	add	sp, #12
 8008936:	4770      	bx	lr
 8008938:	2000001c 	.word	0x2000001c
 800893c:	ffff0208 	.word	0xffff0208

08008940 <__sread>:
 8008940:	b510      	push	{r4, lr}
 8008942:	460c      	mov	r4, r1
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	f000 f8c4 	bl	8008ad4 <_read_r>
 800894c:	2800      	cmp	r0, #0
 800894e:	bfab      	itete	ge
 8008950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008952:	89a3      	ldrhlt	r3, [r4, #12]
 8008954:	181b      	addge	r3, r3, r0
 8008956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800895a:	bfac      	ite	ge
 800895c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800895e:	81a3      	strhlt	r3, [r4, #12]
 8008960:	bd10      	pop	{r4, pc}

08008962 <__swrite>:
 8008962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	461f      	mov	r7, r3
 8008968:	898b      	ldrh	r3, [r1, #12]
 800896a:	05db      	lsls	r3, r3, #23
 800896c:	4605      	mov	r5, r0
 800896e:	460c      	mov	r4, r1
 8008970:	4616      	mov	r6, r2
 8008972:	d505      	bpl.n	8008980 <__swrite+0x1e>
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	2302      	movs	r3, #2
 800897a:	2200      	movs	r2, #0
 800897c:	f000 f898 	bl	8008ab0 <_lseek_r>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	4632      	mov	r2, r6
 800898e:	463b      	mov	r3, r7
 8008990:	4628      	mov	r0, r5
 8008992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008996:	f000 b8af 	b.w	8008af8 <_write_r>

0800899a <__sseek>:
 800899a:	b510      	push	{r4, lr}
 800899c:	460c      	mov	r4, r1
 800899e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a2:	f000 f885 	bl	8008ab0 <_lseek_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	bf15      	itete	ne
 80089ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089b6:	81a3      	strheq	r3, [r4, #12]
 80089b8:	bf18      	it	ne
 80089ba:	81a3      	strhne	r3, [r4, #12]
 80089bc:	bd10      	pop	{r4, pc}

080089be <__sclose>:
 80089be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c2:	f000 b865 	b.w	8008a90 <_close_r>

080089c6 <memset>:
 80089c6:	4402      	add	r2, r0
 80089c8:	4603      	mov	r3, r0
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d100      	bne.n	80089d0 <memset+0xa>
 80089ce:	4770      	bx	lr
 80089d0:	f803 1b01 	strb.w	r1, [r3], #1
 80089d4:	e7f9      	b.n	80089ca <memset+0x4>
	...

080089d8 <strtok>:
 80089d8:	4b16      	ldr	r3, [pc, #88]	@ (8008a34 <strtok+0x5c>)
 80089da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089de:	681f      	ldr	r7, [r3, #0]
 80089e0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80089e2:	4605      	mov	r5, r0
 80089e4:	460e      	mov	r6, r1
 80089e6:	b9ec      	cbnz	r4, 8008a24 <strtok+0x4c>
 80089e8:	2050      	movs	r0, #80	@ 0x50
 80089ea:	f000 f92d 	bl	8008c48 <malloc>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6478      	str	r0, [r7, #68]	@ 0x44
 80089f2:	b920      	cbnz	r0, 80089fe <strtok+0x26>
 80089f4:	4b10      	ldr	r3, [pc, #64]	@ (8008a38 <strtok+0x60>)
 80089f6:	4811      	ldr	r0, [pc, #68]	@ (8008a3c <strtok+0x64>)
 80089f8:	215b      	movs	r1, #91	@ 0x5b
 80089fa:	f000 f8bd 	bl	8008b78 <__assert_func>
 80089fe:	e9c0 4400 	strd	r4, r4, [r0]
 8008a02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008a06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008a0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008a0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008a12:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008a16:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008a1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008a1e:	6184      	str	r4, [r0, #24]
 8008a20:	7704      	strb	r4, [r0, #28]
 8008a22:	6244      	str	r4, [r0, #36]	@ 0x24
 8008a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a30:	f000 b806 	b.w	8008a40 <__strtok_r>
 8008a34:	2000001c 	.word	0x2000001c
 8008a38:	08009ec9 	.word	0x08009ec9
 8008a3c:	08009ee0 	.word	0x08009ee0

08008a40 <__strtok_r>:
 8008a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a42:	4604      	mov	r4, r0
 8008a44:	b908      	cbnz	r0, 8008a4a <__strtok_r+0xa>
 8008a46:	6814      	ldr	r4, [r2, #0]
 8008a48:	b144      	cbz	r4, 8008a5c <__strtok_r+0x1c>
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008a50:	460f      	mov	r7, r1
 8008a52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008a56:	b91e      	cbnz	r6, 8008a60 <__strtok_r+0x20>
 8008a58:	b965      	cbnz	r5, 8008a74 <__strtok_r+0x34>
 8008a5a:	6015      	str	r5, [r2, #0]
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e005      	b.n	8008a6c <__strtok_r+0x2c>
 8008a60:	42b5      	cmp	r5, r6
 8008a62:	d1f6      	bne.n	8008a52 <__strtok_r+0x12>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f0      	bne.n	8008a4a <__strtok_r+0xa>
 8008a68:	6014      	str	r4, [r2, #0]
 8008a6a:	7003      	strb	r3, [r0, #0]
 8008a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a6e:	461c      	mov	r4, r3
 8008a70:	e00c      	b.n	8008a8c <__strtok_r+0x4c>
 8008a72:	b915      	cbnz	r5, 8008a7a <__strtok_r+0x3a>
 8008a74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a78:	460e      	mov	r6, r1
 8008a7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008a7e:	42ab      	cmp	r3, r5
 8008a80:	d1f7      	bne.n	8008a72 <__strtok_r+0x32>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f3      	beq.n	8008a6e <__strtok_r+0x2e>
 8008a86:	2300      	movs	r3, #0
 8008a88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008a8c:	6014      	str	r4, [r2, #0]
 8008a8e:	e7ed      	b.n	8008a6c <__strtok_r+0x2c>

08008a90 <_close_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	@ (8008aac <_close_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f7f8 fbf8 	bl	8001290 <_close>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_close_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_close_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	2000058c 	.word	0x2000058c

08008ab0 <_lseek_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d07      	ldr	r5, [pc, #28]	@ (8008ad0 <_lseek_r+0x20>)
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	2200      	movs	r2, #0
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f7f8 fc0d 	bl	80012de <_lseek>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_lseek_r+0x1e>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_lseek_r+0x1e>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	2000058c 	.word	0x2000058c

08008ad4 <_read_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d07      	ldr	r5, [pc, #28]	@ (8008af4 <_read_r+0x20>)
 8008ad8:	4604      	mov	r4, r0
 8008ada:	4608      	mov	r0, r1
 8008adc:	4611      	mov	r1, r2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	602a      	str	r2, [r5, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f7f8 fb9b 	bl	800121e <_read>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_read_r+0x1e>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_read_r+0x1e>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	2000058c 	.word	0x2000058c

08008af8 <_write_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d07      	ldr	r5, [pc, #28]	@ (8008b18 <_write_r+0x20>)
 8008afc:	4604      	mov	r4, r0
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	602a      	str	r2, [r5, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f7f8 fba6 	bl	8001258 <_write>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_write_r+0x1e>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_write_r+0x1e>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	2000058c 	.word	0x2000058c

08008b1c <__errno>:
 8008b1c:	4b01      	ldr	r3, [pc, #4]	@ (8008b24 <__errno+0x8>)
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	2000001c 	.word	0x2000001c

08008b28 <__libc_init_array>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b60 <__libc_init_array+0x38>)
 8008b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b64 <__libc_init_array+0x3c>)
 8008b2e:	1b64      	subs	r4, r4, r5
 8008b30:	10a4      	asrs	r4, r4, #2
 8008b32:	2600      	movs	r6, #0
 8008b34:	42a6      	cmp	r6, r4
 8008b36:	d109      	bne.n	8008b4c <__libc_init_array+0x24>
 8008b38:	4d0b      	ldr	r5, [pc, #44]	@ (8008b68 <__libc_init_array+0x40>)
 8008b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b6c <__libc_init_array+0x44>)
 8008b3c:	f000 fff0 	bl	8009b20 <_init>
 8008b40:	1b64      	subs	r4, r4, r5
 8008b42:	10a4      	asrs	r4, r4, #2
 8008b44:	2600      	movs	r6, #0
 8008b46:	42a6      	cmp	r6, r4
 8008b48:	d105      	bne.n	8008b56 <__libc_init_array+0x2e>
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b50:	4798      	blx	r3
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7ee      	b.n	8008b34 <__libc_init_array+0xc>
 8008b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5a:	4798      	blx	r3
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	e7f2      	b.n	8008b46 <__libc_init_array+0x1e>
 8008b60:	08009fb4 	.word	0x08009fb4
 8008b64:	08009fb4 	.word	0x08009fb4
 8008b68:	08009fb4 	.word	0x08009fb4
 8008b6c:	08009fb8 	.word	0x08009fb8

08008b70 <__retarget_lock_init_recursive>:
 8008b70:	4770      	bx	lr

08008b72 <__retarget_lock_acquire_recursive>:
 8008b72:	4770      	bx	lr

08008b74 <__retarget_lock_release_recursive>:
 8008b74:	4770      	bx	lr
	...

08008b78 <__assert_func>:
 8008b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b7a:	4614      	mov	r4, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4b09      	ldr	r3, [pc, #36]	@ (8008ba4 <__assert_func+0x2c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4605      	mov	r5, r0
 8008b84:	68d8      	ldr	r0, [r3, #12]
 8008b86:	b954      	cbnz	r4, 8008b9e <__assert_func+0x26>
 8008b88:	4b07      	ldr	r3, [pc, #28]	@ (8008ba8 <__assert_func+0x30>)
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b90:	9100      	str	r1, [sp, #0]
 8008b92:	462b      	mov	r3, r5
 8008b94:	4905      	ldr	r1, [pc, #20]	@ (8008bac <__assert_func+0x34>)
 8008b96:	f000 fc9f 	bl	80094d8 <fiprintf>
 8008b9a:	f000 fce7 	bl	800956c <abort>
 8008b9e:	4b04      	ldr	r3, [pc, #16]	@ (8008bb0 <__assert_func+0x38>)
 8008ba0:	e7f4      	b.n	8008b8c <__assert_func+0x14>
 8008ba2:	bf00      	nop
 8008ba4:	2000001c 	.word	0x2000001c
 8008ba8:	08009f75 	.word	0x08009f75
 8008bac:	08009f47 	.word	0x08009f47
 8008bb0:	08009f3a 	.word	0x08009f3a

08008bb4 <_free_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	2900      	cmp	r1, #0
 8008bba:	d041      	beq.n	8008c40 <_free_r+0x8c>
 8008bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc0:	1f0c      	subs	r4, r1, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfb8      	it	lt
 8008bc6:	18e4      	addlt	r4, r4, r3
 8008bc8:	f000 f8e8 	bl	8008d9c <__malloc_lock>
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008c44 <_free_r+0x90>)
 8008bce:	6813      	ldr	r3, [r2, #0]
 8008bd0:	b933      	cbnz	r3, 8008be0 <_free_r+0x2c>
 8008bd2:	6063      	str	r3, [r4, #4]
 8008bd4:	6014      	str	r4, [r2, #0]
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bdc:	f000 b8e4 	b.w	8008da8 <__malloc_unlock>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d908      	bls.n	8008bf6 <_free_r+0x42>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	1821      	adds	r1, r4, r0
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf01      	itttt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	1809      	addeq	r1, r1, r0
 8008bf2:	6021      	streq	r1, [r4, #0]
 8008bf4:	e7ed      	b.n	8008bd2 <_free_r+0x1e>
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	b10b      	cbz	r3, 8008c00 <_free_r+0x4c>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d9fa      	bls.n	8008bf6 <_free_r+0x42>
 8008c00:	6811      	ldr	r1, [r2, #0]
 8008c02:	1850      	adds	r0, r2, r1
 8008c04:	42a0      	cmp	r0, r4
 8008c06:	d10b      	bne.n	8008c20 <_free_r+0x6c>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	4401      	add	r1, r0
 8008c0c:	1850      	adds	r0, r2, r1
 8008c0e:	4283      	cmp	r3, r0
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	d1e0      	bne.n	8008bd6 <_free_r+0x22>
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	6053      	str	r3, [r2, #4]
 8008c1a:	4408      	add	r0, r1
 8008c1c:	6010      	str	r0, [r2, #0]
 8008c1e:	e7da      	b.n	8008bd6 <_free_r+0x22>
 8008c20:	d902      	bls.n	8008c28 <_free_r+0x74>
 8008c22:	230c      	movs	r3, #12
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	e7d6      	b.n	8008bd6 <_free_r+0x22>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	1821      	adds	r1, r4, r0
 8008c2c:	428b      	cmp	r3, r1
 8008c2e:	bf04      	itt	eq
 8008c30:	6819      	ldreq	r1, [r3, #0]
 8008c32:	685b      	ldreq	r3, [r3, #4]
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	bf04      	itt	eq
 8008c38:	1809      	addeq	r1, r1, r0
 8008c3a:	6021      	streq	r1, [r4, #0]
 8008c3c:	6054      	str	r4, [r2, #4]
 8008c3e:	e7ca      	b.n	8008bd6 <_free_r+0x22>
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	20000598 	.word	0x20000598

08008c48 <malloc>:
 8008c48:	4b02      	ldr	r3, [pc, #8]	@ (8008c54 <malloc+0xc>)
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f000 b825 	b.w	8008c9c <_malloc_r>
 8008c52:	bf00      	nop
 8008c54:	2000001c 	.word	0x2000001c

08008c58 <sbrk_aligned>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8008c98 <sbrk_aligned+0x40>)
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	6831      	ldr	r1, [r6, #0]
 8008c60:	4605      	mov	r5, r0
 8008c62:	b911      	cbnz	r1, 8008c6a <sbrk_aligned+0x12>
 8008c64:	f000 fc64 	bl	8009530 <_sbrk_r>
 8008c68:	6030      	str	r0, [r6, #0]
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f000 fc5f 	bl	8009530 <_sbrk_r>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	d103      	bne.n	8008c7e <sbrk_aligned+0x26>
 8008c76:	f04f 34ff 	mov.w	r4, #4294967295
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
 8008c7e:	1cc4      	adds	r4, r0, #3
 8008c80:	f024 0403 	bic.w	r4, r4, #3
 8008c84:	42a0      	cmp	r0, r4
 8008c86:	d0f8      	beq.n	8008c7a <sbrk_aligned+0x22>
 8008c88:	1a21      	subs	r1, r4, r0
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 fc50 	bl	8009530 <_sbrk_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d1f2      	bne.n	8008c7a <sbrk_aligned+0x22>
 8008c94:	e7ef      	b.n	8008c76 <sbrk_aligned+0x1e>
 8008c96:	bf00      	nop
 8008c98:	20000594 	.word	0x20000594

08008c9c <_malloc_r>:
 8008c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca0:	1ccd      	adds	r5, r1, #3
 8008ca2:	f025 0503 	bic.w	r5, r5, #3
 8008ca6:	3508      	adds	r5, #8
 8008ca8:	2d0c      	cmp	r5, #12
 8008caa:	bf38      	it	cc
 8008cac:	250c      	movcc	r5, #12
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	db01      	blt.n	8008cb8 <_malloc_r+0x1c>
 8008cb4:	42a9      	cmp	r1, r5
 8008cb6:	d904      	bls.n	8008cc2 <_malloc_r+0x26>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	6033      	str	r3, [r6, #0]
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d98 <_malloc_r+0xfc>
 8008cc6:	f000 f869 	bl	8008d9c <__malloc_lock>
 8008cca:	f8d8 3000 	ldr.w	r3, [r8]
 8008cce:	461c      	mov	r4, r3
 8008cd0:	bb44      	cbnz	r4, 8008d24 <_malloc_r+0x88>
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7ff ffbf 	bl	8008c58 <sbrk_aligned>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	4604      	mov	r4, r0
 8008cde:	d158      	bne.n	8008d92 <_malloc_r+0xf6>
 8008ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ce4:	4627      	mov	r7, r4
 8008ce6:	2f00      	cmp	r7, #0
 8008ce8:	d143      	bne.n	8008d72 <_malloc_r+0xd6>
 8008cea:	2c00      	cmp	r4, #0
 8008cec:	d04b      	beq.n	8008d86 <_malloc_r+0xea>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	eb04 0903 	add.w	r9, r4, r3
 8008cf8:	f000 fc1a 	bl	8009530 <_sbrk_r>
 8008cfc:	4581      	cmp	r9, r0
 8008cfe:	d142      	bne.n	8008d86 <_malloc_r+0xea>
 8008d00:	6821      	ldr	r1, [r4, #0]
 8008d02:	1a6d      	subs	r5, r5, r1
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ffa6 	bl	8008c58 <sbrk_aligned>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d03a      	beq.n	8008d86 <_malloc_r+0xea>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	442b      	add	r3, r5
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	f8d8 3000 	ldr.w	r3, [r8]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	bb62      	cbnz	r2, 8008d78 <_malloc_r+0xdc>
 8008d1e:	f8c8 7000 	str.w	r7, [r8]
 8008d22:	e00f      	b.n	8008d44 <_malloc_r+0xa8>
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	1b52      	subs	r2, r2, r5
 8008d28:	d420      	bmi.n	8008d6c <_malloc_r+0xd0>
 8008d2a:	2a0b      	cmp	r2, #11
 8008d2c:	d917      	bls.n	8008d5e <_malloc_r+0xc2>
 8008d2e:	1961      	adds	r1, r4, r5
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	6025      	str	r5, [r4, #0]
 8008d34:	bf18      	it	ne
 8008d36:	6059      	strne	r1, [r3, #4]
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	bf08      	it	eq
 8008d3c:	f8c8 1000 	streq.w	r1, [r8]
 8008d40:	5162      	str	r2, [r4, r5]
 8008d42:	604b      	str	r3, [r1, #4]
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 f82f 	bl	8008da8 <__malloc_unlock>
 8008d4a:	f104 000b 	add.w	r0, r4, #11
 8008d4e:	1d23      	adds	r3, r4, #4
 8008d50:	f020 0007 	bic.w	r0, r0, #7
 8008d54:	1ac2      	subs	r2, r0, r3
 8008d56:	bf1c      	itt	ne
 8008d58:	1a1b      	subne	r3, r3, r0
 8008d5a:	50a3      	strne	r3, [r4, r2]
 8008d5c:	e7af      	b.n	8008cbe <_malloc_r+0x22>
 8008d5e:	6862      	ldr	r2, [r4, #4]
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	bf0c      	ite	eq
 8008d64:	f8c8 2000 	streq.w	r2, [r8]
 8008d68:	605a      	strne	r2, [r3, #4]
 8008d6a:	e7eb      	b.n	8008d44 <_malloc_r+0xa8>
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	6864      	ldr	r4, [r4, #4]
 8008d70:	e7ae      	b.n	8008cd0 <_malloc_r+0x34>
 8008d72:	463c      	mov	r4, r7
 8008d74:	687f      	ldr	r7, [r7, #4]
 8008d76:	e7b6      	b.n	8008ce6 <_malloc_r+0x4a>
 8008d78:	461a      	mov	r2, r3
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	d1fb      	bne.n	8008d78 <_malloc_r+0xdc>
 8008d80:	2300      	movs	r3, #0
 8008d82:	6053      	str	r3, [r2, #4]
 8008d84:	e7de      	b.n	8008d44 <_malloc_r+0xa8>
 8008d86:	230c      	movs	r3, #12
 8008d88:	6033      	str	r3, [r6, #0]
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f000 f80c 	bl	8008da8 <__malloc_unlock>
 8008d90:	e794      	b.n	8008cbc <_malloc_r+0x20>
 8008d92:	6005      	str	r5, [r0, #0]
 8008d94:	e7d6      	b.n	8008d44 <_malloc_r+0xa8>
 8008d96:	bf00      	nop
 8008d98:	20000598 	.word	0x20000598

08008d9c <__malloc_lock>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	@ (8008da4 <__malloc_lock+0x8>)
 8008d9e:	f7ff bee8 	b.w	8008b72 <__retarget_lock_acquire_recursive>
 8008da2:	bf00      	nop
 8008da4:	20000590 	.word	0x20000590

08008da8 <__malloc_unlock>:
 8008da8:	4801      	ldr	r0, [pc, #4]	@ (8008db0 <__malloc_unlock+0x8>)
 8008daa:	f7ff bee3 	b.w	8008b74 <__retarget_lock_release_recursive>
 8008dae:	bf00      	nop
 8008db0:	20000590 	.word	0x20000590

08008db4 <__ssputs_r>:
 8008db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db8:	688e      	ldr	r6, [r1, #8]
 8008dba:	461f      	mov	r7, r3
 8008dbc:	42be      	cmp	r6, r7
 8008dbe:	680b      	ldr	r3, [r1, #0]
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	4690      	mov	r8, r2
 8008dc6:	d82d      	bhi.n	8008e24 <__ssputs_r+0x70>
 8008dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dd0:	d026      	beq.n	8008e20 <__ssputs_r+0x6c>
 8008dd2:	6965      	ldr	r5, [r4, #20]
 8008dd4:	6909      	ldr	r1, [r1, #16]
 8008dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dda:	eba3 0901 	sub.w	r9, r3, r1
 8008dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008de2:	1c7b      	adds	r3, r7, #1
 8008de4:	444b      	add	r3, r9
 8008de6:	106d      	asrs	r5, r5, #1
 8008de8:	429d      	cmp	r5, r3
 8008dea:	bf38      	it	cc
 8008dec:	461d      	movcc	r5, r3
 8008dee:	0553      	lsls	r3, r2, #21
 8008df0:	d527      	bpl.n	8008e42 <__ssputs_r+0x8e>
 8008df2:	4629      	mov	r1, r5
 8008df4:	f7ff ff52 	bl	8008c9c <_malloc_r>
 8008df8:	4606      	mov	r6, r0
 8008dfa:	b360      	cbz	r0, 8008e56 <__ssputs_r+0xa2>
 8008dfc:	6921      	ldr	r1, [r4, #16]
 8008dfe:	464a      	mov	r2, r9
 8008e00:	f000 fba6 	bl	8009550 <memcpy>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	6126      	str	r6, [r4, #16]
 8008e12:	6165      	str	r5, [r4, #20]
 8008e14:	444e      	add	r6, r9
 8008e16:	eba5 0509 	sub.w	r5, r5, r9
 8008e1a:	6026      	str	r6, [r4, #0]
 8008e1c:	60a5      	str	r5, [r4, #8]
 8008e1e:	463e      	mov	r6, r7
 8008e20:	42be      	cmp	r6, r7
 8008e22:	d900      	bls.n	8008e26 <__ssputs_r+0x72>
 8008e24:	463e      	mov	r6, r7
 8008e26:	6820      	ldr	r0, [r4, #0]
 8008e28:	4632      	mov	r2, r6
 8008e2a:	4641      	mov	r1, r8
 8008e2c:	f000 fb66 	bl	80094fc <memmove>
 8008e30:	68a3      	ldr	r3, [r4, #8]
 8008e32:	1b9b      	subs	r3, r3, r6
 8008e34:	60a3      	str	r3, [r4, #8]
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	4433      	add	r3, r6
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e42:	462a      	mov	r2, r5
 8008e44:	f000 fb99 	bl	800957a <_realloc_r>
 8008e48:	4606      	mov	r6, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d1e0      	bne.n	8008e10 <__ssputs_r+0x5c>
 8008e4e:	6921      	ldr	r1, [r4, #16]
 8008e50:	4650      	mov	r0, sl
 8008e52:	f7ff feaf 	bl	8008bb4 <_free_r>
 8008e56:	230c      	movs	r3, #12
 8008e58:	f8ca 3000 	str.w	r3, [sl]
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295
 8008e68:	e7e9      	b.n	8008e3e <__ssputs_r+0x8a>
	...

08008e6c <_svfiprintf_r>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4698      	mov	r8, r3
 8008e72:	898b      	ldrh	r3, [r1, #12]
 8008e74:	061b      	lsls	r3, r3, #24
 8008e76:	b09d      	sub	sp, #116	@ 0x74
 8008e78:	4607      	mov	r7, r0
 8008e7a:	460d      	mov	r5, r1
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	d510      	bpl.n	8008ea2 <_svfiprintf_r+0x36>
 8008e80:	690b      	ldr	r3, [r1, #16]
 8008e82:	b973      	cbnz	r3, 8008ea2 <_svfiprintf_r+0x36>
 8008e84:	2140      	movs	r1, #64	@ 0x40
 8008e86:	f7ff ff09 	bl	8008c9c <_malloc_r>
 8008e8a:	6028      	str	r0, [r5, #0]
 8008e8c:	6128      	str	r0, [r5, #16]
 8008e8e:	b930      	cbnz	r0, 8008e9e <_svfiprintf_r+0x32>
 8008e90:	230c      	movs	r3, #12
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	b01d      	add	sp, #116	@ 0x74
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	2340      	movs	r3, #64	@ 0x40
 8008ea0:	616b      	str	r3, [r5, #20]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb0:	2330      	movs	r3, #48	@ 0x30
 8008eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009050 <_svfiprintf_r+0x1e4>
 8008eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eba:	f04f 0901 	mov.w	r9, #1
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	469a      	mov	sl, r3
 8008ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec6:	b10a      	cbz	r2, 8008ecc <_svfiprintf_r+0x60>
 8008ec8:	2a25      	cmp	r2, #37	@ 0x25
 8008eca:	d1f9      	bne.n	8008ec0 <_svfiprintf_r+0x54>
 8008ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed0:	d00b      	beq.n	8008eea <_svfiprintf_r+0x7e>
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff ff6b 	bl	8008db4 <__ssputs_r>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f000 80a7 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee6:	445a      	add	r2, fp
 8008ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eea:	f89a 3000 	ldrb.w	r3, [sl]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 809f 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8008efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efe:	f10a 0a01 	add.w	sl, sl, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	9307      	str	r3, [sp, #28]
 8008f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f0c:	4654      	mov	r4, sl
 8008f0e:	2205      	movs	r2, #5
 8008f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f14:	484e      	ldr	r0, [pc, #312]	@ (8009050 <_svfiprintf_r+0x1e4>)
 8008f16:	f7f7 f99b 	bl	8000250 <memchr>
 8008f1a:	9a04      	ldr	r2, [sp, #16]
 8008f1c:	b9d8      	cbnz	r0, 8008f56 <_svfiprintf_r+0xea>
 8008f1e:	06d0      	lsls	r0, r2, #27
 8008f20:	bf44      	itt	mi
 8008f22:	2320      	movmi	r3, #32
 8008f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f28:	0711      	lsls	r1, r2, #28
 8008f2a:	bf44      	itt	mi
 8008f2c:	232b      	movmi	r3, #43	@ 0x2b
 8008f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f32:	f89a 3000 	ldrb.w	r3, [sl]
 8008f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f38:	d015      	beq.n	8008f66 <_svfiprintf_r+0xfa>
 8008f3a:	9a07      	ldr	r2, [sp, #28]
 8008f3c:	4654      	mov	r4, sl
 8008f3e:	2000      	movs	r0, #0
 8008f40:	f04f 0c0a 	mov.w	ip, #10
 8008f44:	4621      	mov	r1, r4
 8008f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4a:	3b30      	subs	r3, #48	@ 0x30
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d94b      	bls.n	8008fe8 <_svfiprintf_r+0x17c>
 8008f50:	b1b0      	cbz	r0, 8008f80 <_svfiprintf_r+0x114>
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	e014      	b.n	8008f80 <_svfiprintf_r+0x114>
 8008f56:	eba0 0308 	sub.w	r3, r0, r8
 8008f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	46a2      	mov	sl, r4
 8008f64:	e7d2      	b.n	8008f0c <_svfiprintf_r+0xa0>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	1d19      	adds	r1, r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	9103      	str	r1, [sp, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbb      	ittet	lt
 8008f72:	425b      	neglt	r3, r3
 8008f74:	f042 0202 	orrlt.w	r2, r2, #2
 8008f78:	9307      	strge	r3, [sp, #28]
 8008f7a:	9307      	strlt	r3, [sp, #28]
 8008f7c:	bfb8      	it	lt
 8008f7e:	9204      	strlt	r2, [sp, #16]
 8008f80:	7823      	ldrb	r3, [r4, #0]
 8008f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f84:	d10a      	bne.n	8008f9c <_svfiprintf_r+0x130>
 8008f86:	7863      	ldrb	r3, [r4, #1]
 8008f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f8a:	d132      	bne.n	8008ff2 <_svfiprintf_r+0x186>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d1a      	adds	r2, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9203      	str	r2, [sp, #12]
 8008f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f98:	3402      	adds	r4, #2
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009060 <_svfiprintf_r+0x1f4>
 8008fa0:	7821      	ldrb	r1, [r4, #0]
 8008fa2:	2203      	movs	r2, #3
 8008fa4:	4650      	mov	r0, sl
 8008fa6:	f7f7 f953 	bl	8000250 <memchr>
 8008faa:	b138      	cbz	r0, 8008fbc <_svfiprintf_r+0x150>
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	eba0 000a 	sub.w	r0, r0, sl
 8008fb2:	2240      	movs	r2, #64	@ 0x40
 8008fb4:	4082      	lsls	r2, r0
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	4824      	ldr	r0, [pc, #144]	@ (8009054 <_svfiprintf_r+0x1e8>)
 8008fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fc6:	2206      	movs	r2, #6
 8008fc8:	f7f7 f942 	bl	8000250 <memchr>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d036      	beq.n	800903e <_svfiprintf_r+0x1d2>
 8008fd0:	4b21      	ldr	r3, [pc, #132]	@ (8009058 <_svfiprintf_r+0x1ec>)
 8008fd2:	bb1b      	cbnz	r3, 800901c <_svfiprintf_r+0x1b0>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	3308      	adds	r3, #8
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	4433      	add	r3, r6
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	e76a      	b.n	8008ebe <_svfiprintf_r+0x52>
 8008fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fec:	460c      	mov	r4, r1
 8008fee:	2001      	movs	r0, #1
 8008ff0:	e7a8      	b.n	8008f44 <_svfiprintf_r+0xd8>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	3401      	adds	r4, #1
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f04f 0c0a 	mov.w	ip, #10
 8008ffe:	4620      	mov	r0, r4
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	3a30      	subs	r2, #48	@ 0x30
 8009006:	2a09      	cmp	r2, #9
 8009008:	d903      	bls.n	8009012 <_svfiprintf_r+0x1a6>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c6      	beq.n	8008f9c <_svfiprintf_r+0x130>
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	e7c4      	b.n	8008f9c <_svfiprintf_r+0x130>
 8009012:	fb0c 2101 	mla	r1, ip, r1, r2
 8009016:	4604      	mov	r4, r0
 8009018:	2301      	movs	r3, #1
 800901a:	e7f0      	b.n	8008ffe <_svfiprintf_r+0x192>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4b0e      	ldr	r3, [pc, #56]	@ (800905c <_svfiprintf_r+0x1f0>)
 8009024:	a904      	add	r1, sp, #16
 8009026:	4638      	mov	r0, r7
 8009028:	f3af 8000 	nop.w
 800902c:	1c42      	adds	r2, r0, #1
 800902e:	4606      	mov	r6, r0
 8009030:	d1d6      	bne.n	8008fe0 <_svfiprintf_r+0x174>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	065b      	lsls	r3, r3, #25
 8009036:	f53f af2d 	bmi.w	8008e94 <_svfiprintf_r+0x28>
 800903a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800903c:	e72c      	b.n	8008e98 <_svfiprintf_r+0x2c>
 800903e:	ab03      	add	r3, sp, #12
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	462a      	mov	r2, r5
 8009044:	4b05      	ldr	r3, [pc, #20]	@ (800905c <_svfiprintf_r+0x1f0>)
 8009046:	a904      	add	r1, sp, #16
 8009048:	4638      	mov	r0, r7
 800904a:	f000 f879 	bl	8009140 <_printf_i>
 800904e:	e7ed      	b.n	800902c <_svfiprintf_r+0x1c0>
 8009050:	08009f76 	.word	0x08009f76
 8009054:	08009f80 	.word	0x08009f80
 8009058:	00000000 	.word	0x00000000
 800905c:	08008db5 	.word	0x08008db5
 8009060:	08009f7c 	.word	0x08009f7c

08009064 <_printf_common>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	4616      	mov	r6, r2
 800906a:	4698      	mov	r8, r3
 800906c:	688a      	ldr	r2, [r1, #8]
 800906e:	690b      	ldr	r3, [r1, #16]
 8009070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009074:	4293      	cmp	r3, r2
 8009076:	bfb8      	it	lt
 8009078:	4613      	movlt	r3, r2
 800907a:	6033      	str	r3, [r6, #0]
 800907c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009080:	4607      	mov	r7, r0
 8009082:	460c      	mov	r4, r1
 8009084:	b10a      	cbz	r2, 800908a <_printf_common+0x26>
 8009086:	3301      	adds	r3, #1
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	0699      	lsls	r1, r3, #26
 800908e:	bf42      	ittt	mi
 8009090:	6833      	ldrmi	r3, [r6, #0]
 8009092:	3302      	addmi	r3, #2
 8009094:	6033      	strmi	r3, [r6, #0]
 8009096:	6825      	ldr	r5, [r4, #0]
 8009098:	f015 0506 	ands.w	r5, r5, #6
 800909c:	d106      	bne.n	80090ac <_printf_common+0x48>
 800909e:	f104 0a19 	add.w	sl, r4, #25
 80090a2:	68e3      	ldr	r3, [r4, #12]
 80090a4:	6832      	ldr	r2, [r6, #0]
 80090a6:	1a9b      	subs	r3, r3, r2
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc26      	bgt.n	80090fa <_printf_common+0x96>
 80090ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	3b00      	subs	r3, #0
 80090b4:	bf18      	it	ne
 80090b6:	2301      	movne	r3, #1
 80090b8:	0692      	lsls	r2, r2, #26
 80090ba:	d42b      	bmi.n	8009114 <_printf_common+0xb0>
 80090bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090c0:	4641      	mov	r1, r8
 80090c2:	4638      	mov	r0, r7
 80090c4:	47c8      	blx	r9
 80090c6:	3001      	adds	r0, #1
 80090c8:	d01e      	beq.n	8009108 <_printf_common+0xa4>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	f003 0306 	and.w	r3, r3, #6
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	bf02      	ittt	eq
 80090d6:	68e5      	ldreq	r5, [r4, #12]
 80090d8:	6833      	ldreq	r3, [r6, #0]
 80090da:	1aed      	subeq	r5, r5, r3
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	bf0c      	ite	eq
 80090e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e4:	2500      	movne	r5, #0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	bfc4      	itt	gt
 80090ea:	1a9b      	subgt	r3, r3, r2
 80090ec:	18ed      	addgt	r5, r5, r3
 80090ee:	2600      	movs	r6, #0
 80090f0:	341a      	adds	r4, #26
 80090f2:	42b5      	cmp	r5, r6
 80090f4:	d11a      	bne.n	800912c <_printf_common+0xc8>
 80090f6:	2000      	movs	r0, #0
 80090f8:	e008      	b.n	800910c <_printf_common+0xa8>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4652      	mov	r2, sl
 80090fe:	4641      	mov	r1, r8
 8009100:	4638      	mov	r0, r7
 8009102:	47c8      	blx	r9
 8009104:	3001      	adds	r0, #1
 8009106:	d103      	bne.n	8009110 <_printf_common+0xac>
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009110:	3501      	adds	r5, #1
 8009112:	e7c6      	b.n	80090a2 <_printf_common+0x3e>
 8009114:	18e1      	adds	r1, r4, r3
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	2030      	movs	r0, #48	@ 0x30
 800911a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800911e:	4422      	add	r2, r4
 8009120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009128:	3302      	adds	r3, #2
 800912a:	e7c7      	b.n	80090bc <_printf_common+0x58>
 800912c:	2301      	movs	r3, #1
 800912e:	4622      	mov	r2, r4
 8009130:	4641      	mov	r1, r8
 8009132:	4638      	mov	r0, r7
 8009134:	47c8      	blx	r9
 8009136:	3001      	adds	r0, #1
 8009138:	d0e6      	beq.n	8009108 <_printf_common+0xa4>
 800913a:	3601      	adds	r6, #1
 800913c:	e7d9      	b.n	80090f2 <_printf_common+0x8e>
	...

08009140 <_printf_i>:
 8009140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	7e0f      	ldrb	r7, [r1, #24]
 8009146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009148:	2f78      	cmp	r7, #120	@ 0x78
 800914a:	4691      	mov	r9, r2
 800914c:	4680      	mov	r8, r0
 800914e:	460c      	mov	r4, r1
 8009150:	469a      	mov	sl, r3
 8009152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009156:	d807      	bhi.n	8009168 <_printf_i+0x28>
 8009158:	2f62      	cmp	r7, #98	@ 0x62
 800915a:	d80a      	bhi.n	8009172 <_printf_i+0x32>
 800915c:	2f00      	cmp	r7, #0
 800915e:	f000 80d2 	beq.w	8009306 <_printf_i+0x1c6>
 8009162:	2f58      	cmp	r7, #88	@ 0x58
 8009164:	f000 80b9 	beq.w	80092da <_printf_i+0x19a>
 8009168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800916c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009170:	e03a      	b.n	80091e8 <_printf_i+0xa8>
 8009172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009176:	2b15      	cmp	r3, #21
 8009178:	d8f6      	bhi.n	8009168 <_printf_i+0x28>
 800917a:	a101      	add	r1, pc, #4	@ (adr r1, 8009180 <_printf_i+0x40>)
 800917c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009180:	080091d9 	.word	0x080091d9
 8009184:	080091ed 	.word	0x080091ed
 8009188:	08009169 	.word	0x08009169
 800918c:	08009169 	.word	0x08009169
 8009190:	08009169 	.word	0x08009169
 8009194:	08009169 	.word	0x08009169
 8009198:	080091ed 	.word	0x080091ed
 800919c:	08009169 	.word	0x08009169
 80091a0:	08009169 	.word	0x08009169
 80091a4:	08009169 	.word	0x08009169
 80091a8:	08009169 	.word	0x08009169
 80091ac:	080092ed 	.word	0x080092ed
 80091b0:	08009217 	.word	0x08009217
 80091b4:	080092a7 	.word	0x080092a7
 80091b8:	08009169 	.word	0x08009169
 80091bc:	08009169 	.word	0x08009169
 80091c0:	0800930f 	.word	0x0800930f
 80091c4:	08009169 	.word	0x08009169
 80091c8:	08009217 	.word	0x08009217
 80091cc:	08009169 	.word	0x08009169
 80091d0:	08009169 	.word	0x08009169
 80091d4:	080092af 	.word	0x080092af
 80091d8:	6833      	ldr	r3, [r6, #0]
 80091da:	1d1a      	adds	r2, r3, #4
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6032      	str	r2, [r6, #0]
 80091e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091e8:	2301      	movs	r3, #1
 80091ea:	e09d      	b.n	8009328 <_printf_i+0x1e8>
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	6820      	ldr	r0, [r4, #0]
 80091f0:	1d19      	adds	r1, r3, #4
 80091f2:	6031      	str	r1, [r6, #0]
 80091f4:	0606      	lsls	r6, r0, #24
 80091f6:	d501      	bpl.n	80091fc <_printf_i+0xbc>
 80091f8:	681d      	ldr	r5, [r3, #0]
 80091fa:	e003      	b.n	8009204 <_printf_i+0xc4>
 80091fc:	0645      	lsls	r5, r0, #25
 80091fe:	d5fb      	bpl.n	80091f8 <_printf_i+0xb8>
 8009200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009204:	2d00      	cmp	r5, #0
 8009206:	da03      	bge.n	8009210 <_printf_i+0xd0>
 8009208:	232d      	movs	r3, #45	@ 0x2d
 800920a:	426d      	negs	r5, r5
 800920c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009210:	4859      	ldr	r0, [pc, #356]	@ (8009378 <_printf_i+0x238>)
 8009212:	230a      	movs	r3, #10
 8009214:	e011      	b.n	800923a <_printf_i+0xfa>
 8009216:	6821      	ldr	r1, [r4, #0]
 8009218:	6833      	ldr	r3, [r6, #0]
 800921a:	0608      	lsls	r0, r1, #24
 800921c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009220:	d402      	bmi.n	8009228 <_printf_i+0xe8>
 8009222:	0649      	lsls	r1, r1, #25
 8009224:	bf48      	it	mi
 8009226:	b2ad      	uxthmi	r5, r5
 8009228:	2f6f      	cmp	r7, #111	@ 0x6f
 800922a:	4853      	ldr	r0, [pc, #332]	@ (8009378 <_printf_i+0x238>)
 800922c:	6033      	str	r3, [r6, #0]
 800922e:	bf14      	ite	ne
 8009230:	230a      	movne	r3, #10
 8009232:	2308      	moveq	r3, #8
 8009234:	2100      	movs	r1, #0
 8009236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800923a:	6866      	ldr	r6, [r4, #4]
 800923c:	60a6      	str	r6, [r4, #8]
 800923e:	2e00      	cmp	r6, #0
 8009240:	bfa2      	ittt	ge
 8009242:	6821      	ldrge	r1, [r4, #0]
 8009244:	f021 0104 	bicge.w	r1, r1, #4
 8009248:	6021      	strge	r1, [r4, #0]
 800924a:	b90d      	cbnz	r5, 8009250 <_printf_i+0x110>
 800924c:	2e00      	cmp	r6, #0
 800924e:	d04b      	beq.n	80092e8 <_printf_i+0x1a8>
 8009250:	4616      	mov	r6, r2
 8009252:	fbb5 f1f3 	udiv	r1, r5, r3
 8009256:	fb03 5711 	mls	r7, r3, r1, r5
 800925a:	5dc7      	ldrb	r7, [r0, r7]
 800925c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009260:	462f      	mov	r7, r5
 8009262:	42bb      	cmp	r3, r7
 8009264:	460d      	mov	r5, r1
 8009266:	d9f4      	bls.n	8009252 <_printf_i+0x112>
 8009268:	2b08      	cmp	r3, #8
 800926a:	d10b      	bne.n	8009284 <_printf_i+0x144>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	07df      	lsls	r7, r3, #31
 8009270:	d508      	bpl.n	8009284 <_printf_i+0x144>
 8009272:	6923      	ldr	r3, [r4, #16]
 8009274:	6861      	ldr	r1, [r4, #4]
 8009276:	4299      	cmp	r1, r3
 8009278:	bfde      	ittt	le
 800927a:	2330      	movle	r3, #48	@ 0x30
 800927c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009280:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009284:	1b92      	subs	r2, r2, r6
 8009286:	6122      	str	r2, [r4, #16]
 8009288:	f8cd a000 	str.w	sl, [sp]
 800928c:	464b      	mov	r3, r9
 800928e:	aa03      	add	r2, sp, #12
 8009290:	4621      	mov	r1, r4
 8009292:	4640      	mov	r0, r8
 8009294:	f7ff fee6 	bl	8009064 <_printf_common>
 8009298:	3001      	adds	r0, #1
 800929a:	d14a      	bne.n	8009332 <_printf_i+0x1f2>
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	b004      	add	sp, #16
 80092a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	f043 0320 	orr.w	r3, r3, #32
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	4833      	ldr	r0, [pc, #204]	@ (800937c <_printf_i+0x23c>)
 80092b0:	2778      	movs	r7, #120	@ 0x78
 80092b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	6831      	ldr	r1, [r6, #0]
 80092ba:	061f      	lsls	r7, r3, #24
 80092bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80092c0:	d402      	bmi.n	80092c8 <_printf_i+0x188>
 80092c2:	065f      	lsls	r7, r3, #25
 80092c4:	bf48      	it	mi
 80092c6:	b2ad      	uxthmi	r5, r5
 80092c8:	6031      	str	r1, [r6, #0]
 80092ca:	07d9      	lsls	r1, r3, #31
 80092cc:	bf44      	itt	mi
 80092ce:	f043 0320 	orrmi.w	r3, r3, #32
 80092d2:	6023      	strmi	r3, [r4, #0]
 80092d4:	b11d      	cbz	r5, 80092de <_printf_i+0x19e>
 80092d6:	2310      	movs	r3, #16
 80092d8:	e7ac      	b.n	8009234 <_printf_i+0xf4>
 80092da:	4827      	ldr	r0, [pc, #156]	@ (8009378 <_printf_i+0x238>)
 80092dc:	e7e9      	b.n	80092b2 <_printf_i+0x172>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	f023 0320 	bic.w	r3, r3, #32
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	e7f6      	b.n	80092d6 <_printf_i+0x196>
 80092e8:	4616      	mov	r6, r2
 80092ea:	e7bd      	b.n	8009268 <_printf_i+0x128>
 80092ec:	6833      	ldr	r3, [r6, #0]
 80092ee:	6825      	ldr	r5, [r4, #0]
 80092f0:	6961      	ldr	r1, [r4, #20]
 80092f2:	1d18      	adds	r0, r3, #4
 80092f4:	6030      	str	r0, [r6, #0]
 80092f6:	062e      	lsls	r6, r5, #24
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	d501      	bpl.n	8009300 <_printf_i+0x1c0>
 80092fc:	6019      	str	r1, [r3, #0]
 80092fe:	e002      	b.n	8009306 <_printf_i+0x1c6>
 8009300:	0668      	lsls	r0, r5, #25
 8009302:	d5fb      	bpl.n	80092fc <_printf_i+0x1bc>
 8009304:	8019      	strh	r1, [r3, #0]
 8009306:	2300      	movs	r3, #0
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	4616      	mov	r6, r2
 800930c:	e7bc      	b.n	8009288 <_printf_i+0x148>
 800930e:	6833      	ldr	r3, [r6, #0]
 8009310:	1d1a      	adds	r2, r3, #4
 8009312:	6032      	str	r2, [r6, #0]
 8009314:	681e      	ldr	r6, [r3, #0]
 8009316:	6862      	ldr	r2, [r4, #4]
 8009318:	2100      	movs	r1, #0
 800931a:	4630      	mov	r0, r6
 800931c:	f7f6 ff98 	bl	8000250 <memchr>
 8009320:	b108      	cbz	r0, 8009326 <_printf_i+0x1e6>
 8009322:	1b80      	subs	r0, r0, r6
 8009324:	6060      	str	r0, [r4, #4]
 8009326:	6863      	ldr	r3, [r4, #4]
 8009328:	6123      	str	r3, [r4, #16]
 800932a:	2300      	movs	r3, #0
 800932c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009330:	e7aa      	b.n	8009288 <_printf_i+0x148>
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	4632      	mov	r2, r6
 8009336:	4649      	mov	r1, r9
 8009338:	4640      	mov	r0, r8
 800933a:	47d0      	blx	sl
 800933c:	3001      	adds	r0, #1
 800933e:	d0ad      	beq.n	800929c <_printf_i+0x15c>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	079b      	lsls	r3, r3, #30
 8009344:	d413      	bmi.n	800936e <_printf_i+0x22e>
 8009346:	68e0      	ldr	r0, [r4, #12]
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	4298      	cmp	r0, r3
 800934c:	bfb8      	it	lt
 800934e:	4618      	movlt	r0, r3
 8009350:	e7a6      	b.n	80092a0 <_printf_i+0x160>
 8009352:	2301      	movs	r3, #1
 8009354:	4632      	mov	r2, r6
 8009356:	4649      	mov	r1, r9
 8009358:	4640      	mov	r0, r8
 800935a:	47d0      	blx	sl
 800935c:	3001      	adds	r0, #1
 800935e:	d09d      	beq.n	800929c <_printf_i+0x15c>
 8009360:	3501      	adds	r5, #1
 8009362:	68e3      	ldr	r3, [r4, #12]
 8009364:	9903      	ldr	r1, [sp, #12]
 8009366:	1a5b      	subs	r3, r3, r1
 8009368:	42ab      	cmp	r3, r5
 800936a:	dcf2      	bgt.n	8009352 <_printf_i+0x212>
 800936c:	e7eb      	b.n	8009346 <_printf_i+0x206>
 800936e:	2500      	movs	r5, #0
 8009370:	f104 0619 	add.w	r6, r4, #25
 8009374:	e7f5      	b.n	8009362 <_printf_i+0x222>
 8009376:	bf00      	nop
 8009378:	08009f87 	.word	0x08009f87
 800937c:	08009f98 	.word	0x08009f98

08009380 <__sflush_r>:
 8009380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009388:	0716      	lsls	r6, r2, #28
 800938a:	4605      	mov	r5, r0
 800938c:	460c      	mov	r4, r1
 800938e:	d454      	bmi.n	800943a <__sflush_r+0xba>
 8009390:	684b      	ldr	r3, [r1, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	dc02      	bgt.n	800939c <__sflush_r+0x1c>
 8009396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	dd48      	ble.n	800942e <__sflush_r+0xae>
 800939c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800939e:	2e00      	cmp	r6, #0
 80093a0:	d045      	beq.n	800942e <__sflush_r+0xae>
 80093a2:	2300      	movs	r3, #0
 80093a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093a8:	682f      	ldr	r7, [r5, #0]
 80093aa:	6a21      	ldr	r1, [r4, #32]
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	d030      	beq.n	8009412 <__sflush_r+0x92>
 80093b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	0759      	lsls	r1, r3, #29
 80093b6:	d505      	bpl.n	80093c4 <__sflush_r+0x44>
 80093b8:	6863      	ldr	r3, [r4, #4]
 80093ba:	1ad2      	subs	r2, r2, r3
 80093bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093be:	b10b      	cbz	r3, 80093c4 <__sflush_r+0x44>
 80093c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093c2:	1ad2      	subs	r2, r2, r3
 80093c4:	2300      	movs	r3, #0
 80093c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093c8:	6a21      	ldr	r1, [r4, #32]
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b0      	blx	r6
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	d106      	bne.n	80093e2 <__sflush_r+0x62>
 80093d4:	6829      	ldr	r1, [r5, #0]
 80093d6:	291d      	cmp	r1, #29
 80093d8:	d82b      	bhi.n	8009432 <__sflush_r+0xb2>
 80093da:	4a2a      	ldr	r2, [pc, #168]	@ (8009484 <__sflush_r+0x104>)
 80093dc:	410a      	asrs	r2, r1
 80093de:	07d6      	lsls	r6, r2, #31
 80093e0:	d427      	bmi.n	8009432 <__sflush_r+0xb2>
 80093e2:	2200      	movs	r2, #0
 80093e4:	6062      	str	r2, [r4, #4]
 80093e6:	04d9      	lsls	r1, r3, #19
 80093e8:	6922      	ldr	r2, [r4, #16]
 80093ea:	6022      	str	r2, [r4, #0]
 80093ec:	d504      	bpl.n	80093f8 <__sflush_r+0x78>
 80093ee:	1c42      	adds	r2, r0, #1
 80093f0:	d101      	bne.n	80093f6 <__sflush_r+0x76>
 80093f2:	682b      	ldr	r3, [r5, #0]
 80093f4:	b903      	cbnz	r3, 80093f8 <__sflush_r+0x78>
 80093f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80093f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093fa:	602f      	str	r7, [r5, #0]
 80093fc:	b1b9      	cbz	r1, 800942e <__sflush_r+0xae>
 80093fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009402:	4299      	cmp	r1, r3
 8009404:	d002      	beq.n	800940c <__sflush_r+0x8c>
 8009406:	4628      	mov	r0, r5
 8009408:	f7ff fbd4 	bl	8008bb4 <_free_r>
 800940c:	2300      	movs	r3, #0
 800940e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009410:	e00d      	b.n	800942e <__sflush_r+0xae>
 8009412:	2301      	movs	r3, #1
 8009414:	4628      	mov	r0, r5
 8009416:	47b0      	blx	r6
 8009418:	4602      	mov	r2, r0
 800941a:	1c50      	adds	r0, r2, #1
 800941c:	d1c9      	bne.n	80093b2 <__sflush_r+0x32>
 800941e:	682b      	ldr	r3, [r5, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0c6      	beq.n	80093b2 <__sflush_r+0x32>
 8009424:	2b1d      	cmp	r3, #29
 8009426:	d001      	beq.n	800942c <__sflush_r+0xac>
 8009428:	2b16      	cmp	r3, #22
 800942a:	d11e      	bne.n	800946a <__sflush_r+0xea>
 800942c:	602f      	str	r7, [r5, #0]
 800942e:	2000      	movs	r0, #0
 8009430:	e022      	b.n	8009478 <__sflush_r+0xf8>
 8009432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009436:	b21b      	sxth	r3, r3
 8009438:	e01b      	b.n	8009472 <__sflush_r+0xf2>
 800943a:	690f      	ldr	r7, [r1, #16]
 800943c:	2f00      	cmp	r7, #0
 800943e:	d0f6      	beq.n	800942e <__sflush_r+0xae>
 8009440:	0793      	lsls	r3, r2, #30
 8009442:	680e      	ldr	r6, [r1, #0]
 8009444:	bf08      	it	eq
 8009446:	694b      	ldreq	r3, [r1, #20]
 8009448:	600f      	str	r7, [r1, #0]
 800944a:	bf18      	it	ne
 800944c:	2300      	movne	r3, #0
 800944e:	eba6 0807 	sub.w	r8, r6, r7
 8009452:	608b      	str	r3, [r1, #8]
 8009454:	f1b8 0f00 	cmp.w	r8, #0
 8009458:	dde9      	ble.n	800942e <__sflush_r+0xae>
 800945a:	6a21      	ldr	r1, [r4, #32]
 800945c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800945e:	4643      	mov	r3, r8
 8009460:	463a      	mov	r2, r7
 8009462:	4628      	mov	r0, r5
 8009464:	47b0      	blx	r6
 8009466:	2800      	cmp	r0, #0
 8009468:	dc08      	bgt.n	800947c <__sflush_r+0xfc>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009472:	81a3      	strh	r3, [r4, #12]
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947c:	4407      	add	r7, r0
 800947e:	eba8 0800 	sub.w	r8, r8, r0
 8009482:	e7e7      	b.n	8009454 <__sflush_r+0xd4>
 8009484:	dfbffffe 	.word	0xdfbffffe

08009488 <_fflush_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	690b      	ldr	r3, [r1, #16]
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
 8009490:	b913      	cbnz	r3, 8009498 <_fflush_r+0x10>
 8009492:	2500      	movs	r5, #0
 8009494:	4628      	mov	r0, r5
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	b118      	cbz	r0, 80094a2 <_fflush_r+0x1a>
 800949a:	6a03      	ldr	r3, [r0, #32]
 800949c:	b90b      	cbnz	r3, 80094a2 <_fflush_r+0x1a>
 800949e:	f7ff f9f9 	bl	8008894 <__sinit>
 80094a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0f3      	beq.n	8009492 <_fflush_r+0xa>
 80094aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094ac:	07d0      	lsls	r0, r2, #31
 80094ae:	d404      	bmi.n	80094ba <_fflush_r+0x32>
 80094b0:	0599      	lsls	r1, r3, #22
 80094b2:	d402      	bmi.n	80094ba <_fflush_r+0x32>
 80094b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094b6:	f7ff fb5c 	bl	8008b72 <__retarget_lock_acquire_recursive>
 80094ba:	4628      	mov	r0, r5
 80094bc:	4621      	mov	r1, r4
 80094be:	f7ff ff5f 	bl	8009380 <__sflush_r>
 80094c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094c4:	07da      	lsls	r2, r3, #31
 80094c6:	4605      	mov	r5, r0
 80094c8:	d4e4      	bmi.n	8009494 <_fflush_r+0xc>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	059b      	lsls	r3, r3, #22
 80094ce:	d4e1      	bmi.n	8009494 <_fflush_r+0xc>
 80094d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094d2:	f7ff fb4f 	bl	8008b74 <__retarget_lock_release_recursive>
 80094d6:	e7dd      	b.n	8009494 <_fflush_r+0xc>

080094d8 <fiprintf>:
 80094d8:	b40e      	push	{r1, r2, r3}
 80094da:	b503      	push	{r0, r1, lr}
 80094dc:	4601      	mov	r1, r0
 80094de:	ab03      	add	r3, sp, #12
 80094e0:	4805      	ldr	r0, [pc, #20]	@ (80094f8 <fiprintf+0x20>)
 80094e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e6:	6800      	ldr	r0, [r0, #0]
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	f000 f89d 	bl	8009628 <_vfiprintf_r>
 80094ee:	b002      	add	sp, #8
 80094f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094f4:	b003      	add	sp, #12
 80094f6:	4770      	bx	lr
 80094f8:	2000001c 	.word	0x2000001c

080094fc <memmove>:
 80094fc:	4288      	cmp	r0, r1
 80094fe:	b510      	push	{r4, lr}
 8009500:	eb01 0402 	add.w	r4, r1, r2
 8009504:	d902      	bls.n	800950c <memmove+0x10>
 8009506:	4284      	cmp	r4, r0
 8009508:	4623      	mov	r3, r4
 800950a:	d807      	bhi.n	800951c <memmove+0x20>
 800950c:	1e43      	subs	r3, r0, #1
 800950e:	42a1      	cmp	r1, r4
 8009510:	d008      	beq.n	8009524 <memmove+0x28>
 8009512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800951a:	e7f8      	b.n	800950e <memmove+0x12>
 800951c:	4402      	add	r2, r0
 800951e:	4601      	mov	r1, r0
 8009520:	428a      	cmp	r2, r1
 8009522:	d100      	bne.n	8009526 <memmove+0x2a>
 8009524:	bd10      	pop	{r4, pc}
 8009526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800952a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800952e:	e7f7      	b.n	8009520 <memmove+0x24>

08009530 <_sbrk_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4d06      	ldr	r5, [pc, #24]	@ (800954c <_sbrk_r+0x1c>)
 8009534:	2300      	movs	r3, #0
 8009536:	4604      	mov	r4, r0
 8009538:	4608      	mov	r0, r1
 800953a:	602b      	str	r3, [r5, #0]
 800953c:	f7f7 fedc 	bl	80012f8 <_sbrk>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_sbrk_r+0x1a>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_sbrk_r+0x1a>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	2000058c 	.word	0x2000058c

08009550 <memcpy>:
 8009550:	440a      	add	r2, r1
 8009552:	4291      	cmp	r1, r2
 8009554:	f100 33ff 	add.w	r3, r0, #4294967295
 8009558:	d100      	bne.n	800955c <memcpy+0xc>
 800955a:	4770      	bx	lr
 800955c:	b510      	push	{r4, lr}
 800955e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009566:	4291      	cmp	r1, r2
 8009568:	d1f9      	bne.n	800955e <memcpy+0xe>
 800956a:	bd10      	pop	{r4, pc}

0800956c <abort>:
 800956c:	b508      	push	{r3, lr}
 800956e:	2006      	movs	r0, #6
 8009570:	f000 fa2e 	bl	80099d0 <raise>
 8009574:	2001      	movs	r0, #1
 8009576:	f7f7 fe47 	bl	8001208 <_exit>

0800957a <_realloc_r>:
 800957a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957e:	4680      	mov	r8, r0
 8009580:	4615      	mov	r5, r2
 8009582:	460c      	mov	r4, r1
 8009584:	b921      	cbnz	r1, 8009590 <_realloc_r+0x16>
 8009586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800958a:	4611      	mov	r1, r2
 800958c:	f7ff bb86 	b.w	8008c9c <_malloc_r>
 8009590:	b92a      	cbnz	r2, 800959e <_realloc_r+0x24>
 8009592:	f7ff fb0f 	bl	8008bb4 <_free_r>
 8009596:	2400      	movs	r4, #0
 8009598:	4620      	mov	r0, r4
 800959a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959e:	f000 fa33 	bl	8009a08 <_malloc_usable_size_r>
 80095a2:	4285      	cmp	r5, r0
 80095a4:	4606      	mov	r6, r0
 80095a6:	d802      	bhi.n	80095ae <_realloc_r+0x34>
 80095a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80095ac:	d8f4      	bhi.n	8009598 <_realloc_r+0x1e>
 80095ae:	4629      	mov	r1, r5
 80095b0:	4640      	mov	r0, r8
 80095b2:	f7ff fb73 	bl	8008c9c <_malloc_r>
 80095b6:	4607      	mov	r7, r0
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d0ec      	beq.n	8009596 <_realloc_r+0x1c>
 80095bc:	42b5      	cmp	r5, r6
 80095be:	462a      	mov	r2, r5
 80095c0:	4621      	mov	r1, r4
 80095c2:	bf28      	it	cs
 80095c4:	4632      	movcs	r2, r6
 80095c6:	f7ff ffc3 	bl	8009550 <memcpy>
 80095ca:	4621      	mov	r1, r4
 80095cc:	4640      	mov	r0, r8
 80095ce:	f7ff faf1 	bl	8008bb4 <_free_r>
 80095d2:	463c      	mov	r4, r7
 80095d4:	e7e0      	b.n	8009598 <_realloc_r+0x1e>

080095d6 <__sfputc_r>:
 80095d6:	6893      	ldr	r3, [r2, #8]
 80095d8:	3b01      	subs	r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	b410      	push	{r4}
 80095de:	6093      	str	r3, [r2, #8]
 80095e0:	da08      	bge.n	80095f4 <__sfputc_r+0x1e>
 80095e2:	6994      	ldr	r4, [r2, #24]
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	db01      	blt.n	80095ec <__sfputc_r+0x16>
 80095e8:	290a      	cmp	r1, #10
 80095ea:	d103      	bne.n	80095f4 <__sfputc_r+0x1e>
 80095ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f0:	f000 b932 	b.w	8009858 <__swbuf_r>
 80095f4:	6813      	ldr	r3, [r2, #0]
 80095f6:	1c58      	adds	r0, r3, #1
 80095f8:	6010      	str	r0, [r2, #0]
 80095fa:	7019      	strb	r1, [r3, #0]
 80095fc:	4608      	mov	r0, r1
 80095fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009602:	4770      	bx	lr

08009604 <__sfputs_r>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	4606      	mov	r6, r0
 8009608:	460f      	mov	r7, r1
 800960a:	4614      	mov	r4, r2
 800960c:	18d5      	adds	r5, r2, r3
 800960e:	42ac      	cmp	r4, r5
 8009610:	d101      	bne.n	8009616 <__sfputs_r+0x12>
 8009612:	2000      	movs	r0, #0
 8009614:	e007      	b.n	8009626 <__sfputs_r+0x22>
 8009616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961a:	463a      	mov	r2, r7
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff ffda 	bl	80095d6 <__sfputc_r>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	d1f3      	bne.n	800960e <__sfputs_r+0xa>
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009628 <_vfiprintf_r>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	460d      	mov	r5, r1
 800962e:	b09d      	sub	sp, #116	@ 0x74
 8009630:	4614      	mov	r4, r2
 8009632:	4698      	mov	r8, r3
 8009634:	4606      	mov	r6, r0
 8009636:	b118      	cbz	r0, 8009640 <_vfiprintf_r+0x18>
 8009638:	6a03      	ldr	r3, [r0, #32]
 800963a:	b90b      	cbnz	r3, 8009640 <_vfiprintf_r+0x18>
 800963c:	f7ff f92a 	bl	8008894 <__sinit>
 8009640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009642:	07d9      	lsls	r1, r3, #31
 8009644:	d405      	bmi.n	8009652 <_vfiprintf_r+0x2a>
 8009646:	89ab      	ldrh	r3, [r5, #12]
 8009648:	059a      	lsls	r2, r3, #22
 800964a:	d402      	bmi.n	8009652 <_vfiprintf_r+0x2a>
 800964c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800964e:	f7ff fa90 	bl	8008b72 <__retarget_lock_acquire_recursive>
 8009652:	89ab      	ldrh	r3, [r5, #12]
 8009654:	071b      	lsls	r3, r3, #28
 8009656:	d501      	bpl.n	800965c <_vfiprintf_r+0x34>
 8009658:	692b      	ldr	r3, [r5, #16]
 800965a:	b99b      	cbnz	r3, 8009684 <_vfiprintf_r+0x5c>
 800965c:	4629      	mov	r1, r5
 800965e:	4630      	mov	r0, r6
 8009660:	f000 f938 	bl	80098d4 <__swsetup_r>
 8009664:	b170      	cbz	r0, 8009684 <_vfiprintf_r+0x5c>
 8009666:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009668:	07dc      	lsls	r4, r3, #31
 800966a:	d504      	bpl.n	8009676 <_vfiprintf_r+0x4e>
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	b01d      	add	sp, #116	@ 0x74
 8009672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	0598      	lsls	r0, r3, #22
 800967a:	d4f7      	bmi.n	800966c <_vfiprintf_r+0x44>
 800967c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800967e:	f7ff fa79 	bl	8008b74 <__retarget_lock_release_recursive>
 8009682:	e7f3      	b.n	800966c <_vfiprintf_r+0x44>
 8009684:	2300      	movs	r3, #0
 8009686:	9309      	str	r3, [sp, #36]	@ 0x24
 8009688:	2320      	movs	r3, #32
 800968a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800968e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009692:	2330      	movs	r3, #48	@ 0x30
 8009694:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009844 <_vfiprintf_r+0x21c>
 8009698:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800969c:	f04f 0901 	mov.w	r9, #1
 80096a0:	4623      	mov	r3, r4
 80096a2:	469a      	mov	sl, r3
 80096a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096a8:	b10a      	cbz	r2, 80096ae <_vfiprintf_r+0x86>
 80096aa:	2a25      	cmp	r2, #37	@ 0x25
 80096ac:	d1f9      	bne.n	80096a2 <_vfiprintf_r+0x7a>
 80096ae:	ebba 0b04 	subs.w	fp, sl, r4
 80096b2:	d00b      	beq.n	80096cc <_vfiprintf_r+0xa4>
 80096b4:	465b      	mov	r3, fp
 80096b6:	4622      	mov	r2, r4
 80096b8:	4629      	mov	r1, r5
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7ff ffa2 	bl	8009604 <__sfputs_r>
 80096c0:	3001      	adds	r0, #1
 80096c2:	f000 80a7 	beq.w	8009814 <_vfiprintf_r+0x1ec>
 80096c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096c8:	445a      	add	r2, fp
 80096ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 809f 	beq.w	8009814 <_vfiprintf_r+0x1ec>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f04f 32ff 	mov.w	r2, #4294967295
 80096dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e0:	f10a 0a01 	add.w	sl, sl, #1
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	9307      	str	r3, [sp, #28]
 80096e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80096ee:	4654      	mov	r4, sl
 80096f0:	2205      	movs	r2, #5
 80096f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f6:	4853      	ldr	r0, [pc, #332]	@ (8009844 <_vfiprintf_r+0x21c>)
 80096f8:	f7f6 fdaa 	bl	8000250 <memchr>
 80096fc:	9a04      	ldr	r2, [sp, #16]
 80096fe:	b9d8      	cbnz	r0, 8009738 <_vfiprintf_r+0x110>
 8009700:	06d1      	lsls	r1, r2, #27
 8009702:	bf44      	itt	mi
 8009704:	2320      	movmi	r3, #32
 8009706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800970a:	0713      	lsls	r3, r2, #28
 800970c:	bf44      	itt	mi
 800970e:	232b      	movmi	r3, #43	@ 0x2b
 8009710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009714:	f89a 3000 	ldrb.w	r3, [sl]
 8009718:	2b2a      	cmp	r3, #42	@ 0x2a
 800971a:	d015      	beq.n	8009748 <_vfiprintf_r+0x120>
 800971c:	9a07      	ldr	r2, [sp, #28]
 800971e:	4654      	mov	r4, sl
 8009720:	2000      	movs	r0, #0
 8009722:	f04f 0c0a 	mov.w	ip, #10
 8009726:	4621      	mov	r1, r4
 8009728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800972c:	3b30      	subs	r3, #48	@ 0x30
 800972e:	2b09      	cmp	r3, #9
 8009730:	d94b      	bls.n	80097ca <_vfiprintf_r+0x1a2>
 8009732:	b1b0      	cbz	r0, 8009762 <_vfiprintf_r+0x13a>
 8009734:	9207      	str	r2, [sp, #28]
 8009736:	e014      	b.n	8009762 <_vfiprintf_r+0x13a>
 8009738:	eba0 0308 	sub.w	r3, r0, r8
 800973c:	fa09 f303 	lsl.w	r3, r9, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	46a2      	mov	sl, r4
 8009746:	e7d2      	b.n	80096ee <_vfiprintf_r+0xc6>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d19      	adds	r1, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9103      	str	r1, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfbb      	ittet	lt
 8009754:	425b      	neglt	r3, r3
 8009756:	f042 0202 	orrlt.w	r2, r2, #2
 800975a:	9307      	strge	r3, [sp, #28]
 800975c:	9307      	strlt	r3, [sp, #28]
 800975e:	bfb8      	it	lt
 8009760:	9204      	strlt	r2, [sp, #16]
 8009762:	7823      	ldrb	r3, [r4, #0]
 8009764:	2b2e      	cmp	r3, #46	@ 0x2e
 8009766:	d10a      	bne.n	800977e <_vfiprintf_r+0x156>
 8009768:	7863      	ldrb	r3, [r4, #1]
 800976a:	2b2a      	cmp	r3, #42	@ 0x2a
 800976c:	d132      	bne.n	80097d4 <_vfiprintf_r+0x1ac>
 800976e:	9b03      	ldr	r3, [sp, #12]
 8009770:	1d1a      	adds	r2, r3, #4
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	9203      	str	r2, [sp, #12]
 8009776:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800977a:	3402      	adds	r4, #2
 800977c:	9305      	str	r3, [sp, #20]
 800977e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009854 <_vfiprintf_r+0x22c>
 8009782:	7821      	ldrb	r1, [r4, #0]
 8009784:	2203      	movs	r2, #3
 8009786:	4650      	mov	r0, sl
 8009788:	f7f6 fd62 	bl	8000250 <memchr>
 800978c:	b138      	cbz	r0, 800979e <_vfiprintf_r+0x176>
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	eba0 000a 	sub.w	r0, r0, sl
 8009794:	2240      	movs	r2, #64	@ 0x40
 8009796:	4082      	lsls	r2, r0
 8009798:	4313      	orrs	r3, r2
 800979a:	3401      	adds	r4, #1
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a2:	4829      	ldr	r0, [pc, #164]	@ (8009848 <_vfiprintf_r+0x220>)
 80097a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097a8:	2206      	movs	r2, #6
 80097aa:	f7f6 fd51 	bl	8000250 <memchr>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d03f      	beq.n	8009832 <_vfiprintf_r+0x20a>
 80097b2:	4b26      	ldr	r3, [pc, #152]	@ (800984c <_vfiprintf_r+0x224>)
 80097b4:	bb1b      	cbnz	r3, 80097fe <_vfiprintf_r+0x1d6>
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	3307      	adds	r3, #7
 80097ba:	f023 0307 	bic.w	r3, r3, #7
 80097be:	3308      	adds	r3, #8
 80097c0:	9303      	str	r3, [sp, #12]
 80097c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c4:	443b      	add	r3, r7
 80097c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c8:	e76a      	b.n	80096a0 <_vfiprintf_r+0x78>
 80097ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ce:	460c      	mov	r4, r1
 80097d0:	2001      	movs	r0, #1
 80097d2:	e7a8      	b.n	8009726 <_vfiprintf_r+0xfe>
 80097d4:	2300      	movs	r3, #0
 80097d6:	3401      	adds	r4, #1
 80097d8:	9305      	str	r3, [sp, #20]
 80097da:	4619      	mov	r1, r3
 80097dc:	f04f 0c0a 	mov.w	ip, #10
 80097e0:	4620      	mov	r0, r4
 80097e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097e6:	3a30      	subs	r2, #48	@ 0x30
 80097e8:	2a09      	cmp	r2, #9
 80097ea:	d903      	bls.n	80097f4 <_vfiprintf_r+0x1cc>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0c6      	beq.n	800977e <_vfiprintf_r+0x156>
 80097f0:	9105      	str	r1, [sp, #20]
 80097f2:	e7c4      	b.n	800977e <_vfiprintf_r+0x156>
 80097f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80097f8:	4604      	mov	r4, r0
 80097fa:	2301      	movs	r3, #1
 80097fc:	e7f0      	b.n	80097e0 <_vfiprintf_r+0x1b8>
 80097fe:	ab03      	add	r3, sp, #12
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	462a      	mov	r2, r5
 8009804:	4b12      	ldr	r3, [pc, #72]	@ (8009850 <_vfiprintf_r+0x228>)
 8009806:	a904      	add	r1, sp, #16
 8009808:	4630      	mov	r0, r6
 800980a:	f3af 8000 	nop.w
 800980e:	4607      	mov	r7, r0
 8009810:	1c78      	adds	r0, r7, #1
 8009812:	d1d6      	bne.n	80097c2 <_vfiprintf_r+0x19a>
 8009814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009816:	07d9      	lsls	r1, r3, #31
 8009818:	d405      	bmi.n	8009826 <_vfiprintf_r+0x1fe>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	059a      	lsls	r2, r3, #22
 800981e:	d402      	bmi.n	8009826 <_vfiprintf_r+0x1fe>
 8009820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009822:	f7ff f9a7 	bl	8008b74 <__retarget_lock_release_recursive>
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	065b      	lsls	r3, r3, #25
 800982a:	f53f af1f 	bmi.w	800966c <_vfiprintf_r+0x44>
 800982e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009830:	e71e      	b.n	8009670 <_vfiprintf_r+0x48>
 8009832:	ab03      	add	r3, sp, #12
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	462a      	mov	r2, r5
 8009838:	4b05      	ldr	r3, [pc, #20]	@ (8009850 <_vfiprintf_r+0x228>)
 800983a:	a904      	add	r1, sp, #16
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff fc7f 	bl	8009140 <_printf_i>
 8009842:	e7e4      	b.n	800980e <_vfiprintf_r+0x1e6>
 8009844:	08009f76 	.word	0x08009f76
 8009848:	08009f80 	.word	0x08009f80
 800984c:	00000000 	.word	0x00000000
 8009850:	08009605 	.word	0x08009605
 8009854:	08009f7c 	.word	0x08009f7c

08009858 <__swbuf_r>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	460e      	mov	r6, r1
 800985c:	4614      	mov	r4, r2
 800985e:	4605      	mov	r5, r0
 8009860:	b118      	cbz	r0, 800986a <__swbuf_r+0x12>
 8009862:	6a03      	ldr	r3, [r0, #32]
 8009864:	b90b      	cbnz	r3, 800986a <__swbuf_r+0x12>
 8009866:	f7ff f815 	bl	8008894 <__sinit>
 800986a:	69a3      	ldr	r3, [r4, #24]
 800986c:	60a3      	str	r3, [r4, #8]
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	071a      	lsls	r2, r3, #28
 8009872:	d501      	bpl.n	8009878 <__swbuf_r+0x20>
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	b943      	cbnz	r3, 800988a <__swbuf_r+0x32>
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f82a 	bl	80098d4 <__swsetup_r>
 8009880:	b118      	cbz	r0, 800988a <__swbuf_r+0x32>
 8009882:	f04f 37ff 	mov.w	r7, #4294967295
 8009886:	4638      	mov	r0, r7
 8009888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	6922      	ldr	r2, [r4, #16]
 800988e:	1a98      	subs	r0, r3, r2
 8009890:	6963      	ldr	r3, [r4, #20]
 8009892:	b2f6      	uxtb	r6, r6
 8009894:	4283      	cmp	r3, r0
 8009896:	4637      	mov	r7, r6
 8009898:	dc05      	bgt.n	80098a6 <__swbuf_r+0x4e>
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f7ff fdf3 	bl	8009488 <_fflush_r>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1ed      	bne.n	8009882 <__swbuf_r+0x2a>
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	60a3      	str	r3, [r4, #8]
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	6022      	str	r2, [r4, #0]
 80098b2:	701e      	strb	r6, [r3, #0]
 80098b4:	6962      	ldr	r2, [r4, #20]
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d004      	beq.n	80098c6 <__swbuf_r+0x6e>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	07db      	lsls	r3, r3, #31
 80098c0:	d5e1      	bpl.n	8009886 <__swbuf_r+0x2e>
 80098c2:	2e0a      	cmp	r6, #10
 80098c4:	d1df      	bne.n	8009886 <__swbuf_r+0x2e>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f7ff fddd 	bl	8009488 <_fflush_r>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d0d9      	beq.n	8009886 <__swbuf_r+0x2e>
 80098d2:	e7d6      	b.n	8009882 <__swbuf_r+0x2a>

080098d4 <__swsetup_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4b29      	ldr	r3, [pc, #164]	@ (800997c <__swsetup_r+0xa8>)
 80098d8:	4605      	mov	r5, r0
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	460c      	mov	r4, r1
 80098de:	b118      	cbz	r0, 80098e8 <__swsetup_r+0x14>
 80098e0:	6a03      	ldr	r3, [r0, #32]
 80098e2:	b90b      	cbnz	r3, 80098e8 <__swsetup_r+0x14>
 80098e4:	f7fe ffd6 	bl	8008894 <__sinit>
 80098e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ec:	0719      	lsls	r1, r3, #28
 80098ee:	d422      	bmi.n	8009936 <__swsetup_r+0x62>
 80098f0:	06da      	lsls	r2, r3, #27
 80098f2:	d407      	bmi.n	8009904 <__swsetup_r+0x30>
 80098f4:	2209      	movs	r2, #9
 80098f6:	602a      	str	r2, [r5, #0]
 80098f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009902:	e033      	b.n	800996c <__swsetup_r+0x98>
 8009904:	0758      	lsls	r0, r3, #29
 8009906:	d512      	bpl.n	800992e <__swsetup_r+0x5a>
 8009908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800990a:	b141      	cbz	r1, 800991e <__swsetup_r+0x4a>
 800990c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <__swsetup_r+0x46>
 8009914:	4628      	mov	r0, r5
 8009916:	f7ff f94d 	bl	8008bb4 <_free_r>
 800991a:	2300      	movs	r3, #0
 800991c:	6363      	str	r3, [r4, #52]	@ 0x34
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	2300      	movs	r3, #0
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f043 0308 	orr.w	r3, r3, #8
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	b94b      	cbnz	r3, 800994e <__swsetup_r+0x7a>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009944:	d003      	beq.n	800994e <__swsetup_r+0x7a>
 8009946:	4621      	mov	r1, r4
 8009948:	4628      	mov	r0, r5
 800994a:	f000 f88b 	bl	8009a64 <__smakebuf_r>
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	f013 0201 	ands.w	r2, r3, #1
 8009956:	d00a      	beq.n	800996e <__swsetup_r+0x9a>
 8009958:	2200      	movs	r2, #0
 800995a:	60a2      	str	r2, [r4, #8]
 800995c:	6962      	ldr	r2, [r4, #20]
 800995e:	4252      	negs	r2, r2
 8009960:	61a2      	str	r2, [r4, #24]
 8009962:	6922      	ldr	r2, [r4, #16]
 8009964:	b942      	cbnz	r2, 8009978 <__swsetup_r+0xa4>
 8009966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800996a:	d1c5      	bne.n	80098f8 <__swsetup_r+0x24>
 800996c:	bd38      	pop	{r3, r4, r5, pc}
 800996e:	0799      	lsls	r1, r3, #30
 8009970:	bf58      	it	pl
 8009972:	6962      	ldrpl	r2, [r4, #20]
 8009974:	60a2      	str	r2, [r4, #8]
 8009976:	e7f4      	b.n	8009962 <__swsetup_r+0x8e>
 8009978:	2000      	movs	r0, #0
 800997a:	e7f7      	b.n	800996c <__swsetup_r+0x98>
 800997c:	2000001c 	.word	0x2000001c

08009980 <_raise_r>:
 8009980:	291f      	cmp	r1, #31
 8009982:	b538      	push	{r3, r4, r5, lr}
 8009984:	4605      	mov	r5, r0
 8009986:	460c      	mov	r4, r1
 8009988:	d904      	bls.n	8009994 <_raise_r+0x14>
 800998a:	2316      	movs	r3, #22
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	f04f 30ff 	mov.w	r0, #4294967295
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009996:	b112      	cbz	r2, 800999e <_raise_r+0x1e>
 8009998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800999c:	b94b      	cbnz	r3, 80099b2 <_raise_r+0x32>
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 f830 	bl	8009a04 <_getpid_r>
 80099a4:	4622      	mov	r2, r4
 80099a6:	4601      	mov	r1, r0
 80099a8:	4628      	mov	r0, r5
 80099aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ae:	f000 b817 	b.w	80099e0 <_kill_r>
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d00a      	beq.n	80099cc <_raise_r+0x4c>
 80099b6:	1c59      	adds	r1, r3, #1
 80099b8:	d103      	bne.n	80099c2 <_raise_r+0x42>
 80099ba:	2316      	movs	r3, #22
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	2001      	movs	r0, #1
 80099c0:	e7e7      	b.n	8009992 <_raise_r+0x12>
 80099c2:	2100      	movs	r1, #0
 80099c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099c8:	4620      	mov	r0, r4
 80099ca:	4798      	blx	r3
 80099cc:	2000      	movs	r0, #0
 80099ce:	e7e0      	b.n	8009992 <_raise_r+0x12>

080099d0 <raise>:
 80099d0:	4b02      	ldr	r3, [pc, #8]	@ (80099dc <raise+0xc>)
 80099d2:	4601      	mov	r1, r0
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	f7ff bfd3 	b.w	8009980 <_raise_r>
 80099da:	bf00      	nop
 80099dc:	2000001c 	.word	0x2000001c

080099e0 <_kill_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	@ (8009a00 <_kill_r+0x20>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	602b      	str	r3, [r5, #0]
 80099ee:	f7f7 fbfb 	bl	80011e8 <_kill>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d102      	bne.n	80099fc <_kill_r+0x1c>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b103      	cbz	r3, 80099fc <_kill_r+0x1c>
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	bd38      	pop	{r3, r4, r5, pc}
 80099fe:	bf00      	nop
 8009a00:	2000058c 	.word	0x2000058c

08009a04 <_getpid_r>:
 8009a04:	f7f7 bbe8 	b.w	80011d8 <_getpid>

08009a08 <_malloc_usable_size_r>:
 8009a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a0c:	1f18      	subs	r0, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bfbc      	itt	lt
 8009a12:	580b      	ldrlt	r3, [r1, r0]
 8009a14:	18c0      	addlt	r0, r0, r3
 8009a16:	4770      	bx	lr

08009a18 <__swhatbuf_r>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a20:	2900      	cmp	r1, #0
 8009a22:	b096      	sub	sp, #88	@ 0x58
 8009a24:	4615      	mov	r5, r2
 8009a26:	461e      	mov	r6, r3
 8009a28:	da0d      	bge.n	8009a46 <__swhatbuf_r+0x2e>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a30:	f04f 0100 	mov.w	r1, #0
 8009a34:	bf14      	ite	ne
 8009a36:	2340      	movne	r3, #64	@ 0x40
 8009a38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	6031      	str	r1, [r6, #0]
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	b016      	add	sp, #88	@ 0x58
 8009a44:	bd70      	pop	{r4, r5, r6, pc}
 8009a46:	466a      	mov	r2, sp
 8009a48:	f000 f848 	bl	8009adc <_fstat_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	dbec      	blt.n	8009a2a <__swhatbuf_r+0x12>
 8009a50:	9901      	ldr	r1, [sp, #4]
 8009a52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a5a:	4259      	negs	r1, r3
 8009a5c:	4159      	adcs	r1, r3
 8009a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a62:	e7eb      	b.n	8009a3c <__swhatbuf_r+0x24>

08009a64 <__smakebuf_r>:
 8009a64:	898b      	ldrh	r3, [r1, #12]
 8009a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a68:	079d      	lsls	r5, r3, #30
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	d507      	bpl.n	8009a80 <__smakebuf_r+0x1c>
 8009a70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	6123      	str	r3, [r4, #16]
 8009a78:	2301      	movs	r3, #1
 8009a7a:	6163      	str	r3, [r4, #20]
 8009a7c:	b003      	add	sp, #12
 8009a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a80:	ab01      	add	r3, sp, #4
 8009a82:	466a      	mov	r2, sp
 8009a84:	f7ff ffc8 	bl	8009a18 <__swhatbuf_r>
 8009a88:	9f00      	ldr	r7, [sp, #0]
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff f904 	bl	8008c9c <_malloc_r>
 8009a94:	b948      	cbnz	r0, 8009aaa <__smakebuf_r+0x46>
 8009a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a9a:	059a      	lsls	r2, r3, #22
 8009a9c:	d4ee      	bmi.n	8009a7c <__smakebuf_r+0x18>
 8009a9e:	f023 0303 	bic.w	r3, r3, #3
 8009aa2:	f043 0302 	orr.w	r3, r3, #2
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	e7e2      	b.n	8009a70 <__smakebuf_r+0xc>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	6020      	str	r0, [r4, #0]
 8009aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ab2:	81a3      	strh	r3, [r4, #12]
 8009ab4:	9b01      	ldr	r3, [sp, #4]
 8009ab6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009aba:	b15b      	cbz	r3, 8009ad4 <__smakebuf_r+0x70>
 8009abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f81d 	bl	8009b00 <_isatty_r>
 8009ac6:	b128      	cbz	r0, 8009ad4 <__smakebuf_r+0x70>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f023 0303 	bic.w	r3, r3, #3
 8009ace:	f043 0301 	orr.w	r3, r3, #1
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	431d      	orrs	r5, r3
 8009ad8:	81a5      	strh	r5, [r4, #12]
 8009ada:	e7cf      	b.n	8009a7c <__smakebuf_r+0x18>

08009adc <_fstat_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	@ (8009afc <_fstat_r+0x20>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	f7f7 fbdd 	bl	80012a8 <_fstat>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d102      	bne.n	8009af8 <_fstat_r+0x1c>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	b103      	cbz	r3, 8009af8 <_fstat_r+0x1c>
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	2000058c 	.word	0x2000058c

08009b00 <_isatty_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d06      	ldr	r5, [pc, #24]	@ (8009b1c <_isatty_r+0x1c>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	602b      	str	r3, [r5, #0]
 8009b0c:	f7f7 fbdc 	bl	80012c8 <_isatty>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_isatty_r+0x1a>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_isatty_r+0x1a>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	2000058c 	.word	0x2000058c

08009b20 <_init>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	bf00      	nop
 8009b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b26:	bc08      	pop	{r3}
 8009b28:	469e      	mov	lr, r3
 8009b2a:	4770      	bx	lr

08009b2c <_fini>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	bf00      	nop
 8009b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b32:	bc08      	pop	{r3}
 8009b34:	469e      	mov	lr, r3
 8009b36:	4770      	bx	lr
